
stepper_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ac6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00002ac6  00002b3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001c8c  00000000  00000000  00002b50  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a75  00000000  00000000  000047dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005251  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  000053b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005540  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007585  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008686  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00009608  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00009a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a2d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 03 13 	call	0x2606	; 0x2606 <main>
      7a:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 2a 15 	jmp	0x2a54	; 0x2a54 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad e6       	ldi	r26, 0x6D	; 109
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 46 15 	jmp	0x2a8c	; 0x2a8c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 2a 15 	jmp	0x2a54	; 0x2a54 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8d e6       	ldi	r24, 0x6D	; 109
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 46 15 	jmp	0x2a8c	; 0x2a8c <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6d e6       	ldi	r22, 0x6D	; 109
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 3a 15 	jmp	0x2a74	; 0x2a74 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 56 15 	jmp	0x2aac	; 0x2aac <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_vidSetPinDir>:
#include "DIO.h"



void DIO_vidSetPinDir (u8 port,u8 pin,u8 dir)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <DIO_vidSetPinDir+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <DIO_vidSetPinDir+0x8>
     c96:	0f 92       	push	r0
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	89 83       	std	Y+1, r24	; 0x01
     c9e:	6a 83       	std	Y+2, r22	; 0x02
     ca0:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	3d 83       	std	Y+5, r19	; 0x05
     caa:	2c 83       	std	Y+4, r18	; 0x04
     cac:	8c 81       	ldd	r24, Y+4	; 0x04
     cae:	9d 81       	ldd	r25, Y+5	; 0x05
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	91 05       	cpc	r25, r1
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <DIO_vidSetPinDir+0x2a>
     cb6:	46 c0       	rjmp	.+140    	; 0xd44 <DIO_vidSetPinDir+0xb6>
     cb8:	2c 81       	ldd	r18, Y+4	; 0x04
     cba:	3d 81       	ldd	r19, Y+5	; 0x05
     cbc:	22 30       	cpi	r18, 0x02	; 2
     cbe:	31 05       	cpc	r19, r1
     cc0:	2c f4       	brge	.+10     	; 0xccc <DIO_vidSetPinDir+0x3e>
     cc2:	8c 81       	ldd	r24, Y+4	; 0x04
     cc4:	9d 81       	ldd	r25, Y+5	; 0x05
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	71 f0       	breq	.+28     	; 0xce6 <DIO_vidSetPinDir+0x58>
     cca:	c7 c0       	rjmp	.+398    	; 0xe5a <DIO_vidSetPinDir+0x1cc>
     ccc:	2c 81       	ldd	r18, Y+4	; 0x04
     cce:	3d 81       	ldd	r19, Y+5	; 0x05
     cd0:	22 30       	cpi	r18, 0x02	; 2
     cd2:	31 05       	cpc	r19, r1
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <DIO_vidSetPinDir+0x4a>
     cd6:	65 c0       	rjmp	.+202    	; 0xda2 <DIO_vidSetPinDir+0x114>
     cd8:	8c 81       	ldd	r24, Y+4	; 0x04
     cda:	9d 81       	ldd	r25, Y+5	; 0x05
     cdc:	83 30       	cpi	r24, 0x03	; 3
     cde:	91 05       	cpc	r25, r1
     ce0:	09 f4       	brne	.+2      	; 0xce4 <DIO_vidSetPinDir+0x56>
     ce2:	8e c0       	rjmp	.+284    	; 0xe00 <DIO_vidSetPinDir+0x172>
     ce4:	ba c0       	rjmp	.+372    	; 0xe5a <DIO_vidSetPinDir+0x1cc>
	{
	case 0:
		if(dir==input)
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	88 23       	and	r24, r24
     cea:	a1 f4       	brne	.+40     	; 0xd14 <DIO_vidSetPinDir+0x86>
			Clr_Bit(DDRA,pin);
     cec:	aa e3       	ldi	r26, 0x3A	; 58
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	ea e3       	ldi	r30, 0x3A	; 58
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	48 2f       	mov	r20, r24
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	02 2e       	mov	r0, r18
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <DIO_vidSetPinDir+0x7c>
     d06:	88 0f       	add	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	0a 94       	dec	r0
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <DIO_vidSetPinDir+0x78>
     d0e:	80 95       	com	r24
     d10:	84 23       	and	r24, r20
     d12:	8c 93       	st	X, r24
		if(dir==output)
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	09 f0       	breq	.+2      	; 0xd1c <DIO_vidSetPinDir+0x8e>
     d1a:	9f c0       	rjmp	.+318    	; 0xe5a <DIO_vidSetPinDir+0x1cc>
			Set_Bit(DDRA,pin);
     d1c:	aa e3       	ldi	r26, 0x3A	; 58
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	ea e3       	ldi	r30, 0x3A	; 58
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	48 2f       	mov	r20, r24
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	02 2e       	mov	r0, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <DIO_vidSetPinDir+0xac>
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	0a 94       	dec	r0
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <DIO_vidSetPinDir+0xa8>
     d3e:	84 2b       	or	r24, r20
     d40:	8c 93       	st	X, r24
     d42:	8b c0       	rjmp	.+278    	; 0xe5a <DIO_vidSetPinDir+0x1cc>
		break;

	case 1:
			if(dir==input)
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	88 23       	and	r24, r24
     d48:	a1 f4       	brne	.+40     	; 0xd72 <DIO_vidSetPinDir+0xe4>
				Clr_Bit(DDRB,pin);
     d4a:	a7 e3       	ldi	r26, 0x37	; 55
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e7 e3       	ldi	r30, 0x37	; 55
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	48 2f       	mov	r20, r24
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	02 2e       	mov	r0, r18
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <DIO_vidSetPinDir+0xda>
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	0a 94       	dec	r0
     d6a:	e2 f7       	brpl	.-8      	; 0xd64 <DIO_vidSetPinDir+0xd6>
     d6c:	80 95       	com	r24
     d6e:	84 23       	and	r24, r20
     d70:	8c 93       	st	X, r24
			if(dir==output)
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	81 30       	cpi	r24, 0x01	; 1
     d76:	09 f0       	breq	.+2      	; 0xd7a <DIO_vidSetPinDir+0xec>
     d78:	70 c0       	rjmp	.+224    	; 0xe5a <DIO_vidSetPinDir+0x1cc>
				Set_Bit(DDRB,pin);
     d7a:	a7 e3       	ldi	r26, 0x37	; 55
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e7 e3       	ldi	r30, 0x37	; 55
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <DIO_vidSetPinDir+0x10a>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <DIO_vidSetPinDir+0x106>
     d9c:	84 2b       	or	r24, r20
     d9e:	8c 93       	st	X, r24
     da0:	5c c0       	rjmp	.+184    	; 0xe5a <DIO_vidSetPinDir+0x1cc>
			break;

	case 2:
			if(dir==input)
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	88 23       	and	r24, r24
     da6:	a1 f4       	brne	.+40     	; 0xdd0 <DIO_vidSetPinDir+0x142>
				Clr_Bit(DDRC,pin);
     da8:	a4 e3       	ldi	r26, 0x34	; 52
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e4 e3       	ldi	r30, 0x34	; 52
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	48 2f       	mov	r20, r24
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 2e       	mov	r0, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <DIO_vidSetPinDir+0x138>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <DIO_vidSetPinDir+0x134>
     dca:	80 95       	com	r24
     dcc:	84 23       	and	r24, r20
     dce:	8c 93       	st	X, r24
			if(dir==output)
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <DIO_vidSetPinDir+0x14a>
     dd6:	41 c0       	rjmp	.+130    	; 0xe5a <DIO_vidSetPinDir+0x1cc>
				Set_Bit(DDRC,pin);
     dd8:	a4 e3       	ldi	r26, 0x34	; 52
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e4 e3       	ldi	r30, 0x34	; 52
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	48 2f       	mov	r20, r24
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 2e       	mov	r0, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_vidSetPinDir+0x168>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	0a 94       	dec	r0
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_vidSetPinDir+0x164>
     dfa:	84 2b       	or	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	2d c0       	rjmp	.+90     	; 0xe5a <DIO_vidSetPinDir+0x1cc>
			break;

	case 3:
			if(dir==input)
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	88 23       	and	r24, r24
     e04:	a1 f4       	brne	.+40     	; 0xe2e <DIO_vidSetPinDir+0x1a0>
				Clr_Bit(DDRD,pin);
     e06:	a1 e3       	ldi	r26, 0x31	; 49
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e1 e3       	ldi	r30, 0x31	; 49
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_vidSetPinDir+0x196>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_vidSetPinDir+0x192>
     e28:	80 95       	com	r24
     e2a:	84 23       	and	r24, r20
     e2c:	8c 93       	st	X, r24
			if(dir==output)
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	81 30       	cpi	r24, 0x01	; 1
     e32:	99 f4       	brne	.+38     	; 0xe5a <DIO_vidSetPinDir+0x1cc>
				Set_Bit(DDRD,pin);
     e34:	a1 e3       	ldi	r26, 0x31	; 49
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e1 e3       	ldi	r30, 0x31	; 49
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <DIO_vidSetPinDir+0x1c4>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <DIO_vidSetPinDir+0x1c0>
     e56:	84 2b       	or	r24, r20
     e58:	8c 93       	st	X, r24
			break;
	}
}
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <DIO_vidWritePinValue>:

	void DIO_vidWritePinValue (u8 port,u8 pin,u8 value)
	{
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <DIO_vidWritePinValue+0x6>
     e70:	00 d0       	rcall	.+0      	; 0xe72 <DIO_vidWritePinValue+0x8>
     e72:	0f 92       	push	r0
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	89 83       	std	Y+1, r24	; 0x01
     e7a:	6a 83       	std	Y+2, r22	; 0x02
     e7c:	4b 83       	std	Y+3, r20	; 0x03
		switch(port)
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	3d 83       	std	Y+5, r19	; 0x05
     e86:	2c 83       	std	Y+4, r18	; 0x04
     e88:	8c 81       	ldd	r24, Y+4	; 0x04
     e8a:	9d 81       	ldd	r25, Y+5	; 0x05
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	91 05       	cpc	r25, r1
     e90:	09 f4       	brne	.+2      	; 0xe94 <DIO_vidWritePinValue+0x2a>
     e92:	46 c0       	rjmp	.+140    	; 0xf20 <DIO_vidWritePinValue+0xb6>
     e94:	2c 81       	ldd	r18, Y+4	; 0x04
     e96:	3d 81       	ldd	r19, Y+5	; 0x05
     e98:	22 30       	cpi	r18, 0x02	; 2
     e9a:	31 05       	cpc	r19, r1
     e9c:	2c f4       	brge	.+10     	; 0xea8 <DIO_vidWritePinValue+0x3e>
     e9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ea0:	9d 81       	ldd	r25, Y+5	; 0x05
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	71 f0       	breq	.+28     	; 0xec2 <DIO_vidWritePinValue+0x58>
     ea6:	c7 c0       	rjmp	.+398    	; 0x1036 <DIO_vidWritePinValue+0x1cc>
     ea8:	2c 81       	ldd	r18, Y+4	; 0x04
     eaa:	3d 81       	ldd	r19, Y+5	; 0x05
     eac:	22 30       	cpi	r18, 0x02	; 2
     eae:	31 05       	cpc	r19, r1
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <DIO_vidWritePinValue+0x4a>
     eb2:	65 c0       	rjmp	.+202    	; 0xf7e <DIO_vidWritePinValue+0x114>
     eb4:	8c 81       	ldd	r24, Y+4	; 0x04
     eb6:	9d 81       	ldd	r25, Y+5	; 0x05
     eb8:	83 30       	cpi	r24, 0x03	; 3
     eba:	91 05       	cpc	r25, r1
     ebc:	09 f4       	brne	.+2      	; 0xec0 <DIO_vidWritePinValue+0x56>
     ebe:	8e c0       	rjmp	.+284    	; 0xfdc <DIO_vidWritePinValue+0x172>
     ec0:	ba c0       	rjmp	.+372    	; 0x1036 <DIO_vidWritePinValue+0x1cc>
		{
		case 0:
			if(value==low)
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	88 23       	and	r24, r24
     ec6:	a1 f4       	brne	.+40     	; 0xef0 <DIO_vidWritePinValue+0x86>
				Clr_Bit(PORTA,pin);
     ec8:	ab e3       	ldi	r26, 0x3B	; 59
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	eb e3       	ldi	r30, 0x3B	; 59
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <DIO_vidWritePinValue+0x7c>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <DIO_vidWritePinValue+0x78>
     eea:	80 95       	com	r24
     eec:	84 23       	and	r24, r20
     eee:	8c 93       	st	X, r24
			if(value==high)
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	09 f0       	breq	.+2      	; 0xef8 <DIO_vidWritePinValue+0x8e>
     ef6:	9f c0       	rjmp	.+318    	; 0x1036 <DIO_vidWritePinValue+0x1cc>
				Set_Bit(PORTA,pin);
     ef8:	ab e3       	ldi	r26, 0x3B	; 59
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	eb e3       	ldi	r30, 0x3B	; 59
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	48 2f       	mov	r20, r24
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	02 2e       	mov	r0, r18
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <DIO_vidWritePinValue+0xac>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	0a 94       	dec	r0
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <DIO_vidWritePinValue+0xa8>
     f1a:	84 2b       	or	r24, r20
     f1c:	8c 93       	st	X, r24
     f1e:	8b c0       	rjmp	.+278    	; 0x1036 <DIO_vidWritePinValue+0x1cc>
			break;

		case 1:
				if(value==low)
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	88 23       	and	r24, r24
     f24:	a1 f4       	brne	.+40     	; 0xf4e <DIO_vidWritePinValue+0xe4>
					Clr_Bit(PORTB,pin);
     f26:	a8 e3       	ldi	r26, 0x38	; 56
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e8 e3       	ldi	r30, 0x38	; 56
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_vidWritePinValue+0xda>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_vidWritePinValue+0xd6>
     f48:	80 95       	com	r24
     f4a:	84 23       	and	r24, r20
     f4c:	8c 93       	st	X, r24
				if(value==high)
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	09 f0       	breq	.+2      	; 0xf56 <DIO_vidWritePinValue+0xec>
     f54:	70 c0       	rjmp	.+224    	; 0x1036 <DIO_vidWritePinValue+0x1cc>
					Set_Bit(PORTB,pin);
     f56:	a8 e3       	ldi	r26, 0x38	; 56
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e8 e3       	ldi	r30, 0x38	; 56
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 2e       	mov	r0, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <DIO_vidWritePinValue+0x10a>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <DIO_vidWritePinValue+0x106>
     f78:	84 2b       	or	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	5c c0       	rjmp	.+184    	; 0x1036 <DIO_vidWritePinValue+0x1cc>
				break;

		case 2:
				if(value==low)
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	88 23       	and	r24, r24
     f82:	a1 f4       	brne	.+40     	; 0xfac <DIO_vidWritePinValue+0x142>
					Clr_Bit(PORTC,pin);
     f84:	a5 e3       	ldi	r26, 0x35	; 53
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e5 e3       	ldi	r30, 0x35	; 53
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	48 2f       	mov	r20, r24
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 2e       	mov	r0, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <DIO_vidWritePinValue+0x138>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	0a 94       	dec	r0
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <DIO_vidWritePinValue+0x134>
     fa6:	80 95       	com	r24
     fa8:	84 23       	and	r24, r20
     faa:	8c 93       	st	X, r24
				if(value==high)
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	81 30       	cpi	r24, 0x01	; 1
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <DIO_vidWritePinValue+0x14a>
     fb2:	41 c0       	rjmp	.+130    	; 0x1036 <DIO_vidWritePinValue+0x1cc>
					Set_Bit(PORTC,pin);
     fb4:	a5 e3       	ldi	r26, 0x35	; 53
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e5 e3       	ldi	r30, 0x35	; 53
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_vidWritePinValue+0x168>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_vidWritePinValue+0x164>
     fd6:	84 2b       	or	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	2d c0       	rjmp	.+90     	; 0x1036 <DIO_vidWritePinValue+0x1cc>
				break;

		case 3:
				if(value==low)
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	88 23       	and	r24, r24
     fe0:	a1 f4       	brne	.+40     	; 0x100a <DIO_vidWritePinValue+0x1a0>
					Clr_Bit(PORTD,pin);
     fe2:	a2 e3       	ldi	r26, 0x32	; 50
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e2 e3       	ldi	r30, 0x32	; 50
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_vidWritePinValue+0x196>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_vidWritePinValue+0x192>
    1004:	80 95       	com	r24
    1006:	84 23       	and	r24, r20
    1008:	8c 93       	st	X, r24
				if(value==high)
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	81 30       	cpi	r24, 0x01	; 1
    100e:	99 f4       	brne	.+38     	; 0x1036 <DIO_vidWritePinValue+0x1cc>
					Set_Bit(PORTD,pin);
    1010:	a2 e3       	ldi	r26, 0x32	; 50
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e2 e3       	ldi	r30, 0x32	; 50
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 2e       	mov	r0, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <DIO_vidWritePinValue+0x1c4>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <DIO_vidWritePinValue+0x1c0>
    1032:	84 2b       	or	r24, r20
    1034:	8c 93       	st	X, r24
				break;
		}
	}
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <DIO_vidTogglePinValue>:

	void DIO_vidTogglePinValue (u8 port,u8 pin)
		{
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	00 d0       	rcall	.+0      	; 0x104c <DIO_vidTogglePinValue+0x6>
    104c:	00 d0       	rcall	.+0      	; 0x104e <DIO_vidTogglePinValue+0x8>
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	89 83       	std	Y+1, r24	; 0x01
    1054:	6a 83       	std	Y+2, r22	; 0x02
			switch(port)
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	3c 83       	std	Y+4, r19	; 0x04
    105e:	2b 83       	std	Y+3, r18	; 0x03
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	9c 81       	ldd	r25, Y+4	; 0x04
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	91 05       	cpc	r25, r1
    1068:	49 f1       	breq	.+82     	; 0x10bc <DIO_vidTogglePinValue+0x76>
    106a:	2b 81       	ldd	r18, Y+3	; 0x03
    106c:	3c 81       	ldd	r19, Y+4	; 0x04
    106e:	22 30       	cpi	r18, 0x02	; 2
    1070:	31 05       	cpc	r19, r1
    1072:	2c f4       	brge	.+10     	; 0x107e <DIO_vidTogglePinValue+0x38>
    1074:	8b 81       	ldd	r24, Y+3	; 0x03
    1076:	9c 81       	ldd	r25, Y+4	; 0x04
    1078:	00 97       	sbiw	r24, 0x00	; 0
    107a:	61 f0       	breq	.+24     	; 0x1094 <DIO_vidTogglePinValue+0x4e>
    107c:	5a c0       	rjmp	.+180    	; 0x1132 <DIO_vidTogglePinValue+0xec>
    107e:	2b 81       	ldd	r18, Y+3	; 0x03
    1080:	3c 81       	ldd	r19, Y+4	; 0x04
    1082:	22 30       	cpi	r18, 0x02	; 2
    1084:	31 05       	cpc	r19, r1
    1086:	71 f1       	breq	.+92     	; 0x10e4 <DIO_vidTogglePinValue+0x9e>
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	9c 81       	ldd	r25, Y+4	; 0x04
    108c:	83 30       	cpi	r24, 0x03	; 3
    108e:	91 05       	cpc	r25, r1
    1090:	e9 f1       	breq	.+122    	; 0x110c <DIO_vidTogglePinValue+0xc6>
    1092:	4f c0       	rjmp	.+158    	; 0x1132 <DIO_vidTogglePinValue+0xec>
			{
			case 0:
				           toggle_Bit(PORTA,pin);
    1094:	ab e3       	ldi	r26, 0x3B	; 59
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	eb e3       	ldi	r30, 0x3B	; 59
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_vidTogglePinValue+0x6c>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_vidTogglePinValue+0x68>
    10b6:	84 27       	eor	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	3b c0       	rjmp	.+118    	; 0x1132 <DIO_vidTogglePinValue+0xec>
				           break;

			case 1:
							toggle_Bit(PORTB,pin);
    10bc:	a8 e3       	ldi	r26, 0x38	; 56
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e8 e3       	ldi	r30, 0x38	; 56
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_vidTogglePinValue+0x94>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_vidTogglePinValue+0x90>
    10de:	84 27       	eor	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	27 c0       	rjmp	.+78     	; 0x1132 <DIO_vidTogglePinValue+0xec>
							break;

			case 2:
							toggle_Bit(PORTC,pin);
    10e4:	a5 e3       	ldi	r26, 0x35	; 53
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e5 e3       	ldi	r30, 0x35	; 53
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_vidTogglePinValue+0xbc>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_vidTogglePinValue+0xb8>
    1106:	84 27       	eor	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	13 c0       	rjmp	.+38     	; 0x1132 <DIO_vidTogglePinValue+0xec>
							break;

			case 3:
							toggle_Bit(PORTD,pin);
    110c:	a2 e3       	ldi	r26, 0x32	; 50
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e2 e3       	ldi	r30, 0x32	; 50
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_vidTogglePinValue+0xe4>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_vidTogglePinValue+0xe0>
    112e:	84 27       	eor	r24, r20
    1130:	8c 93       	st	X, r24
							break;
			}
		}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <DIO_u8ReadPinValue>:


	u8 DIO_u8ReadPinValue(u8 port, u8 pin)
	{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	00 d0       	rcall	.+0      	; 0x1146 <DIO_u8ReadPinValue+0x6>
    1146:	00 d0       	rcall	.+0      	; 0x1148 <DIO_u8ReadPinValue+0x8>
    1148:	0f 92       	push	r0
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	6a 83       	std	Y+2, r22	; 0x02
		switch(port)
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	3d 83       	std	Y+5, r19	; 0x05
    115a:	2c 83       	std	Y+4, r18	; 0x04
    115c:	4c 81       	ldd	r20, Y+4	; 0x04
    115e:	5d 81       	ldd	r21, Y+5	; 0x05
    1160:	41 30       	cpi	r20, 0x01	; 1
    1162:	51 05       	cpc	r21, r1
    1164:	b1 f1       	breq	.+108    	; 0x11d2 <DIO_u8ReadPinValue+0x92>
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	9d 81       	ldd	r25, Y+5	; 0x05
    116a:	82 30       	cpi	r24, 0x02	; 2
    116c:	91 05       	cpc	r25, r1
    116e:	34 f4       	brge	.+12     	; 0x117c <DIO_u8ReadPinValue+0x3c>
    1170:	2c 81       	ldd	r18, Y+4	; 0x04
    1172:	3d 81       	ldd	r19, Y+5	; 0x05
    1174:	21 15       	cp	r18, r1
    1176:	31 05       	cpc	r19, r1
    1178:	71 f0       	breq	.+28     	; 0x1196 <DIO_u8ReadPinValue+0x56>
    117a:	85 c0       	rjmp	.+266    	; 0x1286 <DIO_u8ReadPinValue+0x146>
    117c:	4c 81       	ldd	r20, Y+4	; 0x04
    117e:	5d 81       	ldd	r21, Y+5	; 0x05
    1180:	42 30       	cpi	r20, 0x02	; 2
    1182:	51 05       	cpc	r21, r1
    1184:	09 f4       	brne	.+2      	; 0x1188 <DIO_u8ReadPinValue+0x48>
    1186:	43 c0       	rjmp	.+134    	; 0x120e <DIO_u8ReadPinValue+0xce>
    1188:	8c 81       	ldd	r24, Y+4	; 0x04
    118a:	9d 81       	ldd	r25, Y+5	; 0x05
    118c:	83 30       	cpi	r24, 0x03	; 3
    118e:	91 05       	cpc	r25, r1
    1190:	09 f4       	brne	.+2      	; 0x1194 <DIO_u8ReadPinValue+0x54>
    1192:	5b c0       	rjmp	.+182    	; 0x124a <DIO_u8ReadPinValue+0x10a>
    1194:	78 c0       	rjmp	.+240    	; 0x1286 <DIO_u8ReadPinValue+0x146>
		{
		case a:
			return Get_Bit(PINA,pin);
    1196:	e9 e3       	ldi	r30, 0x39	; 57
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_u8ReadPinValue+0x70>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	2a 95       	dec	r18
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_u8ReadPinValue+0x6c>
    11b4:	9a 01       	movw	r18, r20
    11b6:	28 23       	and	r18, r24
    11b8:	39 23       	and	r19, r25
    11ba:	8a 81       	ldd	r24, Y+2	; 0x02
    11bc:	88 2f       	mov	r24, r24
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	a9 01       	movw	r20, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_u8ReadPinValue+0x88>
    11c4:	55 95       	asr	r21
    11c6:	47 95       	ror	r20
    11c8:	8a 95       	dec	r24
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_u8ReadPinValue+0x84>
    11cc:	ca 01       	movw	r24, r20
    11ce:	8b 83       	std	Y+3, r24	; 0x03
    11d0:	5c c0       	rjmp	.+184    	; 0x128a <DIO_u8ReadPinValue+0x14a>
			break;
		case b:
			return Get_Bit(PINB,pin);
    11d2:	e6 e3       	ldi	r30, 0x36	; 54
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <DIO_u8ReadPinValue+0xac>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	2a 95       	dec	r18
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <DIO_u8ReadPinValue+0xa8>
    11f0:	9a 01       	movw	r18, r20
    11f2:	28 23       	and	r18, r24
    11f4:	39 23       	and	r19, r25
    11f6:	8a 81       	ldd	r24, Y+2	; 0x02
    11f8:	88 2f       	mov	r24, r24
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	a9 01       	movw	r20, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <DIO_u8ReadPinValue+0xc4>
    1200:	55 95       	asr	r21
    1202:	47 95       	ror	r20
    1204:	8a 95       	dec	r24
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <DIO_u8ReadPinValue+0xc0>
    1208:	ca 01       	movw	r24, r20
    120a:	8b 83       	std	Y+3, r24	; 0x03
    120c:	3e c0       	rjmp	.+124    	; 0x128a <DIO_u8ReadPinValue+0x14a>
			break;
		case c:
			return Get_Bit(PINC,pin);
    120e:	e3 e3       	ldi	r30, 0x33	; 51
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	50 e0       	ldi	r21, 0x00	; 0
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_u8ReadPinValue+0xe8>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	2a 95       	dec	r18
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_u8ReadPinValue+0xe4>
    122c:	9a 01       	movw	r18, r20
    122e:	28 23       	and	r18, r24
    1230:	39 23       	and	r19, r25
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	88 2f       	mov	r24, r24
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	a9 01       	movw	r20, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_u8ReadPinValue+0x100>
    123c:	55 95       	asr	r21
    123e:	47 95       	ror	r20
    1240:	8a 95       	dec	r24
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_u8ReadPinValue+0xfc>
    1244:	ca 01       	movw	r24, r20
    1246:	8b 83       	std	Y+3, r24	; 0x03
    1248:	20 c0       	rjmp	.+64     	; 0x128a <DIO_u8ReadPinValue+0x14a>
			break;
		case d:
			return Get_Bit(PIND,pin);
    124a:	e0 e3       	ldi	r30, 0x30	; 48
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	80 81       	ld	r24, Z
    1250:	48 2f       	mov	r20, r24
    1252:	50 e0       	ldi	r21, 0x00	; 0
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <DIO_u8ReadPinValue+0x124>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	2a 95       	dec	r18
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <DIO_u8ReadPinValue+0x120>
    1268:	9a 01       	movw	r18, r20
    126a:	28 23       	and	r18, r24
    126c:	39 23       	and	r19, r25
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	88 2f       	mov	r24, r24
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	a9 01       	movw	r20, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_u8ReadPinValue+0x13c>
    1278:	55 95       	asr	r21
    127a:	47 95       	ror	r20
    127c:	8a 95       	dec	r24
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_u8ReadPinValue+0x138>
    1280:	ca 01       	movw	r24, r20
    1282:	8b 83       	std	Y+3, r24	; 0x03
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_u8ReadPinValue+0x14a>
			break;
		default :
			return port;
    1286:	59 81       	ldd	r21, Y+1	; 0x01
    1288:	5b 83       	std	Y+3, r21	; 0x03
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
			break;
		}


	}
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	cf 91       	pop	r28
    1298:	df 91       	pop	r29
    129a:	08 95       	ret

0000129c <DIO_vidSetPortDir>:

	void DIO_vidSetPortDir(u8 port, u8 Dir)
		{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <DIO_vidSetPortDir+0x6>
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <DIO_vidSetPortDir+0x8>
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	89 83       	std	Y+1, r24	; 0x01
    12aa:	6a 83       	std	Y+2, r22	; 0x02
			switch(port)
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	3c 83       	std	Y+4, r19	; 0x04
    12b4:	2b 83       	std	Y+3, r18	; 0x03
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	91 05       	cpc	r25, r1
    12be:	d1 f0       	breq	.+52     	; 0x12f4 <DIO_vidSetPortDir+0x58>
    12c0:	2b 81       	ldd	r18, Y+3	; 0x03
    12c2:	3c 81       	ldd	r19, Y+4	; 0x04
    12c4:	22 30       	cpi	r18, 0x02	; 2
    12c6:	31 05       	cpc	r19, r1
    12c8:	2c f4       	brge	.+10     	; 0x12d4 <DIO_vidSetPortDir+0x38>
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	9c 81       	ldd	r25, Y+4	; 0x04
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	61 f0       	breq	.+24     	; 0x12ea <DIO_vidSetPortDir+0x4e>
    12d2:	1e c0       	rjmp	.+60     	; 0x1310 <DIO_vidSetPortDir+0x74>
    12d4:	2b 81       	ldd	r18, Y+3	; 0x03
    12d6:	3c 81       	ldd	r19, Y+4	; 0x04
    12d8:	22 30       	cpi	r18, 0x02	; 2
    12da:	31 05       	cpc	r19, r1
    12dc:	81 f0       	breq	.+32     	; 0x12fe <DIO_vidSetPortDir+0x62>
    12de:	8b 81       	ldd	r24, Y+3	; 0x03
    12e0:	9c 81       	ldd	r25, Y+4	; 0x04
    12e2:	83 30       	cpi	r24, 0x03	; 3
    12e4:	91 05       	cpc	r25, r1
    12e6:	81 f0       	breq	.+32     	; 0x1308 <DIO_vidSetPortDir+0x6c>
    12e8:	13 c0       	rjmp	.+38     	; 0x1310 <DIO_vidSetPortDir+0x74>
			{
			case a:
				DDRA=Dir;
    12ea:	ea e3       	ldi	r30, 0x3A	; 58
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	80 83       	st	Z, r24
    12f2:	0e c0       	rjmp	.+28     	; 0x1310 <DIO_vidSetPortDir+0x74>
				break;
			case b:
				DDRB=Dir;
    12f4:	e7 e3       	ldi	r30, 0x37	; 55
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	8a 81       	ldd	r24, Y+2	; 0x02
    12fa:	80 83       	st	Z, r24
    12fc:	09 c0       	rjmp	.+18     	; 0x1310 <DIO_vidSetPortDir+0x74>
				break;
			case c:
				DDRC=Dir;
    12fe:	e4 e3       	ldi	r30, 0x34	; 52
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	80 83       	st	Z, r24
    1306:	04 c0       	rjmp	.+8      	; 0x1310 <DIO_vidSetPortDir+0x74>
				break;
			case d:
				DDRD=Dir;
    1308:	e1 e3       	ldi	r30, 0x31	; 49
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	80 83       	st	Z, r24
				break;

			}


		}
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <DIO_vidWritePortValue>:

	void DIO_vidWritePortValue(u8 port, u8 Value)
			{
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	00 d0       	rcall	.+0      	; 0x1324 <DIO_vidWritePortValue+0x6>
    1324:	00 d0       	rcall	.+0      	; 0x1326 <DIO_vidWritePortValue+0x8>
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	6a 83       	std	Y+2, r22	; 0x02
				switch(port)
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	3c 83       	std	Y+4, r19	; 0x04
    1336:	2b 83       	std	Y+3, r18	; 0x03
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	9c 81       	ldd	r25, Y+4	; 0x04
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	91 05       	cpc	r25, r1
    1340:	d1 f0       	breq	.+52     	; 0x1376 <DIO_vidWritePortValue+0x58>
    1342:	2b 81       	ldd	r18, Y+3	; 0x03
    1344:	3c 81       	ldd	r19, Y+4	; 0x04
    1346:	22 30       	cpi	r18, 0x02	; 2
    1348:	31 05       	cpc	r19, r1
    134a:	2c f4       	brge	.+10     	; 0x1356 <DIO_vidWritePortValue+0x38>
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	9c 81       	ldd	r25, Y+4	; 0x04
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	61 f0       	breq	.+24     	; 0x136c <DIO_vidWritePortValue+0x4e>
    1354:	1e c0       	rjmp	.+60     	; 0x1392 <DIO_vidWritePortValue+0x74>
    1356:	2b 81       	ldd	r18, Y+3	; 0x03
    1358:	3c 81       	ldd	r19, Y+4	; 0x04
    135a:	22 30       	cpi	r18, 0x02	; 2
    135c:	31 05       	cpc	r19, r1
    135e:	81 f0       	breq	.+32     	; 0x1380 <DIO_vidWritePortValue+0x62>
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	83 30       	cpi	r24, 0x03	; 3
    1366:	91 05       	cpc	r25, r1
    1368:	81 f0       	breq	.+32     	; 0x138a <DIO_vidWritePortValue+0x6c>
    136a:	13 c0       	rjmp	.+38     	; 0x1392 <DIO_vidWritePortValue+0x74>
				{
				case a:
					PORTA=Value;
    136c:	eb e3       	ldi	r30, 0x3B	; 59
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	80 83       	st	Z, r24
    1374:	0e c0       	rjmp	.+28     	; 0x1392 <DIO_vidWritePortValue+0x74>
					break;
				case b:
					PORTB=Value;
    1376:	e8 e3       	ldi	r30, 0x38	; 56
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	80 83       	st	Z, r24
    137e:	09 c0       	rjmp	.+18     	; 0x1392 <DIO_vidWritePortValue+0x74>
					break;
				case c:
					PORTC=Value;
    1380:	e5 e3       	ldi	r30, 0x35	; 53
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	80 83       	st	Z, r24
    1388:	04 c0       	rjmp	.+8      	; 0x1392 <DIO_vidWritePortValue+0x74>
					break;
				case d:
					PORTD=Value;
    138a:	e2 e3       	ldi	r30, 0x32	; 50
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	80 83       	st	Z, r24
					break;

				}


			}
    1392:	0f 90       	pop	r0
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <LCD_Command>:
#include <util/delay.h>			/* Include Delay header file */
#include "lcd.h"


void LCD_Command( unsigned char cmnd )
{
    13a0:	0f 93       	push	r16
    13a2:	1f 93       	push	r17
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	cd b7       	in	r28, 0x3d	; 61
    13aa:	de b7       	in	r29, 0x3e	; 62
    13ac:	c7 55       	subi	r28, 0x57	; 87
    13ae:	d0 40       	sbci	r29, 0x00	; 0
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	fe 01       	movw	r30, r28
    13bc:	e9 5a       	subi	r30, 0xA9	; 169
    13be:	ff 4f       	sbci	r31, 0xFF	; 255
    13c0:	80 83       	st	Z, r24
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
    13c2:	a5 e3       	ldi	r26, 0x35	; 53
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e5 e3       	ldi	r30, 0x35	; 53
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	98 2f       	mov	r25, r24
    13ce:	9f 70       	andi	r25, 0x0F	; 15
    13d0:	fe 01       	movw	r30, r28
    13d2:	e9 5a       	subi	r30, 0xA9	; 169
    13d4:	ff 4f       	sbci	r31, 0xFF	; 255
    13d6:	80 81       	ld	r24, Z
    13d8:	80 7f       	andi	r24, 0xF0	; 240
    13da:	89 2b       	or	r24, r25
    13dc:	8c 93       	st	X, r24
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
    13de:	a5 e3       	ldi	r26, 0x35	; 53
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e5 e3       	ldi	r30, 0x35	; 53
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	8e 7f       	andi	r24, 0xFE	; 254
    13ea:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);		/* Enable pulse */
    13ec:	a5 e3       	ldi	r26, 0x35	; 53
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e5 e3       	ldi	r30, 0x35	; 53
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	82 60       	ori	r24, 0x02	; 2
    13f8:	8c 93       	st	X, r24
    13fa:	fe 01       	movw	r30, r28
    13fc:	ed 5a       	subi	r30, 0xAD	; 173
    13fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	a0 e8       	ldi	r26, 0x80	; 128
    1406:	bf e3       	ldi	r27, 0x3F	; 63
    1408:	80 83       	st	Z, r24
    140a:	91 83       	std	Z+1, r25	; 0x01
    140c:	a2 83       	std	Z+2, r26	; 0x02
    140e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1410:	8e 01       	movw	r16, r28
    1412:	01 5b       	subi	r16, 0xB1	; 177
    1414:	1f 4f       	sbci	r17, 0xFF	; 255
    1416:	fe 01       	movw	r30, r28
    1418:	ed 5a       	subi	r30, 0xAD	; 173
    141a:	ff 4f       	sbci	r31, 0xFF	; 255
    141c:	60 81       	ld	r22, Z
    141e:	71 81       	ldd	r23, Z+1	; 0x01
    1420:	82 81       	ldd	r24, Z+2	; 0x02
    1422:	93 81       	ldd	r25, Z+3	; 0x03
    1424:	2b ea       	ldi	r18, 0xAB	; 171
    1426:	3a ea       	ldi	r19, 0xAA	; 170
    1428:	4a e2       	ldi	r20, 0x2A	; 42
    142a:	50 e4       	ldi	r21, 0x40	; 64
    142c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	f8 01       	movw	r30, r16
    1436:	80 83       	st	Z, r24
    1438:	91 83       	std	Z+1, r25	; 0x01
    143a:	a2 83       	std	Z+2, r26	; 0x02
    143c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    143e:	fe 01       	movw	r30, r28
    1440:	e1 5b       	subi	r30, 0xB1	; 177
    1442:	ff 4f       	sbci	r31, 0xFF	; 255
    1444:	60 81       	ld	r22, Z
    1446:	71 81       	ldd	r23, Z+1	; 0x01
    1448:	82 81       	ldd	r24, Z+2	; 0x02
    144a:	93 81       	ldd	r25, Z+3	; 0x03
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	40 e8       	ldi	r20, 0x80	; 128
    1452:	5f e3       	ldi	r21, 0x3F	; 63
    1454:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1458:	88 23       	and	r24, r24
    145a:	34 f4       	brge	.+12     	; 0x1468 <LCD_Command+0xc8>
		__ticks = 1;
    145c:	fe 01       	movw	r30, r28
    145e:	e2 5b       	subi	r30, 0xB2	; 178
    1460:	ff 4f       	sbci	r31, 0xFF	; 255
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	80 83       	st	Z, r24
    1466:	e0 c0       	rjmp	.+448    	; 0x1628 <LCD_Command+0x288>
	else if (__tmp > 255)
    1468:	fe 01       	movw	r30, r28
    146a:	e1 5b       	subi	r30, 0xB1	; 177
    146c:	ff 4f       	sbci	r31, 0xFF	; 255
    146e:	60 81       	ld	r22, Z
    1470:	71 81       	ldd	r23, Z+1	; 0x01
    1472:	82 81       	ldd	r24, Z+2	; 0x02
    1474:	93 81       	ldd	r25, Z+3	; 0x03
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	4f e7       	ldi	r20, 0x7F	; 127
    147c:	53 e4       	ldi	r21, 0x43	; 67
    147e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1482:	18 16       	cp	r1, r24
    1484:	0c f0       	brlt	.+2      	; 0x1488 <LCD_Command+0xe8>
    1486:	c0 c0       	rjmp	.+384    	; 0x1608 <LCD_Command+0x268>
	{
		_delay_ms(__us / 1000.0);
    1488:	fe 01       	movw	r30, r28
    148a:	ed 5a       	subi	r30, 0xAD	; 173
    148c:	ff 4f       	sbci	r31, 0xFF	; 255
    148e:	60 81       	ld	r22, Z
    1490:	71 81       	ldd	r23, Z+1	; 0x01
    1492:	82 81       	ldd	r24, Z+2	; 0x02
    1494:	93 81       	ldd	r25, Z+3	; 0x03
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	4a e7       	ldi	r20, 0x7A	; 122
    149c:	54 e4       	ldi	r21, 0x44	; 68
    149e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	fe 01       	movw	r30, r28
    14a8:	e6 5b       	subi	r30, 0xB6	; 182
    14aa:	ff 4f       	sbci	r31, 0xFF	; 255
    14ac:	80 83       	st	Z, r24
    14ae:	91 83       	std	Z+1, r25	; 0x01
    14b0:	a2 83       	std	Z+2, r26	; 0x02
    14b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b4:	8e 01       	movw	r16, r28
    14b6:	0a 5b       	subi	r16, 0xBA	; 186
    14b8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ba:	fe 01       	movw	r30, r28
    14bc:	e6 5b       	subi	r30, 0xB6	; 182
    14be:	ff 4f       	sbci	r31, 0xFF	; 255
    14c0:	60 81       	ld	r22, Z
    14c2:	71 81       	ldd	r23, Z+1	; 0x01
    14c4:	82 81       	ldd	r24, Z+2	; 0x02
    14c6:	93 81       	ldd	r25, Z+3	; 0x03
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	4a ef       	ldi	r20, 0xFA	; 250
    14ce:	54 e4       	ldi	r21, 0x44	; 68
    14d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	f8 01       	movw	r30, r16
    14da:	80 83       	st	Z, r24
    14dc:	91 83       	std	Z+1, r25	; 0x01
    14de:	a2 83       	std	Z+2, r26	; 0x02
    14e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14e2:	fe 01       	movw	r30, r28
    14e4:	ea 5b       	subi	r30, 0xBA	; 186
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	60 81       	ld	r22, Z
    14ea:	71 81       	ldd	r23, Z+1	; 0x01
    14ec:	82 81       	ldd	r24, Z+2	; 0x02
    14ee:	93 81       	ldd	r25, Z+3	; 0x03
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	40 e8       	ldi	r20, 0x80	; 128
    14f6:	5f e3       	ldi	r21, 0x3F	; 63
    14f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14fc:	88 23       	and	r24, r24
    14fe:	44 f4       	brge	.+16     	; 0x1510 <LCD_Command+0x170>
		__ticks = 1;
    1500:	fe 01       	movw	r30, r28
    1502:	ec 5b       	subi	r30, 0xBC	; 188
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	91 83       	std	Z+1, r25	; 0x01
    150c:	80 83       	st	Z, r24
    150e:	64 c0       	rjmp	.+200    	; 0x15d8 <LCD_Command+0x238>
	else if (__tmp > 65535)
    1510:	fe 01       	movw	r30, r28
    1512:	ea 5b       	subi	r30, 0xBA	; 186
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	60 81       	ld	r22, Z
    1518:	71 81       	ldd	r23, Z+1	; 0x01
    151a:	82 81       	ldd	r24, Z+2	; 0x02
    151c:	93 81       	ldd	r25, Z+3	; 0x03
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	3f ef       	ldi	r19, 0xFF	; 255
    1522:	4f e7       	ldi	r20, 0x7F	; 127
    1524:	57 e4       	ldi	r21, 0x47	; 71
    1526:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    152a:	18 16       	cp	r1, r24
    152c:	0c f0       	brlt	.+2      	; 0x1530 <LCD_Command+0x190>
    152e:	43 c0       	rjmp	.+134    	; 0x15b6 <LCD_Command+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1530:	fe 01       	movw	r30, r28
    1532:	e6 5b       	subi	r30, 0xB6	; 182
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	60 81       	ld	r22, Z
    1538:	71 81       	ldd	r23, Z+1	; 0x01
    153a:	82 81       	ldd	r24, Z+2	; 0x02
    153c:	93 81       	ldd	r25, Z+3	; 0x03
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e2       	ldi	r20, 0x20	; 32
    1544:	51 e4       	ldi	r21, 0x41	; 65
    1546:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	8e 01       	movw	r16, r28
    1550:	0c 5b       	subi	r16, 0xBC	; 188
    1552:	1f 4f       	sbci	r17, 0xFF	; 255
    1554:	bc 01       	movw	r22, r24
    1556:	cd 01       	movw	r24, r26
    1558:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	f8 01       	movw	r30, r16
    1562:	91 83       	std	Z+1, r25	; 0x01
    1564:	80 83       	st	Z, r24
    1566:	1f c0       	rjmp	.+62     	; 0x15a6 <LCD_Command+0x206>
    1568:	fe 01       	movw	r30, r28
    156a:	ee 5b       	subi	r30, 0xBE	; 190
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	88 ec       	ldi	r24, 0xC8	; 200
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	91 83       	std	Z+1, r25	; 0x01
    1574:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1576:	fe 01       	movw	r30, r28
    1578:	ee 5b       	subi	r30, 0xBE	; 190
    157a:	ff 4f       	sbci	r31, 0xFF	; 255
    157c:	80 81       	ld	r24, Z
    157e:	91 81       	ldd	r25, Z+1	; 0x01
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <LCD_Command+0x1e0>
    1584:	fe 01       	movw	r30, r28
    1586:	ee 5b       	subi	r30, 0xBE	; 190
    1588:	ff 4f       	sbci	r31, 0xFF	; 255
    158a:	91 83       	std	Z+1, r25	; 0x01
    158c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158e:	de 01       	movw	r26, r28
    1590:	ac 5b       	subi	r26, 0xBC	; 188
    1592:	bf 4f       	sbci	r27, 0xFF	; 255
    1594:	fe 01       	movw	r30, r28
    1596:	ec 5b       	subi	r30, 0xBC	; 188
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	80 81       	ld	r24, Z
    159c:	91 81       	ldd	r25, Z+1	; 0x01
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	11 96       	adiw	r26, 0x01	; 1
    15a2:	9c 93       	st	X, r25
    15a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a6:	fe 01       	movw	r30, r28
    15a8:	ec 5b       	subi	r30, 0xBC	; 188
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	80 81       	ld	r24, Z
    15ae:	91 81       	ldd	r25, Z+1	; 0x01
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	d1 f6       	brne	.-76     	; 0x1568 <LCD_Command+0x1c8>
    15b4:	42 c0       	rjmp	.+132    	; 0x163a <LCD_Command+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b6:	8e 01       	movw	r16, r28
    15b8:	0c 5b       	subi	r16, 0xBC	; 188
    15ba:	1f 4f       	sbci	r17, 0xFF	; 255
    15bc:	fe 01       	movw	r30, r28
    15be:	ea 5b       	subi	r30, 0xBA	; 186
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	60 81       	ld	r22, Z
    15c4:	71 81       	ldd	r23, Z+1	; 0x01
    15c6:	82 81       	ldd	r24, Z+2	; 0x02
    15c8:	93 81       	ldd	r25, Z+3	; 0x03
    15ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	f8 01       	movw	r30, r16
    15d4:	91 83       	std	Z+1, r25	; 0x01
    15d6:	80 83       	st	Z, r24
    15d8:	de 01       	movw	r26, r28
    15da:	a0 5c       	subi	r26, 0xC0	; 192
    15dc:	bf 4f       	sbci	r27, 0xFF	; 255
    15de:	fe 01       	movw	r30, r28
    15e0:	ec 5b       	subi	r30, 0xBC	; 188
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	80 81       	ld	r24, Z
    15e6:	91 81       	ldd	r25, Z+1	; 0x01
    15e8:	11 96       	adiw	r26, 0x01	; 1
    15ea:	9c 93       	st	X, r25
    15ec:	8e 93       	st	-X, r24
    15ee:	fe 01       	movw	r30, r28
    15f0:	e0 5c       	subi	r30, 0xC0	; 192
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	80 81       	ld	r24, Z
    15f6:	91 81       	ldd	r25, Z+1	; 0x01
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	f1 f7       	brne	.-4      	; 0x15f8 <LCD_Command+0x258>
    15fc:	fe 01       	movw	r30, r28
    15fe:	e0 5c       	subi	r30, 0xC0	; 192
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	91 83       	std	Z+1, r25	; 0x01
    1604:	80 83       	st	Z, r24
    1606:	19 c0       	rjmp	.+50     	; 0x163a <LCD_Command+0x29a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1608:	8e 01       	movw	r16, r28
    160a:	02 5b       	subi	r16, 0xB2	; 178
    160c:	1f 4f       	sbci	r17, 0xFF	; 255
    160e:	fe 01       	movw	r30, r28
    1610:	e1 5b       	subi	r30, 0xB1	; 177
    1612:	ff 4f       	sbci	r31, 0xFF	; 255
    1614:	60 81       	ld	r22, Z
    1616:	71 81       	ldd	r23, Z+1	; 0x01
    1618:	82 81       	ldd	r24, Z+2	; 0x02
    161a:	93 81       	ldd	r25, Z+3	; 0x03
    161c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	f8 01       	movw	r30, r16
    1626:	80 83       	st	Z, r24
    1628:	fe 01       	movw	r30, r28
    162a:	e2 5b       	subi	r30, 0xB2	; 178
    162c:	ff 4f       	sbci	r31, 0xFF	; 255
    162e:	80 81       	ld	r24, Z
    1630:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1632:	8f ad       	ldd	r24, Y+63	; 0x3f
    1634:	8a 95       	dec	r24
    1636:	f1 f7       	brne	.-4      	; 0x1634 <LCD_Command+0x294>
    1638:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    163a:	a5 e3       	ldi	r26, 0x35	; 53
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e5 e3       	ldi	r30, 0x35	; 53
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	8d 7f       	andi	r24, 0xFD	; 253
    1646:	8c 93       	st	X, r24
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	a8 e4       	ldi	r26, 0x48	; 72
    164e:	b3 e4       	ldi	r27, 0x43	; 67
    1650:	8b af       	std	Y+59, r24	; 0x3b
    1652:	9c af       	std	Y+60, r25	; 0x3c
    1654:	ad af       	std	Y+61, r26	; 0x3d
    1656:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1658:	6b ad       	ldd	r22, Y+59	; 0x3b
    165a:	7c ad       	ldd	r23, Y+60	; 0x3c
    165c:	8d ad       	ldd	r24, Y+61	; 0x3d
    165e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1660:	2b ea       	ldi	r18, 0xAB	; 171
    1662:	3a ea       	ldi	r19, 0xAA	; 170
    1664:	4a e2       	ldi	r20, 0x2A	; 42
    1666:	50 e4       	ldi	r21, 0x40	; 64
    1668:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	8f ab       	std	Y+55, r24	; 0x37
    1672:	98 af       	std	Y+56, r25	; 0x38
    1674:	a9 af       	std	Y+57, r26	; 0x39
    1676:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1678:	6f a9       	ldd	r22, Y+55	; 0x37
    167a:	78 ad       	ldd	r23, Y+56	; 0x38
    167c:	89 ad       	ldd	r24, Y+57	; 0x39
    167e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	40 e8       	ldi	r20, 0x80	; 128
    1686:	5f e3       	ldi	r21, 0x3F	; 63
    1688:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    168c:	88 23       	and	r24, r24
    168e:	1c f4       	brge	.+6      	; 0x1696 <LCD_Command+0x2f6>
		__ticks = 1;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	8e ab       	std	Y+54, r24	; 0x36
    1694:	91 c0       	rjmp	.+290    	; 0x17b8 <LCD_Command+0x418>
	else if (__tmp > 255)
    1696:	6f a9       	ldd	r22, Y+55	; 0x37
    1698:	78 ad       	ldd	r23, Y+56	; 0x38
    169a:	89 ad       	ldd	r24, Y+57	; 0x39
    169c:	9a ad       	ldd	r25, Y+58	; 0x3a
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	4f e7       	ldi	r20, 0x7F	; 127
    16a4:	53 e4       	ldi	r21, 0x43	; 67
    16a6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16aa:	18 16       	cp	r1, r24
    16ac:	0c f0       	brlt	.+2      	; 0x16b0 <LCD_Command+0x310>
    16ae:	7b c0       	rjmp	.+246    	; 0x17a6 <LCD_Command+0x406>
	{
		_delay_ms(__us / 1000.0);
    16b0:	6b ad       	ldd	r22, Y+59	; 0x3b
    16b2:	7c ad       	ldd	r23, Y+60	; 0x3c
    16b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    16b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	4a e7       	ldi	r20, 0x7A	; 122
    16be:	54 e4       	ldi	r21, 0x44	; 68
    16c0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	8a ab       	std	Y+50, r24	; 0x32
    16ca:	9b ab       	std	Y+51, r25	; 0x33
    16cc:	ac ab       	std	Y+52, r26	; 0x34
    16ce:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d0:	6a a9       	ldd	r22, Y+50	; 0x32
    16d2:	7b a9       	ldd	r23, Y+51	; 0x33
    16d4:	8c a9       	ldd	r24, Y+52	; 0x34
    16d6:	9d a9       	ldd	r25, Y+53	; 0x35
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	4a ef       	ldi	r20, 0xFA	; 250
    16de:	54 e4       	ldi	r21, 0x44	; 68
    16e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	8e a7       	std	Y+46, r24	; 0x2e
    16ea:	9f a7       	std	Y+47, r25	; 0x2f
    16ec:	a8 ab       	std	Y+48, r26	; 0x30
    16ee:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    16f0:	6e a5       	ldd	r22, Y+46	; 0x2e
    16f2:	7f a5       	ldd	r23, Y+47	; 0x2f
    16f4:	88 a9       	ldd	r24, Y+48	; 0x30
    16f6:	99 a9       	ldd	r25, Y+49	; 0x31
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	40 e8       	ldi	r20, 0x80	; 128
    16fe:	5f e3       	ldi	r21, 0x3F	; 63
    1700:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1704:	88 23       	and	r24, r24
    1706:	2c f4       	brge	.+10     	; 0x1712 <LCD_Command+0x372>
		__ticks = 1;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	9d a7       	std	Y+45, r25	; 0x2d
    170e:	8c a7       	std	Y+44, r24	; 0x2c
    1710:	3f c0       	rjmp	.+126    	; 0x1790 <LCD_Command+0x3f0>
	else if (__tmp > 65535)
    1712:	6e a5       	ldd	r22, Y+46	; 0x2e
    1714:	7f a5       	ldd	r23, Y+47	; 0x2f
    1716:	88 a9       	ldd	r24, Y+48	; 0x30
    1718:	99 a9       	ldd	r25, Y+49	; 0x31
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	3f ef       	ldi	r19, 0xFF	; 255
    171e:	4f e7       	ldi	r20, 0x7F	; 127
    1720:	57 e4       	ldi	r21, 0x47	; 71
    1722:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1726:	18 16       	cp	r1, r24
    1728:	4c f5       	brge	.+82     	; 0x177c <LCD_Command+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    172a:	6a a9       	ldd	r22, Y+50	; 0x32
    172c:	7b a9       	ldd	r23, Y+51	; 0x33
    172e:	8c a9       	ldd	r24, Y+52	; 0x34
    1730:	9d a9       	ldd	r25, Y+53	; 0x35
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e2       	ldi	r20, 0x20	; 32
    1738:	51 e4       	ldi	r21, 0x41	; 65
    173a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	bc 01       	movw	r22, r24
    1744:	cd 01       	movw	r24, r26
    1746:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	9d a7       	std	Y+45, r25	; 0x2d
    1750:	8c a7       	std	Y+44, r24	; 0x2c
    1752:	0f c0       	rjmp	.+30     	; 0x1772 <LCD_Command+0x3d2>
    1754:	88 ec       	ldi	r24, 0xC8	; 200
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	9b a7       	std	Y+43, r25	; 0x2b
    175a:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    175c:	8a a5       	ldd	r24, Y+42	; 0x2a
    175e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <LCD_Command+0x3c0>
    1764:	9b a7       	std	Y+43, r25	; 0x2b
    1766:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1768:	8c a5       	ldd	r24, Y+44	; 0x2c
    176a:	9d a5       	ldd	r25, Y+45	; 0x2d
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	9d a7       	std	Y+45, r25	; 0x2d
    1770:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1772:	8c a5       	ldd	r24, Y+44	; 0x2c
    1774:	9d a5       	ldd	r25, Y+45	; 0x2d
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	69 f7       	brne	.-38     	; 0x1754 <LCD_Command+0x3b4>
    177a:	24 c0       	rjmp	.+72     	; 0x17c4 <LCD_Command+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    177c:	6e a5       	ldd	r22, Y+46	; 0x2e
    177e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1780:	88 a9       	ldd	r24, Y+48	; 0x30
    1782:	99 a9       	ldd	r25, Y+49	; 0x31
    1784:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	9d a7       	std	Y+45, r25	; 0x2d
    178e:	8c a7       	std	Y+44, r24	; 0x2c
    1790:	8c a5       	ldd	r24, Y+44	; 0x2c
    1792:	9d a5       	ldd	r25, Y+45	; 0x2d
    1794:	99 a7       	std	Y+41, r25	; 0x29
    1796:	88 a7       	std	Y+40, r24	; 0x28
    1798:	88 a5       	ldd	r24, Y+40	; 0x28
    179a:	99 a5       	ldd	r25, Y+41	; 0x29
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <LCD_Command+0x3fc>
    17a0:	99 a7       	std	Y+41, r25	; 0x29
    17a2:	88 a7       	std	Y+40, r24	; 0x28
    17a4:	0f c0       	rjmp	.+30     	; 0x17c4 <LCD_Command+0x424>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17a6:	6f a9       	ldd	r22, Y+55	; 0x37
    17a8:	78 ad       	ldd	r23, Y+56	; 0x38
    17aa:	89 ad       	ldd	r24, Y+57	; 0x39
    17ac:	9a ad       	ldd	r25, Y+58	; 0x3a
    17ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	8e ab       	std	Y+54, r24	; 0x36
    17b8:	8e a9       	ldd	r24, Y+54	; 0x36
    17ba:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17bc:	8f a1       	ldd	r24, Y+39	; 0x27
    17be:	8a 95       	dec	r24
    17c0:	f1 f7       	brne	.-4      	; 0x17be <LCD_Command+0x41e>
    17c2:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
    17c4:	a5 e3       	ldi	r26, 0x35	; 53
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e5 e3       	ldi	r30, 0x35	; 53
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	28 2f       	mov	r18, r24
    17d0:	2f 70       	andi	r18, 0x0F	; 15
    17d2:	fe 01       	movw	r30, r28
    17d4:	e9 5a       	subi	r30, 0xA9	; 169
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	80 81       	ld	r24, Z
    17da:	88 2f       	mov	r24, r24
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	82 95       	swap	r24
    17e0:	92 95       	swap	r25
    17e2:	90 7f       	andi	r25, 0xF0	; 240
    17e4:	98 27       	eor	r25, r24
    17e6:	80 7f       	andi	r24, 0xF0	; 240
    17e8:	98 27       	eor	r25, r24
    17ea:	82 2b       	or	r24, r18
    17ec:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);
    17ee:	a5 e3       	ldi	r26, 0x35	; 53
    17f0:	b0 e0       	ldi	r27, 0x00	; 0
    17f2:	e5 e3       	ldi	r30, 0x35	; 53
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	82 60       	ori	r24, 0x02	; 2
    17fa:	8c 93       	st	X, r24
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	a0 e8       	ldi	r26, 0x80	; 128
    1802:	bf e3       	ldi	r27, 0x3F	; 63
    1804:	8b a3       	std	Y+35, r24	; 0x23
    1806:	9c a3       	std	Y+36, r25	; 0x24
    1808:	ad a3       	std	Y+37, r26	; 0x25
    180a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    180c:	6b a1       	ldd	r22, Y+35	; 0x23
    180e:	7c a1       	ldd	r23, Y+36	; 0x24
    1810:	8d a1       	ldd	r24, Y+37	; 0x25
    1812:	9e a1       	ldd	r25, Y+38	; 0x26
    1814:	2b ea       	ldi	r18, 0xAB	; 171
    1816:	3a ea       	ldi	r19, 0xAA	; 170
    1818:	4a e2       	ldi	r20, 0x2A	; 42
    181a:	50 e4       	ldi	r21, 0x40	; 64
    181c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	8f 8f       	std	Y+31, r24	; 0x1f
    1826:	98 a3       	std	Y+32, r25	; 0x20
    1828:	a9 a3       	std	Y+33, r26	; 0x21
    182a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    182c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    182e:	78 a1       	ldd	r23, Y+32	; 0x20
    1830:	89 a1       	ldd	r24, Y+33	; 0x21
    1832:	9a a1       	ldd	r25, Y+34	; 0x22
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e8       	ldi	r20, 0x80	; 128
    183a:	5f e3       	ldi	r21, 0x3F	; 63
    183c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1840:	88 23       	and	r24, r24
    1842:	1c f4       	brge	.+6      	; 0x184a <LCD_Command+0x4aa>
		__ticks = 1;
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	8e 8f       	std	Y+30, r24	; 0x1e
    1848:	91 c0       	rjmp	.+290    	; 0x196c <LCD_Command+0x5cc>
	else if (__tmp > 255)
    184a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    184c:	78 a1       	ldd	r23, Y+32	; 0x20
    184e:	89 a1       	ldd	r24, Y+33	; 0x21
    1850:	9a a1       	ldd	r25, Y+34	; 0x22
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	4f e7       	ldi	r20, 0x7F	; 127
    1858:	53 e4       	ldi	r21, 0x43	; 67
    185a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    185e:	18 16       	cp	r1, r24
    1860:	0c f0       	brlt	.+2      	; 0x1864 <LCD_Command+0x4c4>
    1862:	7b c0       	rjmp	.+246    	; 0x195a <LCD_Command+0x5ba>
	{
		_delay_ms(__us / 1000.0);
    1864:	6b a1       	ldd	r22, Y+35	; 0x23
    1866:	7c a1       	ldd	r23, Y+36	; 0x24
    1868:	8d a1       	ldd	r24, Y+37	; 0x25
    186a:	9e a1       	ldd	r25, Y+38	; 0x26
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	4a e7       	ldi	r20, 0x7A	; 122
    1872:	54 e4       	ldi	r21, 0x44	; 68
    1874:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	8a 8f       	std	Y+26, r24	; 0x1a
    187e:	9b 8f       	std	Y+27, r25	; 0x1b
    1880:	ac 8f       	std	Y+28, r26	; 0x1c
    1882:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1884:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1886:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1888:	8c 8d       	ldd	r24, Y+28	; 0x1c
    188a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	4a ef       	ldi	r20, 0xFA	; 250
    1892:	54 e4       	ldi	r21, 0x44	; 68
    1894:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	8e 8b       	std	Y+22, r24	; 0x16
    189e:	9f 8b       	std	Y+23, r25	; 0x17
    18a0:	a8 8f       	std	Y+24, r26	; 0x18
    18a2:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    18a4:	6e 89       	ldd	r22, Y+22	; 0x16
    18a6:	7f 89       	ldd	r23, Y+23	; 0x17
    18a8:	88 8d       	ldd	r24, Y+24	; 0x18
    18aa:	99 8d       	ldd	r25, Y+25	; 0x19
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e8       	ldi	r20, 0x80	; 128
    18b2:	5f e3       	ldi	r21, 0x3F	; 63
    18b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18b8:	88 23       	and	r24, r24
    18ba:	2c f4       	brge	.+10     	; 0x18c6 <LCD_Command+0x526>
		__ticks = 1;
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	9d 8b       	std	Y+21, r25	; 0x15
    18c2:	8c 8b       	std	Y+20, r24	; 0x14
    18c4:	3f c0       	rjmp	.+126    	; 0x1944 <LCD_Command+0x5a4>
	else if (__tmp > 65535)
    18c6:	6e 89       	ldd	r22, Y+22	; 0x16
    18c8:	7f 89       	ldd	r23, Y+23	; 0x17
    18ca:	88 8d       	ldd	r24, Y+24	; 0x18
    18cc:	99 8d       	ldd	r25, Y+25	; 0x19
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	3f ef       	ldi	r19, 0xFF	; 255
    18d2:	4f e7       	ldi	r20, 0x7F	; 127
    18d4:	57 e4       	ldi	r21, 0x47	; 71
    18d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18da:	18 16       	cp	r1, r24
    18dc:	4c f5       	brge	.+82     	; 0x1930 <LCD_Command+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18de:	6a 8d       	ldd	r22, Y+26	; 0x1a
    18e0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    18e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18e4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e2       	ldi	r20, 0x20	; 32
    18ec:	51 e4       	ldi	r21, 0x41	; 65
    18ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	bc 01       	movw	r22, r24
    18f8:	cd 01       	movw	r24, r26
    18fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	9d 8b       	std	Y+21, r25	; 0x15
    1904:	8c 8b       	std	Y+20, r24	; 0x14
    1906:	0f c0       	rjmp	.+30     	; 0x1926 <LCD_Command+0x586>
    1908:	88 ec       	ldi	r24, 0xC8	; 200
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	9b 8b       	std	Y+19, r25	; 0x13
    190e:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1910:	8a 89       	ldd	r24, Y+18	; 0x12
    1912:	9b 89       	ldd	r25, Y+19	; 0x13
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	f1 f7       	brne	.-4      	; 0x1914 <LCD_Command+0x574>
    1918:	9b 8b       	std	Y+19, r25	; 0x13
    191a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    191c:	8c 89       	ldd	r24, Y+20	; 0x14
    191e:	9d 89       	ldd	r25, Y+21	; 0x15
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	9d 8b       	std	Y+21, r25	; 0x15
    1924:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1926:	8c 89       	ldd	r24, Y+20	; 0x14
    1928:	9d 89       	ldd	r25, Y+21	; 0x15
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	69 f7       	brne	.-38     	; 0x1908 <LCD_Command+0x568>
    192e:	24 c0       	rjmp	.+72     	; 0x1978 <LCD_Command+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1930:	6e 89       	ldd	r22, Y+22	; 0x16
    1932:	7f 89       	ldd	r23, Y+23	; 0x17
    1934:	88 8d       	ldd	r24, Y+24	; 0x18
    1936:	99 8d       	ldd	r25, Y+25	; 0x19
    1938:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	9d 8b       	std	Y+21, r25	; 0x15
    1942:	8c 8b       	std	Y+20, r24	; 0x14
    1944:	8c 89       	ldd	r24, Y+20	; 0x14
    1946:	9d 89       	ldd	r25, Y+21	; 0x15
    1948:	99 8b       	std	Y+17, r25	; 0x11
    194a:	88 8b       	std	Y+16, r24	; 0x10
    194c:	88 89       	ldd	r24, Y+16	; 0x10
    194e:	99 89       	ldd	r25, Y+17	; 0x11
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	f1 f7       	brne	.-4      	; 0x1950 <LCD_Command+0x5b0>
    1954:	99 8b       	std	Y+17, r25	; 0x11
    1956:	88 8b       	std	Y+16, r24	; 0x10
    1958:	0f c0       	rjmp	.+30     	; 0x1978 <LCD_Command+0x5d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    195a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    195c:	78 a1       	ldd	r23, Y+32	; 0x20
    195e:	89 a1       	ldd	r24, Y+33	; 0x21
    1960:	9a a1       	ldd	r25, Y+34	; 0x22
    1962:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	8e 8f       	std	Y+30, r24	; 0x1e
    196c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    196e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1970:	8f 85       	ldd	r24, Y+15	; 0x0f
    1972:	8a 95       	dec	r24
    1974:	f1 f7       	brne	.-4      	; 0x1972 <LCD_Command+0x5d2>
    1976:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    1978:	a5 e3       	ldi	r26, 0x35	; 53
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e5 e3       	ldi	r30, 0x35	; 53
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	8d 7f       	andi	r24, 0xFD	; 253
    1984:	8c 93       	st	X, r24
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	a0 e0       	ldi	r26, 0x00	; 0
    198c:	b0 e4       	ldi	r27, 0x40	; 64
    198e:	8b 87       	std	Y+11, r24	; 0x0b
    1990:	9c 87       	std	Y+12, r25	; 0x0c
    1992:	ad 87       	std	Y+13, r26	; 0x0d
    1994:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1996:	6b 85       	ldd	r22, Y+11	; 0x0b
    1998:	7c 85       	ldd	r23, Y+12	; 0x0c
    199a:	8d 85       	ldd	r24, Y+13	; 0x0d
    199c:	9e 85       	ldd	r25, Y+14	; 0x0e
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	4a ef       	ldi	r20, 0xFA	; 250
    19a4:	54 e4       	ldi	r21, 0x44	; 68
    19a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	8f 83       	std	Y+7, r24	; 0x07
    19b0:	98 87       	std	Y+8, r25	; 0x08
    19b2:	a9 87       	std	Y+9, r26	; 0x09
    19b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19b6:	6f 81       	ldd	r22, Y+7	; 0x07
    19b8:	78 85       	ldd	r23, Y+8	; 0x08
    19ba:	89 85       	ldd	r24, Y+9	; 0x09
    19bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e8       	ldi	r20, 0x80	; 128
    19c4:	5f e3       	ldi	r21, 0x3F	; 63
    19c6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19ca:	88 23       	and	r24, r24
    19cc:	2c f4       	brge	.+10     	; 0x19d8 <LCD_Command+0x638>
		__ticks = 1;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	9e 83       	std	Y+6, r25	; 0x06
    19d4:	8d 83       	std	Y+5, r24	; 0x05
    19d6:	3f c0       	rjmp	.+126    	; 0x1a56 <LCD_Command+0x6b6>
	else if (__tmp > 65535)
    19d8:	6f 81       	ldd	r22, Y+7	; 0x07
    19da:	78 85       	ldd	r23, Y+8	; 0x08
    19dc:	89 85       	ldd	r24, Y+9	; 0x09
    19de:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	3f ef       	ldi	r19, 0xFF	; 255
    19e4:	4f e7       	ldi	r20, 0x7F	; 127
    19e6:	57 e4       	ldi	r21, 0x47	; 71
    19e8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19ec:	18 16       	cp	r1, r24
    19ee:	4c f5       	brge	.+82     	; 0x1a42 <LCD_Command+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	40 e2       	ldi	r20, 0x20	; 32
    19fe:	51 e4       	ldi	r21, 0x41	; 65
    1a00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	bc 01       	movw	r22, r24
    1a0a:	cd 01       	movw	r24, r26
    1a0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	9e 83       	std	Y+6, r25	; 0x06
    1a16:	8d 83       	std	Y+5, r24	; 0x05
    1a18:	0f c0       	rjmp	.+30     	; 0x1a38 <LCD_Command+0x698>
    1a1a:	88 ec       	ldi	r24, 0xC8	; 200
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	9c 83       	std	Y+4, r25	; 0x04
    1a20:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	9c 81       	ldd	r25, Y+4	; 0x04
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <LCD_Command+0x686>
    1a2a:	9c 83       	std	Y+4, r25	; 0x04
    1a2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a30:	9e 81       	ldd	r25, Y+6	; 0x06
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	9e 83       	std	Y+6, r25	; 0x06
    1a36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a38:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	69 f7       	brne	.-38     	; 0x1a1a <LCD_Command+0x67a>
    1a40:	14 c0       	rjmp	.+40     	; 0x1a6a <LCD_Command+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a42:	6f 81       	ldd	r22, Y+7	; 0x07
    1a44:	78 85       	ldd	r23, Y+8	; 0x08
    1a46:	89 85       	ldd	r24, Y+9	; 0x09
    1a48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	9e 83       	std	Y+6, r25	; 0x06
    1a54:	8d 83       	std	Y+5, r24	; 0x05
    1a56:	8d 81       	ldd	r24, Y+5	; 0x05
    1a58:	9e 81       	ldd	r25, Y+6	; 0x06
    1a5a:	9a 83       	std	Y+2, r25	; 0x02
    1a5c:	89 83       	std	Y+1, r24	; 0x01
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	9a 81       	ldd	r25, Y+2	; 0x02
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <LCD_Command+0x6c2>
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1a6a:	c9 5a       	subi	r28, 0xA9	; 169
    1a6c:	df 4f       	sbci	r29, 0xFF	; 255
    1a6e:	0f b6       	in	r0, 0x3f	; 63
    1a70:	f8 94       	cli
    1a72:	de bf       	out	0x3e, r29	; 62
    1a74:	0f be       	out	0x3f, r0	; 63
    1a76:	cd bf       	out	0x3d, r28	; 61
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	1f 91       	pop	r17
    1a7e:	0f 91       	pop	r16
    1a80:	08 95       	ret

00001a82 <LCD_Char>:


void LCD_Char( unsigned char data )
{
    1a82:	0f 93       	push	r16
    1a84:	1f 93       	push	r17
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	c7 55       	subi	r28, 0x57	; 87
    1a90:	d0 40       	sbci	r29, 0x00	; 0
    1a92:	0f b6       	in	r0, 0x3f	; 63
    1a94:	f8 94       	cli
    1a96:	de bf       	out	0x3e, r29	; 62
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	cd bf       	out	0x3d, r28	; 61
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	e9 5a       	subi	r30, 0xA9	; 169
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	80 83       	st	Z, r24
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
    1aa4:	a5 e3       	ldi	r26, 0x35	; 53
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e5 e3       	ldi	r30, 0x35	; 53
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	98 2f       	mov	r25, r24
    1ab0:	9f 70       	andi	r25, 0x0F	; 15
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	e9 5a       	subi	r30, 0xA9	; 169
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	80 81       	ld	r24, Z
    1aba:	80 7f       	andi	r24, 0xF0	; 240
    1abc:	89 2b       	or	r24, r25
    1abe:	8c 93       	st	X, r24
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
    1ac0:	a5 e3       	ldi	r26, 0x35	; 53
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e5 e3       	ldi	r30, 0x35	; 53
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	81 60       	ori	r24, 0x01	; 1
    1acc:	8c 93       	st	X, r24
	LCD_Port|= (1<<EN);
    1ace:	a5 e3       	ldi	r26, 0x35	; 53
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	e5 e3       	ldi	r30, 0x35	; 53
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	82 60       	ori	r24, 0x02	; 2
    1ada:	8c 93       	st	X, r24
    1adc:	fe 01       	movw	r30, r28
    1ade:	ed 5a       	subi	r30, 0xAD	; 173
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	a0 e8       	ldi	r26, 0x80	; 128
    1ae8:	bf e3       	ldi	r27, 0x3F	; 63
    1aea:	80 83       	st	Z, r24
    1aec:	91 83       	std	Z+1, r25	; 0x01
    1aee:	a2 83       	std	Z+2, r26	; 0x02
    1af0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1af2:	8e 01       	movw	r16, r28
    1af4:	01 5b       	subi	r16, 0xB1	; 177
    1af6:	1f 4f       	sbci	r17, 0xFF	; 255
    1af8:	fe 01       	movw	r30, r28
    1afa:	ed 5a       	subi	r30, 0xAD	; 173
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	60 81       	ld	r22, Z
    1b00:	71 81       	ldd	r23, Z+1	; 0x01
    1b02:	82 81       	ldd	r24, Z+2	; 0x02
    1b04:	93 81       	ldd	r25, Z+3	; 0x03
    1b06:	2b ea       	ldi	r18, 0xAB	; 171
    1b08:	3a ea       	ldi	r19, 0xAA	; 170
    1b0a:	4a e2       	ldi	r20, 0x2A	; 42
    1b0c:	50 e4       	ldi	r21, 0x40	; 64
    1b0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	f8 01       	movw	r30, r16
    1b18:	80 83       	st	Z, r24
    1b1a:	91 83       	std	Z+1, r25	; 0x01
    1b1c:	a2 83       	std	Z+2, r26	; 0x02
    1b1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b20:	fe 01       	movw	r30, r28
    1b22:	e1 5b       	subi	r30, 0xB1	; 177
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	60 81       	ld	r22, Z
    1b28:	71 81       	ldd	r23, Z+1	; 0x01
    1b2a:	82 81       	ldd	r24, Z+2	; 0x02
    1b2c:	93 81       	ldd	r25, Z+3	; 0x03
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	40 e8       	ldi	r20, 0x80	; 128
    1b34:	5f e3       	ldi	r21, 0x3F	; 63
    1b36:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b3a:	88 23       	and	r24, r24
    1b3c:	34 f4       	brge	.+12     	; 0x1b4a <LCD_Char+0xc8>
		__ticks = 1;
    1b3e:	fe 01       	movw	r30, r28
    1b40:	e2 5b       	subi	r30, 0xB2	; 178
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	80 83       	st	Z, r24
    1b48:	e0 c0       	rjmp	.+448    	; 0x1d0a <LCD_Char+0x288>
	else if (__tmp > 255)
    1b4a:	fe 01       	movw	r30, r28
    1b4c:	e1 5b       	subi	r30, 0xB1	; 177
    1b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b50:	60 81       	ld	r22, Z
    1b52:	71 81       	ldd	r23, Z+1	; 0x01
    1b54:	82 81       	ldd	r24, Z+2	; 0x02
    1b56:	93 81       	ldd	r25, Z+3	; 0x03
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	4f e7       	ldi	r20, 0x7F	; 127
    1b5e:	53 e4       	ldi	r21, 0x43	; 67
    1b60:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b64:	18 16       	cp	r1, r24
    1b66:	0c f0       	brlt	.+2      	; 0x1b6a <LCD_Char+0xe8>
    1b68:	c0 c0       	rjmp	.+384    	; 0x1cea <LCD_Char+0x268>
	{
		_delay_ms(__us / 1000.0);
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	ed 5a       	subi	r30, 0xAD	; 173
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	60 81       	ld	r22, Z
    1b72:	71 81       	ldd	r23, Z+1	; 0x01
    1b74:	82 81       	ldd	r24, Z+2	; 0x02
    1b76:	93 81       	ldd	r25, Z+3	; 0x03
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	4a e7       	ldi	r20, 0x7A	; 122
    1b7e:	54 e4       	ldi	r21, 0x44	; 68
    1b80:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	fe 01       	movw	r30, r28
    1b8a:	e6 5b       	subi	r30, 0xB6	; 182
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	80 83       	st	Z, r24
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	a2 83       	std	Z+2, r26	; 0x02
    1b94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b96:	8e 01       	movw	r16, r28
    1b98:	0a 5b       	subi	r16, 0xBA	; 186
    1b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e6 5b       	subi	r30, 0xB6	; 182
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	60 81       	ld	r22, Z
    1ba4:	71 81       	ldd	r23, Z+1	; 0x01
    1ba6:	82 81       	ldd	r24, Z+2	; 0x02
    1ba8:	93 81       	ldd	r25, Z+3	; 0x03
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	4a ef       	ldi	r20, 0xFA	; 250
    1bb0:	54 e4       	ldi	r21, 0x44	; 68
    1bb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	f8 01       	movw	r30, r16
    1bbc:	80 83       	st	Z, r24
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	a2 83       	std	Z+2, r26	; 0x02
    1bc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	ea 5b       	subi	r30, 0xBA	; 186
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	60 81       	ld	r22, Z
    1bcc:	71 81       	ldd	r23, Z+1	; 0x01
    1bce:	82 81       	ldd	r24, Z+2	; 0x02
    1bd0:	93 81       	ldd	r25, Z+3	; 0x03
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e8       	ldi	r20, 0x80	; 128
    1bd8:	5f e3       	ldi	r21, 0x3F	; 63
    1bda:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bde:	88 23       	and	r24, r24
    1be0:	44 f4       	brge	.+16     	; 0x1bf2 <LCD_Char+0x170>
		__ticks = 1;
    1be2:	fe 01       	movw	r30, r28
    1be4:	ec 5b       	subi	r30, 0xBC	; 188
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	91 83       	std	Z+1, r25	; 0x01
    1bee:	80 83       	st	Z, r24
    1bf0:	64 c0       	rjmp	.+200    	; 0x1cba <LCD_Char+0x238>
	else if (__tmp > 65535)
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	ea 5b       	subi	r30, 0xBA	; 186
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	60 81       	ld	r22, Z
    1bfa:	71 81       	ldd	r23, Z+1	; 0x01
    1bfc:	82 81       	ldd	r24, Z+2	; 0x02
    1bfe:	93 81       	ldd	r25, Z+3	; 0x03
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	3f ef       	ldi	r19, 0xFF	; 255
    1c04:	4f e7       	ldi	r20, 0x7F	; 127
    1c06:	57 e4       	ldi	r21, 0x47	; 71
    1c08:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c0c:	18 16       	cp	r1, r24
    1c0e:	0c f0       	brlt	.+2      	; 0x1c12 <LCD_Char+0x190>
    1c10:	43 c0       	rjmp	.+134    	; 0x1c98 <LCD_Char+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c12:	fe 01       	movw	r30, r28
    1c14:	e6 5b       	subi	r30, 0xB6	; 182
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	60 81       	ld	r22, Z
    1c1a:	71 81       	ldd	r23, Z+1	; 0x01
    1c1c:	82 81       	ldd	r24, Z+2	; 0x02
    1c1e:	93 81       	ldd	r25, Z+3	; 0x03
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	40 e2       	ldi	r20, 0x20	; 32
    1c26:	51 e4       	ldi	r21, 0x41	; 65
    1c28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	8e 01       	movw	r16, r28
    1c32:	0c 5b       	subi	r16, 0xBC	; 188
    1c34:	1f 4f       	sbci	r17, 0xFF	; 255
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	f8 01       	movw	r30, r16
    1c44:	91 83       	std	Z+1, r25	; 0x01
    1c46:	80 83       	st	Z, r24
    1c48:	1f c0       	rjmp	.+62     	; 0x1c88 <LCD_Char+0x206>
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	ee 5b       	subi	r30, 0xBE	; 190
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	88 ec       	ldi	r24, 0xC8	; 200
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	91 83       	std	Z+1, r25	; 0x01
    1c56:	80 83       	st	Z, r24
    1c58:	fe 01       	movw	r30, r28
    1c5a:	ee 5b       	subi	r30, 0xBE	; 190
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	80 81       	ld	r24, Z
    1c60:	91 81       	ldd	r25, Z+1	; 0x01
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <LCD_Char+0x1e0>
    1c66:	fe 01       	movw	r30, r28
    1c68:	ee 5b       	subi	r30, 0xBE	; 190
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	91 83       	std	Z+1, r25	; 0x01
    1c6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c70:	de 01       	movw	r26, r28
    1c72:	ac 5b       	subi	r26, 0xBC	; 188
    1c74:	bf 4f       	sbci	r27, 0xFF	; 255
    1c76:	fe 01       	movw	r30, r28
    1c78:	ec 5b       	subi	r30, 0xBC	; 188
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	80 81       	ld	r24, Z
    1c7e:	91 81       	ldd	r25, Z+1	; 0x01
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	11 96       	adiw	r26, 0x01	; 1
    1c84:	9c 93       	st	X, r25
    1c86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c88:	fe 01       	movw	r30, r28
    1c8a:	ec 5b       	subi	r30, 0xBC	; 188
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	80 81       	ld	r24, Z
    1c90:	91 81       	ldd	r25, Z+1	; 0x01
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	d1 f6       	brne	.-76     	; 0x1c4a <LCD_Char+0x1c8>
    1c96:	42 c0       	rjmp	.+132    	; 0x1d1c <LCD_Char+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c98:	8e 01       	movw	r16, r28
    1c9a:	0c 5b       	subi	r16, 0xBC	; 188
    1c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	ea 5b       	subi	r30, 0xBA	; 186
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	60 81       	ld	r22, Z
    1ca6:	71 81       	ldd	r23, Z+1	; 0x01
    1ca8:	82 81       	ldd	r24, Z+2	; 0x02
    1caa:	93 81       	ldd	r25, Z+3	; 0x03
    1cac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	f8 01       	movw	r30, r16
    1cb6:	91 83       	std	Z+1, r25	; 0x01
    1cb8:	80 83       	st	Z, r24
    1cba:	de 01       	movw	r26, r28
    1cbc:	a0 5c       	subi	r26, 0xC0	; 192
    1cbe:	bf 4f       	sbci	r27, 0xFF	; 255
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	ec 5b       	subi	r30, 0xBC	; 188
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	80 81       	ld	r24, Z
    1cc8:	91 81       	ldd	r25, Z+1	; 0x01
    1cca:	11 96       	adiw	r26, 0x01	; 1
    1ccc:	9c 93       	st	X, r25
    1cce:	8e 93       	st	-X, r24
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	e0 5c       	subi	r30, 0xC0	; 192
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	80 81       	ld	r24, Z
    1cd8:	91 81       	ldd	r25, Z+1	; 0x01
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <LCD_Char+0x258>
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e0 5c       	subi	r30, 0xC0	; 192
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	91 83       	std	Z+1, r25	; 0x01
    1ce6:	80 83       	st	Z, r24
    1ce8:	19 c0       	rjmp	.+50     	; 0x1d1c <LCD_Char+0x29a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cea:	8e 01       	movw	r16, r28
    1cec:	02 5b       	subi	r16, 0xB2	; 178
    1cee:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	e1 5b       	subi	r30, 0xB1	; 177
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	60 81       	ld	r22, Z
    1cf8:	71 81       	ldd	r23, Z+1	; 0x01
    1cfa:	82 81       	ldd	r24, Z+2	; 0x02
    1cfc:	93 81       	ldd	r25, Z+3	; 0x03
    1cfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	f8 01       	movw	r30, r16
    1d08:	80 83       	st	Z, r24
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e2 5b       	subi	r30, 0xB2	; 178
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	80 81       	ld	r24, Z
    1d12:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d14:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d16:	8a 95       	dec	r24
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <LCD_Char+0x294>
    1d1a:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    1d1c:	a5 e3       	ldi	r26, 0x35	; 53
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	e5 e3       	ldi	r30, 0x35	; 53
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	8d 7f       	andi	r24, 0xFD	; 253
    1d28:	8c 93       	st	X, r24
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	a8 e4       	ldi	r26, 0x48	; 72
    1d30:	b3 e4       	ldi	r27, 0x43	; 67
    1d32:	8b af       	std	Y+59, r24	; 0x3b
    1d34:	9c af       	std	Y+60, r25	; 0x3c
    1d36:	ad af       	std	Y+61, r26	; 0x3d
    1d38:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d3a:	6b ad       	ldd	r22, Y+59	; 0x3b
    1d3c:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d40:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d42:	2b ea       	ldi	r18, 0xAB	; 171
    1d44:	3a ea       	ldi	r19, 0xAA	; 170
    1d46:	4a e2       	ldi	r20, 0x2A	; 42
    1d48:	50 e4       	ldi	r21, 0x40	; 64
    1d4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	8f ab       	std	Y+55, r24	; 0x37
    1d54:	98 af       	std	Y+56, r25	; 0x38
    1d56:	a9 af       	std	Y+57, r26	; 0x39
    1d58:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1d5a:	6f a9       	ldd	r22, Y+55	; 0x37
    1d5c:	78 ad       	ldd	r23, Y+56	; 0x38
    1d5e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d60:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 e8       	ldi	r20, 0x80	; 128
    1d68:	5f e3       	ldi	r21, 0x3F	; 63
    1d6a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d6e:	88 23       	and	r24, r24
    1d70:	1c f4       	brge	.+6      	; 0x1d78 <LCD_Char+0x2f6>
		__ticks = 1;
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	8e ab       	std	Y+54, r24	; 0x36
    1d76:	91 c0       	rjmp	.+290    	; 0x1e9a <LCD_Char+0x418>
	else if (__tmp > 255)
    1d78:	6f a9       	ldd	r22, Y+55	; 0x37
    1d7a:	78 ad       	ldd	r23, Y+56	; 0x38
    1d7c:	89 ad       	ldd	r24, Y+57	; 0x39
    1d7e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4f e7       	ldi	r20, 0x7F	; 127
    1d86:	53 e4       	ldi	r21, 0x43	; 67
    1d88:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d8c:	18 16       	cp	r1, r24
    1d8e:	0c f0       	brlt	.+2      	; 0x1d92 <LCD_Char+0x310>
    1d90:	7b c0       	rjmp	.+246    	; 0x1e88 <LCD_Char+0x406>
	{
		_delay_ms(__us / 1000.0);
    1d92:	6b ad       	ldd	r22, Y+59	; 0x3b
    1d94:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d96:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d98:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	4a e7       	ldi	r20, 0x7A	; 122
    1da0:	54 e4       	ldi	r21, 0x44	; 68
    1da2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	8a ab       	std	Y+50, r24	; 0x32
    1dac:	9b ab       	std	Y+51, r25	; 0x33
    1dae:	ac ab       	std	Y+52, r26	; 0x34
    1db0:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db2:	6a a9       	ldd	r22, Y+50	; 0x32
    1db4:	7b a9       	ldd	r23, Y+51	; 0x33
    1db6:	8c a9       	ldd	r24, Y+52	; 0x34
    1db8:	9d a9       	ldd	r25, Y+53	; 0x35
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	4a ef       	ldi	r20, 0xFA	; 250
    1dc0:	54 e4       	ldi	r21, 0x44	; 68
    1dc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	8e a7       	std	Y+46, r24	; 0x2e
    1dcc:	9f a7       	std	Y+47, r25	; 0x2f
    1dce:	a8 ab       	std	Y+48, r26	; 0x30
    1dd0:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1dd2:	6e a5       	ldd	r22, Y+46	; 0x2e
    1dd4:	7f a5       	ldd	r23, Y+47	; 0x2f
    1dd6:	88 a9       	ldd	r24, Y+48	; 0x30
    1dd8:	99 a9       	ldd	r25, Y+49	; 0x31
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e8       	ldi	r20, 0x80	; 128
    1de0:	5f e3       	ldi	r21, 0x3F	; 63
    1de2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1de6:	88 23       	and	r24, r24
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <LCD_Char+0x372>
		__ticks = 1;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	9d a7       	std	Y+45, r25	; 0x2d
    1df0:	8c a7       	std	Y+44, r24	; 0x2c
    1df2:	3f c0       	rjmp	.+126    	; 0x1e72 <LCD_Char+0x3f0>
	else if (__tmp > 65535)
    1df4:	6e a5       	ldd	r22, Y+46	; 0x2e
    1df6:	7f a5       	ldd	r23, Y+47	; 0x2f
    1df8:	88 a9       	ldd	r24, Y+48	; 0x30
    1dfa:	99 a9       	ldd	r25, Y+49	; 0x31
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	3f ef       	ldi	r19, 0xFF	; 255
    1e00:	4f e7       	ldi	r20, 0x7F	; 127
    1e02:	57 e4       	ldi	r21, 0x47	; 71
    1e04:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e08:	18 16       	cp	r1, r24
    1e0a:	4c f5       	brge	.+82     	; 0x1e5e <LCD_Char+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e0c:	6a a9       	ldd	r22, Y+50	; 0x32
    1e0e:	7b a9       	ldd	r23, Y+51	; 0x33
    1e10:	8c a9       	ldd	r24, Y+52	; 0x34
    1e12:	9d a9       	ldd	r25, Y+53	; 0x35
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e2       	ldi	r20, 0x20	; 32
    1e1a:	51 e4       	ldi	r21, 0x41	; 65
    1e1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	bc 01       	movw	r22, r24
    1e26:	cd 01       	movw	r24, r26
    1e28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9d a7       	std	Y+45, r25	; 0x2d
    1e32:	8c a7       	std	Y+44, r24	; 0x2c
    1e34:	0f c0       	rjmp	.+30     	; 0x1e54 <LCD_Char+0x3d2>
    1e36:	88 ec       	ldi	r24, 0xC8	; 200
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	9b a7       	std	Y+43, r25	; 0x2b
    1e3c:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e3e:	8a a5       	ldd	r24, Y+42	; 0x2a
    1e40:	9b a5       	ldd	r25, Y+43	; 0x2b
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <LCD_Char+0x3c0>
    1e46:	9b a7       	std	Y+43, r25	; 0x2b
    1e48:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e4a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e4c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	9d a7       	std	Y+45, r25	; 0x2d
    1e52:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e54:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e56:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	69 f7       	brne	.-38     	; 0x1e36 <LCD_Char+0x3b4>
    1e5c:	24 c0       	rjmp	.+72     	; 0x1ea6 <LCD_Char+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1e60:	7f a5       	ldd	r23, Y+47	; 0x2f
    1e62:	88 a9       	ldd	r24, Y+48	; 0x30
    1e64:	99 a9       	ldd	r25, Y+49	; 0x31
    1e66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	9d a7       	std	Y+45, r25	; 0x2d
    1e70:	8c a7       	std	Y+44, r24	; 0x2c
    1e72:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e74:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e76:	99 a7       	std	Y+41, r25	; 0x29
    1e78:	88 a7       	std	Y+40, r24	; 0x28
    1e7a:	88 a5       	ldd	r24, Y+40	; 0x28
    1e7c:	99 a5       	ldd	r25, Y+41	; 0x29
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <LCD_Char+0x3fc>
    1e82:	99 a7       	std	Y+41, r25	; 0x29
    1e84:	88 a7       	std	Y+40, r24	; 0x28
    1e86:	0f c0       	rjmp	.+30     	; 0x1ea6 <LCD_Char+0x424>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e88:	6f a9       	ldd	r22, Y+55	; 0x37
    1e8a:	78 ad       	ldd	r23, Y+56	; 0x38
    1e8c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e8e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	8e ab       	std	Y+54, r24	; 0x36
    1e9a:	8e a9       	ldd	r24, Y+54	; 0x36
    1e9c:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e9e:	8f a1       	ldd	r24, Y+39	; 0x27
    1ea0:	8a 95       	dec	r24
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <LCD_Char+0x41e>
    1ea4:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
    1ea6:	a5 e3       	ldi	r26, 0x35	; 53
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e5 e3       	ldi	r30, 0x35	; 53
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	2f 70       	andi	r18, 0x0F	; 15
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	e9 5a       	subi	r30, 0xA9	; 169
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	80 81       	ld	r24, Z
    1ebc:	88 2f       	mov	r24, r24
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	82 95       	swap	r24
    1ec2:	92 95       	swap	r25
    1ec4:	90 7f       	andi	r25, 0xF0	; 240
    1ec6:	98 27       	eor	r25, r24
    1ec8:	80 7f       	andi	r24, 0xF0	; 240
    1eca:	98 27       	eor	r25, r24
    1ecc:	82 2b       	or	r24, r18
    1ece:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);
    1ed0:	a5 e3       	ldi	r26, 0x35	; 53
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e5 e3       	ldi	r30, 0x35	; 53
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	82 60       	ori	r24, 0x02	; 2
    1edc:	8c 93       	st	X, r24
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	a0 e8       	ldi	r26, 0x80	; 128
    1ee4:	bf e3       	ldi	r27, 0x3F	; 63
    1ee6:	8b a3       	std	Y+35, r24	; 0x23
    1ee8:	9c a3       	std	Y+36, r25	; 0x24
    1eea:	ad a3       	std	Y+37, r26	; 0x25
    1eec:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1eee:	6b a1       	ldd	r22, Y+35	; 0x23
    1ef0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ef2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef6:	2b ea       	ldi	r18, 0xAB	; 171
    1ef8:	3a ea       	ldi	r19, 0xAA	; 170
    1efa:	4a e2       	ldi	r20, 0x2A	; 42
    1efc:	50 e4       	ldi	r21, 0x40	; 64
    1efe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	8f 8f       	std	Y+31, r24	; 0x1f
    1f08:	98 a3       	std	Y+32, r25	; 0x20
    1f0a:	a9 a3       	std	Y+33, r26	; 0x21
    1f0c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1f0e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f10:	78 a1       	ldd	r23, Y+32	; 0x20
    1f12:	89 a1       	ldd	r24, Y+33	; 0x21
    1f14:	9a a1       	ldd	r25, Y+34	; 0x22
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	40 e8       	ldi	r20, 0x80	; 128
    1f1c:	5f e3       	ldi	r21, 0x3F	; 63
    1f1e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f22:	88 23       	and	r24, r24
    1f24:	1c f4       	brge	.+6      	; 0x1f2c <LCD_Char+0x4aa>
		__ticks = 1;
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	8e 8f       	std	Y+30, r24	; 0x1e
    1f2a:	91 c0       	rjmp	.+290    	; 0x204e <LCD_Char+0x5cc>
	else if (__tmp > 255)
    1f2c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f2e:	78 a1       	ldd	r23, Y+32	; 0x20
    1f30:	89 a1       	ldd	r24, Y+33	; 0x21
    1f32:	9a a1       	ldd	r25, Y+34	; 0x22
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	4f e7       	ldi	r20, 0x7F	; 127
    1f3a:	53 e4       	ldi	r21, 0x43	; 67
    1f3c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f40:	18 16       	cp	r1, r24
    1f42:	0c f0       	brlt	.+2      	; 0x1f46 <LCD_Char+0x4c4>
    1f44:	7b c0       	rjmp	.+246    	; 0x203c <LCD_Char+0x5ba>
	{
		_delay_ms(__us / 1000.0);
    1f46:	6b a1       	ldd	r22, Y+35	; 0x23
    1f48:	7c a1       	ldd	r23, Y+36	; 0x24
    1f4a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f4c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	4a e7       	ldi	r20, 0x7A	; 122
    1f54:	54 e4       	ldi	r21, 0x44	; 68
    1f56:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	8a 8f       	std	Y+26, r24	; 0x1a
    1f60:	9b 8f       	std	Y+27, r25	; 0x1b
    1f62:	ac 8f       	std	Y+28, r26	; 0x1c
    1f64:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f66:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f68:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f6a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f6c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	4a ef       	ldi	r20, 0xFA	; 250
    1f74:	54 e4       	ldi	r21, 0x44	; 68
    1f76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	8e 8b       	std	Y+22, r24	; 0x16
    1f80:	9f 8b       	std	Y+23, r25	; 0x17
    1f82:	a8 8f       	std	Y+24, r26	; 0x18
    1f84:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1f86:	6e 89       	ldd	r22, Y+22	; 0x16
    1f88:	7f 89       	ldd	r23, Y+23	; 0x17
    1f8a:	88 8d       	ldd	r24, Y+24	; 0x18
    1f8c:	99 8d       	ldd	r25, Y+25	; 0x19
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 e8       	ldi	r20, 0x80	; 128
    1f94:	5f e3       	ldi	r21, 0x3F	; 63
    1f96:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f9a:	88 23       	and	r24, r24
    1f9c:	2c f4       	brge	.+10     	; 0x1fa8 <LCD_Char+0x526>
		__ticks = 1;
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	9d 8b       	std	Y+21, r25	; 0x15
    1fa4:	8c 8b       	std	Y+20, r24	; 0x14
    1fa6:	3f c0       	rjmp	.+126    	; 0x2026 <LCD_Char+0x5a4>
	else if (__tmp > 65535)
    1fa8:	6e 89       	ldd	r22, Y+22	; 0x16
    1faa:	7f 89       	ldd	r23, Y+23	; 0x17
    1fac:	88 8d       	ldd	r24, Y+24	; 0x18
    1fae:	99 8d       	ldd	r25, Y+25	; 0x19
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	3f ef       	ldi	r19, 0xFF	; 255
    1fb4:	4f e7       	ldi	r20, 0x7F	; 127
    1fb6:	57 e4       	ldi	r21, 0x47	; 71
    1fb8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1fbc:	18 16       	cp	r1, r24
    1fbe:	4c f5       	brge	.+82     	; 0x2012 <LCD_Char+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1fc2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1fc4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fc6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	40 e2       	ldi	r20, 0x20	; 32
    1fce:	51 e4       	ldi	r21, 0x41	; 65
    1fd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd4:	dc 01       	movw	r26, r24
    1fd6:	cb 01       	movw	r24, r22
    1fd8:	bc 01       	movw	r22, r24
    1fda:	cd 01       	movw	r24, r26
    1fdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	9d 8b       	std	Y+21, r25	; 0x15
    1fe6:	8c 8b       	std	Y+20, r24	; 0x14
    1fe8:	0f c0       	rjmp	.+30     	; 0x2008 <LCD_Char+0x586>
    1fea:	88 ec       	ldi	r24, 0xC8	; 200
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	9b 8b       	std	Y+19, r25	; 0x13
    1ff0:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ff2:	8a 89       	ldd	r24, Y+18	; 0x12
    1ff4:	9b 89       	ldd	r25, Y+19	; 0x13
    1ff6:	01 97       	sbiw	r24, 0x01	; 1
    1ff8:	f1 f7       	brne	.-4      	; 0x1ff6 <LCD_Char+0x574>
    1ffa:	9b 8b       	std	Y+19, r25	; 0x13
    1ffc:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffe:	8c 89       	ldd	r24, Y+20	; 0x14
    2000:	9d 89       	ldd	r25, Y+21	; 0x15
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	9d 8b       	std	Y+21, r25	; 0x15
    2006:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2008:	8c 89       	ldd	r24, Y+20	; 0x14
    200a:	9d 89       	ldd	r25, Y+21	; 0x15
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	69 f7       	brne	.-38     	; 0x1fea <LCD_Char+0x568>
    2010:	24 c0       	rjmp	.+72     	; 0x205a <LCD_Char+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2012:	6e 89       	ldd	r22, Y+22	; 0x16
    2014:	7f 89       	ldd	r23, Y+23	; 0x17
    2016:	88 8d       	ldd	r24, Y+24	; 0x18
    2018:	99 8d       	ldd	r25, Y+25	; 0x19
    201a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    201e:	dc 01       	movw	r26, r24
    2020:	cb 01       	movw	r24, r22
    2022:	9d 8b       	std	Y+21, r25	; 0x15
    2024:	8c 8b       	std	Y+20, r24	; 0x14
    2026:	8c 89       	ldd	r24, Y+20	; 0x14
    2028:	9d 89       	ldd	r25, Y+21	; 0x15
    202a:	99 8b       	std	Y+17, r25	; 0x11
    202c:	88 8b       	std	Y+16, r24	; 0x10
    202e:	88 89       	ldd	r24, Y+16	; 0x10
    2030:	99 89       	ldd	r25, Y+17	; 0x11
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	f1 f7       	brne	.-4      	; 0x2032 <LCD_Char+0x5b0>
    2036:	99 8b       	std	Y+17, r25	; 0x11
    2038:	88 8b       	std	Y+16, r24	; 0x10
    203a:	0f c0       	rjmp	.+30     	; 0x205a <LCD_Char+0x5d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    203c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    203e:	78 a1       	ldd	r23, Y+32	; 0x20
    2040:	89 a1       	ldd	r24, Y+33	; 0x21
    2042:	9a a1       	ldd	r25, Y+34	; 0x22
    2044:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	8e 8f       	std	Y+30, r24	; 0x1e
    204e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2050:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2052:	8f 85       	ldd	r24, Y+15	; 0x0f
    2054:	8a 95       	dec	r24
    2056:	f1 f7       	brne	.-4      	; 0x2054 <LCD_Char+0x5d2>
    2058:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    205a:	a5 e3       	ldi	r26, 0x35	; 53
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e5 e3       	ldi	r30, 0x35	; 53
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	8d 7f       	andi	r24, 0xFD	; 253
    2066:	8c 93       	st	X, r24
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	a0 e0       	ldi	r26, 0x00	; 0
    206e:	b0 e4       	ldi	r27, 0x40	; 64
    2070:	8b 87       	std	Y+11, r24	; 0x0b
    2072:	9c 87       	std	Y+12, r25	; 0x0c
    2074:	ad 87       	std	Y+13, r26	; 0x0d
    2076:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2078:	6b 85       	ldd	r22, Y+11	; 0x0b
    207a:	7c 85       	ldd	r23, Y+12	; 0x0c
    207c:	8d 85       	ldd	r24, Y+13	; 0x0d
    207e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	4a ef       	ldi	r20, 0xFA	; 250
    2086:	54 e4       	ldi	r21, 0x44	; 68
    2088:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	8f 83       	std	Y+7, r24	; 0x07
    2092:	98 87       	std	Y+8, r25	; 0x08
    2094:	a9 87       	std	Y+9, r26	; 0x09
    2096:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2098:	6f 81       	ldd	r22, Y+7	; 0x07
    209a:	78 85       	ldd	r23, Y+8	; 0x08
    209c:	89 85       	ldd	r24, Y+9	; 0x09
    209e:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e8       	ldi	r20, 0x80	; 128
    20a6:	5f e3       	ldi	r21, 0x3F	; 63
    20a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20ac:	88 23       	and	r24, r24
    20ae:	2c f4       	brge	.+10     	; 0x20ba <LCD_Char+0x638>
		__ticks = 1;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	9e 83       	std	Y+6, r25	; 0x06
    20b6:	8d 83       	std	Y+5, r24	; 0x05
    20b8:	3f c0       	rjmp	.+126    	; 0x2138 <LCD_Char+0x6b6>
	else if (__tmp > 65535)
    20ba:	6f 81       	ldd	r22, Y+7	; 0x07
    20bc:	78 85       	ldd	r23, Y+8	; 0x08
    20be:	89 85       	ldd	r24, Y+9	; 0x09
    20c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	3f ef       	ldi	r19, 0xFF	; 255
    20c6:	4f e7       	ldi	r20, 0x7F	; 127
    20c8:	57 e4       	ldi	r21, 0x47	; 71
    20ca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20ce:	18 16       	cp	r1, r24
    20d0:	4c f5       	brge	.+82     	; 0x2124 <LCD_Char+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e2       	ldi	r20, 0x20	; 32
    20e0:	51 e4       	ldi	r21, 0x41	; 65
    20e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	bc 01       	movw	r22, r24
    20ec:	cd 01       	movw	r24, r26
    20ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	9e 83       	std	Y+6, r25	; 0x06
    20f8:	8d 83       	std	Y+5, r24	; 0x05
    20fa:	0f c0       	rjmp	.+30     	; 0x211a <LCD_Char+0x698>
    20fc:	88 ec       	ldi	r24, 0xC8	; 200
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	9c 83       	std	Y+4, r25	; 0x04
    2102:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	9c 81       	ldd	r25, Y+4	; 0x04
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <LCD_Char+0x686>
    210c:	9c 83       	std	Y+4, r25	; 0x04
    210e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2110:	8d 81       	ldd	r24, Y+5	; 0x05
    2112:	9e 81       	ldd	r25, Y+6	; 0x06
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	9e 83       	std	Y+6, r25	; 0x06
    2118:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	9e 81       	ldd	r25, Y+6	; 0x06
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	69 f7       	brne	.-38     	; 0x20fc <LCD_Char+0x67a>
    2122:	14 c0       	rjmp	.+40     	; 0x214c <LCD_Char+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2124:	6f 81       	ldd	r22, Y+7	; 0x07
    2126:	78 85       	ldd	r23, Y+8	; 0x08
    2128:	89 85       	ldd	r24, Y+9	; 0x09
    212a:	9a 85       	ldd	r25, Y+10	; 0x0a
    212c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	9e 83       	std	Y+6, r25	; 0x06
    2136:	8d 83       	std	Y+5, r24	; 0x05
    2138:	8d 81       	ldd	r24, Y+5	; 0x05
    213a:	9e 81       	ldd	r25, Y+6	; 0x06
    213c:	9a 83       	std	Y+2, r25	; 0x02
    213e:	89 83       	std	Y+1, r24	; 0x01
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	9a 81       	ldd	r25, Y+2	; 0x02
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <LCD_Char+0x6c2>
    2148:	9a 83       	std	Y+2, r25	; 0x02
    214a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    214c:	c9 5a       	subi	r28, 0xA9	; 169
    214e:	df 4f       	sbci	r29, 0xFF	; 255
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	f8 94       	cli
    2154:	de bf       	out	0x3e, r29	; 62
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	cd bf       	out	0x3d, r28	; 61
    215a:	cf 91       	pop	r28
    215c:	df 91       	pop	r29
    215e:	1f 91       	pop	r17
    2160:	0f 91       	pop	r16
    2162:	08 95       	ret

00002164 <LCD_Init>:

void LCD_Init (void)			/* LCD Initialize function */
{
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	6c 97       	sbiw	r28, 0x1c	; 28
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	f8 94       	cli
    2172:	de bf       	out	0x3e, r29	; 62
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	cd bf       	out	0x3d, r28	; 61
	LCD_Dir = 0xFF;			/* Make LCD port direction as o/p */
    2178:	e4 e3       	ldi	r30, 0x34	; 52
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	8f ef       	ldi	r24, 0xFF	; 255
    217e:	80 83       	st	Z, r24
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	a0 ef       	ldi	r26, 0xF0	; 240
    2186:	b1 e4       	ldi	r27, 0x41	; 65
    2188:	89 8f       	std	Y+25, r24	; 0x19
    218a:	9a 8f       	std	Y+26, r25	; 0x1a
    218c:	ab 8f       	std	Y+27, r26	; 0x1b
    218e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2190:	69 8d       	ldd	r22, Y+25	; 0x19
    2192:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2194:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2196:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	4a ef       	ldi	r20, 0xFA	; 250
    219e:	54 e4       	ldi	r21, 0x44	; 68
    21a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	8d 8b       	std	Y+21, r24	; 0x15
    21aa:	9e 8b       	std	Y+22, r25	; 0x16
    21ac:	af 8b       	std	Y+23, r26	; 0x17
    21ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21b0:	6d 89       	ldd	r22, Y+21	; 0x15
    21b2:	7e 89       	ldd	r23, Y+22	; 0x16
    21b4:	8f 89       	ldd	r24, Y+23	; 0x17
    21b6:	98 8d       	ldd	r25, Y+24	; 0x18
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e8       	ldi	r20, 0x80	; 128
    21be:	5f e3       	ldi	r21, 0x3F	; 63
    21c0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21c4:	88 23       	and	r24, r24
    21c6:	2c f4       	brge	.+10     	; 0x21d2 <LCD_Init+0x6e>
		__ticks = 1;
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	9c 8b       	std	Y+20, r25	; 0x14
    21ce:	8b 8b       	std	Y+19, r24	; 0x13
    21d0:	3f c0       	rjmp	.+126    	; 0x2250 <LCD_Init+0xec>
	else if (__tmp > 65535)
    21d2:	6d 89       	ldd	r22, Y+21	; 0x15
    21d4:	7e 89       	ldd	r23, Y+22	; 0x16
    21d6:	8f 89       	ldd	r24, Y+23	; 0x17
    21d8:	98 8d       	ldd	r25, Y+24	; 0x18
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	3f ef       	ldi	r19, 0xFF	; 255
    21de:	4f e7       	ldi	r20, 0x7F	; 127
    21e0:	57 e4       	ldi	r21, 0x47	; 71
    21e2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21e6:	18 16       	cp	r1, r24
    21e8:	4c f5       	brge	.+82     	; 0x223c <LCD_Init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ea:	69 8d       	ldd	r22, Y+25	; 0x19
    21ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e2       	ldi	r20, 0x20	; 32
    21f8:	51 e4       	ldi	r21, 0x41	; 65
    21fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	bc 01       	movw	r22, r24
    2204:	cd 01       	movw	r24, r26
    2206:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	9c 8b       	std	Y+20, r25	; 0x14
    2210:	8b 8b       	std	Y+19, r24	; 0x13
    2212:	0f c0       	rjmp	.+30     	; 0x2232 <LCD_Init+0xce>
    2214:	88 ec       	ldi	r24, 0xC8	; 200
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	9a 8b       	std	Y+18, r25	; 0x12
    221a:	89 8b       	std	Y+17, r24	; 0x11
    221c:	89 89       	ldd	r24, Y+17	; 0x11
    221e:	9a 89       	ldd	r25, Y+18	; 0x12
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	f1 f7       	brne	.-4      	; 0x2220 <LCD_Init+0xbc>
    2224:	9a 8b       	std	Y+18, r25	; 0x12
    2226:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2228:	8b 89       	ldd	r24, Y+19	; 0x13
    222a:	9c 89       	ldd	r25, Y+20	; 0x14
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	9c 8b       	std	Y+20, r25	; 0x14
    2230:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2232:	8b 89       	ldd	r24, Y+19	; 0x13
    2234:	9c 89       	ldd	r25, Y+20	; 0x14
    2236:	00 97       	sbiw	r24, 0x00	; 0
    2238:	69 f7       	brne	.-38     	; 0x2214 <LCD_Init+0xb0>
    223a:	14 c0       	rjmp	.+40     	; 0x2264 <LCD_Init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    223c:	6d 89       	ldd	r22, Y+21	; 0x15
    223e:	7e 89       	ldd	r23, Y+22	; 0x16
    2240:	8f 89       	ldd	r24, Y+23	; 0x17
    2242:	98 8d       	ldd	r25, Y+24	; 0x18
    2244:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	9c 8b       	std	Y+20, r25	; 0x14
    224e:	8b 8b       	std	Y+19, r24	; 0x13
    2250:	8b 89       	ldd	r24, Y+19	; 0x13
    2252:	9c 89       	ldd	r25, Y+20	; 0x14
    2254:	98 8b       	std	Y+16, r25	; 0x10
    2256:	8f 87       	std	Y+15, r24	; 0x0f
    2258:	8f 85       	ldd	r24, Y+15	; 0x0f
    225a:	98 89       	ldd	r25, Y+16	; 0x10
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <LCD_Init+0xf8>
    2260:	98 8b       	std	Y+16, r25	; 0x10
    2262:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(30);			/* LCD Power ON delay always >15ms */


	LCD_Command(0x01);              /* Clear display screen*/
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <LCD_Command>
	LCD_Command(0x02);       /* return cursor to first position on first line */
    226a:	82 e0       	ldi	r24, 0x02	; 2
    226c:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
    2270:	88 e2       	ldi	r24, 0x28	; 40
    2272:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
    2276:	8c e0       	ldi	r24, 0x0C	; 12
    2278:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
    227c:	86 e0       	ldi	r24, 0x06	; 6
    227e:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <LCD_Command>
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	a0 e0       	ldi	r26, 0x00	; 0
    2288:	b0 e4       	ldi	r27, 0x40	; 64
    228a:	8b 87       	std	Y+11, r24	; 0x0b
    228c:	9c 87       	std	Y+12, r25	; 0x0c
    228e:	ad 87       	std	Y+13, r26	; 0x0d
    2290:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2292:	6b 85       	ldd	r22, Y+11	; 0x0b
    2294:	7c 85       	ldd	r23, Y+12	; 0x0c
    2296:	8d 85       	ldd	r24, Y+13	; 0x0d
    2298:	9e 85       	ldd	r25, Y+14	; 0x0e
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4a ef       	ldi	r20, 0xFA	; 250
    22a0:	54 e4       	ldi	r21, 0x44	; 68
    22a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	8f 83       	std	Y+7, r24	; 0x07
    22ac:	98 87       	std	Y+8, r25	; 0x08
    22ae:	a9 87       	std	Y+9, r26	; 0x09
    22b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22b2:	6f 81       	ldd	r22, Y+7	; 0x07
    22b4:	78 85       	ldd	r23, Y+8	; 0x08
    22b6:	89 85       	ldd	r24, Y+9	; 0x09
    22b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e8       	ldi	r20, 0x80	; 128
    22c0:	5f e3       	ldi	r21, 0x3F	; 63
    22c2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22c6:	88 23       	and	r24, r24
    22c8:	2c f4       	brge	.+10     	; 0x22d4 <LCD_Init+0x170>
		__ticks = 1;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	9e 83       	std	Y+6, r25	; 0x06
    22d0:	8d 83       	std	Y+5, r24	; 0x05
    22d2:	3f c0       	rjmp	.+126    	; 0x2352 <LCD_Init+0x1ee>
	else if (__tmp > 65535)
    22d4:	6f 81       	ldd	r22, Y+7	; 0x07
    22d6:	78 85       	ldd	r23, Y+8	; 0x08
    22d8:	89 85       	ldd	r24, Y+9	; 0x09
    22da:	9a 85       	ldd	r25, Y+10	; 0x0a
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	3f ef       	ldi	r19, 0xFF	; 255
    22e0:	4f e7       	ldi	r20, 0x7F	; 127
    22e2:	57 e4       	ldi	r21, 0x47	; 71
    22e4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22e8:	18 16       	cp	r1, r24
    22ea:	4c f5       	brge	.+82     	; 0x233e <LCD_Init+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e2       	ldi	r20, 0x20	; 32
    22fa:	51 e4       	ldi	r21, 0x41	; 65
    22fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	bc 01       	movw	r22, r24
    2306:	cd 01       	movw	r24, r26
    2308:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	9e 83       	std	Y+6, r25	; 0x06
    2312:	8d 83       	std	Y+5, r24	; 0x05
    2314:	0f c0       	rjmp	.+30     	; 0x2334 <LCD_Init+0x1d0>
    2316:	88 ec       	ldi	r24, 0xC8	; 200
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	9c 83       	std	Y+4, r25	; 0x04
    231c:	8b 83       	std	Y+3, r24	; 0x03
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	9c 81       	ldd	r25, Y+4	; 0x04
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	f1 f7       	brne	.-4      	; 0x2322 <LCD_Init+0x1be>
    2326:	9c 83       	std	Y+4, r25	; 0x04
    2328:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232a:	8d 81       	ldd	r24, Y+5	; 0x05
    232c:	9e 81       	ldd	r25, Y+6	; 0x06
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	9e 83       	std	Y+6, r25	; 0x06
    2332:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2334:	8d 81       	ldd	r24, Y+5	; 0x05
    2336:	9e 81       	ldd	r25, Y+6	; 0x06
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	69 f7       	brne	.-38     	; 0x2316 <LCD_Init+0x1b2>
    233c:	14 c0       	rjmp	.+40     	; 0x2366 <LCD_Init+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233e:	6f 81       	ldd	r22, Y+7	; 0x07
    2340:	78 85       	ldd	r23, Y+8	; 0x08
    2342:	89 85       	ldd	r24, Y+9	; 0x09
    2344:	9a 85       	ldd	r25, Y+10	; 0x0a
    2346:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	9e 83       	std	Y+6, r25	; 0x06
    2350:	8d 83       	std	Y+5, r24	; 0x05
    2352:	8d 81       	ldd	r24, Y+5	; 0x05
    2354:	9e 81       	ldd	r25, Y+6	; 0x06
    2356:	9a 83       	std	Y+2, r25	; 0x02
    2358:	89 83       	std	Y+1, r24	; 0x01
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	9a 81       	ldd	r25, Y+2	; 0x02
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	f1 f7       	brne	.-4      	; 0x235e <LCD_Init+0x1fa>
    2362:	9a 83       	std	Y+2, r25	; 0x02
    2364:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);
}
    2366:	6c 96       	adiw	r28, 0x1c	; 28
    2368:	0f b6       	in	r0, 0x3f	; 63
    236a:	f8 94       	cli
    236c:	de bf       	out	0x3e, r29	; 62
    236e:	0f be       	out	0x3f, r0	; 63
    2370:	cd bf       	out	0x3d, r28	; 61
    2372:	cf 91       	pop	r28
    2374:	df 91       	pop	r29
    2376:	08 95       	ret

00002378 <LCD_String>:


void LCD_String (char *str)		/* Send string to LCD function */
{
    2378:	df 93       	push	r29
    237a:	cf 93       	push	r28
    237c:	00 d0       	rcall	.+0      	; 0x237e <LCD_String+0x6>
    237e:	00 d0       	rcall	.+0      	; 0x2380 <LCD_String+0x8>
    2380:	cd b7       	in	r28, 0x3d	; 61
    2382:	de b7       	in	r29, 0x3e	; 62
    2384:	9c 83       	std	Y+4, r25	; 0x04
    2386:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    2388:	1a 82       	std	Y+2, r1	; 0x02
    238a:	19 82       	std	Y+1, r1	; 0x01
    238c:	0f c0       	rjmp	.+30     	; 0x23ac <LCD_String+0x34>
	{
		LCD_Char (str[i]);
    238e:	29 81       	ldd	r18, Y+1	; 0x01
    2390:	3a 81       	ldd	r19, Y+2	; 0x02
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	fc 01       	movw	r30, r24
    2398:	e2 0f       	add	r30, r18
    239a:	f3 1f       	adc	r31, r19
    239c:	80 81       	ld	r24, Z
    239e:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_Char>


void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	9a 81       	ldd	r25, Y+2	; 0x02
    23a6:	01 96       	adiw	r24, 0x01	; 1
    23a8:	9a 83       	std	Y+2, r25	; 0x02
    23aa:	89 83       	std	Y+1, r24	; 0x01
    23ac:	29 81       	ldd	r18, Y+1	; 0x01
    23ae:	3a 81       	ldd	r19, Y+2	; 0x02
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	9c 81       	ldd	r25, Y+4	; 0x04
    23b4:	fc 01       	movw	r30, r24
    23b6:	e2 0f       	add	r30, r18
    23b8:	f3 1f       	adc	r31, r19
    23ba:	80 81       	ld	r24, Z
    23bc:	88 23       	and	r24, r24
    23be:	39 f7       	brne	.-50     	; 0x238e <LCD_String+0x16>
	{
		LCD_Char (str[i]);
	}
}
    23c0:	0f 90       	pop	r0
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	cf 91       	pop	r28
    23ca:	df 91       	pop	r29
    23cc:	08 95       	ret

000023ce <Gotoxy>:

void Gotoxy (char Y,char X)
{
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	00 d0       	rcall	.+0      	; 0x23d4 <Gotoxy+0x6>
    23d4:	00 d0       	rcall	.+0      	; 0x23d6 <Gotoxy+0x8>
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
    23da:	89 83       	std	Y+1, r24	; 0x01
    23dc:	6a 83       	std	Y+2, r22	; 0x02
	if (X>0 && X<=16)
    23de:	8a 81       	ldd	r24, Y+2	; 0x02
    23e0:	88 23       	and	r24, r24
    23e2:	e1 f0       	breq	.+56     	; 0x241c <Gotoxy+0x4e>
    23e4:	8a 81       	ldd	r24, Y+2	; 0x02
    23e6:	81 31       	cpi	r24, 0x11	; 17
    23e8:	c8 f4       	brcc	.+50     	; 0x241c <Gotoxy+0x4e>
	{
	    switch(Y)
    23ea:	89 81       	ldd	r24, Y+1	; 0x01
    23ec:	28 2f       	mov	r18, r24
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	3c 83       	std	Y+4, r19	; 0x04
    23f2:	2b 83       	std	Y+3, r18	; 0x03
    23f4:	8b 81       	ldd	r24, Y+3	; 0x03
    23f6:	9c 81       	ldd	r25, Y+4	; 0x04
    23f8:	81 30       	cpi	r24, 0x01	; 1
    23fa:	91 05       	cpc	r25, r1
    23fc:	31 f0       	breq	.+12     	; 0x240a <Gotoxy+0x3c>
    23fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2400:	3c 81       	ldd	r19, Y+4	; 0x04
    2402:	22 30       	cpi	r18, 0x02	; 2
    2404:	31 05       	cpc	r19, r1
    2406:	31 f0       	breq	.+12     	; 0x2414 <Gotoxy+0x46>
    2408:	09 c0       	rjmp	.+18     	; 0x241c <Gotoxy+0x4e>
	    {
		    case 1:
		    	LCD_Command(X+127);
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	81 58       	subi	r24, 0x81	; 129
    240e:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <LCD_Command>
    2412:	04 c0       	rjmp	.+8      	; 0x241c <Gotoxy+0x4e>
		    break;
		    case 2:
		    	LCD_Command(X+191);
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
    2416:	81 54       	subi	r24, 0x41	; 65
    2418:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <LCD_Command>
		    break;
		    default:
		    break;
	    }
	}
}
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	cf 91       	pop	r28
    2426:	df 91       	pop	r29
    2428:	08 95       	ret

0000242a <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
    242a:	df 93       	push	r29
    242c:	cf 93       	push	r28
    242e:	00 d0       	rcall	.+0      	; 0x2430 <LCD_String_xy+0x6>
    2430:	00 d0       	rcall	.+0      	; 0x2432 <LCD_String_xy+0x8>
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	89 83       	std	Y+1, r24	; 0x01
    2438:	6a 83       	std	Y+2, r22	; 0x02
    243a:	5c 83       	std	Y+4, r21	; 0x04
    243c:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 0 && pos<16)
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	88 23       	and	r24, r24
    2442:	49 f4       	brne	.+18     	; 0x2456 <LCD_String_xy+0x2c>
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	80 31       	cpi	r24, 0x10	; 16
    2448:	30 f4       	brcc	.+12     	; 0x2456 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	8f 70       	andi	r24, 0x0F	; 15
    244e:	80 68       	ori	r24, 0x80	; 128
    2450:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <LCD_Command>
    2454:	0b c0       	rjmp	.+22     	; 0x246c <LCD_String_xy+0x42>
	else if (row == 1 && pos<16)
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	81 30       	cpi	r24, 0x01	; 1
    245a:	41 f4       	brne	.+16     	; 0x246c <LCD_String_xy+0x42>
    245c:	8a 81       	ldd	r24, Y+2	; 0x02
    245e:	80 31       	cpi	r24, 0x10	; 16
    2460:	28 f4       	brcc	.+10     	; 0x246c <LCD_String_xy+0x42>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    2462:	8a 81       	ldd	r24, Y+2	; 0x02
    2464:	8f 70       	andi	r24, 0x0F	; 15
    2466:	80 6c       	ori	r24, 0xC0	; 192
    2468:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	9c 81       	ldd	r25, Y+4	; 0x04
    2470:	0e 94 bc 11 	call	0x2378	; 0x2378 <LCD_String>
}
    2474:	0f 90       	pop	r0
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	cf 91       	pop	r28
    247e:	df 91       	pop	r29
    2480:	08 95       	ret

00002482 <LCD_Clear>:

void LCD_Clear()
{
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	2e 97       	sbiw	r28, 0x0e	; 14
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	f8 94       	cli
    2490:	de bf       	out	0x3e, r29	; 62
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	cd bf       	out	0x3d, r28	; 61
	LCD_Command (0x01);		/* Clear display */
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <LCD_Command>
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	a0 e0       	ldi	r26, 0x00	; 0
    24a2:	b0 e4       	ldi	r27, 0x40	; 64
    24a4:	8b 87       	std	Y+11, r24	; 0x0b
    24a6:	9c 87       	std	Y+12, r25	; 0x0c
    24a8:	ad 87       	std	Y+13, r26	; 0x0d
    24aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    24b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	4a ef       	ldi	r20, 0xFA	; 250
    24ba:	54 e4       	ldi	r21, 0x44	; 68
    24bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24c0:	dc 01       	movw	r26, r24
    24c2:	cb 01       	movw	r24, r22
    24c4:	8f 83       	std	Y+7, r24	; 0x07
    24c6:	98 87       	std	Y+8, r25	; 0x08
    24c8:	a9 87       	std	Y+9, r26	; 0x09
    24ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24cc:	6f 81       	ldd	r22, Y+7	; 0x07
    24ce:	78 85       	ldd	r23, Y+8	; 0x08
    24d0:	89 85       	ldd	r24, Y+9	; 0x09
    24d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e8       	ldi	r20, 0x80	; 128
    24da:	5f e3       	ldi	r21, 0x3F	; 63
    24dc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24e0:	88 23       	and	r24, r24
    24e2:	2c f4       	brge	.+10     	; 0x24ee <LCD_Clear+0x6c>
		__ticks = 1;
    24e4:	81 e0       	ldi	r24, 0x01	; 1
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	9e 83       	std	Y+6, r25	; 0x06
    24ea:	8d 83       	std	Y+5, r24	; 0x05
    24ec:	3f c0       	rjmp	.+126    	; 0x256c <LCD_Clear+0xea>
	else if (__tmp > 65535)
    24ee:	6f 81       	ldd	r22, Y+7	; 0x07
    24f0:	78 85       	ldd	r23, Y+8	; 0x08
    24f2:	89 85       	ldd	r24, Y+9	; 0x09
    24f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	3f ef       	ldi	r19, 0xFF	; 255
    24fa:	4f e7       	ldi	r20, 0x7F	; 127
    24fc:	57 e4       	ldi	r21, 0x47	; 71
    24fe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2502:	18 16       	cp	r1, r24
    2504:	4c f5       	brge	.+82     	; 0x2558 <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2506:	6b 85       	ldd	r22, Y+11	; 0x0b
    2508:	7c 85       	ldd	r23, Y+12	; 0x0c
    250a:	8d 85       	ldd	r24, Y+13	; 0x0d
    250c:	9e 85       	ldd	r25, Y+14	; 0x0e
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e2       	ldi	r20, 0x20	; 32
    2514:	51 e4       	ldi	r21, 0x41	; 65
    2516:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	bc 01       	movw	r22, r24
    2520:	cd 01       	movw	r24, r26
    2522:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	9e 83       	std	Y+6, r25	; 0x06
    252c:	8d 83       	std	Y+5, r24	; 0x05
    252e:	0f c0       	rjmp	.+30     	; 0x254e <LCD_Clear+0xcc>
    2530:	88 ec       	ldi	r24, 0xC8	; 200
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	9c 83       	std	Y+4, r25	; 0x04
    2536:	8b 83       	std	Y+3, r24	; 0x03
    2538:	8b 81       	ldd	r24, Y+3	; 0x03
    253a:	9c 81       	ldd	r25, Y+4	; 0x04
    253c:	01 97       	sbiw	r24, 0x01	; 1
    253e:	f1 f7       	brne	.-4      	; 0x253c <LCD_Clear+0xba>
    2540:	9c 83       	std	Y+4, r25	; 0x04
    2542:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2544:	8d 81       	ldd	r24, Y+5	; 0x05
    2546:	9e 81       	ldd	r25, Y+6	; 0x06
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	9e 83       	std	Y+6, r25	; 0x06
    254c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254e:	8d 81       	ldd	r24, Y+5	; 0x05
    2550:	9e 81       	ldd	r25, Y+6	; 0x06
    2552:	00 97       	sbiw	r24, 0x00	; 0
    2554:	69 f7       	brne	.-38     	; 0x2530 <LCD_Clear+0xae>
    2556:	14 c0       	rjmp	.+40     	; 0x2580 <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2558:	6f 81       	ldd	r22, Y+7	; 0x07
    255a:	78 85       	ldd	r23, Y+8	; 0x08
    255c:	89 85       	ldd	r24, Y+9	; 0x09
    255e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2560:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	9e 83       	std	Y+6, r25	; 0x06
    256a:	8d 83       	std	Y+5, r24	; 0x05
    256c:	8d 81       	ldd	r24, Y+5	; 0x05
    256e:	9e 81       	ldd	r25, Y+6	; 0x06
    2570:	9a 83       	std	Y+2, r25	; 0x02
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	9a 81       	ldd	r25, Y+2	; 0x02
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	f1 f7       	brne	.-4      	; 0x2578 <LCD_Clear+0xf6>
    257c:	9a 83       	std	Y+2, r25	; 0x02
    257e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
    2580:	80 e8       	ldi	r24, 0x80	; 128
    2582:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <LCD_Command>
}
    2586:	2e 96       	adiw	r28, 0x0e	; 14
    2588:	0f b6       	in	r0, 0x3f	; 63
    258a:	f8 94       	cli
    258c:	de bf       	out	0x3e, r29	; 62
    258e:	0f be       	out	0x3f, r0	; 63
    2590:	cd bf       	out	0x3d, r28	; 61
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <LCD_CreateCustomCharacter>:

void LCD_CreateCustomCharacter(unsigned char *Pattern,const char cLocation)
{
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	00 d0       	rcall	.+0      	; 0x259e <LCD_CreateCustomCharacter+0x6>
    259e:	00 d0       	rcall	.+0      	; 0x25a0 <LCD_CreateCustomCharacter+0x8>
    25a0:	0f 92       	push	r0
    25a2:	cd b7       	in	r28, 0x3d	; 61
    25a4:	de b7       	in	r29, 0x3e	; 62
    25a6:	9c 83       	std	Y+4, r25	; 0x04
    25a8:	8b 83       	std	Y+3, r24	; 0x03
    25aa:	6d 83       	std	Y+5, r22	; 0x05
	int iLoop=0;
    25ac:	1a 82       	std	Y+2, r1	; 0x02
    25ae:	19 82       	std	Y+1, r1	; 0x01

	LCD_Command(0x40+(cLocation*8)); //Send the Address of CGRAM
    25b0:	8d 81       	ldd	r24, Y+5	; 0x05
    25b2:	88 2f       	mov	r24, r24
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	08 96       	adiw	r24, 0x08	; 8
    25b8:	88 0f       	add	r24, r24
    25ba:	99 1f       	adc	r25, r25
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	88 0f       	add	r24, r24
    25c2:	99 1f       	adc	r25, r25
    25c4:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <LCD_Command>
	for(iLoop=0;iLoop<8;iLoop++)
    25c8:	1a 82       	std	Y+2, r1	; 0x02
    25ca:	19 82       	std	Y+1, r1	; 0x01
    25cc:	0f c0       	rjmp	.+30     	; 0x25ec <LCD_CreateCustomCharacter+0x54>
	LCD_Char(Pattern[iLoop]); //Pass the bytes of pattern on LCD
    25ce:	29 81       	ldd	r18, Y+1	; 0x01
    25d0:	3a 81       	ldd	r19, Y+2	; 0x02
    25d2:	8b 81       	ldd	r24, Y+3	; 0x03
    25d4:	9c 81       	ldd	r25, Y+4	; 0x04
    25d6:	fc 01       	movw	r30, r24
    25d8:	e2 0f       	add	r30, r18
    25da:	f3 1f       	adc	r31, r19
    25dc:	80 81       	ld	r24, Z
    25de:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <LCD_Char>
void LCD_CreateCustomCharacter(unsigned char *Pattern,const char cLocation)
{
	int iLoop=0;

	LCD_Command(0x40+(cLocation*8)); //Send the Address of CGRAM
	for(iLoop=0;iLoop<8;iLoop++)
    25e2:	89 81       	ldd	r24, Y+1	; 0x01
    25e4:	9a 81       	ldd	r25, Y+2	; 0x02
    25e6:	01 96       	adiw	r24, 0x01	; 1
    25e8:	9a 83       	std	Y+2, r25	; 0x02
    25ea:	89 83       	std	Y+1, r24	; 0x01
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	9a 81       	ldd	r25, Y+2	; 0x02
    25f0:	88 30       	cpi	r24, 0x08	; 8
    25f2:	91 05       	cpc	r25, r1
    25f4:	64 f3       	brlt	.-40     	; 0x25ce <LCD_CreateCustomCharacter+0x36>
	LCD_Char(Pattern[iLoop]); //Pass the bytes of pattern on LCD
}
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <main>:
#define F_CPU 8000000UL
#include "avr/delay.h"


void main(void)
{
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	00 d0       	rcall	.+0      	; 0x260c <main+0x6>
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
  STEPPER_vidInit();
    2610:	0e 94 2d 13 	call	0x265a	; 0x265a <STEPPER_vidInit>
  LCD_Init();
    2614:	0e 94 b2 10 	call	0x2164	; 0x2164 <LCD_Init>
  Gotoxy(1,2);
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	62 e0       	ldi	r22, 0x02	; 2
    261c:	0e 94 e7 11 	call	0x23ce	; 0x23ce <Gotoxy>
   LCD_String(" 360 degree ");
    2620:	80 e6       	ldi	r24, 0x60	; 96
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	0e 94 bc 11 	call	0x2378	; 0x2378 <LCD_String>
  while(1)
	{
	  Gotoxy(1,2);
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	62 e0       	ldi	r22, 0x02	; 2
    262c:	0e 94 e7 11 	call	0x23ce	; 0x23ce <Gotoxy>
	   LCD_String(" 360 degree ");
    2630:	80 e6       	ldi	r24, 0x60	; 96
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	0e 94 bc 11 	call	0x2378	; 0x2378 <LCD_String>
    for(u16 i=0 ; i<512 ;i++)
    2638:	1a 82       	std	Y+2, r1	; 0x02
    263a:	19 82       	std	Y+1, r1	; 0x01
    263c:	07 c0       	rjmp	.+14     	; 0x264c <main+0x46>
   {
    	STEPPER_vidFULLstepCW();
    263e:	0e 94 38 13 	call	0x2670	; 0x2670 <STEPPER_vidFULLstepCW>
   LCD_String(" 360 degree ");
  while(1)
	{
	  Gotoxy(1,2);
	   LCD_String(" 360 degree ");
    for(u16 i=0 ; i<512 ;i++)
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	9a 81       	ldd	r25, Y+2	; 0x02
    2646:	01 96       	adiw	r24, 0x01	; 1
    2648:	9a 83       	std	Y+2, r25	; 0x02
    264a:	89 83       	std	Y+1, r24	; 0x01
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	9a 81       	ldd	r25, Y+2	; 0x02
    2650:	22 e0       	ldi	r18, 0x02	; 2
    2652:	80 30       	cpi	r24, 0x00	; 0
    2654:	92 07       	cpc	r25, r18
    2656:	98 f3       	brcs	.-26     	; 0x263e <main+0x38>
    2658:	e7 cf       	rjmp	.-50     	; 0x2628 <main+0x22>

0000265a <STEPPER_vidInit>:


#define coilport b

void STEPPER_vidInit(void)
{
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	cd b7       	in	r28, 0x3d	; 61
    2660:	de b7       	in	r29, 0x3e	; 62
DIO_vidSetPortDir(coilport,0x0f);
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	6f e0       	ldi	r22, 0x0F	; 15
    2666:	0e 94 4e 09 	call	0x129c	; 0x129c <DIO_vidSetPortDir>
}
    266a:	cf 91       	pop	r28
    266c:	df 91       	pop	r29
    266e:	08 95       	ret

00002670 <STEPPER_vidFULLstepCW>:
void STEPPER_vidFULLstepCW(void)
{  DIO_vidWritePortValue(coilport,0b00000001);
    2670:	df 93       	push	r29
    2672:	cf 93       	push	r28
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	e8 97       	sbiw	r28, 0x38	; 56
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	f8 94       	cli
    267e:	de bf       	out	0x3e, r29	; 62
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	cd bf       	out	0x3d, r28	; 61
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	61 e0       	ldi	r22, 0x01	; 1
    2688:	0e 94 8f 09 	call	0x131e	; 0x131e <DIO_vidWritePortValue>
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	a0 e3       	ldi	r26, 0x30	; 48
    2692:	b1 e4       	ldi	r27, 0x41	; 65
    2694:	8d ab       	std	Y+53, r24	; 0x35
    2696:	9e ab       	std	Y+54, r25	; 0x36
    2698:	af ab       	std	Y+55, r26	; 0x37
    269a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269c:	6d a9       	ldd	r22, Y+53	; 0x35
    269e:	7e a9       	ldd	r23, Y+54	; 0x36
    26a0:	8f a9       	ldd	r24, Y+55	; 0x37
    26a2:	98 ad       	ldd	r25, Y+56	; 0x38
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	4a ef       	ldi	r20, 0xFA	; 250
    26aa:	54 e4       	ldi	r21, 0x44	; 68
    26ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	89 ab       	std	Y+49, r24	; 0x31
    26b6:	9a ab       	std	Y+50, r25	; 0x32
    26b8:	ab ab       	std	Y+51, r26	; 0x33
    26ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26bc:	69 a9       	ldd	r22, Y+49	; 0x31
    26be:	7a a9       	ldd	r23, Y+50	; 0x32
    26c0:	8b a9       	ldd	r24, Y+51	; 0x33
    26c2:	9c a9       	ldd	r25, Y+52	; 0x34
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e8       	ldi	r20, 0x80	; 128
    26ca:	5f e3       	ldi	r21, 0x3F	; 63
    26cc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26d0:	88 23       	and	r24, r24
    26d2:	2c f4       	brge	.+10     	; 0x26de <STEPPER_vidFULLstepCW+0x6e>
		__ticks = 1;
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	98 ab       	std	Y+48, r25	; 0x30
    26da:	8f a7       	std	Y+47, r24	; 0x2f
    26dc:	3f c0       	rjmp	.+126    	; 0x275c <STEPPER_vidFULLstepCW+0xec>
	else if (__tmp > 65535)
    26de:	69 a9       	ldd	r22, Y+49	; 0x31
    26e0:	7a a9       	ldd	r23, Y+50	; 0x32
    26e2:	8b a9       	ldd	r24, Y+51	; 0x33
    26e4:	9c a9       	ldd	r25, Y+52	; 0x34
    26e6:	20 e0       	ldi	r18, 0x00	; 0
    26e8:	3f ef       	ldi	r19, 0xFF	; 255
    26ea:	4f e7       	ldi	r20, 0x7F	; 127
    26ec:	57 e4       	ldi	r21, 0x47	; 71
    26ee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26f2:	18 16       	cp	r1, r24
    26f4:	4c f5       	brge	.+82     	; 0x2748 <STEPPER_vidFULLstepCW+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f6:	6d a9       	ldd	r22, Y+53	; 0x35
    26f8:	7e a9       	ldd	r23, Y+54	; 0x36
    26fa:	8f a9       	ldd	r24, Y+55	; 0x37
    26fc:	98 ad       	ldd	r25, Y+56	; 0x38
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e2       	ldi	r20, 0x20	; 32
    2704:	51 e4       	ldi	r21, 0x41	; 65
    2706:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	bc 01       	movw	r22, r24
    2710:	cd 01       	movw	r24, r26
    2712:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	98 ab       	std	Y+48, r25	; 0x30
    271c:	8f a7       	std	Y+47, r24	; 0x2f
    271e:	0f c0       	rjmp	.+30     	; 0x273e <STEPPER_vidFULLstepCW+0xce>
    2720:	88 ec       	ldi	r24, 0xC8	; 200
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	9e a7       	std	Y+46, r25	; 0x2e
    2726:	8d a7       	std	Y+45, r24	; 0x2d
    2728:	8d a5       	ldd	r24, Y+45	; 0x2d
    272a:	9e a5       	ldd	r25, Y+46	; 0x2e
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <STEPPER_vidFULLstepCW+0xbc>
    2730:	9e a7       	std	Y+46, r25	; 0x2e
    2732:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2734:	8f a5       	ldd	r24, Y+47	; 0x2f
    2736:	98 a9       	ldd	r25, Y+48	; 0x30
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	98 ab       	std	Y+48, r25	; 0x30
    273c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2740:	98 a9       	ldd	r25, Y+48	; 0x30
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	69 f7       	brne	.-38     	; 0x2720 <STEPPER_vidFULLstepCW+0xb0>
    2746:	14 c0       	rjmp	.+40     	; 0x2770 <STEPPER_vidFULLstepCW+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2748:	69 a9       	ldd	r22, Y+49	; 0x31
    274a:	7a a9       	ldd	r23, Y+50	; 0x32
    274c:	8b a9       	ldd	r24, Y+51	; 0x33
    274e:	9c a9       	ldd	r25, Y+52	; 0x34
    2750:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	98 ab       	std	Y+48, r25	; 0x30
    275a:	8f a7       	std	Y+47, r24	; 0x2f
    275c:	8f a5       	ldd	r24, Y+47	; 0x2f
    275e:	98 a9       	ldd	r25, Y+48	; 0x30
    2760:	9c a7       	std	Y+44, r25	; 0x2c
    2762:	8b a7       	std	Y+43, r24	; 0x2b
    2764:	8b a5       	ldd	r24, Y+43	; 0x2b
    2766:	9c a5       	ldd	r25, Y+44	; 0x2c
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	f1 f7       	brne	.-4      	; 0x2768 <STEPPER_vidFULLstepCW+0xf8>
    276c:	9c a7       	std	Y+44, r25	; 0x2c
    276e:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(11);
  DIO_vidWritePortValue(coilport,0b00000010);
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	62 e0       	ldi	r22, 0x02	; 2
    2774:	0e 94 8f 09 	call	0x131e	; 0x131e <DIO_vidWritePortValue>
    2778:	80 e0       	ldi	r24, 0x00	; 0
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	a0 e3       	ldi	r26, 0x30	; 48
    277e:	b1 e4       	ldi	r27, 0x41	; 65
    2780:	8f a3       	std	Y+39, r24	; 0x27
    2782:	98 a7       	std	Y+40, r25	; 0x28
    2784:	a9 a7       	std	Y+41, r26	; 0x29
    2786:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2788:	6f a1       	ldd	r22, Y+39	; 0x27
    278a:	78 a5       	ldd	r23, Y+40	; 0x28
    278c:	89 a5       	ldd	r24, Y+41	; 0x29
    278e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	4a ef       	ldi	r20, 0xFA	; 250
    2796:	54 e4       	ldi	r21, 0x44	; 68
    2798:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    279c:	dc 01       	movw	r26, r24
    279e:	cb 01       	movw	r24, r22
    27a0:	8b a3       	std	Y+35, r24	; 0x23
    27a2:	9c a3       	std	Y+36, r25	; 0x24
    27a4:	ad a3       	std	Y+37, r26	; 0x25
    27a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27a8:	6b a1       	ldd	r22, Y+35	; 0x23
    27aa:	7c a1       	ldd	r23, Y+36	; 0x24
    27ac:	8d a1       	ldd	r24, Y+37	; 0x25
    27ae:	9e a1       	ldd	r25, Y+38	; 0x26
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	40 e8       	ldi	r20, 0x80	; 128
    27b6:	5f e3       	ldi	r21, 0x3F	; 63
    27b8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27bc:	88 23       	and	r24, r24
    27be:	2c f4       	brge	.+10     	; 0x27ca <STEPPER_vidFULLstepCW+0x15a>
		__ticks = 1;
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	9a a3       	std	Y+34, r25	; 0x22
    27c6:	89 a3       	std	Y+33, r24	; 0x21
    27c8:	3f c0       	rjmp	.+126    	; 0x2848 <STEPPER_vidFULLstepCW+0x1d8>
	else if (__tmp > 65535)
    27ca:	6b a1       	ldd	r22, Y+35	; 0x23
    27cc:	7c a1       	ldd	r23, Y+36	; 0x24
    27ce:	8d a1       	ldd	r24, Y+37	; 0x25
    27d0:	9e a1       	ldd	r25, Y+38	; 0x26
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	3f ef       	ldi	r19, 0xFF	; 255
    27d6:	4f e7       	ldi	r20, 0x7F	; 127
    27d8:	57 e4       	ldi	r21, 0x47	; 71
    27da:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27de:	18 16       	cp	r1, r24
    27e0:	4c f5       	brge	.+82     	; 0x2834 <STEPPER_vidFULLstepCW+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e2:	6f a1       	ldd	r22, Y+39	; 0x27
    27e4:	78 a5       	ldd	r23, Y+40	; 0x28
    27e6:	89 a5       	ldd	r24, Y+41	; 0x29
    27e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	40 e2       	ldi	r20, 0x20	; 32
    27f0:	51 e4       	ldi	r21, 0x41	; 65
    27f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	bc 01       	movw	r22, r24
    27fc:	cd 01       	movw	r24, r26
    27fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	9a a3       	std	Y+34, r25	; 0x22
    2808:	89 a3       	std	Y+33, r24	; 0x21
    280a:	0f c0       	rjmp	.+30     	; 0x282a <STEPPER_vidFULLstepCW+0x1ba>
    280c:	88 ec       	ldi	r24, 0xC8	; 200
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	98 a3       	std	Y+32, r25	; 0x20
    2812:	8f 8f       	std	Y+31, r24	; 0x1f
    2814:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2816:	98 a1       	ldd	r25, Y+32	; 0x20
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	f1 f7       	brne	.-4      	; 0x2818 <STEPPER_vidFULLstepCW+0x1a8>
    281c:	98 a3       	std	Y+32, r25	; 0x20
    281e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2820:	89 a1       	ldd	r24, Y+33	; 0x21
    2822:	9a a1       	ldd	r25, Y+34	; 0x22
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	9a a3       	std	Y+34, r25	; 0x22
    2828:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282a:	89 a1       	ldd	r24, Y+33	; 0x21
    282c:	9a a1       	ldd	r25, Y+34	; 0x22
    282e:	00 97       	sbiw	r24, 0x00	; 0
    2830:	69 f7       	brne	.-38     	; 0x280c <STEPPER_vidFULLstepCW+0x19c>
    2832:	14 c0       	rjmp	.+40     	; 0x285c <STEPPER_vidFULLstepCW+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2834:	6b a1       	ldd	r22, Y+35	; 0x23
    2836:	7c a1       	ldd	r23, Y+36	; 0x24
    2838:	8d a1       	ldd	r24, Y+37	; 0x25
    283a:	9e a1       	ldd	r25, Y+38	; 0x26
    283c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	9a a3       	std	Y+34, r25	; 0x22
    2846:	89 a3       	std	Y+33, r24	; 0x21
    2848:	89 a1       	ldd	r24, Y+33	; 0x21
    284a:	9a a1       	ldd	r25, Y+34	; 0x22
    284c:	9e 8f       	std	Y+30, r25	; 0x1e
    284e:	8d 8f       	std	Y+29, r24	; 0x1d
    2850:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2852:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2854:	01 97       	sbiw	r24, 0x01	; 1
    2856:	f1 f7       	brne	.-4      	; 0x2854 <STEPPER_vidFULLstepCW+0x1e4>
    2858:	9e 8f       	std	Y+30, r25	; 0x1e
    285a:	8d 8f       	std	Y+29, r24	; 0x1d
  _delay_ms(11);
    DIO_vidWritePortValue(coilport,0b00000100);
    285c:	81 e0       	ldi	r24, 0x01	; 1
    285e:	64 e0       	ldi	r22, 0x04	; 4
    2860:	0e 94 8f 09 	call	0x131e	; 0x131e <DIO_vidWritePortValue>
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	a0 e3       	ldi	r26, 0x30	; 48
    286a:	b1 e4       	ldi	r27, 0x41	; 65
    286c:	89 8f       	std	Y+25, r24	; 0x19
    286e:	9a 8f       	std	Y+26, r25	; 0x1a
    2870:	ab 8f       	std	Y+27, r26	; 0x1b
    2872:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2874:	69 8d       	ldd	r22, Y+25	; 0x19
    2876:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2878:	8b 8d       	ldd	r24, Y+27	; 0x1b
    287a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	4a ef       	ldi	r20, 0xFA	; 250
    2882:	54 e4       	ldi	r21, 0x44	; 68
    2884:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	8d 8b       	std	Y+21, r24	; 0x15
    288e:	9e 8b       	std	Y+22, r25	; 0x16
    2890:	af 8b       	std	Y+23, r26	; 0x17
    2892:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2894:	6d 89       	ldd	r22, Y+21	; 0x15
    2896:	7e 89       	ldd	r23, Y+22	; 0x16
    2898:	8f 89       	ldd	r24, Y+23	; 0x17
    289a:	98 8d       	ldd	r25, Y+24	; 0x18
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	40 e8       	ldi	r20, 0x80	; 128
    28a2:	5f e3       	ldi	r21, 0x3F	; 63
    28a4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28a8:	88 23       	and	r24, r24
    28aa:	2c f4       	brge	.+10     	; 0x28b6 <STEPPER_vidFULLstepCW+0x246>
		__ticks = 1;
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	9c 8b       	std	Y+20, r25	; 0x14
    28b2:	8b 8b       	std	Y+19, r24	; 0x13
    28b4:	3f c0       	rjmp	.+126    	; 0x2934 <STEPPER_vidFULLstepCW+0x2c4>
	else if (__tmp > 65535)
    28b6:	6d 89       	ldd	r22, Y+21	; 0x15
    28b8:	7e 89       	ldd	r23, Y+22	; 0x16
    28ba:	8f 89       	ldd	r24, Y+23	; 0x17
    28bc:	98 8d       	ldd	r25, Y+24	; 0x18
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	3f ef       	ldi	r19, 0xFF	; 255
    28c2:	4f e7       	ldi	r20, 0x7F	; 127
    28c4:	57 e4       	ldi	r21, 0x47	; 71
    28c6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28ca:	18 16       	cp	r1, r24
    28cc:	4c f5       	brge	.+82     	; 0x2920 <STEPPER_vidFULLstepCW+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ce:	69 8d       	ldd	r22, Y+25	; 0x19
    28d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	40 e2       	ldi	r20, 0x20	; 32
    28dc:	51 e4       	ldi	r21, 0x41	; 65
    28de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	bc 01       	movw	r22, r24
    28e8:	cd 01       	movw	r24, r26
    28ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	9c 8b       	std	Y+20, r25	; 0x14
    28f4:	8b 8b       	std	Y+19, r24	; 0x13
    28f6:	0f c0       	rjmp	.+30     	; 0x2916 <STEPPER_vidFULLstepCW+0x2a6>
    28f8:	88 ec       	ldi	r24, 0xC8	; 200
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	9a 8b       	std	Y+18, r25	; 0x12
    28fe:	89 8b       	std	Y+17, r24	; 0x11
    2900:	89 89       	ldd	r24, Y+17	; 0x11
    2902:	9a 89       	ldd	r25, Y+18	; 0x12
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <STEPPER_vidFULLstepCW+0x294>
    2908:	9a 8b       	std	Y+18, r25	; 0x12
    290a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    290c:	8b 89       	ldd	r24, Y+19	; 0x13
    290e:	9c 89       	ldd	r25, Y+20	; 0x14
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	9c 8b       	std	Y+20, r25	; 0x14
    2914:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2916:	8b 89       	ldd	r24, Y+19	; 0x13
    2918:	9c 89       	ldd	r25, Y+20	; 0x14
    291a:	00 97       	sbiw	r24, 0x00	; 0
    291c:	69 f7       	brne	.-38     	; 0x28f8 <STEPPER_vidFULLstepCW+0x288>
    291e:	14 c0       	rjmp	.+40     	; 0x2948 <STEPPER_vidFULLstepCW+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2920:	6d 89       	ldd	r22, Y+21	; 0x15
    2922:	7e 89       	ldd	r23, Y+22	; 0x16
    2924:	8f 89       	ldd	r24, Y+23	; 0x17
    2926:	98 8d       	ldd	r25, Y+24	; 0x18
    2928:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	9c 8b       	std	Y+20, r25	; 0x14
    2932:	8b 8b       	std	Y+19, r24	; 0x13
    2934:	8b 89       	ldd	r24, Y+19	; 0x13
    2936:	9c 89       	ldd	r25, Y+20	; 0x14
    2938:	98 8b       	std	Y+16, r25	; 0x10
    293a:	8f 87       	std	Y+15, r24	; 0x0f
    293c:	8f 85       	ldd	r24, Y+15	; 0x0f
    293e:	98 89       	ldd	r25, Y+16	; 0x10
    2940:	01 97       	sbiw	r24, 0x01	; 1
    2942:	f1 f7       	brne	.-4      	; 0x2940 <STEPPER_vidFULLstepCW+0x2d0>
    2944:	98 8b       	std	Y+16, r25	; 0x10
    2946:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(11);
      DIO_vidWritePortValue(coilport,0b00001000);
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	68 e0       	ldi	r22, 0x08	; 8
    294c:	0e 94 8f 09 	call	0x131e	; 0x131e <DIO_vidWritePortValue>
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	a0 e3       	ldi	r26, 0x30	; 48
    2956:	b1 e4       	ldi	r27, 0x41	; 65
    2958:	8b 87       	std	Y+11, r24	; 0x0b
    295a:	9c 87       	std	Y+12, r25	; 0x0c
    295c:	ad 87       	std	Y+13, r26	; 0x0d
    295e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2960:	6b 85       	ldd	r22, Y+11	; 0x0b
    2962:	7c 85       	ldd	r23, Y+12	; 0x0c
    2964:	8d 85       	ldd	r24, Y+13	; 0x0d
    2966:	9e 85       	ldd	r25, Y+14	; 0x0e
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	4a ef       	ldi	r20, 0xFA	; 250
    296e:	54 e4       	ldi	r21, 0x44	; 68
    2970:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	8f 83       	std	Y+7, r24	; 0x07
    297a:	98 87       	std	Y+8, r25	; 0x08
    297c:	a9 87       	std	Y+9, r26	; 0x09
    297e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2980:	6f 81       	ldd	r22, Y+7	; 0x07
    2982:	78 85       	ldd	r23, Y+8	; 0x08
    2984:	89 85       	ldd	r24, Y+9	; 0x09
    2986:	9a 85       	ldd	r25, Y+10	; 0x0a
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	40 e8       	ldi	r20, 0x80	; 128
    298e:	5f e3       	ldi	r21, 0x3F	; 63
    2990:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2994:	88 23       	and	r24, r24
    2996:	2c f4       	brge	.+10     	; 0x29a2 <STEPPER_vidFULLstepCW+0x332>
		__ticks = 1;
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	9e 83       	std	Y+6, r25	; 0x06
    299e:	8d 83       	std	Y+5, r24	; 0x05
    29a0:	3f c0       	rjmp	.+126    	; 0x2a20 <STEPPER_vidFULLstepCW+0x3b0>
	else if (__tmp > 65535)
    29a2:	6f 81       	ldd	r22, Y+7	; 0x07
    29a4:	78 85       	ldd	r23, Y+8	; 0x08
    29a6:	89 85       	ldd	r24, Y+9	; 0x09
    29a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	3f ef       	ldi	r19, 0xFF	; 255
    29ae:	4f e7       	ldi	r20, 0x7F	; 127
    29b0:	57 e4       	ldi	r21, 0x47	; 71
    29b2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    29b6:	18 16       	cp	r1, r24
    29b8:	4c f5       	brge	.+82     	; 0x2a0c <STEPPER_vidFULLstepCW+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    29bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    29be:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c2:	20 e0       	ldi	r18, 0x00	; 0
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	40 e2       	ldi	r20, 0x20	; 32
    29c8:	51 e4       	ldi	r21, 0x41	; 65
    29ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29ce:	dc 01       	movw	r26, r24
    29d0:	cb 01       	movw	r24, r22
    29d2:	bc 01       	movw	r22, r24
    29d4:	cd 01       	movw	r24, r26
    29d6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	9e 83       	std	Y+6, r25	; 0x06
    29e0:	8d 83       	std	Y+5, r24	; 0x05
    29e2:	0f c0       	rjmp	.+30     	; 0x2a02 <STEPPER_vidFULLstepCW+0x392>
    29e4:	88 ec       	ldi	r24, 0xC8	; 200
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	9c 83       	std	Y+4, r25	; 0x04
    29ea:	8b 83       	std	Y+3, r24	; 0x03
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	9c 81       	ldd	r25, Y+4	; 0x04
    29f0:	01 97       	sbiw	r24, 0x01	; 1
    29f2:	f1 f7       	brne	.-4      	; 0x29f0 <STEPPER_vidFULLstepCW+0x380>
    29f4:	9c 83       	std	Y+4, r25	; 0x04
    29f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f8:	8d 81       	ldd	r24, Y+5	; 0x05
    29fa:	9e 81       	ldd	r25, Y+6	; 0x06
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	9e 83       	std	Y+6, r25	; 0x06
    2a00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a02:	8d 81       	ldd	r24, Y+5	; 0x05
    2a04:	9e 81       	ldd	r25, Y+6	; 0x06
    2a06:	00 97       	sbiw	r24, 0x00	; 0
    2a08:	69 f7       	brne	.-38     	; 0x29e4 <STEPPER_vidFULLstepCW+0x374>
    2a0a:	14 c0       	rjmp	.+40     	; 0x2a34 <STEPPER_vidFULLstepCW+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0e:	78 85       	ldd	r23, Y+8	; 0x08
    2a10:	89 85       	ldd	r24, Y+9	; 0x09
    2a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	9e 83       	std	Y+6, r25	; 0x06
    2a1e:	8d 83       	std	Y+5, r24	; 0x05
    2a20:	8d 81       	ldd	r24, Y+5	; 0x05
    2a22:	9e 81       	ldd	r25, Y+6	; 0x06
    2a24:	9a 83       	std	Y+2, r25	; 0x02
    2a26:	89 83       	std	Y+1, r24	; 0x01
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <STEPPER_vidFULLstepCW+0x3bc>
    2a30:	9a 83       	std	Y+2, r25	; 0x02
    2a32:	89 83       	std	Y+1, r24	; 0x01
      _delay_ms(11);

}
    2a34:	e8 96       	adiw	r28, 0x38	; 56
    2a36:	0f b6       	in	r0, 0x3f	; 63
    2a38:	f8 94       	cli
    2a3a:	de bf       	out	0x3e, r29	; 62
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	cd bf       	out	0x3d, r28	; 61
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	08 95       	ret

00002a46 <STEPPER_vidFULLstepCCW>:
void STEPPER_vidFULLstepCCW(void)
{
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
}
    2a4e:	cf 91       	pop	r28
    2a50:	df 91       	pop	r29
    2a52:	08 95       	ret

00002a54 <__prologue_saves__>:
    2a54:	2f 92       	push	r2
    2a56:	3f 92       	push	r3
    2a58:	4f 92       	push	r4
    2a5a:	5f 92       	push	r5
    2a5c:	6f 92       	push	r6
    2a5e:	7f 92       	push	r7
    2a60:	8f 92       	push	r8
    2a62:	9f 92       	push	r9
    2a64:	af 92       	push	r10
    2a66:	bf 92       	push	r11
    2a68:	cf 92       	push	r12
    2a6a:	df 92       	push	r13
    2a6c:	ef 92       	push	r14
    2a6e:	ff 92       	push	r15
    2a70:	0f 93       	push	r16
    2a72:	1f 93       	push	r17
    2a74:	cf 93       	push	r28
    2a76:	df 93       	push	r29
    2a78:	cd b7       	in	r28, 0x3d	; 61
    2a7a:	de b7       	in	r29, 0x3e	; 62
    2a7c:	ca 1b       	sub	r28, r26
    2a7e:	db 0b       	sbc	r29, r27
    2a80:	0f b6       	in	r0, 0x3f	; 63
    2a82:	f8 94       	cli
    2a84:	de bf       	out	0x3e, r29	; 62
    2a86:	0f be       	out	0x3f, r0	; 63
    2a88:	cd bf       	out	0x3d, r28	; 61
    2a8a:	09 94       	ijmp

00002a8c <__epilogue_restores__>:
    2a8c:	2a 88       	ldd	r2, Y+18	; 0x12
    2a8e:	39 88       	ldd	r3, Y+17	; 0x11
    2a90:	48 88       	ldd	r4, Y+16	; 0x10
    2a92:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a94:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a96:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a98:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a9a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a9c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a9e:	b9 84       	ldd	r11, Y+9	; 0x09
    2aa0:	c8 84       	ldd	r12, Y+8	; 0x08
    2aa2:	df 80       	ldd	r13, Y+7	; 0x07
    2aa4:	ee 80       	ldd	r14, Y+6	; 0x06
    2aa6:	fd 80       	ldd	r15, Y+5	; 0x05
    2aa8:	0c 81       	ldd	r16, Y+4	; 0x04
    2aaa:	1b 81       	ldd	r17, Y+3	; 0x03
    2aac:	aa 81       	ldd	r26, Y+2	; 0x02
    2aae:	b9 81       	ldd	r27, Y+1	; 0x01
    2ab0:	ce 0f       	add	r28, r30
    2ab2:	d1 1d       	adc	r29, r1
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	f8 94       	cli
    2ab8:	de bf       	out	0x3e, r29	; 62
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	cd bf       	out	0x3d, r28	; 61
    2abe:	ed 01       	movw	r28, r26
    2ac0:	08 95       	ret

00002ac2 <_exit>:
    2ac2:	f8 94       	cli

00002ac4 <__stop_program>:
    2ac4:	ff cf       	rjmp	.-2      	; 0x2ac4 <__stop_program>
