
timer0_ICU_dutyT0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b32  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000015  00800060  00800060  00000ba6  2**0
                  ALLOC
  2 .stab         00000af8  00000000  00000000  00000ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000004a4  00000000  00000000  000016a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__vector_6>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 37       	cpi	r26, 0x75	; 117
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 26 04 	call	0x84c	; 0x84c <main>
  74:	0c 94 97 05 	jmp	0xb2e	; 0xb2e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_init>:
#include "utils.h"
#include "DIO.h"


void ADC_init(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  //we need to clear unused bits
	Set_Bit(ADMUX,6); // SELECT VRE=VCC
  84:	a7 e2       	ldi	r26, 0x27	; 39
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e7 e2       	ldi	r30, 0x27	; 39
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	8c 93       	st	X, r24
    Set_Bit(ADCSRA,7); // ENABLE adc circuit
  92:	a6 e2       	ldi	r26, 0x26	; 38
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e6 e2       	ldi	r30, 0x26	; 38
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 68       	ori	r24, 0x80	; 128
  9e:	8c 93       	st	X, r24
    Set_Bit(ADCSRA,2);
  a0:	a6 e2       	ldi	r26, 0x26	; 38
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e6 e2       	ldi	r30, 0x26	; 38
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	84 60       	ori	r24, 0x04	; 4
  ac:	8c 93       	st	X, r24
    Set_Bit(ADCSRA,0);
  ae:	a6 e2       	ldi	r26, 0x26	; 38
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e6 e2       	ldi	r30, 0x26	; 38
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	8c 93       	st	X, r24
	//SELECT prescaller=32
}
  bc:	cf 91       	pop	r28
  be:	df 91       	pop	r29
  c0:	08 95       	ret

000000c2 <ADC_u16Read>:
u16 ADC_u16Read(u8 channel)
{
  c2:	df 93       	push	r29
  c4:	cf 93       	push	r28
  c6:	0f 92       	push	r0
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	89 83       	std	Y+1, r24	; 0x01
  ADMUX &=0b11100000; // init
  ce:	a7 e2       	ldi	r26, 0x27	; 39
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	e7 e2       	ldi	r30, 0x27	; 39
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 7e       	andi	r24, 0xE0	; 224
  da:	8c 93       	st	X, r24
  ADMUX|=channel; //select channel
  dc:	a7 e2       	ldi	r26, 0x27	; 39
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	e7 e2       	ldi	r30, 0x27	; 39
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	90 81       	ld	r25, Z
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	89 2b       	or	r24, r25
  ea:	8c 93       	st	X, r24
  Set_Bit(ADCSRA,6); //start converstion
  ec:	a6 e2       	ldi	r26, 0x26	; 38
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	e6 e2       	ldi	r30, 0x26	; 38
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	80 64       	ori	r24, 0x40	; 64
  f8:	8c 93       	st	X, r24
  while(!(Get_Bit(ADCSRA,4))); // ==0 wait till flag =1 and quit W B3D KDA E3MEL RESET BEL SOFTWARE
  fa:	e6 e2       	ldi	r30, 0x26	; 38
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	88 2f       	mov	r24, r24
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	80 71       	andi	r24, 0x10	; 16
 106:	90 70       	andi	r25, 0x00	; 0
 108:	95 95       	asr	r25
 10a:	87 95       	ror	r24
 10c:	95 95       	asr	r25
 10e:	87 95       	ror	r24
 110:	95 95       	asr	r25
 112:	87 95       	ror	r24
 114:	95 95       	asr	r25
 116:	87 95       	ror	r24
 118:	00 97       	sbiw	r24, 0x00	; 0
 11a:	79 f3       	breq	.-34     	; 0xfa <ADC_u16Read+0x38>
  Set_Bit(ADCSRA,4);
 11c:	a6 e2       	ldi	r26, 0x26	; 38
 11e:	b0 e0       	ldi	r27, 0x00	; 0
 120:	e6 e2       	ldi	r30, 0x26	; 38
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	80 61       	ori	r24, 0x10	; 16
 128:	8c 93       	st	X, r24
  // RESET ADIF
  return(ADC); // return digital value
 12a:	e4 e2       	ldi	r30, 0x24	; 36
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	91 81       	ldd	r25, Z+1	; 0x01
}
 132:	0f 90       	pop	r0
 134:	cf 91       	pop	r28
 136:	df 91       	pop	r29
 138:	08 95       	ret

0000013a <DIO_vidSetPinDir>:
#include "DIO.h"



void DIO_vidSetPinDir (u8 port,u8 pin,u8 dir)
{
 13a:	df 93       	push	r29
 13c:	cf 93       	push	r28
 13e:	00 d0       	rcall	.+0      	; 0x140 <DIO_vidSetPinDir+0x6>
 140:	00 d0       	rcall	.+0      	; 0x142 <DIO_vidSetPinDir+0x8>
 142:	0f 92       	push	r0
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	89 83       	std	Y+1, r24	; 0x01
 14a:	6a 83       	std	Y+2, r22	; 0x02
 14c:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
 14e:	89 81       	ldd	r24, Y+1	; 0x01
 150:	28 2f       	mov	r18, r24
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	3d 83       	std	Y+5, r19	; 0x05
 156:	2c 83       	std	Y+4, r18	; 0x04
 158:	8c 81       	ldd	r24, Y+4	; 0x04
 15a:	9d 81       	ldd	r25, Y+5	; 0x05
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	91 05       	cpc	r25, r1
 160:	09 f4       	brne	.+2      	; 0x164 <DIO_vidSetPinDir+0x2a>
 162:	46 c0       	rjmp	.+140    	; 0x1f0 <DIO_vidSetPinDir+0xb6>
 164:	2c 81       	ldd	r18, Y+4	; 0x04
 166:	3d 81       	ldd	r19, Y+5	; 0x05
 168:	22 30       	cpi	r18, 0x02	; 2
 16a:	31 05       	cpc	r19, r1
 16c:	2c f4       	brge	.+10     	; 0x178 <DIO_vidSetPinDir+0x3e>
 16e:	8c 81       	ldd	r24, Y+4	; 0x04
 170:	9d 81       	ldd	r25, Y+5	; 0x05
 172:	00 97       	sbiw	r24, 0x00	; 0
 174:	71 f0       	breq	.+28     	; 0x192 <DIO_vidSetPinDir+0x58>
 176:	c7 c0       	rjmp	.+398    	; 0x306 <DIO_vidSetPinDir+0x1cc>
 178:	2c 81       	ldd	r18, Y+4	; 0x04
 17a:	3d 81       	ldd	r19, Y+5	; 0x05
 17c:	22 30       	cpi	r18, 0x02	; 2
 17e:	31 05       	cpc	r19, r1
 180:	09 f4       	brne	.+2      	; 0x184 <DIO_vidSetPinDir+0x4a>
 182:	65 c0       	rjmp	.+202    	; 0x24e <DIO_vidSetPinDir+0x114>
 184:	8c 81       	ldd	r24, Y+4	; 0x04
 186:	9d 81       	ldd	r25, Y+5	; 0x05
 188:	83 30       	cpi	r24, 0x03	; 3
 18a:	91 05       	cpc	r25, r1
 18c:	09 f4       	brne	.+2      	; 0x190 <DIO_vidSetPinDir+0x56>
 18e:	8e c0       	rjmp	.+284    	; 0x2ac <DIO_vidSetPinDir+0x172>
 190:	ba c0       	rjmp	.+372    	; 0x306 <DIO_vidSetPinDir+0x1cc>
	{
	case 0:
		if(dir==input)
 192:	8b 81       	ldd	r24, Y+3	; 0x03
 194:	88 23       	and	r24, r24
 196:	a1 f4       	brne	.+40     	; 0x1c0 <DIO_vidSetPinDir+0x86>
			Clr_Bit(DDRA,pin);
 198:	aa e3       	ldi	r26, 0x3A	; 58
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	ea e3       	ldi	r30, 0x3A	; 58
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	48 2f       	mov	r20, r24
 1a4:	8a 81       	ldd	r24, Y+2	; 0x02
 1a6:	28 2f       	mov	r18, r24
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 2e       	mov	r0, r18
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_vidSetPinDir+0x7c>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	0a 94       	dec	r0
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_vidSetPinDir+0x78>
 1ba:	80 95       	com	r24
 1bc:	84 23       	and	r24, r20
 1be:	8c 93       	st	X, r24
		if(dir==output)
 1c0:	8b 81       	ldd	r24, Y+3	; 0x03
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <DIO_vidSetPinDir+0x8e>
 1c6:	9f c0       	rjmp	.+318    	; 0x306 <DIO_vidSetPinDir+0x1cc>
			Set_Bit(DDRA,pin);
 1c8:	aa e3       	ldi	r26, 0x3A	; 58
 1ca:	b0 e0       	ldi	r27, 0x00	; 0
 1cc:	ea e3       	ldi	r30, 0x3A	; 58
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	80 81       	ld	r24, Z
 1d2:	48 2f       	mov	r20, r24
 1d4:	8a 81       	ldd	r24, Y+2	; 0x02
 1d6:	28 2f       	mov	r18, r24
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 2e       	mov	r0, r18
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_vidSetPinDir+0xac>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	0a 94       	dec	r0
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_vidSetPinDir+0xa8>
 1ea:	84 2b       	or	r24, r20
 1ec:	8c 93       	st	X, r24
 1ee:	8b c0       	rjmp	.+278    	; 0x306 <DIO_vidSetPinDir+0x1cc>
		break;

	case 1:
			if(dir==input)
 1f0:	8b 81       	ldd	r24, Y+3	; 0x03
 1f2:	88 23       	and	r24, r24
 1f4:	a1 f4       	brne	.+40     	; 0x21e <DIO_vidSetPinDir+0xe4>
				Clr_Bit(DDRB,pin);
 1f6:	a7 e3       	ldi	r26, 0x37	; 55
 1f8:	b0 e0       	ldi	r27, 0x00	; 0
 1fa:	e7 e3       	ldi	r30, 0x37	; 55
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	48 2f       	mov	r20, r24
 202:	8a 81       	ldd	r24, Y+2	; 0x02
 204:	28 2f       	mov	r18, r24
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 2e       	mov	r0, r18
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_vidSetPinDir+0xda>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	0a 94       	dec	r0
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_vidSetPinDir+0xd6>
 218:	80 95       	com	r24
 21a:	84 23       	and	r24, r20
 21c:	8c 93       	st	X, r24
			if(dir==output)
 21e:	8b 81       	ldd	r24, Y+3	; 0x03
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	09 f0       	breq	.+2      	; 0x226 <DIO_vidSetPinDir+0xec>
 224:	70 c0       	rjmp	.+224    	; 0x306 <DIO_vidSetPinDir+0x1cc>
				Set_Bit(DDRB,pin);
 226:	a7 e3       	ldi	r26, 0x37	; 55
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	e7 e3       	ldi	r30, 0x37	; 55
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	48 2f       	mov	r20, r24
 232:	8a 81       	ldd	r24, Y+2	; 0x02
 234:	28 2f       	mov	r18, r24
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 2e       	mov	r0, r18
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_vidSetPinDir+0x10a>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	0a 94       	dec	r0
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_vidSetPinDir+0x106>
 248:	84 2b       	or	r24, r20
 24a:	8c 93       	st	X, r24
 24c:	5c c0       	rjmp	.+184    	; 0x306 <DIO_vidSetPinDir+0x1cc>
			break;

	case 2:
			if(dir==input)
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	88 23       	and	r24, r24
 252:	a1 f4       	brne	.+40     	; 0x27c <DIO_vidSetPinDir+0x142>
				Clr_Bit(DDRC,pin);
 254:	a4 e3       	ldi	r26, 0x34	; 52
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	e4 e3       	ldi	r30, 0x34	; 52
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	48 2f       	mov	r20, r24
 260:	8a 81       	ldd	r24, Y+2	; 0x02
 262:	28 2f       	mov	r18, r24
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 2e       	mov	r0, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_vidSetPinDir+0x138>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	0a 94       	dec	r0
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_vidSetPinDir+0x134>
 276:	80 95       	com	r24
 278:	84 23       	and	r24, r20
 27a:	8c 93       	st	X, r24
			if(dir==output)
 27c:	8b 81       	ldd	r24, Y+3	; 0x03
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	09 f0       	breq	.+2      	; 0x284 <DIO_vidSetPinDir+0x14a>
 282:	41 c0       	rjmp	.+130    	; 0x306 <DIO_vidSetPinDir+0x1cc>
				Set_Bit(DDRC,pin);
 284:	a4 e3       	ldi	r26, 0x34	; 52
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	e4 e3       	ldi	r30, 0x34	; 52
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	48 2f       	mov	r20, r24
 290:	8a 81       	ldd	r24, Y+2	; 0x02
 292:	28 2f       	mov	r18, r24
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 2e       	mov	r0, r18
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_vidSetPinDir+0x168>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	0a 94       	dec	r0
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_vidSetPinDir+0x164>
 2a6:	84 2b       	or	r24, r20
 2a8:	8c 93       	st	X, r24
 2aa:	2d c0       	rjmp	.+90     	; 0x306 <DIO_vidSetPinDir+0x1cc>
			break;

	case 3:
			if(dir==input)
 2ac:	8b 81       	ldd	r24, Y+3	; 0x03
 2ae:	88 23       	and	r24, r24
 2b0:	a1 f4       	brne	.+40     	; 0x2da <DIO_vidSetPinDir+0x1a0>
				Clr_Bit(DDRD,pin);
 2b2:	a1 e3       	ldi	r26, 0x31	; 49
 2b4:	b0 e0       	ldi	r27, 0x00	; 0
 2b6:	e1 e3       	ldi	r30, 0x31	; 49
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	48 2f       	mov	r20, r24
 2be:	8a 81       	ldd	r24, Y+2	; 0x02
 2c0:	28 2f       	mov	r18, r24
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	02 2e       	mov	r0, r18
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_vidSetPinDir+0x196>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	0a 94       	dec	r0
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_vidSetPinDir+0x192>
 2d4:	80 95       	com	r24
 2d6:	84 23       	and	r24, r20
 2d8:	8c 93       	st	X, r24
			if(dir==output)
 2da:	8b 81       	ldd	r24, Y+3	; 0x03
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	99 f4       	brne	.+38     	; 0x306 <DIO_vidSetPinDir+0x1cc>
				Set_Bit(DDRD,pin);
 2e0:	a1 e3       	ldi	r26, 0x31	; 49
 2e2:	b0 e0       	ldi	r27, 0x00	; 0
 2e4:	e1 e3       	ldi	r30, 0x31	; 49
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	48 2f       	mov	r20, r24
 2ec:	8a 81       	ldd	r24, Y+2	; 0x02
 2ee:	28 2f       	mov	r18, r24
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 2e       	mov	r0, r18
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <DIO_vidSetPinDir+0x1c4>
 2fa:	88 0f       	add	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	0a 94       	dec	r0
 300:	e2 f7       	brpl	.-8      	; 0x2fa <DIO_vidSetPinDir+0x1c0>
 302:	84 2b       	or	r24, r20
 304:	8c 93       	st	X, r24
			break;
	}
}
 306:	0f 90       	pop	r0
 308:	0f 90       	pop	r0
 30a:	0f 90       	pop	r0
 30c:	0f 90       	pop	r0
 30e:	0f 90       	pop	r0
 310:	cf 91       	pop	r28
 312:	df 91       	pop	r29
 314:	08 95       	ret

00000316 <DIO_vidWritePinValue>:

	void DIO_vidWritePinValue (u8 port,u8 pin,u8 value)
	{
 316:	df 93       	push	r29
 318:	cf 93       	push	r28
 31a:	00 d0       	rcall	.+0      	; 0x31c <DIO_vidWritePinValue+0x6>
 31c:	00 d0       	rcall	.+0      	; 0x31e <DIO_vidWritePinValue+0x8>
 31e:	0f 92       	push	r0
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
 324:	89 83       	std	Y+1, r24	; 0x01
 326:	6a 83       	std	Y+2, r22	; 0x02
 328:	4b 83       	std	Y+3, r20	; 0x03
		switch(port)
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	28 2f       	mov	r18, r24
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	3d 83       	std	Y+5, r19	; 0x05
 332:	2c 83       	std	Y+4, r18	; 0x04
 334:	8c 81       	ldd	r24, Y+4	; 0x04
 336:	9d 81       	ldd	r25, Y+5	; 0x05
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	91 05       	cpc	r25, r1
 33c:	09 f4       	brne	.+2      	; 0x340 <DIO_vidWritePinValue+0x2a>
 33e:	46 c0       	rjmp	.+140    	; 0x3cc <DIO_vidWritePinValue+0xb6>
 340:	2c 81       	ldd	r18, Y+4	; 0x04
 342:	3d 81       	ldd	r19, Y+5	; 0x05
 344:	22 30       	cpi	r18, 0x02	; 2
 346:	31 05       	cpc	r19, r1
 348:	2c f4       	brge	.+10     	; 0x354 <DIO_vidWritePinValue+0x3e>
 34a:	8c 81       	ldd	r24, Y+4	; 0x04
 34c:	9d 81       	ldd	r25, Y+5	; 0x05
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	71 f0       	breq	.+28     	; 0x36e <DIO_vidWritePinValue+0x58>
 352:	c7 c0       	rjmp	.+398    	; 0x4e2 <DIO_vidWritePinValue+0x1cc>
 354:	2c 81       	ldd	r18, Y+4	; 0x04
 356:	3d 81       	ldd	r19, Y+5	; 0x05
 358:	22 30       	cpi	r18, 0x02	; 2
 35a:	31 05       	cpc	r19, r1
 35c:	09 f4       	brne	.+2      	; 0x360 <DIO_vidWritePinValue+0x4a>
 35e:	65 c0       	rjmp	.+202    	; 0x42a <DIO_vidWritePinValue+0x114>
 360:	8c 81       	ldd	r24, Y+4	; 0x04
 362:	9d 81       	ldd	r25, Y+5	; 0x05
 364:	83 30       	cpi	r24, 0x03	; 3
 366:	91 05       	cpc	r25, r1
 368:	09 f4       	brne	.+2      	; 0x36c <DIO_vidWritePinValue+0x56>
 36a:	8e c0       	rjmp	.+284    	; 0x488 <DIO_vidWritePinValue+0x172>
 36c:	ba c0       	rjmp	.+372    	; 0x4e2 <DIO_vidWritePinValue+0x1cc>
		{
		case 0:
			if(value==low)
 36e:	8b 81       	ldd	r24, Y+3	; 0x03
 370:	88 23       	and	r24, r24
 372:	a1 f4       	brne	.+40     	; 0x39c <DIO_vidWritePinValue+0x86>
				Clr_Bit(PORTA,pin);
 374:	ab e3       	ldi	r26, 0x3B	; 59
 376:	b0 e0       	ldi	r27, 0x00	; 0
 378:	eb e3       	ldi	r30, 0x3B	; 59
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	48 2f       	mov	r20, r24
 380:	8a 81       	ldd	r24, Y+2	; 0x02
 382:	28 2f       	mov	r18, r24
 384:	30 e0       	ldi	r19, 0x00	; 0
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	02 2e       	mov	r0, r18
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_vidWritePinValue+0x7c>
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	0a 94       	dec	r0
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_vidWritePinValue+0x78>
 396:	80 95       	com	r24
 398:	84 23       	and	r24, r20
 39a:	8c 93       	st	X, r24
			if(value==high)
 39c:	8b 81       	ldd	r24, Y+3	; 0x03
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	09 f0       	breq	.+2      	; 0x3a4 <DIO_vidWritePinValue+0x8e>
 3a2:	9f c0       	rjmp	.+318    	; 0x4e2 <DIO_vidWritePinValue+0x1cc>
				Set_Bit(PORTA,pin);
 3a4:	ab e3       	ldi	r26, 0x3B	; 59
 3a6:	b0 e0       	ldi	r27, 0x00	; 0
 3a8:	eb e3       	ldi	r30, 0x3B	; 59
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	48 2f       	mov	r20, r24
 3b0:	8a 81       	ldd	r24, Y+2	; 0x02
 3b2:	28 2f       	mov	r18, r24
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	02 2e       	mov	r0, r18
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_vidWritePinValue+0xac>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	0a 94       	dec	r0
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_vidWritePinValue+0xa8>
 3c6:	84 2b       	or	r24, r20
 3c8:	8c 93       	st	X, r24
 3ca:	8b c0       	rjmp	.+278    	; 0x4e2 <DIO_vidWritePinValue+0x1cc>
			break;

		case 1:
				if(value==low)
 3cc:	8b 81       	ldd	r24, Y+3	; 0x03
 3ce:	88 23       	and	r24, r24
 3d0:	a1 f4       	brne	.+40     	; 0x3fa <DIO_vidWritePinValue+0xe4>
					Clr_Bit(PORTB,pin);
 3d2:	a8 e3       	ldi	r26, 0x38	; 56
 3d4:	b0 e0       	ldi	r27, 0x00	; 0
 3d6:	e8 e3       	ldi	r30, 0x38	; 56
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	48 2f       	mov	r20, r24
 3de:	8a 81       	ldd	r24, Y+2	; 0x02
 3e0:	28 2f       	mov	r18, r24
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	02 2e       	mov	r0, r18
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_vidWritePinValue+0xda>
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	0a 94       	dec	r0
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_vidWritePinValue+0xd6>
 3f4:	80 95       	com	r24
 3f6:	84 23       	and	r24, r20
 3f8:	8c 93       	st	X, r24
				if(value==high)
 3fa:	8b 81       	ldd	r24, Y+3	; 0x03
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	09 f0       	breq	.+2      	; 0x402 <DIO_vidWritePinValue+0xec>
 400:	70 c0       	rjmp	.+224    	; 0x4e2 <DIO_vidWritePinValue+0x1cc>
					Set_Bit(PORTB,pin);
 402:	a8 e3       	ldi	r26, 0x38	; 56
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	e8 e3       	ldi	r30, 0x38	; 56
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	48 2f       	mov	r20, r24
 40e:	8a 81       	ldd	r24, Y+2	; 0x02
 410:	28 2f       	mov	r18, r24
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	02 2e       	mov	r0, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <DIO_vidWritePinValue+0x10a>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	0a 94       	dec	r0
 422:	e2 f7       	brpl	.-8      	; 0x41c <DIO_vidWritePinValue+0x106>
 424:	84 2b       	or	r24, r20
 426:	8c 93       	st	X, r24
 428:	5c c0       	rjmp	.+184    	; 0x4e2 <DIO_vidWritePinValue+0x1cc>
				break;

		case 2:
				if(value==low)
 42a:	8b 81       	ldd	r24, Y+3	; 0x03
 42c:	88 23       	and	r24, r24
 42e:	a1 f4       	brne	.+40     	; 0x458 <DIO_vidWritePinValue+0x142>
					Clr_Bit(PORTC,pin);
 430:	a5 e3       	ldi	r26, 0x35	; 53
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	e5 e3       	ldi	r30, 0x35	; 53
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	48 2f       	mov	r20, r24
 43c:	8a 81       	ldd	r24, Y+2	; 0x02
 43e:	28 2f       	mov	r18, r24
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 2e       	mov	r0, r18
 448:	02 c0       	rjmp	.+4      	; 0x44e <DIO_vidWritePinValue+0x138>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	0a 94       	dec	r0
 450:	e2 f7       	brpl	.-8      	; 0x44a <DIO_vidWritePinValue+0x134>
 452:	80 95       	com	r24
 454:	84 23       	and	r24, r20
 456:	8c 93       	st	X, r24
				if(value==high)
 458:	8b 81       	ldd	r24, Y+3	; 0x03
 45a:	81 30       	cpi	r24, 0x01	; 1
 45c:	09 f0       	breq	.+2      	; 0x460 <DIO_vidWritePinValue+0x14a>
 45e:	41 c0       	rjmp	.+130    	; 0x4e2 <DIO_vidWritePinValue+0x1cc>
					Set_Bit(PORTC,pin);
 460:	a5 e3       	ldi	r26, 0x35	; 53
 462:	b0 e0       	ldi	r27, 0x00	; 0
 464:	e5 e3       	ldi	r30, 0x35	; 53
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	48 2f       	mov	r20, r24
 46c:	8a 81       	ldd	r24, Y+2	; 0x02
 46e:	28 2f       	mov	r18, r24
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	02 2e       	mov	r0, r18
 478:	02 c0       	rjmp	.+4      	; 0x47e <DIO_vidWritePinValue+0x168>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	0a 94       	dec	r0
 480:	e2 f7       	brpl	.-8      	; 0x47a <DIO_vidWritePinValue+0x164>
 482:	84 2b       	or	r24, r20
 484:	8c 93       	st	X, r24
 486:	2d c0       	rjmp	.+90     	; 0x4e2 <DIO_vidWritePinValue+0x1cc>
				break;

		case 3:
				if(value==low)
 488:	8b 81       	ldd	r24, Y+3	; 0x03
 48a:	88 23       	and	r24, r24
 48c:	a1 f4       	brne	.+40     	; 0x4b6 <DIO_vidWritePinValue+0x1a0>
					Clr_Bit(PORTD,pin);
 48e:	a2 e3       	ldi	r26, 0x32	; 50
 490:	b0 e0       	ldi	r27, 0x00	; 0
 492:	e2 e3       	ldi	r30, 0x32	; 50
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	80 81       	ld	r24, Z
 498:	48 2f       	mov	r20, r24
 49a:	8a 81       	ldd	r24, Y+2	; 0x02
 49c:	28 2f       	mov	r18, r24
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	02 2e       	mov	r0, r18
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_vidWritePinValue+0x196>
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	0a 94       	dec	r0
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_vidWritePinValue+0x192>
 4b0:	80 95       	com	r24
 4b2:	84 23       	and	r24, r20
 4b4:	8c 93       	st	X, r24
				if(value==high)
 4b6:	8b 81       	ldd	r24, Y+3	; 0x03
 4b8:	81 30       	cpi	r24, 0x01	; 1
 4ba:	99 f4       	brne	.+38     	; 0x4e2 <DIO_vidWritePinValue+0x1cc>
					Set_Bit(PORTD,pin);
 4bc:	a2 e3       	ldi	r26, 0x32	; 50
 4be:	b0 e0       	ldi	r27, 0x00	; 0
 4c0:	e2 e3       	ldi	r30, 0x32	; 50
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	48 2f       	mov	r20, r24
 4c8:	8a 81       	ldd	r24, Y+2	; 0x02
 4ca:	28 2f       	mov	r18, r24
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	02 2e       	mov	r0, r18
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_vidWritePinValue+0x1c4>
 4d6:	88 0f       	add	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	0a 94       	dec	r0
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_vidWritePinValue+0x1c0>
 4de:	84 2b       	or	r24, r20
 4e0:	8c 93       	st	X, r24
				break;
		}
	}
 4e2:	0f 90       	pop	r0
 4e4:	0f 90       	pop	r0
 4e6:	0f 90       	pop	r0
 4e8:	0f 90       	pop	r0
 4ea:	0f 90       	pop	r0
 4ec:	cf 91       	pop	r28
 4ee:	df 91       	pop	r29
 4f0:	08 95       	ret

000004f2 <DIO_vidTogglePinValue>:

	void DIO_vidTogglePinValue (u8 port,u8 pin)
		{
 4f2:	df 93       	push	r29
 4f4:	cf 93       	push	r28
 4f6:	00 d0       	rcall	.+0      	; 0x4f8 <DIO_vidTogglePinValue+0x6>
 4f8:	00 d0       	rcall	.+0      	; 0x4fa <DIO_vidTogglePinValue+0x8>
 4fa:	cd b7       	in	r28, 0x3d	; 61
 4fc:	de b7       	in	r29, 0x3e	; 62
 4fe:	89 83       	std	Y+1, r24	; 0x01
 500:	6a 83       	std	Y+2, r22	; 0x02
			switch(port)
 502:	89 81       	ldd	r24, Y+1	; 0x01
 504:	28 2f       	mov	r18, r24
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	3c 83       	std	Y+4, r19	; 0x04
 50a:	2b 83       	std	Y+3, r18	; 0x03
 50c:	8b 81       	ldd	r24, Y+3	; 0x03
 50e:	9c 81       	ldd	r25, Y+4	; 0x04
 510:	81 30       	cpi	r24, 0x01	; 1
 512:	91 05       	cpc	r25, r1
 514:	49 f1       	breq	.+82     	; 0x568 <DIO_vidTogglePinValue+0x76>
 516:	2b 81       	ldd	r18, Y+3	; 0x03
 518:	3c 81       	ldd	r19, Y+4	; 0x04
 51a:	22 30       	cpi	r18, 0x02	; 2
 51c:	31 05       	cpc	r19, r1
 51e:	2c f4       	brge	.+10     	; 0x52a <DIO_vidTogglePinValue+0x38>
 520:	8b 81       	ldd	r24, Y+3	; 0x03
 522:	9c 81       	ldd	r25, Y+4	; 0x04
 524:	00 97       	sbiw	r24, 0x00	; 0
 526:	61 f0       	breq	.+24     	; 0x540 <DIO_vidTogglePinValue+0x4e>
 528:	5a c0       	rjmp	.+180    	; 0x5de <DIO_vidTogglePinValue+0xec>
 52a:	2b 81       	ldd	r18, Y+3	; 0x03
 52c:	3c 81       	ldd	r19, Y+4	; 0x04
 52e:	22 30       	cpi	r18, 0x02	; 2
 530:	31 05       	cpc	r19, r1
 532:	71 f1       	breq	.+92     	; 0x590 <DIO_vidTogglePinValue+0x9e>
 534:	8b 81       	ldd	r24, Y+3	; 0x03
 536:	9c 81       	ldd	r25, Y+4	; 0x04
 538:	83 30       	cpi	r24, 0x03	; 3
 53a:	91 05       	cpc	r25, r1
 53c:	e9 f1       	breq	.+122    	; 0x5b8 <DIO_vidTogglePinValue+0xc6>
 53e:	4f c0       	rjmp	.+158    	; 0x5de <DIO_vidTogglePinValue+0xec>
			{
			case 0:
				           toggle_Bit(PORTA,pin);
 540:	ab e3       	ldi	r26, 0x3B	; 59
 542:	b0 e0       	ldi	r27, 0x00	; 0
 544:	eb e3       	ldi	r30, 0x3B	; 59
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 81       	ld	r24, Z
 54a:	48 2f       	mov	r20, r24
 54c:	8a 81       	ldd	r24, Y+2	; 0x02
 54e:	28 2f       	mov	r18, r24
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	02 2e       	mov	r0, r18
 558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_vidTogglePinValue+0x6c>
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	0a 94       	dec	r0
 560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_vidTogglePinValue+0x68>
 562:	84 27       	eor	r24, r20
 564:	8c 93       	st	X, r24
 566:	3b c0       	rjmp	.+118    	; 0x5de <DIO_vidTogglePinValue+0xec>
				           break;

			case 1:
							toggle_Bit(PORTB,pin);
 568:	a8 e3       	ldi	r26, 0x38	; 56
 56a:	b0 e0       	ldi	r27, 0x00	; 0
 56c:	e8 e3       	ldi	r30, 0x38	; 56
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	48 2f       	mov	r20, r24
 574:	8a 81       	ldd	r24, Y+2	; 0x02
 576:	28 2f       	mov	r18, r24
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	02 2e       	mov	r0, r18
 580:	02 c0       	rjmp	.+4      	; 0x586 <DIO_vidTogglePinValue+0x94>
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	0a 94       	dec	r0
 588:	e2 f7       	brpl	.-8      	; 0x582 <DIO_vidTogglePinValue+0x90>
 58a:	84 27       	eor	r24, r20
 58c:	8c 93       	st	X, r24
 58e:	27 c0       	rjmp	.+78     	; 0x5de <DIO_vidTogglePinValue+0xec>
							break;

			case 2:
							toggle_Bit(PORTC,pin);
 590:	a5 e3       	ldi	r26, 0x35	; 53
 592:	b0 e0       	ldi	r27, 0x00	; 0
 594:	e5 e3       	ldi	r30, 0x35	; 53
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	80 81       	ld	r24, Z
 59a:	48 2f       	mov	r20, r24
 59c:	8a 81       	ldd	r24, Y+2	; 0x02
 59e:	28 2f       	mov	r18, r24
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	02 2e       	mov	r0, r18
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_vidTogglePinValue+0xbc>
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	0a 94       	dec	r0
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_vidTogglePinValue+0xb8>
 5b2:	84 27       	eor	r24, r20
 5b4:	8c 93       	st	X, r24
 5b6:	13 c0       	rjmp	.+38     	; 0x5de <DIO_vidTogglePinValue+0xec>
							break;

			case 3:
							toggle_Bit(PORTD,pin);
 5b8:	a2 e3       	ldi	r26, 0x32	; 50
 5ba:	b0 e0       	ldi	r27, 0x00	; 0
 5bc:	e2 e3       	ldi	r30, 0x32	; 50
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	80 81       	ld	r24, Z
 5c2:	48 2f       	mov	r20, r24
 5c4:	8a 81       	ldd	r24, Y+2	; 0x02
 5c6:	28 2f       	mov	r18, r24
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	02 2e       	mov	r0, r18
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_vidTogglePinValue+0xe4>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	0a 94       	dec	r0
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_vidTogglePinValue+0xe0>
 5da:	84 27       	eor	r24, r20
 5dc:	8c 93       	st	X, r24
							break;
			}
		}
 5de:	0f 90       	pop	r0
 5e0:	0f 90       	pop	r0
 5e2:	0f 90       	pop	r0
 5e4:	0f 90       	pop	r0
 5e6:	cf 91       	pop	r28
 5e8:	df 91       	pop	r29
 5ea:	08 95       	ret

000005ec <DIO_u8ReadPinValue>:


	u8 DIO_u8ReadPinValue(u8 port, u8 pin)
	{
 5ec:	df 93       	push	r29
 5ee:	cf 93       	push	r28
 5f0:	00 d0       	rcall	.+0      	; 0x5f2 <DIO_u8ReadPinValue+0x6>
 5f2:	00 d0       	rcall	.+0      	; 0x5f4 <DIO_u8ReadPinValue+0x8>
 5f4:	0f 92       	push	r0
 5f6:	cd b7       	in	r28, 0x3d	; 61
 5f8:	de b7       	in	r29, 0x3e	; 62
 5fa:	89 83       	std	Y+1, r24	; 0x01
 5fc:	6a 83       	std	Y+2, r22	; 0x02
		switch(port)
 5fe:	89 81       	ldd	r24, Y+1	; 0x01
 600:	28 2f       	mov	r18, r24
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	3d 83       	std	Y+5, r19	; 0x05
 606:	2c 83       	std	Y+4, r18	; 0x04
 608:	4c 81       	ldd	r20, Y+4	; 0x04
 60a:	5d 81       	ldd	r21, Y+5	; 0x05
 60c:	41 30       	cpi	r20, 0x01	; 1
 60e:	51 05       	cpc	r21, r1
 610:	b1 f1       	breq	.+108    	; 0x67e <DIO_u8ReadPinValue+0x92>
 612:	8c 81       	ldd	r24, Y+4	; 0x04
 614:	9d 81       	ldd	r25, Y+5	; 0x05
 616:	82 30       	cpi	r24, 0x02	; 2
 618:	91 05       	cpc	r25, r1
 61a:	34 f4       	brge	.+12     	; 0x628 <DIO_u8ReadPinValue+0x3c>
 61c:	2c 81       	ldd	r18, Y+4	; 0x04
 61e:	3d 81       	ldd	r19, Y+5	; 0x05
 620:	21 15       	cp	r18, r1
 622:	31 05       	cpc	r19, r1
 624:	71 f0       	breq	.+28     	; 0x642 <DIO_u8ReadPinValue+0x56>
 626:	85 c0       	rjmp	.+266    	; 0x732 <DIO_u8ReadPinValue+0x146>
 628:	4c 81       	ldd	r20, Y+4	; 0x04
 62a:	5d 81       	ldd	r21, Y+5	; 0x05
 62c:	42 30       	cpi	r20, 0x02	; 2
 62e:	51 05       	cpc	r21, r1
 630:	09 f4       	brne	.+2      	; 0x634 <DIO_u8ReadPinValue+0x48>
 632:	43 c0       	rjmp	.+134    	; 0x6ba <DIO_u8ReadPinValue+0xce>
 634:	8c 81       	ldd	r24, Y+4	; 0x04
 636:	9d 81       	ldd	r25, Y+5	; 0x05
 638:	83 30       	cpi	r24, 0x03	; 3
 63a:	91 05       	cpc	r25, r1
 63c:	09 f4       	brne	.+2      	; 0x640 <DIO_u8ReadPinValue+0x54>
 63e:	5b c0       	rjmp	.+182    	; 0x6f6 <DIO_u8ReadPinValue+0x10a>
 640:	78 c0       	rjmp	.+240    	; 0x732 <DIO_u8ReadPinValue+0x146>
		{
		case a:
			return Get_Bit(PINA,pin);
 642:	e9 e3       	ldi	r30, 0x39	; 57
 644:	f0 e0       	ldi	r31, 0x00	; 0
 646:	80 81       	ld	r24, Z
 648:	48 2f       	mov	r20, r24
 64a:	50 e0       	ldi	r21, 0x00	; 0
 64c:	8a 81       	ldd	r24, Y+2	; 0x02
 64e:	28 2f       	mov	r18, r24
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_u8ReadPinValue+0x70>
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	2a 95       	dec	r18
 65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_u8ReadPinValue+0x6c>
 660:	9a 01       	movw	r18, r20
 662:	28 23       	and	r18, r24
 664:	39 23       	and	r19, r25
 666:	8a 81       	ldd	r24, Y+2	; 0x02
 668:	88 2f       	mov	r24, r24
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	a9 01       	movw	r20, r18
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_u8ReadPinValue+0x88>
 670:	55 95       	asr	r21
 672:	47 95       	ror	r20
 674:	8a 95       	dec	r24
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_u8ReadPinValue+0x84>
 678:	ca 01       	movw	r24, r20
 67a:	8b 83       	std	Y+3, r24	; 0x03
 67c:	5c c0       	rjmp	.+184    	; 0x736 <DIO_u8ReadPinValue+0x14a>
			break;
		case b:
			return Get_Bit(PINB,pin);
 67e:	e6 e3       	ldi	r30, 0x36	; 54
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	80 81       	ld	r24, Z
 684:	48 2f       	mov	r20, r24
 686:	50 e0       	ldi	r21, 0x00	; 0
 688:	8a 81       	ldd	r24, Y+2	; 0x02
 68a:	28 2f       	mov	r18, r24
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	02 c0       	rjmp	.+4      	; 0x698 <DIO_u8ReadPinValue+0xac>
 694:	88 0f       	add	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	2a 95       	dec	r18
 69a:	e2 f7       	brpl	.-8      	; 0x694 <DIO_u8ReadPinValue+0xa8>
 69c:	9a 01       	movw	r18, r20
 69e:	28 23       	and	r18, r24
 6a0:	39 23       	and	r19, r25
 6a2:	8a 81       	ldd	r24, Y+2	; 0x02
 6a4:	88 2f       	mov	r24, r24
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	a9 01       	movw	r20, r18
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <DIO_u8ReadPinValue+0xc4>
 6ac:	55 95       	asr	r21
 6ae:	47 95       	ror	r20
 6b0:	8a 95       	dec	r24
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <DIO_u8ReadPinValue+0xc0>
 6b4:	ca 01       	movw	r24, r20
 6b6:	8b 83       	std	Y+3, r24	; 0x03
 6b8:	3e c0       	rjmp	.+124    	; 0x736 <DIO_u8ReadPinValue+0x14a>
			break;
		case c:
			return Get_Bit(PINC,pin);
 6ba:	e3 e3       	ldi	r30, 0x33	; 51
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	80 81       	ld	r24, Z
 6c0:	48 2f       	mov	r20, r24
 6c2:	50 e0       	ldi	r21, 0x00	; 0
 6c4:	8a 81       	ldd	r24, Y+2	; 0x02
 6c6:	28 2f       	mov	r18, r24
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <DIO_u8ReadPinValue+0xe8>
 6d0:	88 0f       	add	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	2a 95       	dec	r18
 6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <DIO_u8ReadPinValue+0xe4>
 6d8:	9a 01       	movw	r18, r20
 6da:	28 23       	and	r18, r24
 6dc:	39 23       	and	r19, r25
 6de:	8a 81       	ldd	r24, Y+2	; 0x02
 6e0:	88 2f       	mov	r24, r24
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	a9 01       	movw	r20, r18
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <DIO_u8ReadPinValue+0x100>
 6e8:	55 95       	asr	r21
 6ea:	47 95       	ror	r20
 6ec:	8a 95       	dec	r24
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <DIO_u8ReadPinValue+0xfc>
 6f0:	ca 01       	movw	r24, r20
 6f2:	8b 83       	std	Y+3, r24	; 0x03
 6f4:	20 c0       	rjmp	.+64     	; 0x736 <DIO_u8ReadPinValue+0x14a>
			break;
		case d:
			return Get_Bit(PIND,pin);
 6f6:	e0 e3       	ldi	r30, 0x30	; 48
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	80 81       	ld	r24, Z
 6fc:	48 2f       	mov	r20, r24
 6fe:	50 e0       	ldi	r21, 0x00	; 0
 700:	8a 81       	ldd	r24, Y+2	; 0x02
 702:	28 2f       	mov	r18, r24
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	02 c0       	rjmp	.+4      	; 0x710 <DIO_u8ReadPinValue+0x124>
 70c:	88 0f       	add	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	2a 95       	dec	r18
 712:	e2 f7       	brpl	.-8      	; 0x70c <DIO_u8ReadPinValue+0x120>
 714:	9a 01       	movw	r18, r20
 716:	28 23       	and	r18, r24
 718:	39 23       	and	r19, r25
 71a:	8a 81       	ldd	r24, Y+2	; 0x02
 71c:	88 2f       	mov	r24, r24
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	a9 01       	movw	r20, r18
 722:	02 c0       	rjmp	.+4      	; 0x728 <DIO_u8ReadPinValue+0x13c>
 724:	55 95       	asr	r21
 726:	47 95       	ror	r20
 728:	8a 95       	dec	r24
 72a:	e2 f7       	brpl	.-8      	; 0x724 <DIO_u8ReadPinValue+0x138>
 72c:	ca 01       	movw	r24, r20
 72e:	8b 83       	std	Y+3, r24	; 0x03
 730:	02 c0       	rjmp	.+4      	; 0x736 <DIO_u8ReadPinValue+0x14a>
			break;
		default :
			return port;
 732:	59 81       	ldd	r21, Y+1	; 0x01
 734:	5b 83       	std	Y+3, r21	; 0x03
 736:	8b 81       	ldd	r24, Y+3	; 0x03
			break;
		}


	}
 738:	0f 90       	pop	r0
 73a:	0f 90       	pop	r0
 73c:	0f 90       	pop	r0
 73e:	0f 90       	pop	r0
 740:	0f 90       	pop	r0
 742:	cf 91       	pop	r28
 744:	df 91       	pop	r29
 746:	08 95       	ret

00000748 <DIO_vidSetPortDir>:

	void DIO_vidSetPortDir(u8 port, u8 Dir)
		{
 748:	df 93       	push	r29
 74a:	cf 93       	push	r28
 74c:	00 d0       	rcall	.+0      	; 0x74e <DIO_vidSetPortDir+0x6>
 74e:	00 d0       	rcall	.+0      	; 0x750 <DIO_vidSetPortDir+0x8>
 750:	cd b7       	in	r28, 0x3d	; 61
 752:	de b7       	in	r29, 0x3e	; 62
 754:	89 83       	std	Y+1, r24	; 0x01
 756:	6a 83       	std	Y+2, r22	; 0x02
			switch(port)
 758:	89 81       	ldd	r24, Y+1	; 0x01
 75a:	28 2f       	mov	r18, r24
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	3c 83       	std	Y+4, r19	; 0x04
 760:	2b 83       	std	Y+3, r18	; 0x03
 762:	8b 81       	ldd	r24, Y+3	; 0x03
 764:	9c 81       	ldd	r25, Y+4	; 0x04
 766:	81 30       	cpi	r24, 0x01	; 1
 768:	91 05       	cpc	r25, r1
 76a:	d1 f0       	breq	.+52     	; 0x7a0 <DIO_vidSetPortDir+0x58>
 76c:	2b 81       	ldd	r18, Y+3	; 0x03
 76e:	3c 81       	ldd	r19, Y+4	; 0x04
 770:	22 30       	cpi	r18, 0x02	; 2
 772:	31 05       	cpc	r19, r1
 774:	2c f4       	brge	.+10     	; 0x780 <DIO_vidSetPortDir+0x38>
 776:	8b 81       	ldd	r24, Y+3	; 0x03
 778:	9c 81       	ldd	r25, Y+4	; 0x04
 77a:	00 97       	sbiw	r24, 0x00	; 0
 77c:	61 f0       	breq	.+24     	; 0x796 <DIO_vidSetPortDir+0x4e>
 77e:	1e c0       	rjmp	.+60     	; 0x7bc <DIO_vidSetPortDir+0x74>
 780:	2b 81       	ldd	r18, Y+3	; 0x03
 782:	3c 81       	ldd	r19, Y+4	; 0x04
 784:	22 30       	cpi	r18, 0x02	; 2
 786:	31 05       	cpc	r19, r1
 788:	81 f0       	breq	.+32     	; 0x7aa <DIO_vidSetPortDir+0x62>
 78a:	8b 81       	ldd	r24, Y+3	; 0x03
 78c:	9c 81       	ldd	r25, Y+4	; 0x04
 78e:	83 30       	cpi	r24, 0x03	; 3
 790:	91 05       	cpc	r25, r1
 792:	81 f0       	breq	.+32     	; 0x7b4 <DIO_vidSetPortDir+0x6c>
 794:	13 c0       	rjmp	.+38     	; 0x7bc <DIO_vidSetPortDir+0x74>
			{
			case a:
				DDRA=Dir;
 796:	ea e3       	ldi	r30, 0x3A	; 58
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	8a 81       	ldd	r24, Y+2	; 0x02
 79c:	80 83       	st	Z, r24
 79e:	0e c0       	rjmp	.+28     	; 0x7bc <DIO_vidSetPortDir+0x74>
				break;
			case b:
				DDRB=Dir;
 7a0:	e7 e3       	ldi	r30, 0x37	; 55
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	8a 81       	ldd	r24, Y+2	; 0x02
 7a6:	80 83       	st	Z, r24
 7a8:	09 c0       	rjmp	.+18     	; 0x7bc <DIO_vidSetPortDir+0x74>
				break;
			case c:
				DDRC=Dir;
 7aa:	e4 e3       	ldi	r30, 0x34	; 52
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	8a 81       	ldd	r24, Y+2	; 0x02
 7b0:	80 83       	st	Z, r24
 7b2:	04 c0       	rjmp	.+8      	; 0x7bc <DIO_vidSetPortDir+0x74>
				break;
			case d:
				DDRD=Dir;
 7b4:	e1 e3       	ldi	r30, 0x31	; 49
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ba:	80 83       	st	Z, r24
				break;

			}


		}
 7bc:	0f 90       	pop	r0
 7be:	0f 90       	pop	r0
 7c0:	0f 90       	pop	r0
 7c2:	0f 90       	pop	r0
 7c4:	cf 91       	pop	r28
 7c6:	df 91       	pop	r29
 7c8:	08 95       	ret

000007ca <DIO_vidWritePortValue>:

	void DIO_vidWritePortValue(u8 port, u8 Value)
			{
 7ca:	df 93       	push	r29
 7cc:	cf 93       	push	r28
 7ce:	00 d0       	rcall	.+0      	; 0x7d0 <DIO_vidWritePortValue+0x6>
 7d0:	00 d0       	rcall	.+0      	; 0x7d2 <DIO_vidWritePortValue+0x8>
 7d2:	cd b7       	in	r28, 0x3d	; 61
 7d4:	de b7       	in	r29, 0x3e	; 62
 7d6:	89 83       	std	Y+1, r24	; 0x01
 7d8:	6a 83       	std	Y+2, r22	; 0x02
				switch(port)
 7da:	89 81       	ldd	r24, Y+1	; 0x01
 7dc:	28 2f       	mov	r18, r24
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	3c 83       	std	Y+4, r19	; 0x04
 7e2:	2b 83       	std	Y+3, r18	; 0x03
 7e4:	8b 81       	ldd	r24, Y+3	; 0x03
 7e6:	9c 81       	ldd	r25, Y+4	; 0x04
 7e8:	81 30       	cpi	r24, 0x01	; 1
 7ea:	91 05       	cpc	r25, r1
 7ec:	d1 f0       	breq	.+52     	; 0x822 <DIO_vidWritePortValue+0x58>
 7ee:	2b 81       	ldd	r18, Y+3	; 0x03
 7f0:	3c 81       	ldd	r19, Y+4	; 0x04
 7f2:	22 30       	cpi	r18, 0x02	; 2
 7f4:	31 05       	cpc	r19, r1
 7f6:	2c f4       	brge	.+10     	; 0x802 <DIO_vidWritePortValue+0x38>
 7f8:	8b 81       	ldd	r24, Y+3	; 0x03
 7fa:	9c 81       	ldd	r25, Y+4	; 0x04
 7fc:	00 97       	sbiw	r24, 0x00	; 0
 7fe:	61 f0       	breq	.+24     	; 0x818 <DIO_vidWritePortValue+0x4e>
 800:	1e c0       	rjmp	.+60     	; 0x83e <DIO_vidWritePortValue+0x74>
 802:	2b 81       	ldd	r18, Y+3	; 0x03
 804:	3c 81       	ldd	r19, Y+4	; 0x04
 806:	22 30       	cpi	r18, 0x02	; 2
 808:	31 05       	cpc	r19, r1
 80a:	81 f0       	breq	.+32     	; 0x82c <DIO_vidWritePortValue+0x62>
 80c:	8b 81       	ldd	r24, Y+3	; 0x03
 80e:	9c 81       	ldd	r25, Y+4	; 0x04
 810:	83 30       	cpi	r24, 0x03	; 3
 812:	91 05       	cpc	r25, r1
 814:	81 f0       	breq	.+32     	; 0x836 <DIO_vidWritePortValue+0x6c>
 816:	13 c0       	rjmp	.+38     	; 0x83e <DIO_vidWritePortValue+0x74>
				{
				case a:
					PORTA=Value;
 818:	eb e3       	ldi	r30, 0x3B	; 59
 81a:	f0 e0       	ldi	r31, 0x00	; 0
 81c:	8a 81       	ldd	r24, Y+2	; 0x02
 81e:	80 83       	st	Z, r24
 820:	0e c0       	rjmp	.+28     	; 0x83e <DIO_vidWritePortValue+0x74>
					break;
				case b:
					PORTB=Value;
 822:	e8 e3       	ldi	r30, 0x38	; 56
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	8a 81       	ldd	r24, Y+2	; 0x02
 828:	80 83       	st	Z, r24
 82a:	09 c0       	rjmp	.+18     	; 0x83e <DIO_vidWritePortValue+0x74>
					break;
				case c:
					PORTC=Value;
 82c:	e5 e3       	ldi	r30, 0x35	; 53
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	8a 81       	ldd	r24, Y+2	; 0x02
 832:	80 83       	st	Z, r24
 834:	04 c0       	rjmp	.+8      	; 0x83e <DIO_vidWritePortValue+0x74>
					break;
				case d:
					PORTD=Value;
 836:	e2 e3       	ldi	r30, 0x32	; 50
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	8a 81       	ldd	r24, Y+2	; 0x02
 83c:	80 83       	st	Z, r24
					break;

				}


			}
 83e:	0f 90       	pop	r0
 840:	0f 90       	pop	r0
 842:	0f 90       	pop	r0
 844:	0f 90       	pop	r0
 846:	cf 91       	pop	r28
 848:	df 91       	pop	r29
 84a:	08 95       	ret

0000084c <main>:
#include "ADC.h"



void main(void)
{   DIO_vidSetPinDir(b,pin3,output);
 84c:	0f 93       	push	r16
 84e:	1f 93       	push	r17
 850:	df 93       	push	r29
 852:	cf 93       	push	r28
 854:	cd b7       	in	r28, 0x3d	; 61
 856:	de b7       	in	r29, 0x3e	; 62
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	63 e0       	ldi	r22, 0x03	; 3
 85c:	41 e0       	ldi	r20, 0x01	; 1
 85e:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_vidSetPinDir>

     ADC_init();
 862:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_init>
     timer0_vidInit();
 866:	0e 94 3d 04 	call	0x87a	; 0x87a <timer0_vidInit>

	while(1)
	{
		OCR0=ADC_u16Read(0);
 86a:	0c e5       	ldi	r16, 0x5C	; 92
 86c:	10 e0       	ldi	r17, 0x00	; 0
 86e:	80 e0       	ldi	r24, 0x00	; 0
 870:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_u16Read>
 874:	f8 01       	movw	r30, r16
 876:	80 83       	st	Z, r24
 878:	f8 cf       	rjmp	.-16     	; 0x86a <__stack+0xb>

0000087a <timer0_vidInit>:
u32 counter=0,c1=0,c2=0,c3=0;
u8 flag=0;
u32 duty=0;

void timer0_vidInit(void)
{
 87a:	df 93       	push	r29
 87c:	cf 93       	push	r28
 87e:	cd b7       	in	r28, 0x3d	; 61
 880:	de b7       	in	r29, 0x3e	; 62
  //  OCR0=64;  // value to compare dutycycle 25% of 256
	TCCR0=0b01101101; //timer control
 882:	e3 e5       	ldi	r30, 0x53	; 83
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	8d e6       	ldi	r24, 0x6D	; 109
 888:	80 83       	st	Z, r24


}
 88a:	cf 91       	pop	r28
 88c:	df 91       	pop	r29
 88e:	08 95       	ret

00000890 <timer1_vidInit>:
void timer1_vidInit(void)
{
 890:	df 93       	push	r29
 892:	cf 93       	push	r28
 894:	cd b7       	in	r28, 0x3d	; 61
 896:	de b7       	in	r29, 0x3e	; 62
    TCCR1A=0b00000000;
 898:	ef e4       	ldi	r30, 0x4F	; 79
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	10 82       	st	Z, r1
    TCCR1B=0b01000001;
 89e:	ee e4       	ldi	r30, 0x4E	; 78
 8a0:	f0 e0       	ldi	r31, 0x00	; 0
 8a2:	81 e4       	ldi	r24, 0x41	; 65
 8a4:	80 83       	st	Z, r24
    Set_Bit(TIMSK,5); // icu int
 8a6:	a9 e5       	ldi	r26, 0x59	; 89
 8a8:	b0 e0       	ldi	r27, 0x00	; 0
 8aa:	e9 e5       	ldi	r30, 0x59	; 89
 8ac:	f0 e0       	ldi	r31, 0x00	; 0
 8ae:	80 81       	ld	r24, Z
 8b0:	80 62       	ori	r24, 0x20	; 32
 8b2:	8c 93       	st	X, r24
    Set_Bit(TIMSK,2); //overflow int
 8b4:	a9 e5       	ldi	r26, 0x59	; 89
 8b6:	b0 e0       	ldi	r27, 0x00	; 0
 8b8:	e9 e5       	ldi	r30, 0x59	; 89
 8ba:	f0 e0       	ldi	r31, 0x00	; 0
 8bc:	80 81       	ld	r24, Z
 8be:	84 60       	ori	r24, 0x04	; 4
 8c0:	8c 93       	st	X, r24
    Set_Bit(SREG,7); // GI INT
 8c2:	af e5       	ldi	r26, 0x5F	; 95
 8c4:	b0 e0       	ldi	r27, 0x00	; 0
 8c6:	ef e5       	ldi	r30, 0x5F	; 95
 8c8:	f0 e0       	ldi	r31, 0x00	; 0
 8ca:	80 81       	ld	r24, Z
 8cc:	80 68       	ori	r24, 0x80	; 128
 8ce:	8c 93       	st	X, r24
    DIO_vidSetPinDir(d,pin6,input);
 8d0:	83 e0       	ldi	r24, 0x03	; 3
 8d2:	66 e0       	ldi	r22, 0x06	; 6
 8d4:	40 e0       	ldi	r20, 0x00	; 0
 8d6:	0e 94 9d 00 	call	0x13a	; 0x13a <DIO_vidSetPinDir>

}
 8da:	cf 91       	pop	r28
 8dc:	df 91       	pop	r29
 8de:	08 95       	ret

000008e0 <__vector_6>:

void __vector_6(void) //icu
{
 8e0:	1f 92       	push	r1
 8e2:	0f 92       	push	r0
 8e4:	0f b6       	in	r0, 0x3f	; 63
 8e6:	0f 92       	push	r0
 8e8:	11 24       	eor	r1, r1
 8ea:	ef 92       	push	r14
 8ec:	ff 92       	push	r15
 8ee:	0f 93       	push	r16
 8f0:	1f 93       	push	r17
 8f2:	2f 93       	push	r18
 8f4:	3f 93       	push	r19
 8f6:	4f 93       	push	r20
 8f8:	5f 93       	push	r21
 8fa:	6f 93       	push	r22
 8fc:	7f 93       	push	r23
 8fe:	8f 93       	push	r24
 900:	9f 93       	push	r25
 902:	af 93       	push	r26
 904:	bf 93       	push	r27
 906:	ef 93       	push	r30
 908:	ff 93       	push	r31
 90a:	df 93       	push	r29
 90c:	cf 93       	push	r28
 90e:	cd b7       	in	r28, 0x3d	; 61
 910:	de b7       	in	r29, 0x3e	; 62

   if(flag==0)
 912:	80 91 70 00 	lds	r24, 0x0070
 916:	88 23       	and	r24, r24
 918:	f1 f4       	brne	.+60     	; 0x956 <__vector_6+0x76>
   {   c1=ICR1L;
 91a:	e6 e4       	ldi	r30, 0x46	; 70
 91c:	f0 e0       	ldi	r31, 0x00	; 0
 91e:	80 81       	ld	r24, Z
 920:	88 2f       	mov	r24, r24
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	a0 e0       	ldi	r26, 0x00	; 0
 926:	b0 e0       	ldi	r27, 0x00	; 0
 928:	80 93 64 00 	sts	0x0064, r24
 92c:	90 93 65 00 	sts	0x0065, r25
 930:	a0 93 66 00 	sts	0x0066, r26
 934:	b0 93 67 00 	sts	0x0067, r27
	   counter=0;
 938:	10 92 60 00 	sts	0x0060, r1
 93c:	10 92 61 00 	sts	0x0061, r1
 940:	10 92 62 00 	sts	0x0062, r1
 944:	10 92 63 00 	sts	0x0063, r1
	   Clr_Bit(TCCR1B,6);
 948:	ae e4       	ldi	r26, 0x4E	; 78
 94a:	b0 e0       	ldi	r27, 0x00	; 0
 94c:	ee e4       	ldi	r30, 0x4E	; 78
 94e:	f0 e0       	ldi	r31, 0x00	; 0
 950:	80 81       	ld	r24, Z
 952:	8f 7b       	andi	r24, 0xBF	; 191
 954:	8c 93       	st	X, r24
   }
   if(flag==1)
 956:	80 91 70 00 	lds	r24, 0x0070
 95a:	81 30       	cpi	r24, 0x01	; 1
 95c:	61 f5       	brne	.+88     	; 0x9b6 <__vector_6+0xd6>
     {   c2=ICR1L+(counter*65535);
 95e:	e6 e4       	ldi	r30, 0x46	; 70
 960:	f0 e0       	ldi	r31, 0x00	; 0
 962:	80 81       	ld	r24, Z
 964:	e8 2e       	mov	r14, r24
 966:	ff 24       	eor	r15, r15
 968:	00 e0       	ldi	r16, 0x00	; 0
 96a:	10 e0       	ldi	r17, 0x00	; 0
 96c:	80 91 60 00 	lds	r24, 0x0060
 970:	90 91 61 00 	lds	r25, 0x0061
 974:	a0 91 62 00 	lds	r26, 0x0062
 978:	b0 91 63 00 	lds	r27, 0x0063
 97c:	2f ef       	ldi	r18, 0xFF	; 255
 97e:	3f ef       	ldi	r19, 0xFF	; 255
 980:	40 e0       	ldi	r20, 0x00	; 0
 982:	50 e0       	ldi	r21, 0x00	; 0
 984:	bc 01       	movw	r22, r24
 986:	cd 01       	movw	r24, r26
 988:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__mulsi3>
 98c:	dc 01       	movw	r26, r24
 98e:	cb 01       	movw	r24, r22
 990:	8e 0d       	add	r24, r14
 992:	9f 1d       	adc	r25, r15
 994:	a0 1f       	adc	r26, r16
 996:	b1 1f       	adc	r27, r17
 998:	80 93 68 00 	sts	0x0068, r24
 99c:	90 93 69 00 	sts	0x0069, r25
 9a0:	a0 93 6a 00 	sts	0x006A, r26
 9a4:	b0 93 6b 00 	sts	0x006B, r27

  	   Set_Bit(TCCR1B,6);
 9a8:	ae e4       	ldi	r26, 0x4E	; 78
 9aa:	b0 e0       	ldi	r27, 0x00	; 0
 9ac:	ee e4       	ldi	r30, 0x4E	; 78
 9ae:	f0 e0       	ldi	r31, 0x00	; 0
 9b0:	80 81       	ld	r24, Z
 9b2:	80 64       	ori	r24, 0x40	; 64
 9b4:	8c 93       	st	X, r24
     }
   if(flag==2)
 9b6:	80 91 70 00 	lds	r24, 0x0070
 9ba:	82 30       	cpi	r24, 0x02	; 2
 9bc:	09 f0       	breq	.+2      	; 0x9c0 <__vector_6+0xe0>
 9be:	51 c0       	rjmp	.+162    	; 0xa62 <__vector_6+0x182>
     {   c3=ICR1L+(counter*65535);
 9c0:	e6 e4       	ldi	r30, 0x46	; 70
 9c2:	f0 e0       	ldi	r31, 0x00	; 0
 9c4:	80 81       	ld	r24, Z
 9c6:	e8 2e       	mov	r14, r24
 9c8:	ff 24       	eor	r15, r15
 9ca:	00 e0       	ldi	r16, 0x00	; 0
 9cc:	10 e0       	ldi	r17, 0x00	; 0
 9ce:	80 91 60 00 	lds	r24, 0x0060
 9d2:	90 91 61 00 	lds	r25, 0x0061
 9d6:	a0 91 62 00 	lds	r26, 0x0062
 9da:	b0 91 63 00 	lds	r27, 0x0063
 9de:	2f ef       	ldi	r18, 0xFF	; 255
 9e0:	3f ef       	ldi	r19, 0xFF	; 255
 9e2:	40 e0       	ldi	r20, 0x00	; 0
 9e4:	50 e0       	ldi	r21, 0x00	; 0
 9e6:	bc 01       	movw	r22, r24
 9e8:	cd 01       	movw	r24, r26
 9ea:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__mulsi3>
 9ee:	dc 01       	movw	r26, r24
 9f0:	cb 01       	movw	r24, r22
 9f2:	8e 0d       	add	r24, r14
 9f4:	9f 1d       	adc	r25, r15
 9f6:	a0 1f       	adc	r26, r16
 9f8:	b1 1f       	adc	r27, r17
 9fa:	80 93 6c 00 	sts	0x006C, r24
 9fe:	90 93 6d 00 	sts	0x006D, r25
 a02:	a0 93 6e 00 	sts	0x006E, r26
 a06:	b0 93 6f 00 	sts	0x006F, r27
  	   counter=ICR1L+(counter*65535);
 a0a:	e6 e4       	ldi	r30, 0x46	; 70
 a0c:	f0 e0       	ldi	r31, 0x00	; 0
 a0e:	80 81       	ld	r24, Z
 a10:	e8 2e       	mov	r14, r24
 a12:	ff 24       	eor	r15, r15
 a14:	00 e0       	ldi	r16, 0x00	; 0
 a16:	10 e0       	ldi	r17, 0x00	; 0
 a18:	80 91 60 00 	lds	r24, 0x0060
 a1c:	90 91 61 00 	lds	r25, 0x0061
 a20:	a0 91 62 00 	lds	r26, 0x0062
 a24:	b0 91 63 00 	lds	r27, 0x0063
 a28:	2f ef       	ldi	r18, 0xFF	; 255
 a2a:	3f ef       	ldi	r19, 0xFF	; 255
 a2c:	40 e0       	ldi	r20, 0x00	; 0
 a2e:	50 e0       	ldi	r21, 0x00	; 0
 a30:	bc 01       	movw	r22, r24
 a32:	cd 01       	movw	r24, r26
 a34:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__mulsi3>
 a38:	dc 01       	movw	r26, r24
 a3a:	cb 01       	movw	r24, r22
 a3c:	8e 0d       	add	r24, r14
 a3e:	9f 1d       	adc	r25, r15
 a40:	a0 1f       	adc	r26, r16
 a42:	b1 1f       	adc	r27, r17
 a44:	80 93 60 00 	sts	0x0060, r24
 a48:	90 93 61 00 	sts	0x0061, r25
 a4c:	a0 93 62 00 	sts	0x0062, r26
 a50:	b0 93 63 00 	sts	0x0063, r27
  	   Clr_Bit(TIMSK,5); // Disable icu INT
 a54:	a9 e5       	ldi	r26, 0x59	; 89
 a56:	b0 e0       	ldi	r27, 0x00	; 0
 a58:	e9 e5       	ldi	r30, 0x59	; 89
 a5a:	f0 e0       	ldi	r31, 0x00	; 0
 a5c:	80 81       	ld	r24, Z
 a5e:	8f 7d       	andi	r24, 0xDF	; 223
 a60:	8c 93       	st	X, r24
     }

     flag++;
 a62:	80 91 70 00 	lds	r24, 0x0070
 a66:	8f 5f       	subi	r24, 0xFF	; 255
 a68:	80 93 70 00 	sts	0x0070, r24
}
 a6c:	cf 91       	pop	r28
 a6e:	df 91       	pop	r29
 a70:	ff 91       	pop	r31
 a72:	ef 91       	pop	r30
 a74:	bf 91       	pop	r27
 a76:	af 91       	pop	r26
 a78:	9f 91       	pop	r25
 a7a:	8f 91       	pop	r24
 a7c:	7f 91       	pop	r23
 a7e:	6f 91       	pop	r22
 a80:	5f 91       	pop	r21
 a82:	4f 91       	pop	r20
 a84:	3f 91       	pop	r19
 a86:	2f 91       	pop	r18
 a88:	1f 91       	pop	r17
 a8a:	0f 91       	pop	r16
 a8c:	ff 90       	pop	r15
 a8e:	ef 90       	pop	r14
 a90:	0f 90       	pop	r0
 a92:	0f be       	out	0x3f, r0	; 63
 a94:	0f 90       	pop	r0
 a96:	1f 90       	pop	r1
 a98:	18 95       	reti

00000a9a <__vector_9>:

void __vector_9(void)
{
 a9a:	1f 92       	push	r1
 a9c:	0f 92       	push	r0
 a9e:	0f b6       	in	r0, 0x3f	; 63
 aa0:	0f 92       	push	r0
 aa2:	11 24       	eor	r1, r1
 aa4:	8f 93       	push	r24
 aa6:	9f 93       	push	r25
 aa8:	af 93       	push	r26
 aaa:	bf 93       	push	r27
 aac:	df 93       	push	r29
 aae:	cf 93       	push	r28
 ab0:	cd b7       	in	r28, 0x3d	; 61
 ab2:	de b7       	in	r29, 0x3e	; 62
	counter++;
 ab4:	80 91 60 00 	lds	r24, 0x0060
 ab8:	90 91 61 00 	lds	r25, 0x0061
 abc:	a0 91 62 00 	lds	r26, 0x0062
 ac0:	b0 91 63 00 	lds	r27, 0x0063
 ac4:	01 96       	adiw	r24, 0x01	; 1
 ac6:	a1 1d       	adc	r26, r1
 ac8:	b1 1d       	adc	r27, r1
 aca:	80 93 60 00 	sts	0x0060, r24
 ace:	90 93 61 00 	sts	0x0061, r25
 ad2:	a0 93 62 00 	sts	0x0062, r26
 ad6:	b0 93 63 00 	sts	0x0063, r27
}
 ada:	cf 91       	pop	r28
 adc:	df 91       	pop	r29
 ade:	bf 91       	pop	r27
 ae0:	af 91       	pop	r26
 ae2:	9f 91       	pop	r25
 ae4:	8f 91       	pop	r24
 ae6:	0f 90       	pop	r0
 ae8:	0f be       	out	0x3f, r0	; 63
 aea:	0f 90       	pop	r0
 aec:	1f 90       	pop	r1
 aee:	18 95       	reti

00000af0 <__mulsi3>:
 af0:	62 9f       	mul	r22, r18
 af2:	d0 01       	movw	r26, r0
 af4:	73 9f       	mul	r23, r19
 af6:	f0 01       	movw	r30, r0
 af8:	82 9f       	mul	r24, r18
 afa:	e0 0d       	add	r30, r0
 afc:	f1 1d       	adc	r31, r1
 afe:	64 9f       	mul	r22, r20
 b00:	e0 0d       	add	r30, r0
 b02:	f1 1d       	adc	r31, r1
 b04:	92 9f       	mul	r25, r18
 b06:	f0 0d       	add	r31, r0
 b08:	83 9f       	mul	r24, r19
 b0a:	f0 0d       	add	r31, r0
 b0c:	74 9f       	mul	r23, r20
 b0e:	f0 0d       	add	r31, r0
 b10:	65 9f       	mul	r22, r21
 b12:	f0 0d       	add	r31, r0
 b14:	99 27       	eor	r25, r25
 b16:	72 9f       	mul	r23, r18
 b18:	b0 0d       	add	r27, r0
 b1a:	e1 1d       	adc	r30, r1
 b1c:	f9 1f       	adc	r31, r25
 b1e:	63 9f       	mul	r22, r19
 b20:	b0 0d       	add	r27, r0
 b22:	e1 1d       	adc	r30, r1
 b24:	f9 1f       	adc	r31, r25
 b26:	bd 01       	movw	r22, r26
 b28:	cf 01       	movw	r24, r30
 b2a:	11 24       	eor	r1, r1
 b2c:	08 95       	ret

00000b2e <_exit>:
 b2e:	f8 94       	cli

00000b30 <__stop_program>:
 b30:	ff cf       	rjmp	.-2      	; 0xb30 <__stop_program>
