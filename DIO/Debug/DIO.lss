
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006f0  00000000  00000000  000006f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000038c  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3d 03 	call	0x67a	; 0x67a <main>
  64:	0c 94 4f 03 	jmp	0x69e	; 0x69e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <dio_vidSetPinDir>:
#include "utils.h"
#include "dio.h"


void dio_vidSetPinDir(u8 port,u8 pin,u8 dir)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <dio_vidSetPinDir+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <dio_vidSetPinDir+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	89 83       	std	Y+1, r24	; 0x01
  7c:	6a 83       	std	Y+2, r22	; 0x02
  7e:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
  80:	89 81       	ldd	r24, Y+1	; 0x01
  82:	28 2f       	mov	r18, r24
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	3d 83       	std	Y+5, r19	; 0x05
  88:	2c 83       	std	Y+4, r18	; 0x04
  8a:	8c 81       	ldd	r24, Y+4	; 0x04
  8c:	9d 81       	ldd	r25, Y+5	; 0x05
  8e:	81 30       	cpi	r24, 0x01	; 1
  90:	91 05       	cpc	r25, r1
  92:	09 f4       	brne	.+2      	; 0x96 <dio_vidSetPinDir+0x2a>
  94:	46 c0       	rjmp	.+140    	; 0x122 <dio_vidSetPinDir+0xb6>
  96:	2c 81       	ldd	r18, Y+4	; 0x04
  98:	3d 81       	ldd	r19, Y+5	; 0x05
  9a:	22 30       	cpi	r18, 0x02	; 2
  9c:	31 05       	cpc	r19, r1
  9e:	2c f4       	brge	.+10     	; 0xaa <dio_vidSetPinDir+0x3e>
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	9d 81       	ldd	r25, Y+5	; 0x05
  a4:	00 97       	sbiw	r24, 0x00	; 0
  a6:	71 f0       	breq	.+28     	; 0xc4 <dio_vidSetPinDir+0x58>
  a8:	c7 c0       	rjmp	.+398    	; 0x238 <dio_vidSetPinDir+0x1cc>
  aa:	2c 81       	ldd	r18, Y+4	; 0x04
  ac:	3d 81       	ldd	r19, Y+5	; 0x05
  ae:	22 30       	cpi	r18, 0x02	; 2
  b0:	31 05       	cpc	r19, r1
  b2:	09 f4       	brne	.+2      	; 0xb6 <dio_vidSetPinDir+0x4a>
  b4:	65 c0       	rjmp	.+202    	; 0x180 <dio_vidSetPinDir+0x114>
  b6:	8c 81       	ldd	r24, Y+4	; 0x04
  b8:	9d 81       	ldd	r25, Y+5	; 0x05
  ba:	83 30       	cpi	r24, 0x03	; 3
  bc:	91 05       	cpc	r25, r1
  be:	09 f4       	brne	.+2      	; 0xc2 <dio_vidSetPinDir+0x56>
  c0:	8e c0       	rjmp	.+284    	; 0x1de <dio_vidSetPinDir+0x172>
  c2:	ba c0       	rjmp	.+372    	; 0x238 <dio_vidSetPinDir+0x1cc>
	{
	case a:
		if(dir==input)
  c4:	8b 81       	ldd	r24, Y+3	; 0x03
  c6:	88 23       	and	r24, r24
  c8:	a1 f4       	brne	.+40     	; 0xf2 <dio_vidSetPinDir+0x86>
			clr_bit(DDRA,pin);
  ca:	aa e3       	ldi	r26, 0x3A	; 58
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	ea e3       	ldi	r30, 0x3A	; 58
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	48 2f       	mov	r20, r24
  d6:	8a 81       	ldd	r24, Y+2	; 0x02
  d8:	28 2f       	mov	r18, r24
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 2e       	mov	r0, r18
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <dio_vidSetPinDir+0x7c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	0a 94       	dec	r0
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <dio_vidSetPinDir+0x78>
  ec:	80 95       	com	r24
  ee:	84 23       	and	r24, r20
  f0:	8c 93       	st	X, r24
		if(dir==output)
  f2:	8b 81       	ldd	r24, Y+3	; 0x03
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	09 f0       	breq	.+2      	; 0xfa <dio_vidSetPinDir+0x8e>
  f8:	9f c0       	rjmp	.+318    	; 0x238 <dio_vidSetPinDir+0x1cc>
					set_bit(DDRA,pin);
  fa:	aa e3       	ldi	r26, 0x3A	; 58
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	ea e3       	ldi	r30, 0x3A	; 58
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	48 2f       	mov	r20, r24
 106:	8a 81       	ldd	r24, Y+2	; 0x02
 108:	28 2f       	mov	r18, r24
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 2e       	mov	r0, r18
 112:	02 c0       	rjmp	.+4      	; 0x118 <dio_vidSetPinDir+0xac>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	0a 94       	dec	r0
 11a:	e2 f7       	brpl	.-8      	; 0x114 <dio_vidSetPinDir+0xa8>
 11c:	84 2b       	or	r24, r20
 11e:	8c 93       	st	X, r24
 120:	8b c0       	rjmp	.+278    	; 0x238 <dio_vidSetPinDir+0x1cc>
		break;

	case b:
		if(dir==input)
 122:	8b 81       	ldd	r24, Y+3	; 0x03
 124:	88 23       	and	r24, r24
 126:	a1 f4       	brne	.+40     	; 0x150 <dio_vidSetPinDir+0xe4>
			clr_bit(DDRB,pin);
 128:	a7 e3       	ldi	r26, 0x37	; 55
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	e7 e3       	ldi	r30, 0x37	; 55
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	48 2f       	mov	r20, r24
 134:	8a 81       	ldd	r24, Y+2	; 0x02
 136:	28 2f       	mov	r18, r24
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 2e       	mov	r0, r18
 140:	02 c0       	rjmp	.+4      	; 0x146 <dio_vidSetPinDir+0xda>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	0a 94       	dec	r0
 148:	e2 f7       	brpl	.-8      	; 0x142 <dio_vidSetPinDir+0xd6>
 14a:	80 95       	com	r24
 14c:	84 23       	and	r24, r20
 14e:	8c 93       	st	X, r24
		if(dir==output)
 150:	8b 81       	ldd	r24, Y+3	; 0x03
 152:	81 30       	cpi	r24, 0x01	; 1
 154:	09 f0       	breq	.+2      	; 0x158 <dio_vidSetPinDir+0xec>
 156:	70 c0       	rjmp	.+224    	; 0x238 <dio_vidSetPinDir+0x1cc>
					set_bit(DDRB,pin);
 158:	a7 e3       	ldi	r26, 0x37	; 55
 15a:	b0 e0       	ldi	r27, 0x00	; 0
 15c:	e7 e3       	ldi	r30, 0x37	; 55
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	48 2f       	mov	r20, r24
 164:	8a 81       	ldd	r24, Y+2	; 0x02
 166:	28 2f       	mov	r18, r24
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 2e       	mov	r0, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <dio_vidSetPinDir+0x10a>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	0a 94       	dec	r0
 178:	e2 f7       	brpl	.-8      	; 0x172 <dio_vidSetPinDir+0x106>
 17a:	84 2b       	or	r24, r20
 17c:	8c 93       	st	X, r24
 17e:	5c c0       	rjmp	.+184    	; 0x238 <dio_vidSetPinDir+0x1cc>
		break;
	case c:
			if(dir==input)
 180:	8b 81       	ldd	r24, Y+3	; 0x03
 182:	88 23       	and	r24, r24
 184:	a1 f4       	brne	.+40     	; 0x1ae <dio_vidSetPinDir+0x142>
				clr_bit(DDRC,pin);
 186:	a4 e3       	ldi	r26, 0x34	; 52
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	e4 e3       	ldi	r30, 0x34	; 52
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	48 2f       	mov	r20, r24
 192:	8a 81       	ldd	r24, Y+2	; 0x02
 194:	28 2f       	mov	r18, r24
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 2e       	mov	r0, r18
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <dio_vidSetPinDir+0x138>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <dio_vidSetPinDir+0x134>
 1a8:	80 95       	com	r24
 1aa:	84 23       	and	r24, r20
 1ac:	8c 93       	st	X, r24
			if(dir==output)
 1ae:	8b 81       	ldd	r24, Y+3	; 0x03
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <dio_vidSetPinDir+0x14a>
 1b4:	41 c0       	rjmp	.+130    	; 0x238 <dio_vidSetPinDir+0x1cc>
						set_bit(DDRC,pin);
 1b6:	a4 e3       	ldi	r26, 0x34	; 52
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	e4 e3       	ldi	r30, 0x34	; 52
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	48 2f       	mov	r20, r24
 1c2:	8a 81       	ldd	r24, Y+2	; 0x02
 1c4:	28 2f       	mov	r18, r24
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 2e       	mov	r0, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <dio_vidSetPinDir+0x168>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	0a 94       	dec	r0
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <dio_vidSetPinDir+0x164>
 1d8:	84 2b       	or	r24, r20
 1da:	8c 93       	st	X, r24
 1dc:	2d c0       	rjmp	.+90     	; 0x238 <dio_vidSetPinDir+0x1cc>
			break;
	case d:
			if(dir==input)
 1de:	8b 81       	ldd	r24, Y+3	; 0x03
 1e0:	88 23       	and	r24, r24
 1e2:	a1 f4       	brne	.+40     	; 0x20c <dio_vidSetPinDir+0x1a0>
				clr_bit(DDRD,pin);
 1e4:	a1 e3       	ldi	r26, 0x31	; 49
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	e1 e3       	ldi	r30, 0x31	; 49
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	48 2f       	mov	r20, r24
 1f0:	8a 81       	ldd	r24, Y+2	; 0x02
 1f2:	28 2f       	mov	r18, r24
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 2e       	mov	r0, r18
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <dio_vidSetPinDir+0x196>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	0a 94       	dec	r0
 204:	e2 f7       	brpl	.-8      	; 0x1fe <dio_vidSetPinDir+0x192>
 206:	80 95       	com	r24
 208:	84 23       	and	r24, r20
 20a:	8c 93       	st	X, r24
			if(dir==output)
 20c:	8b 81       	ldd	r24, Y+3	; 0x03
 20e:	81 30       	cpi	r24, 0x01	; 1
 210:	99 f4       	brne	.+38     	; 0x238 <dio_vidSetPinDir+0x1cc>
						set_bit(DDRD,pin);
 212:	a1 e3       	ldi	r26, 0x31	; 49
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	e1 e3       	ldi	r30, 0x31	; 49
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	48 2f       	mov	r20, r24
 21e:	8a 81       	ldd	r24, Y+2	; 0x02
 220:	28 2f       	mov	r18, r24
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 2e       	mov	r0, r18
 22a:	02 c0       	rjmp	.+4      	; 0x230 <dio_vidSetPinDir+0x1c4>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <dio_vidSetPinDir+0x1c0>
 234:	84 2b       	or	r24, r20
 236:	8c 93       	st	X, r24
			break;


	}
}
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	0f 90       	pop	r0
 242:	cf 91       	pop	r28
 244:	df 91       	pop	r29
 246:	08 95       	ret

00000248 <dio_vidWritePinDir>:

void dio_vidWritePinDir(u8 port,u8 pin,u8 value)
{
 248:	df 93       	push	r29
 24a:	cf 93       	push	r28
 24c:	00 d0       	rcall	.+0      	; 0x24e <dio_vidWritePinDir+0x6>
 24e:	00 d0       	rcall	.+0      	; 0x250 <dio_vidWritePinDir+0x8>
 250:	0f 92       	push	r0
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	89 83       	std	Y+1, r24	; 0x01
 258:	6a 83       	std	Y+2, r22	; 0x02
 25a:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	28 2f       	mov	r18, r24
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	3d 83       	std	Y+5, r19	; 0x05
 264:	2c 83       	std	Y+4, r18	; 0x04
 266:	8c 81       	ldd	r24, Y+4	; 0x04
 268:	9d 81       	ldd	r25, Y+5	; 0x05
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	91 05       	cpc	r25, r1
 26e:	09 f4       	brne	.+2      	; 0x272 <dio_vidWritePinDir+0x2a>
 270:	46 c0       	rjmp	.+140    	; 0x2fe <dio_vidWritePinDir+0xb6>
 272:	2c 81       	ldd	r18, Y+4	; 0x04
 274:	3d 81       	ldd	r19, Y+5	; 0x05
 276:	22 30       	cpi	r18, 0x02	; 2
 278:	31 05       	cpc	r19, r1
 27a:	2c f4       	brge	.+10     	; 0x286 <dio_vidWritePinDir+0x3e>
 27c:	8c 81       	ldd	r24, Y+4	; 0x04
 27e:	9d 81       	ldd	r25, Y+5	; 0x05
 280:	00 97       	sbiw	r24, 0x00	; 0
 282:	71 f0       	breq	.+28     	; 0x2a0 <dio_vidWritePinDir+0x58>
 284:	c7 c0       	rjmp	.+398    	; 0x414 <dio_vidWritePinDir+0x1cc>
 286:	2c 81       	ldd	r18, Y+4	; 0x04
 288:	3d 81       	ldd	r19, Y+5	; 0x05
 28a:	22 30       	cpi	r18, 0x02	; 2
 28c:	31 05       	cpc	r19, r1
 28e:	09 f4       	brne	.+2      	; 0x292 <dio_vidWritePinDir+0x4a>
 290:	65 c0       	rjmp	.+202    	; 0x35c <dio_vidWritePinDir+0x114>
 292:	8c 81       	ldd	r24, Y+4	; 0x04
 294:	9d 81       	ldd	r25, Y+5	; 0x05
 296:	83 30       	cpi	r24, 0x03	; 3
 298:	91 05       	cpc	r25, r1
 29a:	09 f4       	brne	.+2      	; 0x29e <dio_vidWritePinDir+0x56>
 29c:	8e c0       	rjmp	.+284    	; 0x3ba <dio_vidWritePinDir+0x172>
 29e:	ba c0       	rjmp	.+372    	; 0x414 <dio_vidWritePinDir+0x1cc>
	{
	case a:
		if(value==low)
 2a0:	8b 81       	ldd	r24, Y+3	; 0x03
 2a2:	88 23       	and	r24, r24
 2a4:	a1 f4       	brne	.+40     	; 0x2ce <dio_vidWritePinDir+0x86>
			clr_bit(PORTA,pin);
 2a6:	ab e3       	ldi	r26, 0x3B	; 59
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
 2aa:	eb e3       	ldi	r30, 0x3B	; 59
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	48 2f       	mov	r20, r24
 2b2:	8a 81       	ldd	r24, Y+2	; 0x02
 2b4:	28 2f       	mov	r18, r24
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 2e       	mov	r0, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <dio_vidWritePinDir+0x7c>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	0a 94       	dec	r0
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <dio_vidWritePinDir+0x78>
 2c8:	80 95       	com	r24
 2ca:	84 23       	and	r24, r20
 2cc:	8c 93       	st	X, r24
		if(value==high)
 2ce:	8b 81       	ldd	r24, Y+3	; 0x03
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	09 f0       	breq	.+2      	; 0x2d6 <dio_vidWritePinDir+0x8e>
 2d4:	9f c0       	rjmp	.+318    	; 0x414 <dio_vidWritePinDir+0x1cc>
					set_bit(PORTA,pin);
 2d6:	ab e3       	ldi	r26, 0x3B	; 59
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	eb e3       	ldi	r30, 0x3B	; 59
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	48 2f       	mov	r20, r24
 2e2:	8a 81       	ldd	r24, Y+2	; 0x02
 2e4:	28 2f       	mov	r18, r24
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 2e       	mov	r0, r18
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <dio_vidWritePinDir+0xac>
 2f0:	88 0f       	add	r24, r24
 2f2:	99 1f       	adc	r25, r25
 2f4:	0a 94       	dec	r0
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <dio_vidWritePinDir+0xa8>
 2f8:	84 2b       	or	r24, r20
 2fa:	8c 93       	st	X, r24
 2fc:	8b c0       	rjmp	.+278    	; 0x414 <dio_vidWritePinDir+0x1cc>
		break;

	case b:
		if(value==low)
 2fe:	8b 81       	ldd	r24, Y+3	; 0x03
 300:	88 23       	and	r24, r24
 302:	a1 f4       	brne	.+40     	; 0x32c <dio_vidWritePinDir+0xe4>
			clr_bit(PORTB,pin);
 304:	a8 e3       	ldi	r26, 0x38	; 56
 306:	b0 e0       	ldi	r27, 0x00	; 0
 308:	e8 e3       	ldi	r30, 0x38	; 56
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	48 2f       	mov	r20, r24
 310:	8a 81       	ldd	r24, Y+2	; 0x02
 312:	28 2f       	mov	r18, r24
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 2e       	mov	r0, r18
 31c:	02 c0       	rjmp	.+4      	; 0x322 <dio_vidWritePinDir+0xda>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	0a 94       	dec	r0
 324:	e2 f7       	brpl	.-8      	; 0x31e <dio_vidWritePinDir+0xd6>
 326:	80 95       	com	r24
 328:	84 23       	and	r24, r20
 32a:	8c 93       	st	X, r24
		if(value==high)
 32c:	8b 81       	ldd	r24, Y+3	; 0x03
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	09 f0       	breq	.+2      	; 0x334 <dio_vidWritePinDir+0xec>
 332:	70 c0       	rjmp	.+224    	; 0x414 <dio_vidWritePinDir+0x1cc>
					set_bit(PORTB,pin);
 334:	a8 e3       	ldi	r26, 0x38	; 56
 336:	b0 e0       	ldi	r27, 0x00	; 0
 338:	e8 e3       	ldi	r30, 0x38	; 56
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	48 2f       	mov	r20, r24
 340:	8a 81       	ldd	r24, Y+2	; 0x02
 342:	28 2f       	mov	r18, r24
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 2e       	mov	r0, r18
 34c:	02 c0       	rjmp	.+4      	; 0x352 <dio_vidWritePinDir+0x10a>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	0a 94       	dec	r0
 354:	e2 f7       	brpl	.-8      	; 0x34e <dio_vidWritePinDir+0x106>
 356:	84 2b       	or	r24, r20
 358:	8c 93       	st	X, r24
 35a:	5c c0       	rjmp	.+184    	; 0x414 <dio_vidWritePinDir+0x1cc>
		break;
	case c:
			if(value==low)
 35c:	8b 81       	ldd	r24, Y+3	; 0x03
 35e:	88 23       	and	r24, r24
 360:	a1 f4       	brne	.+40     	; 0x38a <dio_vidWritePinDir+0x142>
				clr_bit(PORTC,pin);
 362:	a5 e3       	ldi	r26, 0x35	; 53
 364:	b0 e0       	ldi	r27, 0x00	; 0
 366:	e5 e3       	ldi	r30, 0x35	; 53
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	48 2f       	mov	r20, r24
 36e:	8a 81       	ldd	r24, Y+2	; 0x02
 370:	28 2f       	mov	r18, r24
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	02 2e       	mov	r0, r18
 37a:	02 c0       	rjmp	.+4      	; 0x380 <dio_vidWritePinDir+0x138>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	0a 94       	dec	r0
 382:	e2 f7       	brpl	.-8      	; 0x37c <dio_vidWritePinDir+0x134>
 384:	80 95       	com	r24
 386:	84 23       	and	r24, r20
 388:	8c 93       	st	X, r24
			if(value==high)
 38a:	8b 81       	ldd	r24, Y+3	; 0x03
 38c:	81 30       	cpi	r24, 0x01	; 1
 38e:	09 f0       	breq	.+2      	; 0x392 <dio_vidWritePinDir+0x14a>
 390:	41 c0       	rjmp	.+130    	; 0x414 <dio_vidWritePinDir+0x1cc>
						set_bit(PORTC,pin);
 392:	a5 e3       	ldi	r26, 0x35	; 53
 394:	b0 e0       	ldi	r27, 0x00	; 0
 396:	e5 e3       	ldi	r30, 0x35	; 53
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	80 81       	ld	r24, Z
 39c:	48 2f       	mov	r20, r24
 39e:	8a 81       	ldd	r24, Y+2	; 0x02
 3a0:	28 2f       	mov	r18, r24
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 2e       	mov	r0, r18
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <dio_vidWritePinDir+0x168>
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	0a 94       	dec	r0
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <dio_vidWritePinDir+0x164>
 3b4:	84 2b       	or	r24, r20
 3b6:	8c 93       	st	X, r24
 3b8:	2d c0       	rjmp	.+90     	; 0x414 <dio_vidWritePinDir+0x1cc>
			break;
	case d:
			if(value==low)
 3ba:	8b 81       	ldd	r24, Y+3	; 0x03
 3bc:	88 23       	and	r24, r24
 3be:	a1 f4       	brne	.+40     	; 0x3e8 <dio_vidWritePinDir+0x1a0>
				clr_bit(PORTD,pin);
 3c0:	a2 e3       	ldi	r26, 0x32	; 50
 3c2:	b0 e0       	ldi	r27, 0x00	; 0
 3c4:	e2 e3       	ldi	r30, 0x32	; 50
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	48 2f       	mov	r20, r24
 3cc:	8a 81       	ldd	r24, Y+2	; 0x02
 3ce:	28 2f       	mov	r18, r24
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 2e       	mov	r0, r18
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <dio_vidWritePinDir+0x196>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	0a 94       	dec	r0
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <dio_vidWritePinDir+0x192>
 3e2:	80 95       	com	r24
 3e4:	84 23       	and	r24, r20
 3e6:	8c 93       	st	X, r24
			if(value==high)
 3e8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ea:	81 30       	cpi	r24, 0x01	; 1
 3ec:	99 f4       	brne	.+38     	; 0x414 <dio_vidWritePinDir+0x1cc>
						set_bit(PORTD,pin);
 3ee:	a2 e3       	ldi	r26, 0x32	; 50
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	e2 e3       	ldi	r30, 0x32	; 50
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	48 2f       	mov	r20, r24
 3fa:	8a 81       	ldd	r24, Y+2	; 0x02
 3fc:	28 2f       	mov	r18, r24
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 2e       	mov	r0, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <dio_vidWritePinDir+0x1c4>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	0a 94       	dec	r0
 40e:	e2 f7       	brpl	.-8      	; 0x408 <dio_vidWritePinDir+0x1c0>
 410:	84 2b       	or	r24, r20
 412:	8c 93       	st	X, r24
			break;


	}
}
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	0f 90       	pop	r0
 41a:	0f 90       	pop	r0
 41c:	0f 90       	pop	r0
 41e:	cf 91       	pop	r28
 420:	df 91       	pop	r29
 422:	08 95       	ret

00000424 <dio_u8ReadPinValue>:

u8  dio_u8ReadPinValue(u8 port,u8 pin)
{
 424:	df 93       	push	r29
 426:	cf 93       	push	r28
 428:	00 d0       	rcall	.+0      	; 0x42a <dio_u8ReadPinValue+0x6>
 42a:	00 d0       	rcall	.+0      	; 0x42c <dio_u8ReadPinValue+0x8>
 42c:	0f 92       	push	r0
 42e:	cd b7       	in	r28, 0x3d	; 61
 430:	de b7       	in	r29, 0x3e	; 62
 432:	89 83       	std	Y+1, r24	; 0x01
 434:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
 436:	89 81       	ldd	r24, Y+1	; 0x01
 438:	28 2f       	mov	r18, r24
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	3d 83       	std	Y+5, r19	; 0x05
 43e:	2c 83       	std	Y+4, r18	; 0x04
 440:	6c 81       	ldd	r22, Y+4	; 0x04
 442:	7d 81       	ldd	r23, Y+5	; 0x05
 444:	61 30       	cpi	r22, 0x01	; 1
 446:	71 05       	cpc	r23, r1
 448:	a9 f1       	breq	.+106    	; 0x4b4 <dio_u8ReadPinValue+0x90>
 44a:	8c 81       	ldd	r24, Y+4	; 0x04
 44c:	9d 81       	ldd	r25, Y+5	; 0x05
 44e:	82 30       	cpi	r24, 0x02	; 2
 450:	91 05       	cpc	r25, r1
 452:	34 f4       	brge	.+12     	; 0x460 <dio_u8ReadPinValue+0x3c>
 454:	2c 81       	ldd	r18, Y+4	; 0x04
 456:	3d 81       	ldd	r19, Y+5	; 0x05
 458:	21 15       	cp	r18, r1
 45a:	31 05       	cpc	r19, r1
 45c:	71 f0       	breq	.+28     	; 0x47a <dio_u8ReadPinValue+0x56>
 45e:	81 c0       	rjmp	.+258    	; 0x562 <dio_u8ReadPinValue+0x13e>
 460:	6c 81       	ldd	r22, Y+4	; 0x04
 462:	7d 81       	ldd	r23, Y+5	; 0x05
 464:	62 30       	cpi	r22, 0x02	; 2
 466:	71 05       	cpc	r23, r1
 468:	09 f4       	brne	.+2      	; 0x46c <dio_u8ReadPinValue+0x48>
 46a:	41 c0       	rjmp	.+130    	; 0x4ee <dio_u8ReadPinValue+0xca>
 46c:	8c 81       	ldd	r24, Y+4	; 0x04
 46e:	9d 81       	ldd	r25, Y+5	; 0x05
 470:	83 30       	cpi	r24, 0x03	; 3
 472:	91 05       	cpc	r25, r1
 474:	09 f4       	brne	.+2      	; 0x478 <dio_u8ReadPinValue+0x54>
 476:	58 c0       	rjmp	.+176    	; 0x528 <dio_u8ReadPinValue+0x104>
 478:	74 c0       	rjmp	.+232    	; 0x562 <dio_u8ReadPinValue+0x13e>
	{
	case a:
		return get_bit(PINA,pin);
 47a:	e9 e3       	ldi	r30, 0x39	; 57
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	48 2f       	mov	r20, r24
 482:	8a 81       	ldd	r24, Y+2	; 0x02
 484:	28 2f       	mov	r18, r24
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	bc 01       	movw	r22, r24
 48e:	02 c0       	rjmp	.+4      	; 0x494 <dio_u8ReadPinValue+0x70>
 490:	66 0f       	add	r22, r22
 492:	77 1f       	adc	r23, r23
 494:	2a 95       	dec	r18
 496:	e2 f7       	brpl	.-8      	; 0x490 <dio_u8ReadPinValue+0x6c>
 498:	9b 01       	movw	r18, r22
 49a:	8a 81       	ldd	r24, Y+2	; 0x02
 49c:	88 2f       	mov	r24, r24
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	b9 01       	movw	r22, r18
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <dio_u8ReadPinValue+0x84>
 4a4:	75 95       	asr	r23
 4a6:	67 95       	ror	r22
 4a8:	8a 95       	dec	r24
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <dio_u8ReadPinValue+0x80>
 4ac:	cb 01       	movw	r24, r22
 4ae:	84 23       	and	r24, r20
 4b0:	8b 83       	std	Y+3, r24	; 0x03
 4b2:	58 c0       	rjmp	.+176    	; 0x564 <dio_u8ReadPinValue+0x140>
	break;
	case b:
			return get_bit(PINB,pin);
 4b4:	e6 e3       	ldi	r30, 0x36	; 54
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	48 2f       	mov	r20, r24
 4bc:	8a 81       	ldd	r24, Y+2	; 0x02
 4be:	28 2f       	mov	r18, r24
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	bc 01       	movw	r22, r24
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <dio_u8ReadPinValue+0xaa>
 4ca:	66 0f       	add	r22, r22
 4cc:	77 1f       	adc	r23, r23
 4ce:	2a 95       	dec	r18
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <dio_u8ReadPinValue+0xa6>
 4d2:	9b 01       	movw	r18, r22
 4d4:	8a 81       	ldd	r24, Y+2	; 0x02
 4d6:	88 2f       	mov	r24, r24
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	b9 01       	movw	r22, r18
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <dio_u8ReadPinValue+0xbe>
 4de:	75 95       	asr	r23
 4e0:	67 95       	ror	r22
 4e2:	8a 95       	dec	r24
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <dio_u8ReadPinValue+0xba>
 4e6:	cb 01       	movw	r24, r22
 4e8:	84 23       	and	r24, r20
 4ea:	8b 83       	std	Y+3, r24	; 0x03
 4ec:	3b c0       	rjmp	.+118    	; 0x564 <dio_u8ReadPinValue+0x140>
		break;
	case c:
			return get_bit(PINC,pin);
 4ee:	e3 e3       	ldi	r30, 0x33	; 51
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	80 81       	ld	r24, Z
 4f4:	48 2f       	mov	r20, r24
 4f6:	8a 81       	ldd	r24, Y+2	; 0x02
 4f8:	28 2f       	mov	r18, r24
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	bc 01       	movw	r22, r24
 502:	02 c0       	rjmp	.+4      	; 0x508 <dio_u8ReadPinValue+0xe4>
 504:	66 0f       	add	r22, r22
 506:	77 1f       	adc	r23, r23
 508:	2a 95       	dec	r18
 50a:	e2 f7       	brpl	.-8      	; 0x504 <dio_u8ReadPinValue+0xe0>
 50c:	9b 01       	movw	r18, r22
 50e:	8a 81       	ldd	r24, Y+2	; 0x02
 510:	88 2f       	mov	r24, r24
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	b9 01       	movw	r22, r18
 516:	02 c0       	rjmp	.+4      	; 0x51c <dio_u8ReadPinValue+0xf8>
 518:	75 95       	asr	r23
 51a:	67 95       	ror	r22
 51c:	8a 95       	dec	r24
 51e:	e2 f7       	brpl	.-8      	; 0x518 <dio_u8ReadPinValue+0xf4>
 520:	cb 01       	movw	r24, r22
 522:	84 23       	and	r24, r20
 524:	8b 83       	std	Y+3, r24	; 0x03
 526:	1e c0       	rjmp	.+60     	; 0x564 <dio_u8ReadPinValue+0x140>
		break;
	case d:
			return get_bit(PIND,pin);
 528:	e0 e3       	ldi	r30, 0x30	; 48
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	48 2f       	mov	r20, r24
 530:	8a 81       	ldd	r24, Y+2	; 0x02
 532:	28 2f       	mov	r18, r24
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	bc 01       	movw	r22, r24
 53c:	02 c0       	rjmp	.+4      	; 0x542 <dio_u8ReadPinValue+0x11e>
 53e:	66 0f       	add	r22, r22
 540:	77 1f       	adc	r23, r23
 542:	2a 95       	dec	r18
 544:	e2 f7       	brpl	.-8      	; 0x53e <dio_u8ReadPinValue+0x11a>
 546:	9b 01       	movw	r18, r22
 548:	8a 81       	ldd	r24, Y+2	; 0x02
 54a:	88 2f       	mov	r24, r24
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	b9 01       	movw	r22, r18
 550:	02 c0       	rjmp	.+4      	; 0x556 <dio_u8ReadPinValue+0x132>
 552:	75 95       	asr	r23
 554:	67 95       	ror	r22
 556:	8a 95       	dec	r24
 558:	e2 f7       	brpl	.-8      	; 0x552 <dio_u8ReadPinValue+0x12e>
 55a:	cb 01       	movw	r24, r22
 55c:	84 23       	and	r24, r20
 55e:	8b 83       	std	Y+3, r24	; 0x03
 560:	01 c0       	rjmp	.+2      	; 0x564 <dio_u8ReadPinValue+0x140>
		break;

	default :
	        return 0;
 562:	1b 82       	std	Y+3, r1	; 0x03
 564:	8b 81       	ldd	r24, Y+3	; 0x03

	}
}
 566:	0f 90       	pop	r0
 568:	0f 90       	pop	r0
 56a:	0f 90       	pop	r0
 56c:	0f 90       	pop	r0
 56e:	0f 90       	pop	r0
 570:	cf 91       	pop	r28
 572:	df 91       	pop	r29
 574:	08 95       	ret

00000576 <dio_vidPortDir>:

void dio_vidPortDir(u8 port,u8 dir)
{
 576:	df 93       	push	r29
 578:	cf 93       	push	r28
 57a:	00 d0       	rcall	.+0      	; 0x57c <dio_vidPortDir+0x6>
 57c:	00 d0       	rcall	.+0      	; 0x57e <dio_vidPortDir+0x8>
 57e:	cd b7       	in	r28, 0x3d	; 61
 580:	de b7       	in	r29, 0x3e	; 62
 582:	89 83       	std	Y+1, r24	; 0x01
 584:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
 586:	89 81       	ldd	r24, Y+1	; 0x01
 588:	28 2f       	mov	r18, r24
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	3c 83       	std	Y+4, r19	; 0x04
 58e:	2b 83       	std	Y+3, r18	; 0x03
 590:	8b 81       	ldd	r24, Y+3	; 0x03
 592:	9c 81       	ldd	r25, Y+4	; 0x04
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	91 05       	cpc	r25, r1
 598:	d1 f0       	breq	.+52     	; 0x5ce <dio_vidPortDir+0x58>
 59a:	2b 81       	ldd	r18, Y+3	; 0x03
 59c:	3c 81       	ldd	r19, Y+4	; 0x04
 59e:	22 30       	cpi	r18, 0x02	; 2
 5a0:	31 05       	cpc	r19, r1
 5a2:	2c f4       	brge	.+10     	; 0x5ae <dio_vidPortDir+0x38>
 5a4:	8b 81       	ldd	r24, Y+3	; 0x03
 5a6:	9c 81       	ldd	r25, Y+4	; 0x04
 5a8:	00 97       	sbiw	r24, 0x00	; 0
 5aa:	61 f0       	breq	.+24     	; 0x5c4 <dio_vidPortDir+0x4e>
 5ac:	1e c0       	rjmp	.+60     	; 0x5ea <dio_vidPortDir+0x74>
 5ae:	2b 81       	ldd	r18, Y+3	; 0x03
 5b0:	3c 81       	ldd	r19, Y+4	; 0x04
 5b2:	22 30       	cpi	r18, 0x02	; 2
 5b4:	31 05       	cpc	r19, r1
 5b6:	81 f0       	breq	.+32     	; 0x5d8 <dio_vidPortDir+0x62>
 5b8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ba:	9c 81       	ldd	r25, Y+4	; 0x04
 5bc:	83 30       	cpi	r24, 0x03	; 3
 5be:	91 05       	cpc	r25, r1
 5c0:	81 f0       	breq	.+32     	; 0x5e2 <dio_vidPortDir+0x6c>
 5c2:	13 c0       	rjmp	.+38     	; 0x5ea <dio_vidPortDir+0x74>
	{
	case a:
		DDRA=dir ;
 5c4:	ea e3       	ldi	r30, 0x3A	; 58
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ca:	80 83       	st	Z, r24
 5cc:	0e c0       	rjmp	.+28     	; 0x5ea <dio_vidPortDir+0x74>
		break ;

	case b:
			DDRB=dir;
 5ce:	e7 e3       	ldi	r30, 0x37	; 55
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	8a 81       	ldd	r24, Y+2	; 0x02
 5d4:	80 83       	st	Z, r24
 5d6:	09 c0       	rjmp	.+18     	; 0x5ea <dio_vidPortDir+0x74>
			break ;

		break;
	case c:

			DDRC=dir;
 5d8:	e4 e3       	ldi	r30, 0x34	; 52
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	8a 81       	ldd	r24, Y+2	; 0x02
 5de:	80 83       	st	Z, r24
 5e0:	04 c0       	rjmp	.+8      	; 0x5ea <dio_vidPortDir+0x74>
			break ;
	case d:

			DDRD=dir;
 5e2:	e1 e3       	ldi	r30, 0x31	; 49
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	8a 81       	ldd	r24, Y+2	; 0x02
 5e8:	80 83       	st	Z, r24
			break ;

	}
}
 5ea:	0f 90       	pop	r0
 5ec:	0f 90       	pop	r0
 5ee:	0f 90       	pop	r0
 5f0:	0f 90       	pop	r0
 5f2:	cf 91       	pop	r28
 5f4:	df 91       	pop	r29
 5f6:	08 95       	ret

000005f8 <dio_vidSetPortValue>:

void dio_vidSetPortValue(u8 port,u8 value)
{
 5f8:	df 93       	push	r29
 5fa:	cf 93       	push	r28
 5fc:	00 d0       	rcall	.+0      	; 0x5fe <dio_vidSetPortValue+0x6>
 5fe:	00 d0       	rcall	.+0      	; 0x600 <dio_vidSetPortValue+0x8>
 600:	cd b7       	in	r28, 0x3d	; 61
 602:	de b7       	in	r29, 0x3e	; 62
 604:	89 83       	std	Y+1, r24	; 0x01
 606:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
 608:	89 81       	ldd	r24, Y+1	; 0x01
 60a:	28 2f       	mov	r18, r24
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	3c 83       	std	Y+4, r19	; 0x04
 610:	2b 83       	std	Y+3, r18	; 0x03
 612:	8b 81       	ldd	r24, Y+3	; 0x03
 614:	9c 81       	ldd	r25, Y+4	; 0x04
 616:	81 30       	cpi	r24, 0x01	; 1
 618:	91 05       	cpc	r25, r1
 61a:	d1 f0       	breq	.+52     	; 0x650 <dio_vidSetPortValue+0x58>
 61c:	2b 81       	ldd	r18, Y+3	; 0x03
 61e:	3c 81       	ldd	r19, Y+4	; 0x04
 620:	22 30       	cpi	r18, 0x02	; 2
 622:	31 05       	cpc	r19, r1
 624:	2c f4       	brge	.+10     	; 0x630 <dio_vidSetPortValue+0x38>
 626:	8b 81       	ldd	r24, Y+3	; 0x03
 628:	9c 81       	ldd	r25, Y+4	; 0x04
 62a:	00 97       	sbiw	r24, 0x00	; 0
 62c:	61 f0       	breq	.+24     	; 0x646 <dio_vidSetPortValue+0x4e>
 62e:	1e c0       	rjmp	.+60     	; 0x66c <dio_vidSetPortValue+0x74>
 630:	2b 81       	ldd	r18, Y+3	; 0x03
 632:	3c 81       	ldd	r19, Y+4	; 0x04
 634:	22 30       	cpi	r18, 0x02	; 2
 636:	31 05       	cpc	r19, r1
 638:	81 f0       	breq	.+32     	; 0x65a <dio_vidSetPortValue+0x62>
 63a:	8b 81       	ldd	r24, Y+3	; 0x03
 63c:	9c 81       	ldd	r25, Y+4	; 0x04
 63e:	83 30       	cpi	r24, 0x03	; 3
 640:	91 05       	cpc	r25, r1
 642:	81 f0       	breq	.+32     	; 0x664 <dio_vidSetPortValue+0x6c>
 644:	13 c0       	rjmp	.+38     	; 0x66c <dio_vidSetPortValue+0x74>
	{
	case a:

		PORTA=value;
 646:	eb e3       	ldi	r30, 0x3B	; 59
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	8a 81       	ldd	r24, Y+2	; 0x02
 64c:	80 83       	st	Z, r24
 64e:	0e c0       	rjmp	.+28     	; 0x66c <dio_vidSetPortValue+0x74>
		break;

	case b:
			PORTB=value;
 650:	e8 e3       	ldi	r30, 0x38	; 56
 652:	f0 e0       	ldi	r31, 0x00	; 0
 654:	8a 81       	ldd	r24, Y+2	; 0x02
 656:	80 83       	st	Z, r24
 658:	09 c0       	rjmp	.+18     	; 0x66c <dio_vidSetPortValue+0x74>
			break;

		break;
	case c:

			PORTC=value;
 65a:	e5 e3       	ldi	r30, 0x35	; 53
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	8a 81       	ldd	r24, Y+2	; 0x02
 660:	80 83       	st	Z, r24
 662:	04 c0       	rjmp	.+8      	; 0x66c <dio_vidSetPortValue+0x74>
			break;
	case d:

			PORTD=value;
 664:	e2 e3       	ldi	r30, 0x32	; 50
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	8a 81       	ldd	r24, Y+2	; 0x02
 66a:	80 83       	st	Z, r24
			break;

	}
}
 66c:	0f 90       	pop	r0
 66e:	0f 90       	pop	r0
 670:	0f 90       	pop	r0
 672:	0f 90       	pop	r0
 674:	cf 91       	pop	r28
 676:	df 91       	pop	r29
 678:	08 95       	ret

0000067a <main>:
#include "dio.h"


void main (void)

{
 67a:	df 93       	push	r29
 67c:	cf 93       	push	r28
 67e:	cd b7       	in	r28, 0x3d	; 61
 680:	de b7       	in	r29, 0x3e	; 62
while(1)
{
	dio_vidPortDir(a,0b1111111);
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	6f e7       	ldi	r22, 0x7F	; 127
 686:	0e 94 bb 02 	call	0x576	; 0x576 <dio_vidPortDir>

    dio_vidSetPortValue(a ,0b1111111 );
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	6f e7       	ldi	r22, 0x7F	; 127
 68e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <dio_vidSetPortValue>

    dio_vidWritePinDir(a,pin0,high);
 692:	80 e0       	ldi	r24, 0x00	; 0
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	41 e0       	ldi	r20, 0x01	; 1
 698:	0e 94 24 01 	call	0x248	; 0x248 <dio_vidWritePinDir>
 69c:	f2 cf       	rjmp	.-28     	; 0x682 <main+0x8>

0000069e <_exit>:
 69e:	f8 94       	cli

000006a0 <__stop_program>:
 6a0:	ff cf       	rjmp	.-2      	; 0x6a0 <__stop_program>
