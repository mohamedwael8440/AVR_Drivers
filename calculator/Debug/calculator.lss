
calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000260e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000260e  000026a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800072  00800072  000026b4  2**0
                  ALLOC
  3 .stab         00001dd0  00000000  00000000  000026b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a94  00000000  00000000  00004484  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005207  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000724c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000834d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000092d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009450  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00009712  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009fa0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 77 12 	call	0x24ee	; 0x24ee <main>
      8a:	0c 94 05 13 	jmp	0x260a	; 0x260a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e6       	ldi	r26, 0x69	; 105
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a5 12 	jmp	0x254a	; 0x254a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 95 12 	jmp	0x252a	; 0x252a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 95 12 	jmp	0x252a	; 0x252a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e6       	ldi	r24, 0x69	; 105
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a5 12 	jmp	0x254a	; 0x254a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 91 12 	jmp	0x2522	; 0x2522 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e6       	ldi	r22, 0x69	; 105
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ad 12 	jmp	0x255a	; 0x255a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 95 12 	jmp	0x252a	; 0x252a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 95 12 	jmp	0x252a	; 0x252a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 95 12 	jmp	0x252a	; 0x252a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 99 12 	jmp	0x2532	; 0x2532 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_vidSetPinDir>:
#include "DIO.h"



void DIO_vidSetPinDir (u8 port,u8 pin,u8 dir)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_vidSetPinDir+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <DIO_vidSetPinDir+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	6a 83       	std	Y+2, r22	; 0x02
     cb0:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	3d 83       	std	Y+5, r19	; 0x05
     cba:	2c 83       	std	Y+4, r18	; 0x04
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	9d 81       	ldd	r25, Y+5	; 0x05
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	91 05       	cpc	r25, r1
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <DIO_vidSetPinDir+0x2a>
     cc6:	46 c0       	rjmp	.+140    	; 0xd54 <DIO_vidSetPinDir+0xb6>
     cc8:	2c 81       	ldd	r18, Y+4	; 0x04
     cca:	3d 81       	ldd	r19, Y+5	; 0x05
     ccc:	22 30       	cpi	r18, 0x02	; 2
     cce:	31 05       	cpc	r19, r1
     cd0:	2c f4       	brge	.+10     	; 0xcdc <DIO_vidSetPinDir+0x3e>
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	9d 81       	ldd	r25, Y+5	; 0x05
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	71 f0       	breq	.+28     	; 0xcf6 <DIO_vidSetPinDir+0x58>
     cda:	c7 c0       	rjmp	.+398    	; 0xe6a <DIO_vidSetPinDir+0x1cc>
     cdc:	2c 81       	ldd	r18, Y+4	; 0x04
     cde:	3d 81       	ldd	r19, Y+5	; 0x05
     ce0:	22 30       	cpi	r18, 0x02	; 2
     ce2:	31 05       	cpc	r19, r1
     ce4:	09 f4       	brne	.+2      	; 0xce8 <DIO_vidSetPinDir+0x4a>
     ce6:	65 c0       	rjmp	.+202    	; 0xdb2 <DIO_vidSetPinDir+0x114>
     ce8:	8c 81       	ldd	r24, Y+4	; 0x04
     cea:	9d 81       	ldd	r25, Y+5	; 0x05
     cec:	83 30       	cpi	r24, 0x03	; 3
     cee:	91 05       	cpc	r25, r1
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <DIO_vidSetPinDir+0x56>
     cf2:	8e c0       	rjmp	.+284    	; 0xe10 <DIO_vidSetPinDir+0x172>
     cf4:	ba c0       	rjmp	.+372    	; 0xe6a <DIO_vidSetPinDir+0x1cc>
	{
	case 0:
		if(dir==input)
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	88 23       	and	r24, r24
     cfa:	a1 f4       	brne	.+40     	; 0xd24 <DIO_vidSetPinDir+0x86>
			Clr_Bit(DDRA,pin);
     cfc:	aa e3       	ldi	r26, 0x3A	; 58
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	ea e3       	ldi	r30, 0x3A	; 58
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	48 2f       	mov	r20, r24
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 2e       	mov	r0, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <DIO_vidSetPinDir+0x7c>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	0a 94       	dec	r0
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <DIO_vidSetPinDir+0x78>
     d1e:	80 95       	com	r24
     d20:	84 23       	and	r24, r20
     d22:	8c 93       	st	X, r24
		if(dir==output)
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	81 30       	cpi	r24, 0x01	; 1
     d28:	09 f0       	breq	.+2      	; 0xd2c <DIO_vidSetPinDir+0x8e>
     d2a:	9f c0       	rjmp	.+318    	; 0xe6a <DIO_vidSetPinDir+0x1cc>
			Set_Bit(DDRA,pin);
     d2c:	aa e3       	ldi	r26, 0x3A	; 58
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	ea e3       	ldi	r30, 0x3A	; 58
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	48 2f       	mov	r20, r24
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 2e       	mov	r0, r18
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <DIO_vidSetPinDir+0xac>
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	0a 94       	dec	r0
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <DIO_vidSetPinDir+0xa8>
     d4e:	84 2b       	or	r24, r20
     d50:	8c 93       	st	X, r24
     d52:	8b c0       	rjmp	.+278    	; 0xe6a <DIO_vidSetPinDir+0x1cc>
		break;

	case 1:
			if(dir==input)
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	88 23       	and	r24, r24
     d58:	a1 f4       	brne	.+40     	; 0xd82 <DIO_vidSetPinDir+0xe4>
				Clr_Bit(DDRB,pin);
     d5a:	a7 e3       	ldi	r26, 0x37	; 55
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e7 e3       	ldi	r30, 0x37	; 55
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	48 2f       	mov	r20, r24
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 2e       	mov	r0, r18
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <DIO_vidSetPinDir+0xda>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <DIO_vidSetPinDir+0xd6>
     d7c:	80 95       	com	r24
     d7e:	84 23       	and	r24, r20
     d80:	8c 93       	st	X, r24
			if(dir==output)
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	09 f0       	breq	.+2      	; 0xd8a <DIO_vidSetPinDir+0xec>
     d88:	70 c0       	rjmp	.+224    	; 0xe6a <DIO_vidSetPinDir+0x1cc>
				Set_Bit(DDRB,pin);
     d8a:	a7 e3       	ldi	r26, 0x37	; 55
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e7 e3       	ldi	r30, 0x37	; 55
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <DIO_vidSetPinDir+0x10a>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <DIO_vidSetPinDir+0x106>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	5c c0       	rjmp	.+184    	; 0xe6a <DIO_vidSetPinDir+0x1cc>
			break;

	case 2:
			if(dir==input)
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	88 23       	and	r24, r24
     db6:	a1 f4       	brne	.+40     	; 0xde0 <DIO_vidSetPinDir+0x142>
				Clr_Bit(DDRC,pin);
     db8:	a4 e3       	ldi	r26, 0x34	; 52
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e4 e3       	ldi	r30, 0x34	; 52
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	48 2f       	mov	r20, r24
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	02 2e       	mov	r0, r18
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <DIO_vidSetPinDir+0x138>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	0a 94       	dec	r0
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <DIO_vidSetPinDir+0x134>
     dda:	80 95       	com	r24
     ddc:	84 23       	and	r24, r20
     dde:	8c 93       	st	X, r24
			if(dir==output)
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	81 30       	cpi	r24, 0x01	; 1
     de4:	09 f0       	breq	.+2      	; 0xde8 <DIO_vidSetPinDir+0x14a>
     de6:	41 c0       	rjmp	.+130    	; 0xe6a <DIO_vidSetPinDir+0x1cc>
				Set_Bit(DDRC,pin);
     de8:	a4 e3       	ldi	r26, 0x34	; 52
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e4 e3       	ldi	r30, 0x34	; 52
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	48 2f       	mov	r20, r24
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	02 2e       	mov	r0, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <DIO_vidSetPinDir+0x168>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	0a 94       	dec	r0
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <DIO_vidSetPinDir+0x164>
     e0a:	84 2b       	or	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	2d c0       	rjmp	.+90     	; 0xe6a <DIO_vidSetPinDir+0x1cc>
			break;

	case 3:
			if(dir==input)
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	88 23       	and	r24, r24
     e14:	a1 f4       	brne	.+40     	; 0xe3e <DIO_vidSetPinDir+0x1a0>
				Clr_Bit(DDRD,pin);
     e16:	a1 e3       	ldi	r26, 0x31	; 49
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e1 e3       	ldi	r30, 0x31	; 49
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_vidSetPinDir+0x196>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_vidSetPinDir+0x192>
     e38:	80 95       	com	r24
     e3a:	84 23       	and	r24, r20
     e3c:	8c 93       	st	X, r24
			if(dir==output)
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	99 f4       	brne	.+38     	; 0xe6a <DIO_vidSetPinDir+0x1cc>
				Set_Bit(DDRD,pin);
     e44:	a1 e3       	ldi	r26, 0x31	; 49
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e1 e3       	ldi	r30, 0x31	; 49
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	48 2f       	mov	r20, r24
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	02 2e       	mov	r0, r18
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <DIO_vidSetPinDir+0x1c4>
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	0a 94       	dec	r0
     e64:	e2 f7       	brpl	.-8      	; 0xe5e <DIO_vidSetPinDir+0x1c0>
     e66:	84 2b       	or	r24, r20
     e68:	8c 93       	st	X, r24
			break;
	}
}
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <DIO_vidWritePinValue>:

	void DIO_vidWritePinValue (u8 port,u8 pin,u8 value)
	{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <DIO_vidWritePinValue+0x6>
     e80:	00 d0       	rcall	.+0      	; 0xe82 <DIO_vidWritePinValue+0x8>
     e82:	0f 92       	push	r0
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	89 83       	std	Y+1, r24	; 0x01
     e8a:	6a 83       	std	Y+2, r22	; 0x02
     e8c:	4b 83       	std	Y+3, r20	; 0x03
		switch(port)
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	3d 83       	std	Y+5, r19	; 0x05
     e96:	2c 83       	std	Y+4, r18	; 0x04
     e98:	8c 81       	ldd	r24, Y+4	; 0x04
     e9a:	9d 81       	ldd	r25, Y+5	; 0x05
     e9c:	81 30       	cpi	r24, 0x01	; 1
     e9e:	91 05       	cpc	r25, r1
     ea0:	09 f4       	brne	.+2      	; 0xea4 <DIO_vidWritePinValue+0x2a>
     ea2:	46 c0       	rjmp	.+140    	; 0xf30 <DIO_vidWritePinValue+0xb6>
     ea4:	2c 81       	ldd	r18, Y+4	; 0x04
     ea6:	3d 81       	ldd	r19, Y+5	; 0x05
     ea8:	22 30       	cpi	r18, 0x02	; 2
     eaa:	31 05       	cpc	r19, r1
     eac:	2c f4       	brge	.+10     	; 0xeb8 <DIO_vidWritePinValue+0x3e>
     eae:	8c 81       	ldd	r24, Y+4	; 0x04
     eb0:	9d 81       	ldd	r25, Y+5	; 0x05
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	71 f0       	breq	.+28     	; 0xed2 <DIO_vidWritePinValue+0x58>
     eb6:	c7 c0       	rjmp	.+398    	; 0x1046 <DIO_vidWritePinValue+0x1cc>
     eb8:	2c 81       	ldd	r18, Y+4	; 0x04
     eba:	3d 81       	ldd	r19, Y+5	; 0x05
     ebc:	22 30       	cpi	r18, 0x02	; 2
     ebe:	31 05       	cpc	r19, r1
     ec0:	09 f4       	brne	.+2      	; 0xec4 <DIO_vidWritePinValue+0x4a>
     ec2:	65 c0       	rjmp	.+202    	; 0xf8e <DIO_vidWritePinValue+0x114>
     ec4:	8c 81       	ldd	r24, Y+4	; 0x04
     ec6:	9d 81       	ldd	r25, Y+5	; 0x05
     ec8:	83 30       	cpi	r24, 0x03	; 3
     eca:	91 05       	cpc	r25, r1
     ecc:	09 f4       	brne	.+2      	; 0xed0 <DIO_vidWritePinValue+0x56>
     ece:	8e c0       	rjmp	.+284    	; 0xfec <DIO_vidWritePinValue+0x172>
     ed0:	ba c0       	rjmp	.+372    	; 0x1046 <DIO_vidWritePinValue+0x1cc>
		{
		case 0:
			if(value==low)
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	88 23       	and	r24, r24
     ed6:	a1 f4       	brne	.+40     	; 0xf00 <DIO_vidWritePinValue+0x86>
				Clr_Bit(PORTA,pin);
     ed8:	ab e3       	ldi	r26, 0x3B	; 59
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	eb e3       	ldi	r30, 0x3B	; 59
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_vidWritePinValue+0x7c>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_vidWritePinValue+0x78>
     efa:	80 95       	com	r24
     efc:	84 23       	and	r24, r20
     efe:	8c 93       	st	X, r24
			if(value==high)
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	81 30       	cpi	r24, 0x01	; 1
     f04:	09 f0       	breq	.+2      	; 0xf08 <DIO_vidWritePinValue+0x8e>
     f06:	9f c0       	rjmp	.+318    	; 0x1046 <DIO_vidWritePinValue+0x1cc>
				Set_Bit(PORTA,pin);
     f08:	ab e3       	ldi	r26, 0x3B	; 59
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	eb e3       	ldi	r30, 0x3B	; 59
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	48 2f       	mov	r20, r24
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	02 2e       	mov	r0, r18
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_vidWritePinValue+0xac>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	0a 94       	dec	r0
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_vidWritePinValue+0xa8>
     f2a:	84 2b       	or	r24, r20
     f2c:	8c 93       	st	X, r24
     f2e:	8b c0       	rjmp	.+278    	; 0x1046 <DIO_vidWritePinValue+0x1cc>
			break;

		case 1:
				if(value==low)
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	88 23       	and	r24, r24
     f34:	a1 f4       	brne	.+40     	; 0xf5e <DIO_vidWritePinValue+0xe4>
					Clr_Bit(PORTB,pin);
     f36:	a8 e3       	ldi	r26, 0x38	; 56
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e8 e3       	ldi	r30, 0x38	; 56
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_vidWritePinValue+0xda>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <DIO_vidWritePinValue+0xd6>
     f58:	80 95       	com	r24
     f5a:	84 23       	and	r24, r20
     f5c:	8c 93       	st	X, r24
				if(value==high)
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	09 f0       	breq	.+2      	; 0xf66 <DIO_vidWritePinValue+0xec>
     f64:	70 c0       	rjmp	.+224    	; 0x1046 <DIO_vidWritePinValue+0x1cc>
					Set_Bit(PORTB,pin);
     f66:	a8 e3       	ldi	r26, 0x38	; 56
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e8 e3       	ldi	r30, 0x38	; 56
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <DIO_vidWritePinValue+0x10a>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <DIO_vidWritePinValue+0x106>
     f88:	84 2b       	or	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	5c c0       	rjmp	.+184    	; 0x1046 <DIO_vidWritePinValue+0x1cc>
				break;

		case 2:
				if(value==low)
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	88 23       	and	r24, r24
     f92:	a1 f4       	brne	.+40     	; 0xfbc <DIO_vidWritePinValue+0x142>
					Clr_Bit(PORTC,pin);
     f94:	a5 e3       	ldi	r26, 0x35	; 53
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e5 e3       	ldi	r30, 0x35	; 53
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_vidWritePinValue+0x138>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_vidWritePinValue+0x134>
     fb6:	80 95       	com	r24
     fb8:	84 23       	and	r24, r20
     fba:	8c 93       	st	X, r24
				if(value==high)
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <DIO_vidWritePinValue+0x14a>
     fc2:	41 c0       	rjmp	.+130    	; 0x1046 <DIO_vidWritePinValue+0x1cc>
					Set_Bit(PORTC,pin);
     fc4:	a5 e3       	ldi	r26, 0x35	; 53
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e5 e3       	ldi	r30, 0x35	; 53
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_vidWritePinValue+0x168>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_vidWritePinValue+0x164>
     fe6:	84 2b       	or	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	2d c0       	rjmp	.+90     	; 0x1046 <DIO_vidWritePinValue+0x1cc>
				break;

		case 3:
				if(value==low)
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	88 23       	and	r24, r24
     ff0:	a1 f4       	brne	.+40     	; 0x101a <DIO_vidWritePinValue+0x1a0>
					Clr_Bit(PORTD,pin);
     ff2:	a2 e3       	ldi	r26, 0x32	; 50
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e2 e3       	ldi	r30, 0x32	; 50
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	02 2e       	mov	r0, r18
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <DIO_vidWritePinValue+0x196>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	0a 94       	dec	r0
    1012:	e2 f7       	brpl	.-8      	; 0x100c <DIO_vidWritePinValue+0x192>
    1014:	80 95       	com	r24
    1016:	84 23       	and	r24, r20
    1018:	8c 93       	st	X, r24
				if(value==high)
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	99 f4       	brne	.+38     	; 0x1046 <DIO_vidWritePinValue+0x1cc>
					Set_Bit(PORTD,pin);
    1020:	a2 e3       	ldi	r26, 0x32	; 50
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e2 e3       	ldi	r30, 0x32	; 50
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_vidWritePinValue+0x1c4>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_vidWritePinValue+0x1c0>
    1042:	84 2b       	or	r24, r20
    1044:	8c 93       	st	X, r24
				break;
		}
	}
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <DIO_u8ReadPinValue>:

	u8 DIO_u8ReadPinValue(u8 port, u8 pin)
	{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <DIO_u8ReadPinValue+0x6>
    105c:	00 d0       	rcall	.+0      	; 0x105e <DIO_u8ReadPinValue+0x8>
    105e:	0f 92       	push	r0
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	6a 83       	std	Y+2, r22	; 0x02
		switch(port)
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	3d 83       	std	Y+5, r19	; 0x05
    1070:	2c 83       	std	Y+4, r18	; 0x04
    1072:	4c 81       	ldd	r20, Y+4	; 0x04
    1074:	5d 81       	ldd	r21, Y+5	; 0x05
    1076:	41 30       	cpi	r20, 0x01	; 1
    1078:	51 05       	cpc	r21, r1
    107a:	b1 f1       	breq	.+108    	; 0x10e8 <DIO_u8ReadPinValue+0x92>
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
    107e:	9d 81       	ldd	r25, Y+5	; 0x05
    1080:	82 30       	cpi	r24, 0x02	; 2
    1082:	91 05       	cpc	r25, r1
    1084:	34 f4       	brge	.+12     	; 0x1092 <DIO_u8ReadPinValue+0x3c>
    1086:	2c 81       	ldd	r18, Y+4	; 0x04
    1088:	3d 81       	ldd	r19, Y+5	; 0x05
    108a:	21 15       	cp	r18, r1
    108c:	31 05       	cpc	r19, r1
    108e:	71 f0       	breq	.+28     	; 0x10ac <DIO_u8ReadPinValue+0x56>
    1090:	85 c0       	rjmp	.+266    	; 0x119c <DIO_u8ReadPinValue+0x146>
    1092:	4c 81       	ldd	r20, Y+4	; 0x04
    1094:	5d 81       	ldd	r21, Y+5	; 0x05
    1096:	42 30       	cpi	r20, 0x02	; 2
    1098:	51 05       	cpc	r21, r1
    109a:	09 f4       	brne	.+2      	; 0x109e <DIO_u8ReadPinValue+0x48>
    109c:	43 c0       	rjmp	.+134    	; 0x1124 <DIO_u8ReadPinValue+0xce>
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	9d 81       	ldd	r25, Y+5	; 0x05
    10a2:	83 30       	cpi	r24, 0x03	; 3
    10a4:	91 05       	cpc	r25, r1
    10a6:	09 f4       	brne	.+2      	; 0x10aa <DIO_u8ReadPinValue+0x54>
    10a8:	5b c0       	rjmp	.+182    	; 0x1160 <DIO_u8ReadPinValue+0x10a>
    10aa:	78 c0       	rjmp	.+240    	; 0x119c <DIO_u8ReadPinValue+0x146>
		{
		case a:
			return Get_Bit(PINA,pin);
    10ac:	e9 e3       	ldi	r30, 0x39	; 57
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <DIO_u8ReadPinValue+0x70>
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	2a 95       	dec	r18
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <DIO_u8ReadPinValue+0x6c>
    10ca:	9a 01       	movw	r18, r20
    10cc:	28 23       	and	r18, r24
    10ce:	39 23       	and	r19, r25
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	88 2f       	mov	r24, r24
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	a9 01       	movw	r20, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_u8ReadPinValue+0x88>
    10da:	55 95       	asr	r21
    10dc:	47 95       	ror	r20
    10de:	8a 95       	dec	r24
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_u8ReadPinValue+0x84>
    10e2:	ca 01       	movw	r24, r20
    10e4:	8b 83       	std	Y+3, r24	; 0x03
    10e6:	5c c0       	rjmp	.+184    	; 0x11a0 <DIO_u8ReadPinValue+0x14a>
			break;
		case b:
			return Get_Bit(PINB,pin);
    10e8:	e6 e3       	ldi	r30, 0x36	; 54
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_u8ReadPinValue+0xac>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	2a 95       	dec	r18
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_u8ReadPinValue+0xa8>
    1106:	9a 01       	movw	r18, r20
    1108:	28 23       	and	r18, r24
    110a:	39 23       	and	r19, r25
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	a9 01       	movw	r20, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <DIO_u8ReadPinValue+0xc4>
    1116:	55 95       	asr	r21
    1118:	47 95       	ror	r20
    111a:	8a 95       	dec	r24
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <DIO_u8ReadPinValue+0xc0>
    111e:	ca 01       	movw	r24, r20
    1120:	8b 83       	std	Y+3, r24	; 0x03
    1122:	3e c0       	rjmp	.+124    	; 0x11a0 <DIO_u8ReadPinValue+0x14a>
			break;
		case c:
			return Get_Bit(PINC,pin);
    1124:	e3 e3       	ldi	r30, 0x33	; 51
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	50 e0       	ldi	r21, 0x00	; 0
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_u8ReadPinValue+0xe8>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	2a 95       	dec	r18
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_u8ReadPinValue+0xe4>
    1142:	9a 01       	movw	r18, r20
    1144:	28 23       	and	r18, r24
    1146:	39 23       	and	r19, r25
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	88 2f       	mov	r24, r24
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a9 01       	movw	r20, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_u8ReadPinValue+0x100>
    1152:	55 95       	asr	r21
    1154:	47 95       	ror	r20
    1156:	8a 95       	dec	r24
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_u8ReadPinValue+0xfc>
    115a:	ca 01       	movw	r24, r20
    115c:	8b 83       	std	Y+3, r24	; 0x03
    115e:	20 c0       	rjmp	.+64     	; 0x11a0 <DIO_u8ReadPinValue+0x14a>
			break;
		case d:
			return Get_Bit(PIND,pin);
    1160:	e0 e3       	ldi	r30, 0x30	; 48
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_u8ReadPinValue+0x124>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	2a 95       	dec	r18
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO_u8ReadPinValue+0x120>
    117e:	9a 01       	movw	r18, r20
    1180:	28 23       	and	r18, r24
    1182:	39 23       	and	r19, r25
    1184:	8a 81       	ldd	r24, Y+2	; 0x02
    1186:	88 2f       	mov	r24, r24
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	a9 01       	movw	r20, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <DIO_u8ReadPinValue+0x13c>
    118e:	55 95       	asr	r21
    1190:	47 95       	ror	r20
    1192:	8a 95       	dec	r24
    1194:	e2 f7       	brpl	.-8      	; 0x118e <DIO_u8ReadPinValue+0x138>
    1196:	ca 01       	movw	r24, r20
    1198:	8b 83       	std	Y+3, r24	; 0x03
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <DIO_u8ReadPinValue+0x14a>
			break;
		default :
			return port;
    119c:	59 81       	ldd	r21, Y+1	; 0x01
    119e:	5b 83       	std	Y+3, r21	; 0x03
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
			break;
		}


	}
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <DIO_vidSetPortDir>:

	void DIO_vidSetPortDir(u8 port, u8 Dir)
		{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <DIO_vidSetPortDir+0x6>
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <DIO_vidSetPortDir+0x8>
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	6a 83       	std	Y+2, r22	; 0x02
			switch(port)
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	3c 83       	std	Y+4, r19	; 0x04
    11ca:	2b 83       	std	Y+3, r18	; 0x03
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	9c 81       	ldd	r25, Y+4	; 0x04
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	91 05       	cpc	r25, r1
    11d4:	d1 f0       	breq	.+52     	; 0x120a <DIO_vidSetPortDir+0x58>
    11d6:	2b 81       	ldd	r18, Y+3	; 0x03
    11d8:	3c 81       	ldd	r19, Y+4	; 0x04
    11da:	22 30       	cpi	r18, 0x02	; 2
    11dc:	31 05       	cpc	r19, r1
    11de:	2c f4       	brge	.+10     	; 0x11ea <DIO_vidSetPortDir+0x38>
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	9c 81       	ldd	r25, Y+4	; 0x04
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	61 f0       	breq	.+24     	; 0x1200 <DIO_vidSetPortDir+0x4e>
    11e8:	1e c0       	rjmp	.+60     	; 0x1226 <DIO_vidSetPortDir+0x74>
    11ea:	2b 81       	ldd	r18, Y+3	; 0x03
    11ec:	3c 81       	ldd	r19, Y+4	; 0x04
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	31 05       	cpc	r19, r1
    11f2:	81 f0       	breq	.+32     	; 0x1214 <DIO_vidSetPortDir+0x62>
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	9c 81       	ldd	r25, Y+4	; 0x04
    11f8:	83 30       	cpi	r24, 0x03	; 3
    11fa:	91 05       	cpc	r25, r1
    11fc:	81 f0       	breq	.+32     	; 0x121e <DIO_vidSetPortDir+0x6c>
    11fe:	13 c0       	rjmp	.+38     	; 0x1226 <DIO_vidSetPortDir+0x74>
			{
			case a:
				DDRA=Dir;
    1200:	ea e3       	ldi	r30, 0x3A	; 58
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	80 83       	st	Z, r24
    1208:	0e c0       	rjmp	.+28     	; 0x1226 <DIO_vidSetPortDir+0x74>
				break;
			case b:
				DDRB=Dir;
    120a:	e7 e3       	ldi	r30, 0x37	; 55
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	80 83       	st	Z, r24
    1212:	09 c0       	rjmp	.+18     	; 0x1226 <DIO_vidSetPortDir+0x74>
				break;
			case c:
				DDRC=Dir;
    1214:	e4 e3       	ldi	r30, 0x34	; 52
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	80 83       	st	Z, r24
    121c:	04 c0       	rjmp	.+8      	; 0x1226 <DIO_vidSetPortDir+0x74>
				break;
			case d:
				DDRD=Dir;
    121e:	e1 e3       	ldi	r30, 0x31	; 49
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	80 83       	st	Z, r24
				break;

			}


		}
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <DIO_vidWritePortValue>:

	void DIO_vidWritePortValue(u8 port, u8 Value)
			{
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	00 d0       	rcall	.+0      	; 0x123a <DIO_vidWritePortValue+0x6>
    123a:	00 d0       	rcall	.+0      	; 0x123c <DIO_vidWritePortValue+0x8>
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	89 83       	std	Y+1, r24	; 0x01
    1242:	6a 83       	std	Y+2, r22	; 0x02
				switch(port)
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	3c 83       	std	Y+4, r19	; 0x04
    124c:	2b 83       	std	Y+3, r18	; 0x03
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	91 05       	cpc	r25, r1
    1256:	d1 f0       	breq	.+52     	; 0x128c <DIO_vidWritePortValue+0x58>
    1258:	2b 81       	ldd	r18, Y+3	; 0x03
    125a:	3c 81       	ldd	r19, Y+4	; 0x04
    125c:	22 30       	cpi	r18, 0x02	; 2
    125e:	31 05       	cpc	r19, r1
    1260:	2c f4       	brge	.+10     	; 0x126c <DIO_vidWritePortValue+0x38>
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	9c 81       	ldd	r25, Y+4	; 0x04
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	61 f0       	breq	.+24     	; 0x1282 <DIO_vidWritePortValue+0x4e>
    126a:	1e c0       	rjmp	.+60     	; 0x12a8 <DIO_vidWritePortValue+0x74>
    126c:	2b 81       	ldd	r18, Y+3	; 0x03
    126e:	3c 81       	ldd	r19, Y+4	; 0x04
    1270:	22 30       	cpi	r18, 0x02	; 2
    1272:	31 05       	cpc	r19, r1
    1274:	81 f0       	breq	.+32     	; 0x1296 <DIO_vidWritePortValue+0x62>
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	83 30       	cpi	r24, 0x03	; 3
    127c:	91 05       	cpc	r25, r1
    127e:	81 f0       	breq	.+32     	; 0x12a0 <DIO_vidWritePortValue+0x6c>
    1280:	13 c0       	rjmp	.+38     	; 0x12a8 <DIO_vidWritePortValue+0x74>
				{
				case a:
					PORTA=Value;
    1282:	eb e3       	ldi	r30, 0x3B	; 59
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	80 83       	st	Z, r24
    128a:	0e c0       	rjmp	.+28     	; 0x12a8 <DIO_vidWritePortValue+0x74>
					break;
				case b:
					PORTB=Value;
    128c:	e8 e3       	ldi	r30, 0x38	; 56
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	80 83       	st	Z, r24
    1294:	09 c0       	rjmp	.+18     	; 0x12a8 <DIO_vidWritePortValue+0x74>
					break;
				case c:
					PORTC=Value;
    1296:	e5 e3       	ldi	r30, 0x35	; 53
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	80 83       	st	Z, r24
    129e:	04 c0       	rjmp	.+8      	; 0x12a8 <DIO_vidWritePortValue+0x74>
					break;
				case d:
					PORTD=Value;
    12a0:	e2 e3       	ldi	r30, 0x32	; 50
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	80 83       	st	Z, r24
					break;

				}


			}
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <Keypad_vidInit>:
u8 Pressedkey=' ';
u8 count=0;


void Keypad_vidInit(void)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPortDir(KeypadPort,0b11110000); // high nibble output high , while lower nibble input low //
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	60 ef       	ldi	r22, 0xF0	; 240
    12c2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <DIO_vidSetPortDir>
	DIO_vidWritePortValue(KeypadPort,0b11111111);  // lower nibble input pullup so write high //
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	6f ef       	ldi	r22, 0xFF	; 255
    12ca:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_vidWritePortValue>
}
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <Keypad_vidGetPressedKey>:

void Keypad_vidGetPressedKey(void)
{
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	2e 97       	sbiw	r28, 0x0e	; 14
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
	DIO_vidWritePinValue(KeypadPort,R1,low);
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	67 e0       	ldi	r22, 0x07	; 7
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
	DIO_vidWritePinValue(KeypadPort,R2,high);
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	66 e0       	ldi	r22, 0x06	; 6
    12f6:	41 e0       	ldi	r20, 0x01	; 1
    12f8:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
	DIO_vidWritePinValue(KeypadPort,R3,high);
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	65 e0       	ldi	r22, 0x05	; 5
    1300:	41 e0       	ldi	r20, 0x01	; 1
    1302:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
	DIO_vidWritePinValue(KeypadPort,R4,high);
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	64 e0       	ldi	r22, 0x04	; 4
    130a:	41 e0       	ldi	r20, 0x01	; 1
    130c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>

	if(DIO_u8ReadPinValue(KeypadPort,C1)==0)
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	60 e0       	ldi	r22, 0x00	; 0
    1314:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_u8ReadPinValue>
    1318:	88 23       	and	r24, r24
    131a:	89 f4       	brne	.+34     	; 0x133e <Keypad_vidGetPressedKey+0x6a>
	{
		Pressedkey='1';
    131c:	81 e3       	ldi	r24, 0x31	; 49
    131e:	80 93 71 00 	sts	0x0071, r24
		DIO_vidWritePinValue(b,0,high);
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	41 e0       	ldi	r20, 0x01	; 1
    1328:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
       //Gotoxy(1,1);
		lcd_vidWriteData('1');
    132c:	81 e3       	ldi	r24, 0x31	; 49
    132e:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <lcd_vidWriteData>
		count++;
    1332:	80 91 72 00 	lds	r24, 0x0072
    1336:	8f 5f       	subi	r24, 0xFF	; 255
    1338:	80 93 72 00 	sts	0x0072, r24
    133c:	44 c0       	rjmp	.+136    	; 0x13c6 <Keypad_vidGetPressedKey+0xf2>

	}
	else if (DIO_u8ReadPinValue(KeypadPort,C2)==0)
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	61 e0       	ldi	r22, 0x01	; 1
    1342:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_u8ReadPinValue>
    1346:	88 23       	and	r24, r24
    1348:	89 f4       	brne	.+34     	; 0x136c <Keypad_vidGetPressedKey+0x98>
	{
		Pressedkey='2';
    134a:	82 e3       	ldi	r24, 0x32	; 50
    134c:	80 93 71 00 	sts	0x0071, r24
		DIO_vidWritePinValue(b,0,low);
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
		count++;
    135a:	80 91 72 00 	lds	r24, 0x0072
    135e:	8f 5f       	subi	r24, 0xFF	; 255
    1360:	80 93 72 00 	sts	0x0072, r24
		 //Gotoxy(1,1);
				lcd_vidWriteData('2');
    1364:	82 e3       	ldi	r24, 0x32	; 50
    1366:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <lcd_vidWriteData>
    136a:	2d c0       	rjmp	.+90     	; 0x13c6 <Keypad_vidGetPressedKey+0xf2>
	}
	else if (DIO_u8ReadPinValue(KeypadPort,C3)==0)
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	62 e0       	ldi	r22, 0x02	; 2
    1370:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_u8ReadPinValue>
    1374:	88 23       	and	r24, r24
    1376:	89 f4       	brne	.+34     	; 0x139a <Keypad_vidGetPressedKey+0xc6>
		{
			Pressedkey='3';
    1378:	83 e3       	ldi	r24, 0x33	; 51
    137a:	80 93 71 00 	sts	0x0071, r24
			DIO_vidWritePinValue(b,0,high);
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	41 e0       	ldi	r20, 0x01	; 1
    1384:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
			count++;
    1388:	80 91 72 00 	lds	r24, 0x0072
    138c:	8f 5f       	subi	r24, 0xFF	; 255
    138e:	80 93 72 00 	sts	0x0072, r24
			 //Gotoxy(1,1);
			lcd_vidWriteData('3');
    1392:	83 e3       	ldi	r24, 0x33	; 51
    1394:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <lcd_vidWriteData>
    1398:	16 c0       	rjmp	.+44     	; 0x13c6 <Keypad_vidGetPressedKey+0xf2>
		}
	else if (DIO_u8ReadPinValue(KeypadPort,C4)==0)
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	63 e0       	ldi	r22, 0x03	; 3
    139e:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_u8ReadPinValue>
    13a2:	88 23       	and	r24, r24
    13a4:	81 f4       	brne	.+32     	; 0x13c6 <Keypad_vidGetPressedKey+0xf2>
		{
		Pressedkey='/';
    13a6:	8f e2       	ldi	r24, 0x2F	; 47
    13a8:	80 93 71 00 	sts	0x0071, r24
			DIO_vidWritePinValue(b,0,low);
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	60 e0       	ldi	r22, 0x00	; 0
    13b0:	40 e0       	ldi	r20, 0x00	; 0
    13b2:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
			 //Gotoxy(1,1);
			lcd_vidWriteData('/');
    13b6:	8f e2       	ldi	r24, 0x2F	; 47
    13b8:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <lcd_vidWriteData>
			count++;
    13bc:	80 91 72 00 	lds	r24, 0x0072
    13c0:	8f 5f       	subi	r24, 0xFF	; 255
    13c2:	80 93 72 00 	sts	0x0072, r24
		}



	DIO_vidWritePinValue(KeypadPort,R1,high);
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	67 e0       	ldi	r22, 0x07	; 7
    13ca:	41 e0       	ldi	r20, 0x01	; 1
    13cc:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
		DIO_vidWritePinValue(KeypadPort,R2,low);
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	66 e0       	ldi	r22, 0x06	; 6
    13d4:	40 e0       	ldi	r20, 0x00	; 0
    13d6:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
		DIO_vidWritePinValue(KeypadPort,R3,high);
    13da:	80 e0       	ldi	r24, 0x00	; 0
    13dc:	65 e0       	ldi	r22, 0x05	; 5
    13de:	41 e0       	ldi	r20, 0x01	; 1
    13e0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
		DIO_vidWritePinValue(KeypadPort,R4,high);
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	64 e0       	ldi	r22, 0x04	; 4
    13e8:	41 e0       	ldi	r20, 0x01	; 1
    13ea:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>

		if(DIO_u8ReadPinValue(KeypadPort,C1)==0)
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_u8ReadPinValue>
    13f6:	88 23       	and	r24, r24
    13f8:	89 f4       	brne	.+34     	; 0x141c <Keypad_vidGetPressedKey+0x148>
		{
			Pressedkey='4';
    13fa:	84 e3       	ldi	r24, 0x34	; 52
    13fc:	80 93 71 00 	sts	0x0071, r24
			DIO_vidWritePinValue(b,0,high);
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	41 e0       	ldi	r20, 0x01	; 1
    1406:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
			count++;
    140a:	80 91 72 00 	lds	r24, 0x0072
    140e:	8f 5f       	subi	r24, 0xFF	; 255
    1410:	80 93 72 00 	sts	0x0072, r24
			 //Gotoxy(1,1);
			lcd_vidWriteData('4');
    1414:	84 e3       	ldi	r24, 0x34	; 52
    1416:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <lcd_vidWriteData>
    141a:	44 c0       	rjmp	.+136    	; 0x14a4 <Keypad_vidGetPressedKey+0x1d0>
		}
		else if (DIO_u8ReadPinValue(KeypadPort,C2)==0)
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	61 e0       	ldi	r22, 0x01	; 1
    1420:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_u8ReadPinValue>
    1424:	88 23       	and	r24, r24
    1426:	89 f4       	brne	.+34     	; 0x144a <Keypad_vidGetPressedKey+0x176>
		{
			Pressedkey='5';
    1428:	85 e3       	ldi	r24, 0x35	; 53
    142a:	80 93 71 00 	sts	0x0071, r24
			DIO_vidWritePinValue(b,0,low);
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
			count++;
    1438:	80 91 72 00 	lds	r24, 0x0072
    143c:	8f 5f       	subi	r24, 0xFF	; 255
    143e:	80 93 72 00 	sts	0x0072, r24
			 //Gotoxy(1,1);
			lcd_vidWriteData('5');
    1442:	85 e3       	ldi	r24, 0x35	; 53
    1444:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <lcd_vidWriteData>
    1448:	2d c0       	rjmp	.+90     	; 0x14a4 <Keypad_vidGetPressedKey+0x1d0>
		}
		else if (DIO_u8ReadPinValue(KeypadPort,C3)==0)
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	62 e0       	ldi	r22, 0x02	; 2
    144e:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_u8ReadPinValue>
    1452:	88 23       	and	r24, r24
    1454:	89 f4       	brne	.+34     	; 0x1478 <Keypad_vidGetPressedKey+0x1a4>
			{
				Pressedkey='6';
    1456:	86 e3       	ldi	r24, 0x36	; 54
    1458:	80 93 71 00 	sts	0x0071, r24
				DIO_vidWritePinValue(b,0,high);
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	60 e0       	ldi	r22, 0x00	; 0
    1460:	41 e0       	ldi	r20, 0x01	; 1
    1462:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
				count++;
    1466:	80 91 72 00 	lds	r24, 0x0072
    146a:	8f 5f       	subi	r24, 0xFF	; 255
    146c:	80 93 72 00 	sts	0x0072, r24
				 //Gotoxy(1,1);
				lcd_vidWriteData('6');
    1470:	86 e3       	ldi	r24, 0x36	; 54
    1472:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <lcd_vidWriteData>
    1476:	16 c0       	rjmp	.+44     	; 0x14a4 <Keypad_vidGetPressedKey+0x1d0>
			}
		else if (DIO_u8ReadPinValue(KeypadPort,C4)==0)
    1478:	80 e0       	ldi	r24, 0x00	; 0
    147a:	63 e0       	ldi	r22, 0x03	; 3
    147c:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_u8ReadPinValue>
    1480:	88 23       	and	r24, r24
    1482:	81 f4       	brne	.+32     	; 0x14a4 <Keypad_vidGetPressedKey+0x1d0>
			{
			Pressedkey='*';
    1484:	8a e2       	ldi	r24, 0x2A	; 42
    1486:	80 93 71 00 	sts	0x0071, r24
				DIO_vidWritePinValue(b,0,low);
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
				count++;
    1494:	80 91 72 00 	lds	r24, 0x0072
    1498:	8f 5f       	subi	r24, 0xFF	; 255
    149a:	80 93 72 00 	sts	0x0072, r24
				 //Gotoxy(1,1);
				lcd_vidWriteData('*');
    149e:	8a e2       	ldi	r24, 0x2A	; 42
    14a0:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <lcd_vidWriteData>
			}

		DIO_vidWritePinValue(KeypadPort,R1,high);
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	67 e0       	ldi	r22, 0x07	; 7
    14a8:	41 e0       	ldi	r20, 0x01	; 1
    14aa:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
			DIO_vidWritePinValue(KeypadPort,R2,high);
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	66 e0       	ldi	r22, 0x06	; 6
    14b2:	41 e0       	ldi	r20, 0x01	; 1
    14b4:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
			DIO_vidWritePinValue(KeypadPort,R3,low);
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	65 e0       	ldi	r22, 0x05	; 5
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
			DIO_vidWritePinValue(KeypadPort,R4,high);
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	64 e0       	ldi	r22, 0x04	; 4
    14c6:	41 e0       	ldi	r20, 0x01	; 1
    14c8:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>

			if(DIO_u8ReadPinValue(KeypadPort,C1)==0)
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_u8ReadPinValue>
    14d4:	88 23       	and	r24, r24
    14d6:	89 f4       	brne	.+34     	; 0x14fa <Keypad_vidGetPressedKey+0x226>
			{
				Pressedkey='7';
    14d8:	87 e3       	ldi	r24, 0x37	; 55
    14da:	80 93 71 00 	sts	0x0071, r24
				DIO_vidWritePinValue(b,0,high);
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	41 e0       	ldi	r20, 0x01	; 1
    14e4:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
				count++;
    14e8:	80 91 72 00 	lds	r24, 0x0072
    14ec:	8f 5f       	subi	r24, 0xFF	; 255
    14ee:	80 93 72 00 	sts	0x0072, r24
				 //Gotoxy(1,1);
				lcd_vidWriteData('7');
    14f2:	87 e3       	ldi	r24, 0x37	; 55
    14f4:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <lcd_vidWriteData>
    14f8:	44 c0       	rjmp	.+136    	; 0x1582 <Keypad_vidGetPressedKey+0x2ae>
			}
			else if (DIO_u8ReadPinValue(KeypadPort,C2)==0)
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	61 e0       	ldi	r22, 0x01	; 1
    14fe:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_u8ReadPinValue>
    1502:	88 23       	and	r24, r24
    1504:	89 f4       	brne	.+34     	; 0x1528 <Keypad_vidGetPressedKey+0x254>
			{
				Pressedkey='8';
    1506:	88 e3       	ldi	r24, 0x38	; 56
    1508:	80 93 71 00 	sts	0x0071, r24
				DIO_vidWritePinValue(b,0,low);
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	60 e0       	ldi	r22, 0x00	; 0
    1510:	40 e0       	ldi	r20, 0x00	; 0
    1512:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
				count++;
    1516:	80 91 72 00 	lds	r24, 0x0072
    151a:	8f 5f       	subi	r24, 0xFF	; 255
    151c:	80 93 72 00 	sts	0x0072, r24
				 //Gotoxy(1,1);
				lcd_vidWriteData('8');
    1520:	88 e3       	ldi	r24, 0x38	; 56
    1522:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <lcd_vidWriteData>
    1526:	2d c0       	rjmp	.+90     	; 0x1582 <Keypad_vidGetPressedKey+0x2ae>
			}
			else if (DIO_u8ReadPinValue(KeypadPort,C3)==0)
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	62 e0       	ldi	r22, 0x02	; 2
    152c:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_u8ReadPinValue>
    1530:	88 23       	and	r24, r24
    1532:	89 f4       	brne	.+34     	; 0x1556 <Keypad_vidGetPressedKey+0x282>
				{
					Pressedkey='9';
    1534:	89 e3       	ldi	r24, 0x39	; 57
    1536:	80 93 71 00 	sts	0x0071, r24
					DIO_vidWritePinValue(b,0,high);
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	60 e0       	ldi	r22, 0x00	; 0
    153e:	41 e0       	ldi	r20, 0x01	; 1
    1540:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
					count++;
    1544:	80 91 72 00 	lds	r24, 0x0072
    1548:	8f 5f       	subi	r24, 0xFF	; 255
    154a:	80 93 72 00 	sts	0x0072, r24
					 //Gotoxy(1,1);
					lcd_vidWriteData('9');
    154e:	89 e3       	ldi	r24, 0x39	; 57
    1550:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <lcd_vidWriteData>
    1554:	16 c0       	rjmp	.+44     	; 0x1582 <Keypad_vidGetPressedKey+0x2ae>
				}
			else if (DIO_u8ReadPinValue(KeypadPort,C4)==0)
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	63 e0       	ldi	r22, 0x03	; 3
    155a:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_u8ReadPinValue>
    155e:	88 23       	and	r24, r24
    1560:	81 f4       	brne	.+32     	; 0x1582 <Keypad_vidGetPressedKey+0x2ae>
				{
				Pressedkey='-';
    1562:	8d e2       	ldi	r24, 0x2D	; 45
    1564:	80 93 71 00 	sts	0x0071, r24
					DIO_vidWritePinValue(b,0,low);
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	40 e0       	ldi	r20, 0x00	; 0
    156e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
					count++;
    1572:	80 91 72 00 	lds	r24, 0x0072
    1576:	8f 5f       	subi	r24, 0xFF	; 255
    1578:	80 93 72 00 	sts	0x0072, r24
					// Gotoxy(1,1);
					lcd_vidWriteData('-');
    157c:	8d e2       	ldi	r24, 0x2D	; 45
    157e:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <lcd_vidWriteData>
				}

			DIO_vidWritePinValue(KeypadPort,R1,high);
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	67 e0       	ldi	r22, 0x07	; 7
    1586:	41 e0       	ldi	r20, 0x01	; 1
    1588:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
				DIO_vidWritePinValue(KeypadPort,R2,high);
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	66 e0       	ldi	r22, 0x06	; 6
    1590:	41 e0       	ldi	r20, 0x01	; 1
    1592:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
				DIO_vidWritePinValue(KeypadPort,R3,high);
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	65 e0       	ldi	r22, 0x05	; 5
    159a:	41 e0       	ldi	r20, 0x01	; 1
    159c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
				DIO_vidWritePinValue(KeypadPort,R4,low);
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	64 e0       	ldi	r22, 0x04	; 4
    15a4:	40 e0       	ldi	r20, 0x00	; 0
    15a6:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>

				if(DIO_u8ReadPinValue(KeypadPort,C1)==0)
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_u8ReadPinValue>
    15b2:	88 23       	and	r24, r24
    15b4:	09 f0       	breq	.+2      	; 0x15b8 <Keypad_vidGetPressedKey+0x2e4>
    15b6:	8b c0       	rjmp	.+278    	; 0x16ce <Keypad_vidGetPressedKey+0x3fa>
				{
					Pressedkey='c';
    15b8:	83 e6       	ldi	r24, 0x63	; 99
    15ba:	80 93 71 00 	sts	0x0071, r24
					DIO_vidWritePinValue(b,0,high);
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	41 e0       	ldi	r20, 0x01	; 1
    15c4:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
					count++;
    15c8:	80 91 72 00 	lds	r24, 0x0072
    15cc:	8f 5f       	subi	r24, 0xFF	; 255
    15ce:	80 93 72 00 	sts	0x0072, r24
					 Gotoxy(1,1);
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	61 e0       	ldi	r22, 0x01	; 1
    15d6:	0e 94 49 12 	call	0x2492	; 0x2492 <Gotoxy>
					lcd_write_string("on/of");
    15da:	80 e6       	ldi	r24, 0x60	; 96
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	0e 94 6f 10 	call	0x20de	; 0x20de <lcd_write_string>
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	aa e7       	ldi	r26, 0x7A	; 122
    15e8:	b4 e4       	ldi	r27, 0x44	; 68
    15ea:	8b 87       	std	Y+11, r24	; 0x0b
    15ec:	9c 87       	std	Y+12, r25	; 0x0c
    15ee:	ad 87       	std	Y+13, r26	; 0x0d
    15f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	4a ef       	ldi	r20, 0xFA	; 250
    1600:	54 e4       	ldi	r21, 0x44	; 68
    1602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	8f 83       	std	Y+7, r24	; 0x07
    160c:	98 87       	std	Y+8, r25	; 0x08
    160e:	a9 87       	std	Y+9, r26	; 0x09
    1610:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1612:	6f 81       	ldd	r22, Y+7	; 0x07
    1614:	78 85       	ldd	r23, Y+8	; 0x08
    1616:	89 85       	ldd	r24, Y+9	; 0x09
    1618:	9a 85       	ldd	r25, Y+10	; 0x0a
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e8       	ldi	r20, 0x80	; 128
    1620:	5f e3       	ldi	r21, 0x3F	; 63
    1622:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1626:	88 23       	and	r24, r24
    1628:	2c f4       	brge	.+10     	; 0x1634 <Keypad_vidGetPressedKey+0x360>
		__ticks = 1;
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	9e 83       	std	Y+6, r25	; 0x06
    1630:	8d 83       	std	Y+5, r24	; 0x05
    1632:	3f c0       	rjmp	.+126    	; 0x16b2 <Keypad_vidGetPressedKey+0x3de>
	else if (__tmp > 65535)
    1634:	6f 81       	ldd	r22, Y+7	; 0x07
    1636:	78 85       	ldd	r23, Y+8	; 0x08
    1638:	89 85       	ldd	r24, Y+9	; 0x09
    163a:	9a 85       	ldd	r25, Y+10	; 0x0a
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	3f ef       	ldi	r19, 0xFF	; 255
    1640:	4f e7       	ldi	r20, 0x7F	; 127
    1642:	57 e4       	ldi	r21, 0x47	; 71
    1644:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1648:	18 16       	cp	r1, r24
    164a:	4c f5       	brge	.+82     	; 0x169e <Keypad_vidGetPressedKey+0x3ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    164c:	6b 85       	ldd	r22, Y+11	; 0x0b
    164e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1650:	8d 85       	ldd	r24, Y+13	; 0x0d
    1652:	9e 85       	ldd	r25, Y+14	; 0x0e
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	40 e2       	ldi	r20, 0x20	; 32
    165a:	51 e4       	ldi	r21, 0x41	; 65
    165c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	bc 01       	movw	r22, r24
    1666:	cd 01       	movw	r24, r26
    1668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	9e 83       	std	Y+6, r25	; 0x06
    1672:	8d 83       	std	Y+5, r24	; 0x05
    1674:	0f c0       	rjmp	.+30     	; 0x1694 <Keypad_vidGetPressedKey+0x3c0>
    1676:	88 ec       	ldi	r24, 0xC8	; 200
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	9c 83       	std	Y+4, r25	; 0x04
    167c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	9c 81       	ldd	r25, Y+4	; 0x04
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	f1 f7       	brne	.-4      	; 0x1682 <Keypad_vidGetPressedKey+0x3ae>
    1686:	9c 83       	std	Y+4, r25	; 0x04
    1688:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168a:	8d 81       	ldd	r24, Y+5	; 0x05
    168c:	9e 81       	ldd	r25, Y+6	; 0x06
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	9e 83       	std	Y+6, r25	; 0x06
    1692:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1694:	8d 81       	ldd	r24, Y+5	; 0x05
    1696:	9e 81       	ldd	r25, Y+6	; 0x06
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	69 f7       	brne	.-38     	; 0x1676 <Keypad_vidGetPressedKey+0x3a2>
    169c:	14 c0       	rjmp	.+40     	; 0x16c6 <Keypad_vidGetPressedKey+0x3f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    169e:	6f 81       	ldd	r22, Y+7	; 0x07
    16a0:	78 85       	ldd	r23, Y+8	; 0x08
    16a2:	89 85       	ldd	r24, Y+9	; 0x09
    16a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	9e 83       	std	Y+6, r25	; 0x06
    16b0:	8d 83       	std	Y+5, r24	; 0x05
    16b2:	8d 81       	ldd	r24, Y+5	; 0x05
    16b4:	9e 81       	ldd	r25, Y+6	; 0x06
    16b6:	9a 83       	std	Y+2, r25	; 0x02
    16b8:	89 83       	std	Y+1, r24	; 0x01
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	9a 81       	ldd	r25, Y+2	; 0x02
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	f1 f7       	brne	.-4      	; 0x16be <Keypad_vidGetPressedKey+0x3ea>
    16c2:	9a 83       	std	Y+2, r25	; 0x02
    16c4:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(1000);
					lcd_vidWriteCommand(0x01);
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <lcd_vidWriteCommand>
    16cc:	44 c0       	rjmp	.+136    	; 0x1756 <Keypad_vidGetPressedKey+0x482>

				}
				else if (DIO_u8ReadPinValue(KeypadPort,C2)==0)
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	61 e0       	ldi	r22, 0x01	; 1
    16d2:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_u8ReadPinValue>
    16d6:	88 23       	and	r24, r24
    16d8:	89 f4       	brne	.+34     	; 0x16fc <Keypad_vidGetPressedKey+0x428>
				{
					Pressedkey='0';
    16da:	80 e3       	ldi	r24, 0x30	; 48
    16dc:	80 93 71 00 	sts	0x0071, r24
					DIO_vidWritePinValue(b,0,low);
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	60 e0       	ldi	r22, 0x00	; 0
    16e4:	40 e0       	ldi	r20, 0x00	; 0
    16e6:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
					count++;
    16ea:	80 91 72 00 	lds	r24, 0x0072
    16ee:	8f 5f       	subi	r24, 0xFF	; 255
    16f0:	80 93 72 00 	sts	0x0072, r24
					 //Gotoxy(1,1);
					lcd_vidWriteData('0');
    16f4:	80 e3       	ldi	r24, 0x30	; 48
    16f6:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <lcd_vidWriteData>
    16fa:	2d c0       	rjmp	.+90     	; 0x1756 <Keypad_vidGetPressedKey+0x482>

				}
				else if (DIO_u8ReadPinValue(KeypadPort,C3)==0)
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	62 e0       	ldi	r22, 0x02	; 2
    1700:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_u8ReadPinValue>
    1704:	88 23       	and	r24, r24
    1706:	89 f4       	brne	.+34     	; 0x172a <Keypad_vidGetPressedKey+0x456>
					{
					Pressedkey ='=';
    1708:	8d e3       	ldi	r24, 0x3D	; 61
    170a:	80 93 71 00 	sts	0x0071, r24
						DIO_vidWritePinValue(b,0,high);
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	41 e0       	ldi	r20, 0x01	; 1
    1714:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
						count++;
    1718:	80 91 72 00 	lds	r24, 0x0072
    171c:	8f 5f       	subi	r24, 0xFF	; 255
    171e:	80 93 72 00 	sts	0x0072, r24
						// Gotoxy(1,1);
						lcd_vidWriteData('=');
    1722:	8d e3       	ldi	r24, 0x3D	; 61
    1724:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <lcd_vidWriteData>
    1728:	16 c0       	rjmp	.+44     	; 0x1756 <Keypad_vidGetPressedKey+0x482>
					}
				else if (DIO_u8ReadPinValue(KeypadPort,C4)==0)
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	63 e0       	ldi	r22, 0x03	; 3
    172e:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_u8ReadPinValue>
    1732:	88 23       	and	r24, r24
    1734:	81 f4       	brne	.+32     	; 0x1756 <Keypad_vidGetPressedKey+0x482>
					{
					Pressedkey='+';
    1736:	8b e2       	ldi	r24, 0x2B	; 43
    1738:	80 93 71 00 	sts	0x0071, r24
					count++;
    173c:	80 91 72 00 	lds	r24, 0x0072
    1740:	8f 5f       	subi	r24, 0xFF	; 255
    1742:	80 93 72 00 	sts	0x0072, r24
					 //Gotoxy(1,1);
						DIO_vidWritePinValue(b,0,low);
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	40 e0       	ldi	r20, 0x00	; 0
    174c:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
						lcd_vidWriteData('+');
    1750:	8b e2       	ldi	r24, 0x2B	; 43
    1752:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <lcd_vidWriteData>
					}



}
    1756:	2e 96       	adiw	r28, 0x0e	; 14
    1758:	0f b6       	in	r0, 0x3f	; 63
    175a:	f8 94       	cli
    175c:	de bf       	out	0x3e, r29	; 62
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	cd bf       	out	0x3d, r28	; 61
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <PrintString_fromU8>:
//
// }

void PrintString_fromU8 (s8 x)

{
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	c3 57       	subi	r28, 0x73	; 115
    1772:	d0 40       	sbci	r29, 0x00	; 0
    1774:	0f b6       	in	r0, 0x3f	; 63
    1776:	f8 94       	cli
    1778:	de bf       	out	0x3e, r29	; 62
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	cd bf       	out	0x3d, r28	; 61
    177e:	fe 01       	movw	r30, r28
    1780:	ed 58       	subi	r30, 0x8D	; 141
    1782:	ff 4f       	sbci	r31, 0xFF	; 255
    1784:	80 83       	st	Z, r24
	   char buffer [100];

	     itoa (x,buffer,10);
    1786:	fe 01       	movw	r30, r28
    1788:	ed 58       	subi	r30, 0x8D	; 141
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	80 81       	ld	r24, Z
    178e:	99 27       	eor	r25, r25
    1790:	87 fd       	sbrc	r24, 7
    1792:	90 95       	com	r25
    1794:	9e 01       	movw	r18, r28
    1796:	21 5f       	subi	r18, 0xF1	; 241
    1798:	3f 4f       	sbci	r19, 0xFF	; 255
    179a:	b9 01       	movw	r22, r18
    179c:	4a e0       	ldi	r20, 0x0A	; 10
    179e:	50 e0       	ldi	r21, 0x00	; 0
    17a0:	0e 94 c0 12 	call	0x2580	; 0x2580 <itoa>
	     Gotoxy(2,1);
    17a4:	82 e0       	ldi	r24, 0x02	; 2
    17a6:	61 e0       	ldi	r22, 0x01	; 1
    17a8:	0e 94 49 12 	call	0x2492	; 0x2492 <Gotoxy>
	    lcd_write_string(buffer);
    17ac:	ce 01       	movw	r24, r28
    17ae:	0f 96       	adiw	r24, 0x0f	; 15
    17b0:	0e 94 6f 10 	call	0x20de	; 0x20de <lcd_write_string>
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	a8 e4       	ldi	r26, 0x48	; 72
    17ba:	b3 e4       	ldi	r27, 0x43	; 67
    17bc:	8b 87       	std	Y+11, r24	; 0x0b
    17be:	9c 87       	std	Y+12, r25	; 0x0c
    17c0:	ad 87       	std	Y+13, r26	; 0x0d
    17c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	4a ef       	ldi	r20, 0xFA	; 250
    17d2:	54 e4       	ldi	r21, 0x44	; 68
    17d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	8f 83       	std	Y+7, r24	; 0x07
    17de:	98 87       	std	Y+8, r25	; 0x08
    17e0:	a9 87       	std	Y+9, r26	; 0x09
    17e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17e4:	6f 81       	ldd	r22, Y+7	; 0x07
    17e6:	78 85       	ldd	r23, Y+8	; 0x08
    17e8:	89 85       	ldd	r24, Y+9	; 0x09
    17ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e8       	ldi	r20, 0x80	; 128
    17f2:	5f e3       	ldi	r21, 0x3F	; 63
    17f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17f8:	88 23       	and	r24, r24
    17fa:	2c f4       	brge	.+10     	; 0x1806 <PrintString_fromU8+0x9e>
		__ticks = 1;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	9e 83       	std	Y+6, r25	; 0x06
    1802:	8d 83       	std	Y+5, r24	; 0x05
    1804:	3f c0       	rjmp	.+126    	; 0x1884 <PrintString_fromU8+0x11c>
	else if (__tmp > 65535)
    1806:	6f 81       	ldd	r22, Y+7	; 0x07
    1808:	78 85       	ldd	r23, Y+8	; 0x08
    180a:	89 85       	ldd	r24, Y+9	; 0x09
    180c:	9a 85       	ldd	r25, Y+10	; 0x0a
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	3f ef       	ldi	r19, 0xFF	; 255
    1812:	4f e7       	ldi	r20, 0x7F	; 127
    1814:	57 e4       	ldi	r21, 0x47	; 71
    1816:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    181a:	18 16       	cp	r1, r24
    181c:	4c f5       	brge	.+82     	; 0x1870 <PrintString_fromU8+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1820:	7c 85       	ldd	r23, Y+12	; 0x0c
    1822:	8d 85       	ldd	r24, Y+13	; 0x0d
    1824:	9e 85       	ldd	r25, Y+14	; 0x0e
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e2       	ldi	r20, 0x20	; 32
    182c:	51 e4       	ldi	r21, 0x41	; 65
    182e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	bc 01       	movw	r22, r24
    1838:	cd 01       	movw	r24, r26
    183a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	9e 83       	std	Y+6, r25	; 0x06
    1844:	8d 83       	std	Y+5, r24	; 0x05
    1846:	0f c0       	rjmp	.+30     	; 0x1866 <PrintString_fromU8+0xfe>
    1848:	88 ec       	ldi	r24, 0xC8	; 200
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	9c 83       	std	Y+4, r25	; 0x04
    184e:	8b 83       	std	Y+3, r24	; 0x03
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	f1 f7       	brne	.-4      	; 0x1854 <PrintString_fromU8+0xec>
    1858:	9c 83       	std	Y+4, r25	; 0x04
    185a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185c:	8d 81       	ldd	r24, Y+5	; 0x05
    185e:	9e 81       	ldd	r25, Y+6	; 0x06
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	9e 83       	std	Y+6, r25	; 0x06
    1864:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1866:	8d 81       	ldd	r24, Y+5	; 0x05
    1868:	9e 81       	ldd	r25, Y+6	; 0x06
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	69 f7       	brne	.-38     	; 0x1848 <PrintString_fromU8+0xe0>
    186e:	14 c0       	rjmp	.+40     	; 0x1898 <PrintString_fromU8+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1870:	6f 81       	ldd	r22, Y+7	; 0x07
    1872:	78 85       	ldd	r23, Y+8	; 0x08
    1874:	89 85       	ldd	r24, Y+9	; 0x09
    1876:	9a 85       	ldd	r25, Y+10	; 0x0a
    1878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	9e 83       	std	Y+6, r25	; 0x06
    1882:	8d 83       	std	Y+5, r24	; 0x05
    1884:	8d 81       	ldd	r24, Y+5	; 0x05
    1886:	9e 81       	ldd	r25, Y+6	; 0x06
    1888:	9a 83       	std	Y+2, r25	; 0x02
    188a:	89 83       	std	Y+1, r24	; 0x01
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	9a 81       	ldd	r25, Y+2	; 0x02
    1890:	01 97       	sbiw	r24, 0x01	; 1
    1892:	f1 f7       	brne	.-4      	; 0x1890 <PrintString_fromU8+0x128>
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01
	    _delay_ms(200);

}
    1898:	cd 58       	subi	r28, 0x8D	; 141
    189a:	df 4f       	sbci	r29, 0xFF	; 255
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	f8 94       	cli
    18a0:	de bf       	out	0x3e, r29	; 62
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	cd bf       	out	0x3d, r28	; 61
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <caal>:
//
//}

 void caal(void)

{ u8 i,operation,num1[3]="34",num2[3]="34";
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    18b4:	a2 97       	sbiw	r28, 0x22	; 34
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	ce 01       	movw	r24, r28
    18c2:	43 96       	adiw	r24, 0x13	; 19
    18c4:	9a 8f       	std	Y+26, r25	; 0x1a
    18c6:	89 8f       	std	Y+25, r24	; 0x19
    18c8:	e6 e6       	ldi	r30, 0x66	; 102
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	fc 8f       	std	Y+28, r31	; 0x1c
    18ce:	eb 8f       	std	Y+27, r30	; 0x1b
    18d0:	f3 e0       	ldi	r31, 0x03	; 3
    18d2:	fd 8f       	std	Y+29, r31	; 0x1d
    18d4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    18d6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    18d8:	00 80       	ld	r0, Z
    18da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	9c 8f       	std	Y+28, r25	; 0x1c
    18e2:	8b 8f       	std	Y+27, r24	; 0x1b
    18e4:	e9 8d       	ldd	r30, Y+25	; 0x19
    18e6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    18e8:	00 82       	st	Z, r0
    18ea:	89 8d       	ldd	r24, Y+25	; 0x19
    18ec:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18ee:	01 96       	adiw	r24, 0x01	; 1
    18f0:	9a 8f       	std	Y+26, r25	; 0x1a
    18f2:	89 8f       	std	Y+25, r24	; 0x19
    18f4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18f6:	91 50       	subi	r25, 0x01	; 1
    18f8:	9d 8f       	std	Y+29, r25	; 0x1d
    18fa:	ed 8d       	ldd	r30, Y+29	; 0x1d
    18fc:	ee 23       	and	r30, r30
    18fe:	51 f7       	brne	.-44     	; 0x18d4 <caal+0x28>
    1900:	ce 01       	movw	r24, r28
    1902:	46 96       	adiw	r24, 0x16	; 22
    1904:	9f 8f       	std	Y+31, r25	; 0x1f
    1906:	8e 8f       	std	Y+30, r24	; 0x1e
    1908:	e6 e6       	ldi	r30, 0x66	; 102
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	f9 a3       	std	Y+33, r31	; 0x21
    190e:	e8 a3       	std	Y+32, r30	; 0x20
    1910:	f3 e0       	ldi	r31, 0x03	; 3
    1912:	fa a3       	std	Y+34, r31	; 0x22
    1914:	e8 a1       	ldd	r30, Y+32	; 0x20
    1916:	f9 a1       	ldd	r31, Y+33	; 0x21
    1918:	00 80       	ld	r0, Z
    191a:	88 a1       	ldd	r24, Y+32	; 0x20
    191c:	99 a1       	ldd	r25, Y+33	; 0x21
    191e:	01 96       	adiw	r24, 0x01	; 1
    1920:	99 a3       	std	Y+33, r25	; 0x21
    1922:	88 a3       	std	Y+32, r24	; 0x20
    1924:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1926:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1928:	00 82       	st	Z, r0
    192a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    192c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    192e:	01 96       	adiw	r24, 0x01	; 1
    1930:	9f 8f       	std	Y+31, r25	; 0x1f
    1932:	8e 8f       	std	Y+30, r24	; 0x1e
    1934:	9a a1       	ldd	r25, Y+34	; 0x22
    1936:	91 50       	subi	r25, 0x01	; 1
    1938:	9a a3       	std	Y+34, r25	; 0x22
    193a:	ea a1       	ldd	r30, Y+34	; 0x22
    193c:	ee 23       	and	r30, r30
    193e:	51 f7       	brne	.-44     	; 0x1914 <caal+0x68>
  s8 x,y;
{  while(1){
	   Keypad_vidGetPressedKey();
    1940:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <Keypad_vidGetPressedKey>
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	aa e7       	ldi	r26, 0x7A	; 122
    194a:	b3 e4       	ldi	r27, 0x43	; 67
    194c:	8b 87       	std	Y+11, r24	; 0x0b
    194e:	9c 87       	std	Y+12, r25	; 0x0c
    1950:	ad 87       	std	Y+13, r26	; 0x0d
    1952:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1954:	6b 85       	ldd	r22, Y+11	; 0x0b
    1956:	7c 85       	ldd	r23, Y+12	; 0x0c
    1958:	8d 85       	ldd	r24, Y+13	; 0x0d
    195a:	9e 85       	ldd	r25, Y+14	; 0x0e
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	4a ef       	ldi	r20, 0xFA	; 250
    1962:	54 e4       	ldi	r21, 0x44	; 68
    1964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	8f 83       	std	Y+7, r24	; 0x07
    196e:	98 87       	std	Y+8, r25	; 0x08
    1970:	a9 87       	std	Y+9, r26	; 0x09
    1972:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1974:	6f 81       	ldd	r22, Y+7	; 0x07
    1976:	78 85       	ldd	r23, Y+8	; 0x08
    1978:	89 85       	ldd	r24, Y+9	; 0x09
    197a:	9a 85       	ldd	r25, Y+10	; 0x0a
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	40 e8       	ldi	r20, 0x80	; 128
    1982:	5f e3       	ldi	r21, 0x3F	; 63
    1984:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1988:	88 23       	and	r24, r24
    198a:	2c f4       	brge	.+10     	; 0x1996 <caal+0xea>
		__ticks = 1;
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	9e 83       	std	Y+6, r25	; 0x06
    1992:	8d 83       	std	Y+5, r24	; 0x05
    1994:	3f c0       	rjmp	.+126    	; 0x1a14 <caal+0x168>
	else if (__tmp > 65535)
    1996:	6f 81       	ldd	r22, Y+7	; 0x07
    1998:	78 85       	ldd	r23, Y+8	; 0x08
    199a:	89 85       	ldd	r24, Y+9	; 0x09
    199c:	9a 85       	ldd	r25, Y+10	; 0x0a
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	3f ef       	ldi	r19, 0xFF	; 255
    19a2:	4f e7       	ldi	r20, 0x7F	; 127
    19a4:	57 e4       	ldi	r21, 0x47	; 71
    19a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19aa:	18 16       	cp	r1, r24
    19ac:	4c f5       	brge	.+82     	; 0x1a00 <caal+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e2       	ldi	r20, 0x20	; 32
    19bc:	51 e4       	ldi	r21, 0x41	; 65
    19be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	bc 01       	movw	r22, r24
    19c8:	cd 01       	movw	r24, r26
    19ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	9e 83       	std	Y+6, r25	; 0x06
    19d4:	8d 83       	std	Y+5, r24	; 0x05
    19d6:	0f c0       	rjmp	.+30     	; 0x19f6 <caal+0x14a>
    19d8:	88 ec       	ldi	r24, 0xC8	; 200
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	9c 83       	std	Y+4, r25	; 0x04
    19de:	8b 83       	std	Y+3, r24	; 0x03
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	9c 81       	ldd	r25, Y+4	; 0x04
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	f1 f7       	brne	.-4      	; 0x19e4 <caal+0x138>
    19e8:	9c 83       	std	Y+4, r25	; 0x04
    19ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ec:	8d 81       	ldd	r24, Y+5	; 0x05
    19ee:	9e 81       	ldd	r25, Y+6	; 0x06
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	9e 83       	std	Y+6, r25	; 0x06
    19f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f6:	8d 81       	ldd	r24, Y+5	; 0x05
    19f8:	9e 81       	ldd	r25, Y+6	; 0x06
    19fa:	00 97       	sbiw	r24, 0x00	; 0
    19fc:	69 f7       	brne	.-38     	; 0x19d8 <caal+0x12c>
    19fe:	14 c0       	rjmp	.+40     	; 0x1a28 <caal+0x17c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a00:	6f 81       	ldd	r22, Y+7	; 0x07
    1a02:	78 85       	ldd	r23, Y+8	; 0x08
    1a04:	89 85       	ldd	r24, Y+9	; 0x09
    1a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	9e 83       	std	Y+6, r25	; 0x06
    1a12:	8d 83       	std	Y+5, r24	; 0x05
    1a14:	8d 81       	ldd	r24, Y+5	; 0x05
    1a16:	9e 81       	ldd	r25, Y+6	; 0x06
    1a18:	9a 83       	std	Y+2, r25	; 0x02
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
    1a1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	f1 f7       	brne	.-4      	; 0x1a20 <caal+0x174>
    1a24:	9a 83       	std	Y+2, r25	; 0x02
    1a26:	89 83       	std	Y+1, r24	; 0x01
	  _delay_ms(250);

	 if(count==1)
    1a28:	80 91 72 00 	lds	r24, 0x0072
    1a2c:	81 30       	cpi	r24, 0x01	; 1
    1a2e:	79 f4       	brne	.+30     	; 0x1a4e <caal+0x1a2>
	 {
		// for(i=0;i<2;i++)
		 //{
			num1[count-1]=Pressedkey;
    1a30:	80 91 72 00 	lds	r24, 0x0072
    1a34:	88 2f       	mov	r24, r24
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	9c 01       	movw	r18, r24
    1a3a:	21 50       	subi	r18, 0x01	; 1
    1a3c:	30 40       	sbci	r19, 0x00	; 0
    1a3e:	40 91 71 00 	lds	r20, 0x0071
    1a42:	ce 01       	movw	r24, r28
    1a44:	43 96       	adiw	r24, 0x13	; 19
    1a46:	fc 01       	movw	r30, r24
    1a48:	e2 0f       	add	r30, r18
    1a4a:	f3 1f       	adc	r31, r19
    1a4c:	40 83       	st	Z, r20

		 //}
	 }
	 if(count==2)
    1a4e:	80 91 72 00 	lds	r24, 0x0072
    1a52:	82 30       	cpi	r24, 0x02	; 2
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <caal+0x1ac>
    1a56:	74 cf       	rjmp	.-280    	; 0x1940 <caal+0x94>
		 {
			// for(i=0;i<2;i++)
			 //{
				num1[count-1]=Pressedkey;
    1a58:	80 91 72 00 	lds	r24, 0x0072
    1a5c:	88 2f       	mov	r24, r24
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	9c 01       	movw	r18, r24
    1a62:	21 50       	subi	r18, 0x01	; 1
    1a64:	30 40       	sbci	r19, 0x00	; 0
    1a66:	40 91 71 00 	lds	r20, 0x0071
    1a6a:	ce 01       	movw	r24, r28
    1a6c:	43 96       	adiw	r24, 0x13	; 19
    1a6e:	fc 01       	movw	r30, r24
    1a70:	e2 0f       	add	r30, r18
    1a72:	f3 1f       	adc	r31, r19
    1a74:	40 83       	st	Z, r20
    1a76:	64 cf       	rjmp	.-312    	; 0x1940 <caal+0x94>

00001a78 <lcd_vidWriteCommand>:
#include "lcd.h"
#define F_CPU 8000000


void lcd_vidWriteCommand(u8 command)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	2f 97       	sbiw	r28, 0x0f	; 15
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	8f 87       	std	Y+15, r24	; 0x0f
	//RW=0
  DIO_vidWritePinValue(controlport,rw_pin,low);
    1a8e:	83 e0       	ldi	r24, 0x03	; 3
    1a90:	61 e0       	ldi	r22, 0x01	; 1
    1a92:	40 e0       	ldi	r20, 0x00	; 0
    1a94:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
  //RS=0
  DIO_vidWritePinValue(controlport,rs_pin,low);
    1a98:	83 e0       	ldi	r24, 0x03	; 3
    1a9a:	62 e0       	ldi	r22, 0x02	; 2
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
//dataport
  DIO_vidWritePortValue(dataport,command);
    1aa2:	82 e0       	ldi	r24, 0x02	; 2
    1aa4:	6f 85       	ldd	r22, Y+15	; 0x0f
    1aa6:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_vidWritePortValue>
  //E=1
  DIO_vidWritePinValue(controlport,EN_pin,high);
    1aaa:	83 e0       	ldi	r24, 0x03	; 3
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	41 e0       	ldi	r20, 0x01	; 1
    1ab0:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	a0 e0       	ldi	r26, 0x00	; 0
    1aba:	b0 e4       	ldi	r27, 0x40	; 64
    1abc:	8b 87       	std	Y+11, r24	; 0x0b
    1abe:	9c 87       	std	Y+12, r25	; 0x0c
    1ac0:	ad 87       	std	Y+13, r26	; 0x0d
    1ac2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ac4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	4a ef       	ldi	r20, 0xFA	; 250
    1ad2:	54 e4       	ldi	r21, 0x44	; 68
    1ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	8f 83       	std	Y+7, r24	; 0x07
    1ade:	98 87       	std	Y+8, r25	; 0x08
    1ae0:	a9 87       	std	Y+9, r26	; 0x09
    1ae2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ae4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae6:	78 85       	ldd	r23, Y+8	; 0x08
    1ae8:	89 85       	ldd	r24, Y+9	; 0x09
    1aea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	40 e8       	ldi	r20, 0x80	; 128
    1af2:	5f e3       	ldi	r21, 0x3F	; 63
    1af4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1af8:	88 23       	and	r24, r24
    1afa:	2c f4       	brge	.+10     	; 0x1b06 <lcd_vidWriteCommand+0x8e>
		__ticks = 1;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	9e 83       	std	Y+6, r25	; 0x06
    1b02:	8d 83       	std	Y+5, r24	; 0x05
    1b04:	3f c0       	rjmp	.+126    	; 0x1b84 <lcd_vidWriteCommand+0x10c>
	else if (__tmp > 65535)
    1b06:	6f 81       	ldd	r22, Y+7	; 0x07
    1b08:	78 85       	ldd	r23, Y+8	; 0x08
    1b0a:	89 85       	ldd	r24, Y+9	; 0x09
    1b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	3f ef       	ldi	r19, 0xFF	; 255
    1b12:	4f e7       	ldi	r20, 0x7F	; 127
    1b14:	57 e4       	ldi	r21, 0x47	; 71
    1b16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b1a:	18 16       	cp	r1, r24
    1b1c:	4c f5       	brge	.+82     	; 0x1b70 <lcd_vidWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	40 e2       	ldi	r20, 0x20	; 32
    1b2c:	51 e4       	ldi	r21, 0x41	; 65
    1b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	bc 01       	movw	r22, r24
    1b38:	cd 01       	movw	r24, r26
    1b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	9e 83       	std	Y+6, r25	; 0x06
    1b44:	8d 83       	std	Y+5, r24	; 0x05
    1b46:	0f c0       	rjmp	.+30     	; 0x1b66 <lcd_vidWriteCommand+0xee>
    1b48:	88 ec       	ldi	r24, 0xC8	; 200
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	9c 83       	std	Y+4, r25	; 0x04
    1b4e:	8b 83       	std	Y+3, r24	; 0x03
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	9c 81       	ldd	r25, Y+4	; 0x04
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	f1 f7       	brne	.-4      	; 0x1b54 <lcd_vidWriteCommand+0xdc>
    1b58:	9c 83       	std	Y+4, r25	; 0x04
    1b5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	9e 83       	std	Y+6, r25	; 0x06
    1b64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	00 97       	sbiw	r24, 0x00	; 0
    1b6c:	69 f7       	brne	.-38     	; 0x1b48 <lcd_vidWriteCommand+0xd0>
    1b6e:	14 c0       	rjmp	.+40     	; 0x1b98 <lcd_vidWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b70:	6f 81       	ldd	r22, Y+7	; 0x07
    1b72:	78 85       	ldd	r23, Y+8	; 0x08
    1b74:	89 85       	ldd	r24, Y+9	; 0x09
    1b76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7c:	dc 01       	movw	r26, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	9e 83       	std	Y+6, r25	; 0x06
    1b82:	8d 83       	std	Y+5, r24	; 0x05
    1b84:	8d 81       	ldd	r24, Y+5	; 0x05
    1b86:	9e 81       	ldd	r25, Y+6	; 0x06
    1b88:	9a 83       	std	Y+2, r25	; 0x02
    1b8a:	89 83       	std	Y+1, r24	; 0x01
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	f1 f7       	brne	.-4      	; 0x1b90 <lcd_vidWriteCommand+0x118>
    1b94:	9a 83       	std	Y+2, r25	; 0x02
    1b96:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
  DIO_vidWritePinValue(controlport,EN_pin,low);
    1b98:	83 e0       	ldi	r24, 0x03	; 3
    1b9a:	60 e0       	ldi	r22, 0x00	; 0
    1b9c:	40 e0       	ldi	r20, 0x00	; 0
    1b9e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
 }
    1ba2:	2f 96       	adiw	r28, 0x0f	; 15
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <lcd_vidInit>:

void lcd_vidInit(void)
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	e8 97       	sbiw	r28, 0x38	; 56
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
  DIO_vidSetPinDir(controlport,rs_pin,output);
    1bc8:	83 e0       	ldi	r24, 0x03	; 3
    1bca:	62 e0       	ldi	r22, 0x02	; 2
    1bcc:	41 e0       	ldi	r20, 0x01	; 1
    1bce:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vidSetPinDir>
  DIO_vidSetPinDir(controlport,rw_pin,output);
    1bd2:	83 e0       	ldi	r24, 0x03	; 3
    1bd4:	61 e0       	ldi	r22, 0x01	; 1
    1bd6:	41 e0       	ldi	r20, 0x01	; 1
    1bd8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vidSetPinDir>
  DIO_vidSetPinDir(controlport,EN_pin,output);
    1bdc:	83 e0       	ldi	r24, 0x03	; 3
    1bde:	60 e0       	ldi	r22, 0x00	; 0
    1be0:	41 e0       	ldi	r20, 0x01	; 1
    1be2:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vidSetPinDir>
  DIO_vidSetPortDir(dataport,0xff);
    1be6:	82 e0       	ldi	r24, 0x02	; 2
    1be8:	6f ef       	ldi	r22, 0xFF	; 255
    1bea:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <DIO_vidSetPortDir>
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a8 e4       	ldi	r26, 0x48	; 72
    1bf4:	b2 e4       	ldi	r27, 0x42	; 66
    1bf6:	8d ab       	std	Y+53, r24	; 0x35
    1bf8:	9e ab       	std	Y+54, r25	; 0x36
    1bfa:	af ab       	std	Y+55, r26	; 0x37
    1bfc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bfe:	6d a9       	ldd	r22, Y+53	; 0x35
    1c00:	7e a9       	ldd	r23, Y+54	; 0x36
    1c02:	8f a9       	ldd	r24, Y+55	; 0x37
    1c04:	98 ad       	ldd	r25, Y+56	; 0x38
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	4a ef       	ldi	r20, 0xFA	; 250
    1c0c:	54 e4       	ldi	r21, 0x44	; 68
    1c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	89 ab       	std	Y+49, r24	; 0x31
    1c18:	9a ab       	std	Y+50, r25	; 0x32
    1c1a:	ab ab       	std	Y+51, r26	; 0x33
    1c1c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c20:	7a a9       	ldd	r23, Y+50	; 0x32
    1c22:	8b a9       	ldd	r24, Y+51	; 0x33
    1c24:	9c a9       	ldd	r25, Y+52	; 0x34
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e8       	ldi	r20, 0x80	; 128
    1c2c:	5f e3       	ldi	r21, 0x3F	; 63
    1c2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c32:	88 23       	and	r24, r24
    1c34:	2c f4       	brge	.+10     	; 0x1c40 <lcd_vidInit+0x8c>
		__ticks = 1;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	98 ab       	std	Y+48, r25	; 0x30
    1c3c:	8f a7       	std	Y+47, r24	; 0x2f
    1c3e:	3f c0       	rjmp	.+126    	; 0x1cbe <lcd_vidInit+0x10a>
	else if (__tmp > 65535)
    1c40:	69 a9       	ldd	r22, Y+49	; 0x31
    1c42:	7a a9       	ldd	r23, Y+50	; 0x32
    1c44:	8b a9       	ldd	r24, Y+51	; 0x33
    1c46:	9c a9       	ldd	r25, Y+52	; 0x34
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	3f ef       	ldi	r19, 0xFF	; 255
    1c4c:	4f e7       	ldi	r20, 0x7F	; 127
    1c4e:	57 e4       	ldi	r21, 0x47	; 71
    1c50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c54:	18 16       	cp	r1, r24
    1c56:	4c f5       	brge	.+82     	; 0x1caa <lcd_vidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c58:	6d a9       	ldd	r22, Y+53	; 0x35
    1c5a:	7e a9       	ldd	r23, Y+54	; 0x36
    1c5c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c5e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	40 e2       	ldi	r20, 0x20	; 32
    1c66:	51 e4       	ldi	r21, 0x41	; 65
    1c68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	98 ab       	std	Y+48, r25	; 0x30
    1c7e:	8f a7       	std	Y+47, r24	; 0x2f
    1c80:	0f c0       	rjmp	.+30     	; 0x1ca0 <lcd_vidInit+0xec>
    1c82:	88 ec       	ldi	r24, 0xC8	; 200
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9e a7       	std	Y+46, r25	; 0x2e
    1c88:	8d a7       	std	Y+45, r24	; 0x2d
    1c8a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c8c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c8e:	01 97       	sbiw	r24, 0x01	; 1
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <lcd_vidInit+0xda>
    1c92:	9e a7       	std	Y+46, r25	; 0x2e
    1c94:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c96:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c98:	98 a9       	ldd	r25, Y+48	; 0x30
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	98 ab       	std	Y+48, r25	; 0x30
    1c9e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ca2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ca4:	00 97       	sbiw	r24, 0x00	; 0
    1ca6:	69 f7       	brne	.-38     	; 0x1c82 <lcd_vidInit+0xce>
    1ca8:	14 c0       	rjmp	.+40     	; 0x1cd2 <lcd_vidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1caa:	69 a9       	ldd	r22, Y+49	; 0x31
    1cac:	7a a9       	ldd	r23, Y+50	; 0x32
    1cae:	8b a9       	ldd	r24, Y+51	; 0x33
    1cb0:	9c a9       	ldd	r25, Y+52	; 0x34
    1cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	98 ab       	std	Y+48, r25	; 0x30
    1cbc:	8f a7       	std	Y+47, r24	; 0x2f
    1cbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cc0:	98 a9       	ldd	r25, Y+48	; 0x30
    1cc2:	9c a7       	std	Y+44, r25	; 0x2c
    1cc4:	8b a7       	std	Y+43, r24	; 0x2b
    1cc6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cc8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	f1 f7       	brne	.-4      	; 0x1cca <lcd_vidInit+0x116>
    1cce:	9c a7       	std	Y+44, r25	; 0x2c
    1cd0:	8b a7       	std	Y+43, r24	; 0x2b

   _delay_ms(50);
   lcd_vidWriteCommand(0b00111100);
    1cd2:	8c e3       	ldi	r24, 0x3C	; 60
    1cd4:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <lcd_vidWriteCommand>
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	a0 e8       	ldi	r26, 0x80	; 128
    1cde:	bf e3       	ldi	r27, 0x3F	; 63
    1ce0:	8f a3       	std	Y+39, r24	; 0x27
    1ce2:	98 a7       	std	Y+40, r25	; 0x28
    1ce4:	a9 a7       	std	Y+41, r26	; 0x29
    1ce6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce8:	6f a1       	ldd	r22, Y+39	; 0x27
    1cea:	78 a5       	ldd	r23, Y+40	; 0x28
    1cec:	89 a5       	ldd	r24, Y+41	; 0x29
    1cee:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	4a ef       	ldi	r20, 0xFA	; 250
    1cf6:	54 e4       	ldi	r21, 0x44	; 68
    1cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	8b a3       	std	Y+35, r24	; 0x23
    1d02:	9c a3       	std	Y+36, r25	; 0x24
    1d04:	ad a3       	std	Y+37, r26	; 0x25
    1d06:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d08:	6b a1       	ldd	r22, Y+35	; 0x23
    1d0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e8       	ldi	r20, 0x80	; 128
    1d16:	5f e3       	ldi	r21, 0x3F	; 63
    1d18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d1c:	88 23       	and	r24, r24
    1d1e:	2c f4       	brge	.+10     	; 0x1d2a <lcd_vidInit+0x176>
		__ticks = 1;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	9a a3       	std	Y+34, r25	; 0x22
    1d26:	89 a3       	std	Y+33, r24	; 0x21
    1d28:	3f c0       	rjmp	.+126    	; 0x1da8 <lcd_vidInit+0x1f4>
	else if (__tmp > 65535)
    1d2a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d2c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d2e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d30:	9e a1       	ldd	r25, Y+38	; 0x26
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	3f ef       	ldi	r19, 0xFF	; 255
    1d36:	4f e7       	ldi	r20, 0x7F	; 127
    1d38:	57 e4       	ldi	r21, 0x47	; 71
    1d3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d3e:	18 16       	cp	r1, r24
    1d40:	4c f5       	brge	.+82     	; 0x1d94 <lcd_vidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d42:	6f a1       	ldd	r22, Y+39	; 0x27
    1d44:	78 a5       	ldd	r23, Y+40	; 0x28
    1d46:	89 a5       	ldd	r24, Y+41	; 0x29
    1d48:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e2       	ldi	r20, 0x20	; 32
    1d50:	51 e4       	ldi	r21, 0x41	; 65
    1d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	cd 01       	movw	r24, r26
    1d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	9a a3       	std	Y+34, r25	; 0x22
    1d68:	89 a3       	std	Y+33, r24	; 0x21
    1d6a:	0f c0       	rjmp	.+30     	; 0x1d8a <lcd_vidInit+0x1d6>
    1d6c:	88 ec       	ldi	r24, 0xC8	; 200
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	98 a3       	std	Y+32, r25	; 0x20
    1d72:	8f 8f       	std	Y+31, r24	; 0x1f
    1d74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d76:	98 a1       	ldd	r25, Y+32	; 0x20
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <lcd_vidInit+0x1c4>
    1d7c:	98 a3       	std	Y+32, r25	; 0x20
    1d7e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d80:	89 a1       	ldd	r24, Y+33	; 0x21
    1d82:	9a a1       	ldd	r25, Y+34	; 0x22
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	9a a3       	std	Y+34, r25	; 0x22
    1d88:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d8c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d8e:	00 97       	sbiw	r24, 0x00	; 0
    1d90:	69 f7       	brne	.-38     	; 0x1d6c <lcd_vidInit+0x1b8>
    1d92:	14 c0       	rjmp	.+40     	; 0x1dbc <lcd_vidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d94:	6b a1       	ldd	r22, Y+35	; 0x23
    1d96:	7c a1       	ldd	r23, Y+36	; 0x24
    1d98:	8d a1       	ldd	r24, Y+37	; 0x25
    1d9a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	9a a3       	std	Y+34, r25	; 0x22
    1da6:	89 a3       	std	Y+33, r24	; 0x21
    1da8:	89 a1       	ldd	r24, Y+33	; 0x21
    1daa:	9a a1       	ldd	r25, Y+34	; 0x22
    1dac:	9e 8f       	std	Y+30, r25	; 0x1e
    1dae:	8d 8f       	std	Y+29, r24	; 0x1d
    1db0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1db2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <lcd_vidInit+0x200>
    1db8:	9e 8f       	std	Y+30, r25	; 0x1e
    1dba:	8d 8f       	std	Y+29, r24	; 0x1d
   _delay_ms(1);
   lcd_vidWriteCommand(0b00001111);
    1dbc:	8f e0       	ldi	r24, 0x0F	; 15
    1dbe:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <lcd_vidWriteCommand>
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	a0 e8       	ldi	r26, 0x80	; 128
    1dc8:	bf e3       	ldi	r27, 0x3F	; 63
    1dca:	89 8f       	std	Y+25, r24	; 0x19
    1dcc:	9a 8f       	std	Y+26, r25	; 0x1a
    1dce:	ab 8f       	std	Y+27, r26	; 0x1b
    1dd0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd2:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	4a ef       	ldi	r20, 0xFA	; 250
    1de0:	54 e4       	ldi	r21, 0x44	; 68
    1de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	8d 8b       	std	Y+21, r24	; 0x15
    1dec:	9e 8b       	std	Y+22, r25	; 0x16
    1dee:	af 8b       	std	Y+23, r26	; 0x17
    1df0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1df2:	6d 89       	ldd	r22, Y+21	; 0x15
    1df4:	7e 89       	ldd	r23, Y+22	; 0x16
    1df6:	8f 89       	ldd	r24, Y+23	; 0x17
    1df8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e8       	ldi	r20, 0x80	; 128
    1e00:	5f e3       	ldi	r21, 0x3F	; 63
    1e02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e06:	88 23       	and	r24, r24
    1e08:	2c f4       	brge	.+10     	; 0x1e14 <lcd_vidInit+0x260>
		__ticks = 1;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	9c 8b       	std	Y+20, r25	; 0x14
    1e10:	8b 8b       	std	Y+19, r24	; 0x13
    1e12:	3f c0       	rjmp	.+126    	; 0x1e92 <lcd_vidInit+0x2de>
	else if (__tmp > 65535)
    1e14:	6d 89       	ldd	r22, Y+21	; 0x15
    1e16:	7e 89       	ldd	r23, Y+22	; 0x16
    1e18:	8f 89       	ldd	r24, Y+23	; 0x17
    1e1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	3f ef       	ldi	r19, 0xFF	; 255
    1e20:	4f e7       	ldi	r20, 0x7F	; 127
    1e22:	57 e4       	ldi	r21, 0x47	; 71
    1e24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e28:	18 16       	cp	r1, r24
    1e2a:	4c f5       	brge	.+82     	; 0x1e7e <lcd_vidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	40 e2       	ldi	r20, 0x20	; 32
    1e3a:	51 e4       	ldi	r21, 0x41	; 65
    1e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	bc 01       	movw	r22, r24
    1e46:	cd 01       	movw	r24, r26
    1e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	9c 8b       	std	Y+20, r25	; 0x14
    1e52:	8b 8b       	std	Y+19, r24	; 0x13
    1e54:	0f c0       	rjmp	.+30     	; 0x1e74 <lcd_vidInit+0x2c0>
    1e56:	88 ec       	ldi	r24, 0xC8	; 200
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	9a 8b       	std	Y+18, r25	; 0x12
    1e5c:	89 8b       	std	Y+17, r24	; 0x11
    1e5e:	89 89       	ldd	r24, Y+17	; 0x11
    1e60:	9a 89       	ldd	r25, Y+18	; 0x12
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <lcd_vidInit+0x2ae>
    1e66:	9a 8b       	std	Y+18, r25	; 0x12
    1e68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	9c 8b       	std	Y+20, r25	; 0x14
    1e72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e74:	8b 89       	ldd	r24, Y+19	; 0x13
    1e76:	9c 89       	ldd	r25, Y+20	; 0x14
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	69 f7       	brne	.-38     	; 0x1e56 <lcd_vidInit+0x2a2>
    1e7c:	14 c0       	rjmp	.+40     	; 0x1ea6 <lcd_vidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e80:	7e 89       	ldd	r23, Y+22	; 0x16
    1e82:	8f 89       	ldd	r24, Y+23	; 0x17
    1e84:	98 8d       	ldd	r25, Y+24	; 0x18
    1e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	9c 8b       	std	Y+20, r25	; 0x14
    1e90:	8b 8b       	std	Y+19, r24	; 0x13
    1e92:	8b 89       	ldd	r24, Y+19	; 0x13
    1e94:	9c 89       	ldd	r25, Y+20	; 0x14
    1e96:	98 8b       	std	Y+16, r25	; 0x10
    1e98:	8f 87       	std	Y+15, r24	; 0x0f
    1e9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e9c:	98 89       	ldd	r25, Y+16	; 0x10
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	f1 f7       	brne	.-4      	; 0x1e9e <lcd_vidInit+0x2ea>
    1ea2:	98 8b       	std	Y+16, r25	; 0x10
    1ea4:	8f 87       	std	Y+15, r24	; 0x0f
   _delay_ms(1);
   lcd_vidWriteCommand(0b00000001);
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <lcd_vidWriteCommand>
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	a0 e8       	ldi	r26, 0x80	; 128
    1eb2:	bf e3       	ldi	r27, 0x3F	; 63
    1eb4:	8b 87       	std	Y+11, r24	; 0x0b
    1eb6:	9c 87       	std	Y+12, r25	; 0x0c
    1eb8:	ad 87       	std	Y+13, r26	; 0x0d
    1eba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ebc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ebe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	4a ef       	ldi	r20, 0xFA	; 250
    1eca:	54 e4       	ldi	r21, 0x44	; 68
    1ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	8f 83       	std	Y+7, r24	; 0x07
    1ed6:	98 87       	std	Y+8, r25	; 0x08
    1ed8:	a9 87       	std	Y+9, r26	; 0x09
    1eda:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1edc:	6f 81       	ldd	r22, Y+7	; 0x07
    1ede:	78 85       	ldd	r23, Y+8	; 0x08
    1ee0:	89 85       	ldd	r24, Y+9	; 0x09
    1ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e8       	ldi	r20, 0x80	; 128
    1eea:	5f e3       	ldi	r21, 0x3F	; 63
    1eec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ef0:	88 23       	and	r24, r24
    1ef2:	2c f4       	brge	.+10     	; 0x1efe <lcd_vidInit+0x34a>
		__ticks = 1;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9e 83       	std	Y+6, r25	; 0x06
    1efa:	8d 83       	std	Y+5, r24	; 0x05
    1efc:	3f c0       	rjmp	.+126    	; 0x1f7c <lcd_vidInit+0x3c8>
	else if (__tmp > 65535)
    1efe:	6f 81       	ldd	r22, Y+7	; 0x07
    1f00:	78 85       	ldd	r23, Y+8	; 0x08
    1f02:	89 85       	ldd	r24, Y+9	; 0x09
    1f04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	3f ef       	ldi	r19, 0xFF	; 255
    1f0a:	4f e7       	ldi	r20, 0x7F	; 127
    1f0c:	57 e4       	ldi	r21, 0x47	; 71
    1f0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f12:	18 16       	cp	r1, r24
    1f14:	4c f5       	brge	.+82     	; 0x1f68 <lcd_vidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e2       	ldi	r20, 0x20	; 32
    1f24:	51 e4       	ldi	r21, 0x41	; 65
    1f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	bc 01       	movw	r22, r24
    1f30:	cd 01       	movw	r24, r26
    1f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9e 83       	std	Y+6, r25	; 0x06
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
    1f3e:	0f c0       	rjmp	.+30     	; 0x1f5e <lcd_vidInit+0x3aa>
    1f40:	88 ec       	ldi	r24, 0xC8	; 200
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	9c 83       	std	Y+4, r25	; 0x04
    1f46:	8b 83       	std	Y+3, r24	; 0x03
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <lcd_vidInit+0x398>
    1f50:	9c 83       	std	Y+4, r25	; 0x04
    1f52:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	9e 81       	ldd	r25, Y+6	; 0x06
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	9e 83       	std	Y+6, r25	; 0x06
    1f5c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f60:	9e 81       	ldd	r25, Y+6	; 0x06
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	69 f7       	brne	.-38     	; 0x1f40 <lcd_vidInit+0x38c>
    1f66:	14 c0       	rjmp	.+40     	; 0x1f90 <lcd_vidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f68:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6a:	78 85       	ldd	r23, Y+8	; 0x08
    1f6c:	89 85       	ldd	r24, Y+9	; 0x09
    1f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9e 83       	std	Y+6, r25	; 0x06
    1f7a:	8d 83       	std	Y+5, r24	; 0x05
    1f7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f80:	9a 83       	std	Y+2, r25	; 0x02
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	9a 81       	ldd	r25, Y+2	; 0x02
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <lcd_vidInit+0x3d4>
    1f8c:	9a 83       	std	Y+2, r25	; 0x02
    1f8e:	89 83       	std	Y+1, r24	; 0x01
   _delay_ms(1);
}
    1f90:	e8 96       	adiw	r28, 0x38	; 56
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <lcd_vidWriteData>:


void lcd_vidWriteData(u8 data)
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	2f 97       	sbiw	r28, 0x0f	; 15
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
    1fb6:	8f 87       	std	Y+15, r24	; 0x0f
	//RW=0
 DIO_vidWritePinValue(controlport,rw_pin,low);
    1fb8:	83 e0       	ldi	r24, 0x03	; 3
    1fba:	61 e0       	ldi	r22, 0x01	; 1
    1fbc:	40 e0       	ldi	r20, 0x00	; 0
    1fbe:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>

	//RS=1  display
 DIO_vidWritePinValue(controlport,rs_pin,high);
    1fc2:	83 e0       	ldi	r24, 0x03	; 3
    1fc4:	62 e0       	ldi	r22, 0x02	; 2
    1fc6:	41 e0       	ldi	r20, 0x01	; 1
    1fc8:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>

//DATA PORT
 DIO_vidWritePortValue(dataport, data);
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	6f 85       	ldd	r22, Y+15	; 0x0f
    1fd0:	0e 94 1a 09 	call	0x1234	; 0x1234 <DIO_vidWritePortValue>

 //E=1

 DIO_vidWritePinValue(controlport,EN_pin,high);
    1fd4:	83 e0       	ldi	r24, 0x03	; 3
    1fd6:	60 e0       	ldi	r22, 0x00	; 0
    1fd8:	41 e0       	ldi	r20, 0x01	; 1
    1fda:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	a0 e0       	ldi	r26, 0x00	; 0
    1fe4:	b0 e4       	ldi	r27, 0x40	; 64
    1fe6:	8b 87       	std	Y+11, r24	; 0x0b
    1fe8:	9c 87       	std	Y+12, r25	; 0x0c
    1fea:	ad 87       	std	Y+13, r26	; 0x0d
    1fec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	4a ef       	ldi	r20, 0xFA	; 250
    1ffc:	54 e4       	ldi	r21, 0x44	; 68
    1ffe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	8f 83       	std	Y+7, r24	; 0x07
    2008:	98 87       	std	Y+8, r25	; 0x08
    200a:	a9 87       	std	Y+9, r26	; 0x09
    200c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    200e:	6f 81       	ldd	r22, Y+7	; 0x07
    2010:	78 85       	ldd	r23, Y+8	; 0x08
    2012:	89 85       	ldd	r24, Y+9	; 0x09
    2014:	9a 85       	ldd	r25, Y+10	; 0x0a
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e8       	ldi	r20, 0x80	; 128
    201c:	5f e3       	ldi	r21, 0x3F	; 63
    201e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2022:	88 23       	and	r24, r24
    2024:	2c f4       	brge	.+10     	; 0x2030 <lcd_vidWriteData+0x8e>
		__ticks = 1;
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	9e 83       	std	Y+6, r25	; 0x06
    202c:	8d 83       	std	Y+5, r24	; 0x05
    202e:	3f c0       	rjmp	.+126    	; 0x20ae <lcd_vidWriteData+0x10c>
	else if (__tmp > 65535)
    2030:	6f 81       	ldd	r22, Y+7	; 0x07
    2032:	78 85       	ldd	r23, Y+8	; 0x08
    2034:	89 85       	ldd	r24, Y+9	; 0x09
    2036:	9a 85       	ldd	r25, Y+10	; 0x0a
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	3f ef       	ldi	r19, 0xFF	; 255
    203c:	4f e7       	ldi	r20, 0x7F	; 127
    203e:	57 e4       	ldi	r21, 0x47	; 71
    2040:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2044:	18 16       	cp	r1, r24
    2046:	4c f5       	brge	.+82     	; 0x209a <lcd_vidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2048:	6b 85       	ldd	r22, Y+11	; 0x0b
    204a:	7c 85       	ldd	r23, Y+12	; 0x0c
    204c:	8d 85       	ldd	r24, Y+13	; 0x0d
    204e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e2       	ldi	r20, 0x20	; 32
    2056:	51 e4       	ldi	r21, 0x41	; 65
    2058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	bc 01       	movw	r22, r24
    2062:	cd 01       	movw	r24, r26
    2064:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2068:	dc 01       	movw	r26, r24
    206a:	cb 01       	movw	r24, r22
    206c:	9e 83       	std	Y+6, r25	; 0x06
    206e:	8d 83       	std	Y+5, r24	; 0x05
    2070:	0f c0       	rjmp	.+30     	; 0x2090 <lcd_vidWriteData+0xee>
    2072:	88 ec       	ldi	r24, 0xC8	; 200
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	9c 83       	std	Y+4, r25	; 0x04
    2078:	8b 83       	std	Y+3, r24	; 0x03
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	9c 81       	ldd	r25, Y+4	; 0x04
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	f1 f7       	brne	.-4      	; 0x207e <lcd_vidWriteData+0xdc>
    2082:	9c 83       	std	Y+4, r25	; 0x04
    2084:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	9e 81       	ldd	r25, Y+6	; 0x06
    208a:	01 97       	sbiw	r24, 0x01	; 1
    208c:	9e 83       	std	Y+6, r25	; 0x06
    208e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2090:	8d 81       	ldd	r24, Y+5	; 0x05
    2092:	9e 81       	ldd	r25, Y+6	; 0x06
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	69 f7       	brne	.-38     	; 0x2072 <lcd_vidWriteData+0xd0>
    2098:	14 c0       	rjmp	.+40     	; 0x20c2 <lcd_vidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209a:	6f 81       	ldd	r22, Y+7	; 0x07
    209c:	78 85       	ldd	r23, Y+8	; 0x08
    209e:	89 85       	ldd	r24, Y+9	; 0x09
    20a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	9e 83       	std	Y+6, r25	; 0x06
    20ac:	8d 83       	std	Y+5, r24	; 0x05
    20ae:	8d 81       	ldd	r24, Y+5	; 0x05
    20b0:	9e 81       	ldd	r25, Y+6	; 0x06
    20b2:	9a 83       	std	Y+2, r25	; 0x02
    20b4:	89 83       	std	Y+1, r24	; 0x01
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ba:	01 97       	sbiw	r24, 0x01	; 1
    20bc:	f1 f7       	brne	.-4      	; 0x20ba <lcd_vidWriteData+0x118>
    20be:	9a 83       	std	Y+2, r25	; 0x02
    20c0:	89 83       	std	Y+1, r24	; 0x01
 _delay_ms(2);
 DIO_vidWritePinValue(controlport,EN_pin,low);
    20c2:	83 e0       	ldi	r24, 0x03	; 3
    20c4:	60 e0       	ldi	r22, 0x00	; 0
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	0e 94 3d 07 	call	0xe7a	; 0xe7a <DIO_vidWritePinValue>

 }
    20cc:	2f 96       	adiw	r28, 0x0f	; 15
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	08 95       	ret

000020de <lcd_write_string>:



void lcd_write_string(char *string)
	{
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	6b 97       	sbiw	r28, 0x1b	; 27
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	9b 8f       	std	Y+27, r25	; 0x1b
    20f4:	8a 8f       	std	Y+26, r24	; 0x1a
		char i = 0;									  // character counter*/
    20f6:	19 8e       	std	Y+25, r1	; 0x19
    20f8:	cc c0       	rjmp	.+408    	; 0x2292 <lcd_write_string+0x1b4>
	    while (string[i] != '\0')
	    {
	        lcd_vidWriteData(string[i]);
    20fa:	89 8d       	ldd	r24, Y+25	; 0x19
    20fc:	28 2f       	mov	r18, r24
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2102:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2104:	fc 01       	movw	r30, r24
    2106:	e2 0f       	add	r30, r18
    2108:	f3 1f       	adc	r31, r19
    210a:	80 81       	ld	r24, Z
    210c:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <lcd_vidWriteData>
	        i++;
    2110:	89 8d       	ldd	r24, Y+25	; 0x19
    2112:	8f 5f       	subi	r24, 0xFF	; 255
    2114:	89 8f       	std	Y+25, r24	; 0x19
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	a0 ea       	ldi	r26, 0xA0	; 160
    211c:	b2 e4       	ldi	r27, 0x42	; 66
    211e:	8d 8b       	std	Y+21, r24	; 0x15
    2120:	9e 8b       	std	Y+22, r25	; 0x16
    2122:	af 8b       	std	Y+23, r26	; 0x17
    2124:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2126:	6d 89       	ldd	r22, Y+21	; 0x15
    2128:	7e 89       	ldd	r23, Y+22	; 0x16
    212a:	8f 89       	ldd	r24, Y+23	; 0x17
    212c:	98 8d       	ldd	r25, Y+24	; 0x18
    212e:	2b ea       	ldi	r18, 0xAB	; 171
    2130:	3a ea       	ldi	r19, 0xAA	; 170
    2132:	4a e2       	ldi	r20, 0x2A	; 42
    2134:	50 e4       	ldi	r21, 0x40	; 64
    2136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	89 8b       	std	Y+17, r24	; 0x11
    2140:	9a 8b       	std	Y+18, r25	; 0x12
    2142:	ab 8b       	std	Y+19, r26	; 0x13
    2144:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2146:	69 89       	ldd	r22, Y+17	; 0x11
    2148:	7a 89       	ldd	r23, Y+18	; 0x12
    214a:	8b 89       	ldd	r24, Y+19	; 0x13
    214c:	9c 89       	ldd	r25, Y+20	; 0x14
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e8       	ldi	r20, 0x80	; 128
    2154:	5f e3       	ldi	r21, 0x3F	; 63
    2156:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    215a:	88 23       	and	r24, r24
    215c:	1c f4       	brge	.+6      	; 0x2164 <lcd_write_string+0x86>
		__ticks = 1;
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	88 8b       	std	Y+16, r24	; 0x10
    2162:	91 c0       	rjmp	.+290    	; 0x2286 <lcd_write_string+0x1a8>
	else if (__tmp > 255)
    2164:	69 89       	ldd	r22, Y+17	; 0x11
    2166:	7a 89       	ldd	r23, Y+18	; 0x12
    2168:	8b 89       	ldd	r24, Y+19	; 0x13
    216a:	9c 89       	ldd	r25, Y+20	; 0x14
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	4f e7       	ldi	r20, 0x7F	; 127
    2172:	53 e4       	ldi	r21, 0x43	; 67
    2174:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2178:	18 16       	cp	r1, r24
    217a:	0c f0       	brlt	.+2      	; 0x217e <lcd_write_string+0xa0>
    217c:	7b c0       	rjmp	.+246    	; 0x2274 <lcd_write_string+0x196>
	{
		_delay_ms(__us / 1000.0);
    217e:	6d 89       	ldd	r22, Y+21	; 0x15
    2180:	7e 89       	ldd	r23, Y+22	; 0x16
    2182:	8f 89       	ldd	r24, Y+23	; 0x17
    2184:	98 8d       	ldd	r25, Y+24	; 0x18
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	4a e7       	ldi	r20, 0x7A	; 122
    218c:	54 e4       	ldi	r21, 0x44	; 68
    218e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	8c 87       	std	Y+12, r24	; 0x0c
    2198:	9d 87       	std	Y+13, r25	; 0x0d
    219a:	ae 87       	std	Y+14, r26	; 0x0e
    219c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219e:	6c 85       	ldd	r22, Y+12	; 0x0c
    21a0:	7d 85       	ldd	r23, Y+13	; 0x0d
    21a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    21a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	4a ef       	ldi	r20, 0xFA	; 250
    21ac:	54 e4       	ldi	r21, 0x44	; 68
    21ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	88 87       	std	Y+8, r24	; 0x08
    21b8:	99 87       	std	Y+9, r25	; 0x09
    21ba:	aa 87       	std	Y+10, r26	; 0x0a
    21bc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    21be:	68 85       	ldd	r22, Y+8	; 0x08
    21c0:	79 85       	ldd	r23, Y+9	; 0x09
    21c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    21c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e8       	ldi	r20, 0x80	; 128
    21cc:	5f e3       	ldi	r21, 0x3F	; 63
    21ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21d2:	88 23       	and	r24, r24
    21d4:	2c f4       	brge	.+10     	; 0x21e0 <lcd_write_string+0x102>
		__ticks = 1;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	9f 83       	std	Y+7, r25	; 0x07
    21dc:	8e 83       	std	Y+6, r24	; 0x06
    21de:	3f c0       	rjmp	.+126    	; 0x225e <lcd_write_string+0x180>
	else if (__tmp > 65535)
    21e0:	68 85       	ldd	r22, Y+8	; 0x08
    21e2:	79 85       	ldd	r23, Y+9	; 0x09
    21e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    21e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	3f ef       	ldi	r19, 0xFF	; 255
    21ec:	4f e7       	ldi	r20, 0x7F	; 127
    21ee:	57 e4       	ldi	r21, 0x47	; 71
    21f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21f4:	18 16       	cp	r1, r24
    21f6:	4c f5       	brge	.+82     	; 0x224a <lcd_write_string+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f8:	6c 85       	ldd	r22, Y+12	; 0x0c
    21fa:	7d 85       	ldd	r23, Y+13	; 0x0d
    21fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    21fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e2       	ldi	r20, 0x20	; 32
    2206:	51 e4       	ldi	r21, 0x41	; 65
    2208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	bc 01       	movw	r22, r24
    2212:	cd 01       	movw	r24, r26
    2214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	9f 83       	std	Y+7, r25	; 0x07
    221e:	8e 83       	std	Y+6, r24	; 0x06
    2220:	0f c0       	rjmp	.+30     	; 0x2240 <lcd_write_string+0x162>
    2222:	88 ec       	ldi	r24, 0xC8	; 200
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	9d 83       	std	Y+5, r25	; 0x05
    2228:	8c 83       	std	Y+4, r24	; 0x04
    222a:	8c 81       	ldd	r24, Y+4	; 0x04
    222c:	9d 81       	ldd	r25, Y+5	; 0x05
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	f1 f7       	brne	.-4      	; 0x222e <lcd_write_string+0x150>
    2232:	9d 83       	std	Y+5, r25	; 0x05
    2234:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2236:	8e 81       	ldd	r24, Y+6	; 0x06
    2238:	9f 81       	ldd	r25, Y+7	; 0x07
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	9f 83       	std	Y+7, r25	; 0x07
    223e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2240:	8e 81       	ldd	r24, Y+6	; 0x06
    2242:	9f 81       	ldd	r25, Y+7	; 0x07
    2244:	00 97       	sbiw	r24, 0x00	; 0
    2246:	69 f7       	brne	.-38     	; 0x2222 <lcd_write_string+0x144>
    2248:	24 c0       	rjmp	.+72     	; 0x2292 <lcd_write_string+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    224a:	68 85       	ldd	r22, Y+8	; 0x08
    224c:	79 85       	ldd	r23, Y+9	; 0x09
    224e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2250:	9b 85       	ldd	r25, Y+11	; 0x0b
    2252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	9f 83       	std	Y+7, r25	; 0x07
    225c:	8e 83       	std	Y+6, r24	; 0x06
    225e:	8e 81       	ldd	r24, Y+6	; 0x06
    2260:	9f 81       	ldd	r25, Y+7	; 0x07
    2262:	9b 83       	std	Y+3, r25	; 0x03
    2264:	8a 83       	std	Y+2, r24	; 0x02
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	9b 81       	ldd	r25, Y+3	; 0x03
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	f1 f7       	brne	.-4      	; 0x226a <lcd_write_string+0x18c>
    226e:	9b 83       	std	Y+3, r25	; 0x03
    2270:	8a 83       	std	Y+2, r24	; 0x02
    2272:	0f c0       	rjmp	.+30     	; 0x2292 <lcd_write_string+0x1b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2274:	69 89       	ldd	r22, Y+17	; 0x11
    2276:	7a 89       	ldd	r23, Y+18	; 0x12
    2278:	8b 89       	ldd	r24, Y+19	; 0x13
    227a:	9c 89       	ldd	r25, Y+20	; 0x14
    227c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	88 8b       	std	Y+16, r24	; 0x10
    2286:	88 89       	ldd	r24, Y+16	; 0x10
    2288:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	8a 95       	dec	r24
    228e:	f1 f7       	brne	.-4      	; 0x228c <lcd_write_string+0x1ae>
    2290:	89 83       	std	Y+1, r24	; 0x01


void lcd_write_string(char *string)
	{
		char i = 0;									  // character counter*/
	    while (string[i] != '\0')
    2292:	89 8d       	ldd	r24, Y+25	; 0x19
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	8a 8d       	ldd	r24, Y+26	; 0x1a
    229a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    229c:	fc 01       	movw	r30, r24
    229e:	e2 0f       	add	r30, r18
    22a0:	f3 1f       	adc	r31, r19
    22a2:	80 81       	ld	r24, Z
    22a4:	88 23       	and	r24, r24
    22a6:	09 f0       	breq	.+2      	; 0x22aa <lcd_write_string+0x1cc>
    22a8:	28 cf       	rjmp	.-432    	; 0x20fa <lcd_write_string+0x1c>
	    {
	        lcd_vidWriteData(string[i]);
	        i++;
	        _delay_us(80);							  // 40 uS delay (min)
	    }
	}
    22aa:	6b 96       	adiw	r28, 0x1b	; 27
    22ac:	0f b6       	in	r0, 0x3f	; 63
    22ae:	f8 94       	cli
    22b0:	de bf       	out	0x3e, r29	; 62
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	cd bf       	out	0x3d, r28	; 61
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	08 95       	ret

000022bc <return_ASCII>:


u8 return_ASCII(u8 symbol)
{
    22bc:	df 93       	push	r29
    22be:	cf 93       	push	r28
    22c0:	00 d0       	rcall	.+0      	; 0x22c2 <return_ASCII+0x6>
    22c2:	0f 92       	push	r0
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    22c8:	89 83       	std	Y+1, r24	; 0x01
	if(symbol==0)
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
    22cc:	88 23       	and	r24, r24
    22ce:	19 f4       	brne	.+6      	; 0x22d6 <return_ASCII+0x1a>
	{
	return 0b00110000;
    22d0:	80 e3       	ldi	r24, 0x30	; 48
    22d2:	8a 83       	std	Y+2, r24	; 0x02
    22d4:	37 c0       	rjmp	.+110    	; 0x2344 <return_ASCII+0x88>
	}
	else if(symbol==1)
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	81 30       	cpi	r24, 0x01	; 1
    22da:	19 f4       	brne	.+6      	; 0x22e2 <return_ASCII+0x26>
	{
		return 0b00110001;
    22dc:	81 e3       	ldi	r24, 0x31	; 49
    22de:	8a 83       	std	Y+2, r24	; 0x02
    22e0:	31 c0       	rjmp	.+98     	; 0x2344 <return_ASCII+0x88>
	}
	else if(symbol==2)
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	82 30       	cpi	r24, 0x02	; 2
    22e6:	19 f4       	brne	.+6      	; 0x22ee <return_ASCII+0x32>
	{
		return 0b00110010;}
    22e8:	82 e3       	ldi	r24, 0x32	; 50
    22ea:	8a 83       	std	Y+2, r24	; 0x02
    22ec:	2b c0       	rjmp	.+86     	; 0x2344 <return_ASCII+0x88>
	else if(symbol==3)
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	83 30       	cpi	r24, 0x03	; 3
    22f2:	19 f4       	brne	.+6      	; 0x22fa <return_ASCII+0x3e>
	{
		return 0b00110011;}
    22f4:	83 e3       	ldi	r24, 0x33	; 51
    22f6:	8a 83       	std	Y+2, r24	; 0x02
    22f8:	25 c0       	rjmp	.+74     	; 0x2344 <return_ASCII+0x88>
	else if(symbol==4)
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	84 30       	cpi	r24, 0x04	; 4
    22fe:	19 f4       	brne	.+6      	; 0x2306 <return_ASCII+0x4a>
	{
		return 0b00110100;
    2300:	84 e3       	ldi	r24, 0x34	; 52
    2302:	8a 83       	std	Y+2, r24	; 0x02
    2304:	1f c0       	rjmp	.+62     	; 0x2344 <return_ASCII+0x88>
	}
	else if(symbol==5)
    2306:	89 81       	ldd	r24, Y+1	; 0x01
    2308:	85 30       	cpi	r24, 0x05	; 5
    230a:	19 f4       	brne	.+6      	; 0x2312 <return_ASCII+0x56>
	{
		return 0b00110101;
    230c:	85 e3       	ldi	r24, 0x35	; 53
    230e:	8a 83       	std	Y+2, r24	; 0x02
    2310:	19 c0       	rjmp	.+50     	; 0x2344 <return_ASCII+0x88>
	}
	else if(symbol==6)
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	86 30       	cpi	r24, 0x06	; 6
    2316:	19 f4       	brne	.+6      	; 0x231e <return_ASCII+0x62>
	{
		return 0b00110110;
    2318:	86 e3       	ldi	r24, 0x36	; 54
    231a:	8a 83       	std	Y+2, r24	; 0x02
    231c:	13 c0       	rjmp	.+38     	; 0x2344 <return_ASCII+0x88>
	}
	else if(symbol==7)
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	87 30       	cpi	r24, 0x07	; 7
    2322:	19 f4       	brne	.+6      	; 0x232a <return_ASCII+0x6e>
	{
		return 0b00110111;
    2324:	87 e3       	ldi	r24, 0x37	; 55
    2326:	8a 83       	std	Y+2, r24	; 0x02
    2328:	0d c0       	rjmp	.+26     	; 0x2344 <return_ASCII+0x88>
	}
	else if(symbol==8)
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	88 30       	cpi	r24, 0x08	; 8
    232e:	19 f4       	brne	.+6      	; 0x2336 <return_ASCII+0x7a>
	{
		return 0b00111000;
    2330:	88 e3       	ldi	r24, 0x38	; 56
    2332:	8a 83       	std	Y+2, r24	; 0x02
    2334:	07 c0       	rjmp	.+14     	; 0x2344 <return_ASCII+0x88>
	}
	else if(symbol==9)
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	89 30       	cpi	r24, 0x09	; 9
    233a:	19 f4       	brne	.+6      	; 0x2342 <return_ASCII+0x86>
	{
		return 0b00111001;}
    233c:	89 e3       	ldi	r24, 0x39	; 57
    233e:	8a 83       	std	Y+2, r24	; 0x02
    2340:	01 c0       	rjmp	.+2      	; 0x2344 <return_ASCII+0x88>
    2342:	02 c0       	rjmp	.+4      	; 0x2348 <return_ASCII+0x8c>

}
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	8b 83       	std	Y+3, r24	; 0x03
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <LCD_vidWriteString>:

void LCD_vidWriteString (u8* pu8StringCpy, u8 u8Index)
{
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	62 97       	sbiw	r28, 0x12	; 18
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	99 8b       	std	Y+17, r25	; 0x11
    236c:	88 8b       	std	Y+16, r24	; 0x10
    236e:	6a 8b       	std	Y+18, r22	; 0x12

//	/* Local loop index */
//	u8 u8Index = 0;
	u8 iteration=0;
    2370:	1f 86       	std	Y+15, r1	; 0x0f
//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration=0; iteration<u8Index ; iteration++)
    2372:	1f 86       	std	Y+15, r1	; 0x0f
    2374:	80 c0       	rjmp	.+256    	; 0x2476 <LCD_vidWriteString+0x120>
	{

		/* Write Character on LCD */
	lcd_vidWriteData(pu8StringCpy[iteration]);
    2376:	8f 85       	ldd	r24, Y+15	; 0x0f
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	88 89       	ldd	r24, Y+16	; 0x10
    237e:	99 89       	ldd	r25, Y+17	; 0x11
    2380:	fc 01       	movw	r30, r24
    2382:	e2 0f       	add	r30, r18
    2384:	f3 1f       	adc	r31, r19
    2386:	80 81       	ld	r24, Z
    2388:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <lcd_vidWriteData>
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	a0 e0       	ldi	r26, 0x00	; 0
    2392:	b0 e4       	ldi	r27, 0x40	; 64
    2394:	8b 87       	std	Y+11, r24	; 0x0b
    2396:	9c 87       	std	Y+12, r25	; 0x0c
    2398:	ad 87       	std	Y+13, r26	; 0x0d
    239a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239c:	6b 85       	ldd	r22, Y+11	; 0x0b
    239e:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	4a ef       	ldi	r20, 0xFA	; 250
    23aa:	54 e4       	ldi	r21, 0x44	; 68
    23ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	8f 83       	std	Y+7, r24	; 0x07
    23b6:	98 87       	std	Y+8, r25	; 0x08
    23b8:	a9 87       	std	Y+9, r26	; 0x09
    23ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23bc:	6f 81       	ldd	r22, Y+7	; 0x07
    23be:	78 85       	ldd	r23, Y+8	; 0x08
    23c0:	89 85       	ldd	r24, Y+9	; 0x09
    23c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e8       	ldi	r20, 0x80	; 128
    23ca:	5f e3       	ldi	r21, 0x3F	; 63
    23cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23d0:	88 23       	and	r24, r24
    23d2:	2c f4       	brge	.+10     	; 0x23de <LCD_vidWriteString+0x88>
		__ticks = 1;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	9e 83       	std	Y+6, r25	; 0x06
    23da:	8d 83       	std	Y+5, r24	; 0x05
    23dc:	3f c0       	rjmp	.+126    	; 0x245c <LCD_vidWriteString+0x106>
	else if (__tmp > 65535)
    23de:	6f 81       	ldd	r22, Y+7	; 0x07
    23e0:	78 85       	ldd	r23, Y+8	; 0x08
    23e2:	89 85       	ldd	r24, Y+9	; 0x09
    23e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	3f ef       	ldi	r19, 0xFF	; 255
    23ea:	4f e7       	ldi	r20, 0x7F	; 127
    23ec:	57 e4       	ldi	r21, 0x47	; 71
    23ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23f2:	18 16       	cp	r1, r24
    23f4:	4c f5       	brge	.+82     	; 0x2448 <LCD_vidWriteString+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    23fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e2       	ldi	r20, 0x20	; 32
    2404:	51 e4       	ldi	r21, 0x41	; 65
    2406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	bc 01       	movw	r22, r24
    2410:	cd 01       	movw	r24, r26
    2412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	9e 83       	std	Y+6, r25	; 0x06
    241c:	8d 83       	std	Y+5, r24	; 0x05
    241e:	0f c0       	rjmp	.+30     	; 0x243e <LCD_vidWriteString+0xe8>
    2420:	88 ec       	ldi	r24, 0xC8	; 200
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	9c 83       	std	Y+4, r25	; 0x04
    2426:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	9c 81       	ldd	r25, Y+4	; 0x04
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <LCD_vidWriteString+0xd6>
    2430:	9c 83       	std	Y+4, r25	; 0x04
    2432:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2434:	8d 81       	ldd	r24, Y+5	; 0x05
    2436:	9e 81       	ldd	r25, Y+6	; 0x06
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	9e 83       	std	Y+6, r25	; 0x06
    243c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243e:	8d 81       	ldd	r24, Y+5	; 0x05
    2440:	9e 81       	ldd	r25, Y+6	; 0x06
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	69 f7       	brne	.-38     	; 0x2420 <LCD_vidWriteString+0xca>
    2446:	14 c0       	rjmp	.+40     	; 0x2470 <LCD_vidWriteString+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2448:	6f 81       	ldd	r22, Y+7	; 0x07
    244a:	78 85       	ldd	r23, Y+8	; 0x08
    244c:	89 85       	ldd	r24, Y+9	; 0x09
    244e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9e 83       	std	Y+6, r25	; 0x06
    245a:	8d 83       	std	Y+5, r24	; 0x05
    245c:	8d 81       	ldd	r24, Y+5	; 0x05
    245e:	9e 81       	ldd	r25, Y+6	; 0x06
    2460:	9a 83       	std	Y+2, r25	; 0x02
    2462:	89 83       	std	Y+1, r24	; 0x01
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	9a 81       	ldd	r25, Y+2	; 0x02
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <LCD_vidWriteString+0x112>
    246c:	9a 83       	std	Y+2, r25	; 0x02
    246e:	89 83       	std	Y+1, r24	; 0x01

//	/* Local loop index */
//	u8 u8Index = 0;
	u8 iteration=0;
//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration=0; iteration<u8Index ; iteration++)
    2470:	8f 85       	ldd	r24, Y+15	; 0x0f
    2472:	8f 5f       	subi	r24, 0xFF	; 255
    2474:	8f 87       	std	Y+15, r24	; 0x0f
    2476:	9f 85       	ldd	r25, Y+15	; 0x0f
    2478:	8a 89       	ldd	r24, Y+18	; 0x12
    247a:	98 17       	cp	r25, r24
    247c:	08 f4       	brcc	.+2      	; 0x2480 <LCD_vidWriteString+0x12a>
    247e:	7b cf       	rjmp	.-266    	; 0x2376 <LCD_vidWriteString+0x20>

		/* Delay to let the LCD show the character */
		_delay_ms(2);
	}

}
    2480:	62 96       	adiw	r28, 0x12	; 18
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	cd bf       	out	0x3d, r28	; 61
    248c:	cf 91       	pop	r28
    248e:	df 91       	pop	r29
    2490:	08 95       	ret

00002492 <Gotoxy>:



void Gotoxy (u8 Y,u8 X)
{
    2492:	df 93       	push	r29
    2494:	cf 93       	push	r28
    2496:	00 d0       	rcall	.+0      	; 0x2498 <Gotoxy+0x6>
    2498:	00 d0       	rcall	.+0      	; 0x249a <Gotoxy+0x8>
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	6a 83       	std	Y+2, r22	; 0x02
	if (X>0 && X<=16)
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	88 23       	and	r24, r24
    24a6:	e1 f0       	breq	.+56     	; 0x24e0 <Gotoxy+0x4e>
    24a8:	8a 81       	ldd	r24, Y+2	; 0x02
    24aa:	81 31       	cpi	r24, 0x11	; 17
    24ac:	c8 f4       	brcc	.+50     	; 0x24e0 <Gotoxy+0x4e>
	{
	    switch(Y)
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	28 2f       	mov	r18, r24
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	3c 83       	std	Y+4, r19	; 0x04
    24b6:	2b 83       	std	Y+3, r18	; 0x03
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	81 30       	cpi	r24, 0x01	; 1
    24be:	91 05       	cpc	r25, r1
    24c0:	31 f0       	breq	.+12     	; 0x24ce <Gotoxy+0x3c>
    24c2:	2b 81       	ldd	r18, Y+3	; 0x03
    24c4:	3c 81       	ldd	r19, Y+4	; 0x04
    24c6:	22 30       	cpi	r18, 0x02	; 2
    24c8:	31 05       	cpc	r19, r1
    24ca:	31 f0       	breq	.+12     	; 0x24d8 <Gotoxy+0x46>
    24cc:	09 c0       	rjmp	.+18     	; 0x24e0 <Gotoxy+0x4e>
	    {
		    case 1:
		    	lcd_vidWriteCommand(X+127);
    24ce:	8a 81       	ldd	r24, Y+2	; 0x02
    24d0:	81 58       	subi	r24, 0x81	; 129
    24d2:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <lcd_vidWriteCommand>
    24d6:	04 c0       	rjmp	.+8      	; 0x24e0 <Gotoxy+0x4e>
		    break;
		    case 2:
		    	lcd_vidWriteCommand(X+191);
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	81 54       	subi	r24, 0x41	; 65
    24dc:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <lcd_vidWriteCommand>
		    break;
		    default:
		    break;
	    }
	}
}
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	cf 91       	pop	r28
    24ea:	df 91       	pop	r29
    24ec:	08 95       	ret

000024ee <main>:
extern u8 count;
u8 nums[4];
u8 result;

void main(void)
{  lcd_vidInit();
    24ee:	df 93       	push	r29
    24f0:	cf 93       	push	r28
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <lcd_vidInit>
	 Keypad_vidInit();
    24fa:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <Keypad_vidInit>
		DIO_vidSetPinDir(b,0,output);
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	41 e0       	ldi	r20, 0x01	; 1
    2504:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_vidSetPinDir>
//while(1)
//{
		caal();
    2508:	0e 94 56 0c 	call	0x18ac	; 0x18ac <caal>
//}

}
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <__prologue_saves__>:
    2512:	2f 92       	push	r2
    2514:	3f 92       	push	r3
    2516:	4f 92       	push	r4
    2518:	5f 92       	push	r5
    251a:	6f 92       	push	r6
    251c:	7f 92       	push	r7
    251e:	8f 92       	push	r8
    2520:	9f 92       	push	r9
    2522:	af 92       	push	r10
    2524:	bf 92       	push	r11
    2526:	cf 92       	push	r12
    2528:	df 92       	push	r13
    252a:	ef 92       	push	r14
    252c:	ff 92       	push	r15
    252e:	0f 93       	push	r16
    2530:	1f 93       	push	r17
    2532:	cf 93       	push	r28
    2534:	df 93       	push	r29
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	ca 1b       	sub	r28, r26
    253c:	db 0b       	sbc	r29, r27
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	09 94       	ijmp

0000254a <__epilogue_restores__>:
    254a:	2a 88       	ldd	r2, Y+18	; 0x12
    254c:	39 88       	ldd	r3, Y+17	; 0x11
    254e:	48 88       	ldd	r4, Y+16	; 0x10
    2550:	5f 84       	ldd	r5, Y+15	; 0x0f
    2552:	6e 84       	ldd	r6, Y+14	; 0x0e
    2554:	7d 84       	ldd	r7, Y+13	; 0x0d
    2556:	8c 84       	ldd	r8, Y+12	; 0x0c
    2558:	9b 84       	ldd	r9, Y+11	; 0x0b
    255a:	aa 84       	ldd	r10, Y+10	; 0x0a
    255c:	b9 84       	ldd	r11, Y+9	; 0x09
    255e:	c8 84       	ldd	r12, Y+8	; 0x08
    2560:	df 80       	ldd	r13, Y+7	; 0x07
    2562:	ee 80       	ldd	r14, Y+6	; 0x06
    2564:	fd 80       	ldd	r15, Y+5	; 0x05
    2566:	0c 81       	ldd	r16, Y+4	; 0x04
    2568:	1b 81       	ldd	r17, Y+3	; 0x03
    256a:	aa 81       	ldd	r26, Y+2	; 0x02
    256c:	b9 81       	ldd	r27, Y+1	; 0x01
    256e:	ce 0f       	add	r28, r30
    2570:	d1 1d       	adc	r29, r1
    2572:	0f b6       	in	r0, 0x3f	; 63
    2574:	f8 94       	cli
    2576:	de bf       	out	0x3e, r29	; 62
    2578:	0f be       	out	0x3f, r0	; 63
    257a:	cd bf       	out	0x3d, r28	; 61
    257c:	ed 01       	movw	r28, r26
    257e:	08 95       	ret

00002580 <itoa>:
    2580:	fb 01       	movw	r30, r22
    2582:	9f 01       	movw	r18, r30
    2584:	e8 94       	clt
    2586:	42 30       	cpi	r20, 0x02	; 2
    2588:	c4 f0       	brlt	.+48     	; 0x25ba <itoa+0x3a>
    258a:	45 32       	cpi	r20, 0x25	; 37
    258c:	b4 f4       	brge	.+44     	; 0x25ba <itoa+0x3a>
    258e:	4a 30       	cpi	r20, 0x0A	; 10
    2590:	29 f4       	brne	.+10     	; 0x259c <itoa+0x1c>
    2592:	97 fb       	bst	r25, 7
    2594:	1e f4       	brtc	.+6      	; 0x259c <itoa+0x1c>
    2596:	90 95       	com	r25
    2598:	81 95       	neg	r24
    259a:	9f 4f       	sbci	r25, 0xFF	; 255
    259c:	64 2f       	mov	r22, r20
    259e:	77 27       	eor	r23, r23
    25a0:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <__udivmodhi4>
    25a4:	80 5d       	subi	r24, 0xD0	; 208
    25a6:	8a 33       	cpi	r24, 0x3A	; 58
    25a8:	0c f0       	brlt	.+2      	; 0x25ac <itoa+0x2c>
    25aa:	89 5d       	subi	r24, 0xD9	; 217
    25ac:	81 93       	st	Z+, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	00 97       	sbiw	r24, 0x00	; 0
    25b2:	a1 f7       	brne	.-24     	; 0x259c <itoa+0x1c>
    25b4:	16 f4       	brtc	.+4      	; 0x25ba <itoa+0x3a>
    25b6:	5d e2       	ldi	r21, 0x2D	; 45
    25b8:	51 93       	st	Z+, r21
    25ba:	10 82       	st	Z, r1
    25bc:	c9 01       	movw	r24, r18
    25be:	0c 94 e1 12 	jmp	0x25c2	; 0x25c2 <strrev>

000025c2 <strrev>:
    25c2:	dc 01       	movw	r26, r24
    25c4:	fc 01       	movw	r30, r24
    25c6:	67 2f       	mov	r22, r23
    25c8:	71 91       	ld	r23, Z+
    25ca:	77 23       	and	r23, r23
    25cc:	e1 f7       	brne	.-8      	; 0x25c6 <strrev+0x4>
    25ce:	32 97       	sbiw	r30, 0x02	; 2
    25d0:	04 c0       	rjmp	.+8      	; 0x25da <strrev+0x18>
    25d2:	7c 91       	ld	r23, X
    25d4:	6d 93       	st	X+, r22
    25d6:	70 83       	st	Z, r23
    25d8:	62 91       	ld	r22, -Z
    25da:	ae 17       	cp	r26, r30
    25dc:	bf 07       	cpc	r27, r31
    25de:	c8 f3       	brcs	.-14     	; 0x25d2 <strrev+0x10>
    25e0:	08 95       	ret

000025e2 <__udivmodhi4>:
    25e2:	aa 1b       	sub	r26, r26
    25e4:	bb 1b       	sub	r27, r27
    25e6:	51 e1       	ldi	r21, 0x11	; 17
    25e8:	07 c0       	rjmp	.+14     	; 0x25f8 <__udivmodhi4_ep>

000025ea <__udivmodhi4_loop>:
    25ea:	aa 1f       	adc	r26, r26
    25ec:	bb 1f       	adc	r27, r27
    25ee:	a6 17       	cp	r26, r22
    25f0:	b7 07       	cpc	r27, r23
    25f2:	10 f0       	brcs	.+4      	; 0x25f8 <__udivmodhi4_ep>
    25f4:	a6 1b       	sub	r26, r22
    25f6:	b7 0b       	sbc	r27, r23

000025f8 <__udivmodhi4_ep>:
    25f8:	88 1f       	adc	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	5a 95       	dec	r21
    25fe:	a9 f7       	brne	.-22     	; 0x25ea <__udivmodhi4_loop>
    2600:	80 95       	com	r24
    2602:	90 95       	com	r25
    2604:	bc 01       	movw	r22, r24
    2606:	cd 01       	movw	r24, r26
    2608:	08 95       	ret

0000260a <_exit>:
    260a:	f8 94       	cli

0000260c <__stop_program>:
    260c:	ff cf       	rjmp	.-2      	; 0x260c <__stop_program>
