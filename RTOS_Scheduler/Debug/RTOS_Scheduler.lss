
RTOS_Scheduler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a0e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000c  00800060  00800060  00000a82  2**0
                  ALLOC
  2 .stab         00000a8c  00000000  00000000  00000a84  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000536  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 a6 04 	jmp	0x94c	; 0x94c <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ac 36       	cpi	r26, 0x6C	; 108
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 e5 03 	call	0x7ca	; 0x7ca <main>
  74:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_vidSetPinDir>:
#include "DIO.h"



void DIO_vidSetPinDir (u8 port,u8 pin,u8 dir)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <DIO_vidSetPinDir+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <DIO_vidSetPinDir+0x8>
  84:	0f 92       	push	r0
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	89 83       	std	Y+1, r24	; 0x01
  8c:	6a 83       	std	Y+2, r22	; 0x02
  8e:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
  90:	89 81       	ldd	r24, Y+1	; 0x01
  92:	28 2f       	mov	r18, r24
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	3d 83       	std	Y+5, r19	; 0x05
  98:	2c 83       	std	Y+4, r18	; 0x04
  9a:	8c 81       	ldd	r24, Y+4	; 0x04
  9c:	9d 81       	ldd	r25, Y+5	; 0x05
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	91 05       	cpc	r25, r1
  a2:	09 f4       	brne	.+2      	; 0xa6 <DIO_vidSetPinDir+0x2a>
  a4:	46 c0       	rjmp	.+140    	; 0x132 <DIO_vidSetPinDir+0xb6>
  a6:	2c 81       	ldd	r18, Y+4	; 0x04
  a8:	3d 81       	ldd	r19, Y+5	; 0x05
  aa:	22 30       	cpi	r18, 0x02	; 2
  ac:	31 05       	cpc	r19, r1
  ae:	2c f4       	brge	.+10     	; 0xba <DIO_vidSetPinDir+0x3e>
  b0:	8c 81       	ldd	r24, Y+4	; 0x04
  b2:	9d 81       	ldd	r25, Y+5	; 0x05
  b4:	00 97       	sbiw	r24, 0x00	; 0
  b6:	71 f0       	breq	.+28     	; 0xd4 <DIO_vidSetPinDir+0x58>
  b8:	c7 c0       	rjmp	.+398    	; 0x248 <DIO_vidSetPinDir+0x1cc>
  ba:	2c 81       	ldd	r18, Y+4	; 0x04
  bc:	3d 81       	ldd	r19, Y+5	; 0x05
  be:	22 30       	cpi	r18, 0x02	; 2
  c0:	31 05       	cpc	r19, r1
  c2:	09 f4       	brne	.+2      	; 0xc6 <DIO_vidSetPinDir+0x4a>
  c4:	65 c0       	rjmp	.+202    	; 0x190 <DIO_vidSetPinDir+0x114>
  c6:	8c 81       	ldd	r24, Y+4	; 0x04
  c8:	9d 81       	ldd	r25, Y+5	; 0x05
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	91 05       	cpc	r25, r1
  ce:	09 f4       	brne	.+2      	; 0xd2 <DIO_vidSetPinDir+0x56>
  d0:	8e c0       	rjmp	.+284    	; 0x1ee <DIO_vidSetPinDir+0x172>
  d2:	ba c0       	rjmp	.+372    	; 0x248 <DIO_vidSetPinDir+0x1cc>
	{
	case 0:
		if(dir==input)
  d4:	8b 81       	ldd	r24, Y+3	; 0x03
  d6:	88 23       	and	r24, r24
  d8:	a1 f4       	brne	.+40     	; 0x102 <DIO_vidSetPinDir+0x86>
			Clr_Bit(DDRA,pin);
  da:	aa e3       	ldi	r26, 0x3A	; 58
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	ea e3       	ldi	r30, 0x3A	; 58
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	48 2f       	mov	r20, r24
  e6:	8a 81       	ldd	r24, Y+2	; 0x02
  e8:	28 2f       	mov	r18, r24
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 2e       	mov	r0, r18
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_vidSetPinDir+0x7c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_vidSetPinDir+0x78>
  fc:	80 95       	com	r24
  fe:	84 23       	and	r24, r20
 100:	8c 93       	st	X, r24
		if(dir==output)
 102:	8b 81       	ldd	r24, Y+3	; 0x03
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	09 f0       	breq	.+2      	; 0x10a <DIO_vidSetPinDir+0x8e>
 108:	9f c0       	rjmp	.+318    	; 0x248 <DIO_vidSetPinDir+0x1cc>
			Set_Bit(DDRA,pin);
 10a:	aa e3       	ldi	r26, 0x3A	; 58
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	ea e3       	ldi	r30, 0x3A	; 58
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	48 2f       	mov	r20, r24
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	28 2f       	mov	r18, r24
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 2e       	mov	r0, r18
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_vidSetPinDir+0xac>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_vidSetPinDir+0xa8>
 12c:	84 2b       	or	r24, r20
 12e:	8c 93       	st	X, r24
 130:	8b c0       	rjmp	.+278    	; 0x248 <DIO_vidSetPinDir+0x1cc>
		break;

	case 1:
			if(dir==input)
 132:	8b 81       	ldd	r24, Y+3	; 0x03
 134:	88 23       	and	r24, r24
 136:	a1 f4       	brne	.+40     	; 0x160 <DIO_vidSetPinDir+0xe4>
				Clr_Bit(DDRB,pin);
 138:	a7 e3       	ldi	r26, 0x37	; 55
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	e7 e3       	ldi	r30, 0x37	; 55
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	48 2f       	mov	r20, r24
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	28 2f       	mov	r18, r24
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 2e       	mov	r0, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_vidSetPinDir+0xda>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	0a 94       	dec	r0
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_vidSetPinDir+0xd6>
 15a:	80 95       	com	r24
 15c:	84 23       	and	r24, r20
 15e:	8c 93       	st	X, r24
			if(dir==output)
 160:	8b 81       	ldd	r24, Y+3	; 0x03
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	09 f0       	breq	.+2      	; 0x168 <DIO_vidSetPinDir+0xec>
 166:	70 c0       	rjmp	.+224    	; 0x248 <DIO_vidSetPinDir+0x1cc>
				Set_Bit(DDRB,pin);
 168:	a7 e3       	ldi	r26, 0x37	; 55
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	e7 e3       	ldi	r30, 0x37	; 55
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	48 2f       	mov	r20, r24
 174:	8a 81       	ldd	r24, Y+2	; 0x02
 176:	28 2f       	mov	r18, r24
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 2e       	mov	r0, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_vidSetPinDir+0x10a>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	0a 94       	dec	r0
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_vidSetPinDir+0x106>
 18a:	84 2b       	or	r24, r20
 18c:	8c 93       	st	X, r24
 18e:	5c c0       	rjmp	.+184    	; 0x248 <DIO_vidSetPinDir+0x1cc>
			break;

	case 2:
			if(dir==input)
 190:	8b 81       	ldd	r24, Y+3	; 0x03
 192:	88 23       	and	r24, r24
 194:	a1 f4       	brne	.+40     	; 0x1be <DIO_vidSetPinDir+0x142>
				Clr_Bit(DDRC,pin);
 196:	a4 e3       	ldi	r26, 0x34	; 52
 198:	b0 e0       	ldi	r27, 0x00	; 0
 19a:	e4 e3       	ldi	r30, 0x34	; 52
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	48 2f       	mov	r20, r24
 1a2:	8a 81       	ldd	r24, Y+2	; 0x02
 1a4:	28 2f       	mov	r18, r24
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 2e       	mov	r0, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_vidSetPinDir+0x138>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	0a 94       	dec	r0
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_vidSetPinDir+0x134>
 1b8:	80 95       	com	r24
 1ba:	84 23       	and	r24, r20
 1bc:	8c 93       	st	X, r24
			if(dir==output)
 1be:	8b 81       	ldd	r24, Y+3	; 0x03
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	09 f0       	breq	.+2      	; 0x1c6 <DIO_vidSetPinDir+0x14a>
 1c4:	41 c0       	rjmp	.+130    	; 0x248 <DIO_vidSetPinDir+0x1cc>
				Set_Bit(DDRC,pin);
 1c6:	a4 e3       	ldi	r26, 0x34	; 52
 1c8:	b0 e0       	ldi	r27, 0x00	; 0
 1ca:	e4 e3       	ldi	r30, 0x34	; 52
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	48 2f       	mov	r20, r24
 1d2:	8a 81       	ldd	r24, Y+2	; 0x02
 1d4:	28 2f       	mov	r18, r24
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	02 2e       	mov	r0, r18
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_vidSetPinDir+0x168>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_vidSetPinDir+0x164>
 1e8:	84 2b       	or	r24, r20
 1ea:	8c 93       	st	X, r24
 1ec:	2d c0       	rjmp	.+90     	; 0x248 <DIO_vidSetPinDir+0x1cc>
			break;

	case 3:
			if(dir==input)
 1ee:	8b 81       	ldd	r24, Y+3	; 0x03
 1f0:	88 23       	and	r24, r24
 1f2:	a1 f4       	brne	.+40     	; 0x21c <DIO_vidSetPinDir+0x1a0>
				Clr_Bit(DDRD,pin);
 1f4:	a1 e3       	ldi	r26, 0x31	; 49
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	e1 e3       	ldi	r30, 0x31	; 49
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	48 2f       	mov	r20, r24
 200:	8a 81       	ldd	r24, Y+2	; 0x02
 202:	28 2f       	mov	r18, r24
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 2e       	mov	r0, r18
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_vidSetPinDir+0x196>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_vidSetPinDir+0x192>
 216:	80 95       	com	r24
 218:	84 23       	and	r24, r20
 21a:	8c 93       	st	X, r24
			if(dir==output)
 21c:	8b 81       	ldd	r24, Y+3	; 0x03
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	99 f4       	brne	.+38     	; 0x248 <DIO_vidSetPinDir+0x1cc>
				Set_Bit(DDRD,pin);
 222:	a1 e3       	ldi	r26, 0x31	; 49
 224:	b0 e0       	ldi	r27, 0x00	; 0
 226:	e1 e3       	ldi	r30, 0x31	; 49
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	48 2f       	mov	r20, r24
 22e:	8a 81       	ldd	r24, Y+2	; 0x02
 230:	28 2f       	mov	r18, r24
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 2e       	mov	r0, r18
 23a:	02 c0       	rjmp	.+4      	; 0x240 <DIO_vidSetPinDir+0x1c4>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	0a 94       	dec	r0
 242:	e2 f7       	brpl	.-8      	; 0x23c <DIO_vidSetPinDir+0x1c0>
 244:	84 2b       	or	r24, r20
 246:	8c 93       	st	X, r24
			break;
	}
}
 248:	0f 90       	pop	r0
 24a:	0f 90       	pop	r0
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	cf 91       	pop	r28
 254:	df 91       	pop	r29
 256:	08 95       	ret

00000258 <DIO_vidWritePinValue>:

	void DIO_vidWritePinValue (u8 port,u8 pin,u8 value)
	{
 258:	df 93       	push	r29
 25a:	cf 93       	push	r28
 25c:	00 d0       	rcall	.+0      	; 0x25e <DIO_vidWritePinValue+0x6>
 25e:	00 d0       	rcall	.+0      	; 0x260 <DIO_vidWritePinValue+0x8>
 260:	0f 92       	push	r0
 262:	cd b7       	in	r28, 0x3d	; 61
 264:	de b7       	in	r29, 0x3e	; 62
 266:	89 83       	std	Y+1, r24	; 0x01
 268:	6a 83       	std	Y+2, r22	; 0x02
 26a:	4b 83       	std	Y+3, r20	; 0x03
		switch(port)
 26c:	89 81       	ldd	r24, Y+1	; 0x01
 26e:	28 2f       	mov	r18, r24
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	3d 83       	std	Y+5, r19	; 0x05
 274:	2c 83       	std	Y+4, r18	; 0x04
 276:	8c 81       	ldd	r24, Y+4	; 0x04
 278:	9d 81       	ldd	r25, Y+5	; 0x05
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	91 05       	cpc	r25, r1
 27e:	09 f4       	brne	.+2      	; 0x282 <DIO_vidWritePinValue+0x2a>
 280:	46 c0       	rjmp	.+140    	; 0x30e <DIO_vidWritePinValue+0xb6>
 282:	2c 81       	ldd	r18, Y+4	; 0x04
 284:	3d 81       	ldd	r19, Y+5	; 0x05
 286:	22 30       	cpi	r18, 0x02	; 2
 288:	31 05       	cpc	r19, r1
 28a:	2c f4       	brge	.+10     	; 0x296 <DIO_vidWritePinValue+0x3e>
 28c:	8c 81       	ldd	r24, Y+4	; 0x04
 28e:	9d 81       	ldd	r25, Y+5	; 0x05
 290:	00 97       	sbiw	r24, 0x00	; 0
 292:	71 f0       	breq	.+28     	; 0x2b0 <DIO_vidWritePinValue+0x58>
 294:	c7 c0       	rjmp	.+398    	; 0x424 <DIO_vidWritePinValue+0x1cc>
 296:	2c 81       	ldd	r18, Y+4	; 0x04
 298:	3d 81       	ldd	r19, Y+5	; 0x05
 29a:	22 30       	cpi	r18, 0x02	; 2
 29c:	31 05       	cpc	r19, r1
 29e:	09 f4       	brne	.+2      	; 0x2a2 <DIO_vidWritePinValue+0x4a>
 2a0:	65 c0       	rjmp	.+202    	; 0x36c <DIO_vidWritePinValue+0x114>
 2a2:	8c 81       	ldd	r24, Y+4	; 0x04
 2a4:	9d 81       	ldd	r25, Y+5	; 0x05
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	91 05       	cpc	r25, r1
 2aa:	09 f4       	brne	.+2      	; 0x2ae <DIO_vidWritePinValue+0x56>
 2ac:	8e c0       	rjmp	.+284    	; 0x3ca <DIO_vidWritePinValue+0x172>
 2ae:	ba c0       	rjmp	.+372    	; 0x424 <DIO_vidWritePinValue+0x1cc>
		{
		case 0:
			if(value==low)
 2b0:	8b 81       	ldd	r24, Y+3	; 0x03
 2b2:	88 23       	and	r24, r24
 2b4:	a1 f4       	brne	.+40     	; 0x2de <DIO_vidWritePinValue+0x86>
				Clr_Bit(PORTA,pin);
 2b6:	ab e3       	ldi	r26, 0x3B	; 59
 2b8:	b0 e0       	ldi	r27, 0x00	; 0
 2ba:	eb e3       	ldi	r30, 0x3B	; 59
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	48 2f       	mov	r20, r24
 2c2:	8a 81       	ldd	r24, Y+2	; 0x02
 2c4:	28 2f       	mov	r18, r24
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 2e       	mov	r0, r18
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_vidWritePinValue+0x7c>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	0a 94       	dec	r0
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_vidWritePinValue+0x78>
 2d8:	80 95       	com	r24
 2da:	84 23       	and	r24, r20
 2dc:	8c 93       	st	X, r24
			if(value==high)
 2de:	8b 81       	ldd	r24, Y+3	; 0x03
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	09 f0       	breq	.+2      	; 0x2e6 <DIO_vidWritePinValue+0x8e>
 2e4:	9f c0       	rjmp	.+318    	; 0x424 <DIO_vidWritePinValue+0x1cc>
				Set_Bit(PORTA,pin);
 2e6:	ab e3       	ldi	r26, 0x3B	; 59
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	eb e3       	ldi	r30, 0x3B	; 59
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	48 2f       	mov	r20, r24
 2f2:	8a 81       	ldd	r24, Y+2	; 0x02
 2f4:	28 2f       	mov	r18, r24
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 2e       	mov	r0, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_vidWritePinValue+0xac>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	0a 94       	dec	r0
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_vidWritePinValue+0xa8>
 308:	84 2b       	or	r24, r20
 30a:	8c 93       	st	X, r24
 30c:	8b c0       	rjmp	.+278    	; 0x424 <DIO_vidWritePinValue+0x1cc>
			break;

		case 1:
				if(value==low)
 30e:	8b 81       	ldd	r24, Y+3	; 0x03
 310:	88 23       	and	r24, r24
 312:	a1 f4       	brne	.+40     	; 0x33c <DIO_vidWritePinValue+0xe4>
					Clr_Bit(PORTB,pin);
 314:	a8 e3       	ldi	r26, 0x38	; 56
 316:	b0 e0       	ldi	r27, 0x00	; 0
 318:	e8 e3       	ldi	r30, 0x38	; 56
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	48 2f       	mov	r20, r24
 320:	8a 81       	ldd	r24, Y+2	; 0x02
 322:	28 2f       	mov	r18, r24
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 2e       	mov	r0, r18
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_vidWritePinValue+0xda>
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	0a 94       	dec	r0
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_vidWritePinValue+0xd6>
 336:	80 95       	com	r24
 338:	84 23       	and	r24, r20
 33a:	8c 93       	st	X, r24
				if(value==high)
 33c:	8b 81       	ldd	r24, Y+3	; 0x03
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	09 f0       	breq	.+2      	; 0x344 <DIO_vidWritePinValue+0xec>
 342:	70 c0       	rjmp	.+224    	; 0x424 <DIO_vidWritePinValue+0x1cc>
					Set_Bit(PORTB,pin);
 344:	a8 e3       	ldi	r26, 0x38	; 56
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	e8 e3       	ldi	r30, 0x38	; 56
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	48 2f       	mov	r20, r24
 350:	8a 81       	ldd	r24, Y+2	; 0x02
 352:	28 2f       	mov	r18, r24
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 2e       	mov	r0, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_vidWritePinValue+0x10a>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	0a 94       	dec	r0
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_vidWritePinValue+0x106>
 366:	84 2b       	or	r24, r20
 368:	8c 93       	st	X, r24
 36a:	5c c0       	rjmp	.+184    	; 0x424 <DIO_vidWritePinValue+0x1cc>
				break;

		case 2:
				if(value==low)
 36c:	8b 81       	ldd	r24, Y+3	; 0x03
 36e:	88 23       	and	r24, r24
 370:	a1 f4       	brne	.+40     	; 0x39a <DIO_vidWritePinValue+0x142>
					Clr_Bit(PORTC,pin);
 372:	a5 e3       	ldi	r26, 0x35	; 53
 374:	b0 e0       	ldi	r27, 0x00	; 0
 376:	e5 e3       	ldi	r30, 0x35	; 53
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	48 2f       	mov	r20, r24
 37e:	8a 81       	ldd	r24, Y+2	; 0x02
 380:	28 2f       	mov	r18, r24
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 2e       	mov	r0, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_vidWritePinValue+0x138>
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_vidWritePinValue+0x134>
 394:	80 95       	com	r24
 396:	84 23       	and	r24, r20
 398:	8c 93       	st	X, r24
				if(value==high)
 39a:	8b 81       	ldd	r24, Y+3	; 0x03
 39c:	81 30       	cpi	r24, 0x01	; 1
 39e:	09 f0       	breq	.+2      	; 0x3a2 <DIO_vidWritePinValue+0x14a>
 3a0:	41 c0       	rjmp	.+130    	; 0x424 <DIO_vidWritePinValue+0x1cc>
					Set_Bit(PORTC,pin);
 3a2:	a5 e3       	ldi	r26, 0x35	; 53
 3a4:	b0 e0       	ldi	r27, 0x00	; 0
 3a6:	e5 e3       	ldi	r30, 0x35	; 53
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	48 2f       	mov	r20, r24
 3ae:	8a 81       	ldd	r24, Y+2	; 0x02
 3b0:	28 2f       	mov	r18, r24
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 2e       	mov	r0, r18
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_vidWritePinValue+0x168>
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	0a 94       	dec	r0
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_vidWritePinValue+0x164>
 3c4:	84 2b       	or	r24, r20
 3c6:	8c 93       	st	X, r24
 3c8:	2d c0       	rjmp	.+90     	; 0x424 <DIO_vidWritePinValue+0x1cc>
				break;

		case 3:
				if(value==low)
 3ca:	8b 81       	ldd	r24, Y+3	; 0x03
 3cc:	88 23       	and	r24, r24
 3ce:	a1 f4       	brne	.+40     	; 0x3f8 <DIO_vidWritePinValue+0x1a0>
					Clr_Bit(PORTD,pin);
 3d0:	a2 e3       	ldi	r26, 0x32	; 50
 3d2:	b0 e0       	ldi	r27, 0x00	; 0
 3d4:	e2 e3       	ldi	r30, 0x32	; 50
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	48 2f       	mov	r20, r24
 3dc:	8a 81       	ldd	r24, Y+2	; 0x02
 3de:	28 2f       	mov	r18, r24
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	02 2e       	mov	r0, r18
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_vidWritePinValue+0x196>
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	0a 94       	dec	r0
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_vidWritePinValue+0x192>
 3f2:	80 95       	com	r24
 3f4:	84 23       	and	r24, r20
 3f6:	8c 93       	st	X, r24
				if(value==high)
 3f8:	8b 81       	ldd	r24, Y+3	; 0x03
 3fa:	81 30       	cpi	r24, 0x01	; 1
 3fc:	99 f4       	brne	.+38     	; 0x424 <DIO_vidWritePinValue+0x1cc>
					Set_Bit(PORTD,pin);
 3fe:	a2 e3       	ldi	r26, 0x32	; 50
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	e2 e3       	ldi	r30, 0x32	; 50
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	48 2f       	mov	r20, r24
 40a:	8a 81       	ldd	r24, Y+2	; 0x02
 40c:	28 2f       	mov	r18, r24
 40e:	30 e0       	ldi	r19, 0x00	; 0
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	02 2e       	mov	r0, r18
 416:	02 c0       	rjmp	.+4      	; 0x41c <DIO_vidWritePinValue+0x1c4>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	0a 94       	dec	r0
 41e:	e2 f7       	brpl	.-8      	; 0x418 <DIO_vidWritePinValue+0x1c0>
 420:	84 2b       	or	r24, r20
 422:	8c 93       	st	X, r24
				break;
		}
	}
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	0f 90       	pop	r0
 42c:	0f 90       	pop	r0
 42e:	cf 91       	pop	r28
 430:	df 91       	pop	r29
 432:	08 95       	ret

00000434 <DIO_vidTogglePinValue>:

	void DIO_vidTogglePinValue (u8 port,u8 pin)
		{
 434:	df 93       	push	r29
 436:	cf 93       	push	r28
 438:	00 d0       	rcall	.+0      	; 0x43a <DIO_vidTogglePinValue+0x6>
 43a:	00 d0       	rcall	.+0      	; 0x43c <DIO_vidTogglePinValue+0x8>
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
 440:	89 83       	std	Y+1, r24	; 0x01
 442:	6a 83       	std	Y+2, r22	; 0x02
			switch(port)
 444:	89 81       	ldd	r24, Y+1	; 0x01
 446:	28 2f       	mov	r18, r24
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	3c 83       	std	Y+4, r19	; 0x04
 44c:	2b 83       	std	Y+3, r18	; 0x03
 44e:	8b 81       	ldd	r24, Y+3	; 0x03
 450:	9c 81       	ldd	r25, Y+4	; 0x04
 452:	81 30       	cpi	r24, 0x01	; 1
 454:	91 05       	cpc	r25, r1
 456:	49 f1       	breq	.+82     	; 0x4aa <DIO_vidTogglePinValue+0x76>
 458:	2b 81       	ldd	r18, Y+3	; 0x03
 45a:	3c 81       	ldd	r19, Y+4	; 0x04
 45c:	22 30       	cpi	r18, 0x02	; 2
 45e:	31 05       	cpc	r19, r1
 460:	2c f4       	brge	.+10     	; 0x46c <DIO_vidTogglePinValue+0x38>
 462:	8b 81       	ldd	r24, Y+3	; 0x03
 464:	9c 81       	ldd	r25, Y+4	; 0x04
 466:	00 97       	sbiw	r24, 0x00	; 0
 468:	61 f0       	breq	.+24     	; 0x482 <DIO_vidTogglePinValue+0x4e>
 46a:	5a c0       	rjmp	.+180    	; 0x520 <DIO_vidTogglePinValue+0xec>
 46c:	2b 81       	ldd	r18, Y+3	; 0x03
 46e:	3c 81       	ldd	r19, Y+4	; 0x04
 470:	22 30       	cpi	r18, 0x02	; 2
 472:	31 05       	cpc	r19, r1
 474:	71 f1       	breq	.+92     	; 0x4d2 <DIO_vidTogglePinValue+0x9e>
 476:	8b 81       	ldd	r24, Y+3	; 0x03
 478:	9c 81       	ldd	r25, Y+4	; 0x04
 47a:	83 30       	cpi	r24, 0x03	; 3
 47c:	91 05       	cpc	r25, r1
 47e:	e9 f1       	breq	.+122    	; 0x4fa <DIO_vidTogglePinValue+0xc6>
 480:	4f c0       	rjmp	.+158    	; 0x520 <DIO_vidTogglePinValue+0xec>
			{
			case 0:
				           toggle_Bit(PORTA,pin);
 482:	ab e3       	ldi	r26, 0x3B	; 59
 484:	b0 e0       	ldi	r27, 0x00	; 0
 486:	eb e3       	ldi	r30, 0x3B	; 59
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	48 2f       	mov	r20, r24
 48e:	8a 81       	ldd	r24, Y+2	; 0x02
 490:	28 2f       	mov	r18, r24
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 2e       	mov	r0, r18
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_vidTogglePinValue+0x6c>
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	0a 94       	dec	r0
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_vidTogglePinValue+0x68>
 4a4:	84 27       	eor	r24, r20
 4a6:	8c 93       	st	X, r24
 4a8:	3b c0       	rjmp	.+118    	; 0x520 <DIO_vidTogglePinValue+0xec>
				           break;

			case 1:
							toggle_Bit(PORTB,pin);
 4aa:	a8 e3       	ldi	r26, 0x38	; 56
 4ac:	b0 e0       	ldi	r27, 0x00	; 0
 4ae:	e8 e3       	ldi	r30, 0x38	; 56
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 81       	ld	r24, Z
 4b4:	48 2f       	mov	r20, r24
 4b6:	8a 81       	ldd	r24, Y+2	; 0x02
 4b8:	28 2f       	mov	r18, r24
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 2e       	mov	r0, r18
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <DIO_vidTogglePinValue+0x94>
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	0a 94       	dec	r0
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <DIO_vidTogglePinValue+0x90>
 4cc:	84 27       	eor	r24, r20
 4ce:	8c 93       	st	X, r24
 4d0:	27 c0       	rjmp	.+78     	; 0x520 <DIO_vidTogglePinValue+0xec>
							break;

			case 2:
							toggle_Bit(PORTC,pin);
 4d2:	a5 e3       	ldi	r26, 0x35	; 53
 4d4:	b0 e0       	ldi	r27, 0x00	; 0
 4d6:	e5 e3       	ldi	r30, 0x35	; 53
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	48 2f       	mov	r20, r24
 4de:	8a 81       	ldd	r24, Y+2	; 0x02
 4e0:	28 2f       	mov	r18, r24
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	02 2e       	mov	r0, r18
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_vidTogglePinValue+0xbc>
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	0a 94       	dec	r0
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_vidTogglePinValue+0xb8>
 4f4:	84 27       	eor	r24, r20
 4f6:	8c 93       	st	X, r24
 4f8:	13 c0       	rjmp	.+38     	; 0x520 <DIO_vidTogglePinValue+0xec>
							break;

			case 3:
							toggle_Bit(PORTD,pin);
 4fa:	a2 e3       	ldi	r26, 0x32	; 50
 4fc:	b0 e0       	ldi	r27, 0x00	; 0
 4fe:	e2 e3       	ldi	r30, 0x32	; 50
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	48 2f       	mov	r20, r24
 506:	8a 81       	ldd	r24, Y+2	; 0x02
 508:	28 2f       	mov	r18, r24
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	02 2e       	mov	r0, r18
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_vidTogglePinValue+0xe4>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	0a 94       	dec	r0
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_vidTogglePinValue+0xe0>
 51c:	84 27       	eor	r24, r20
 51e:	8c 93       	st	X, r24
							break;
			}
		}
 520:	0f 90       	pop	r0
 522:	0f 90       	pop	r0
 524:	0f 90       	pop	r0
 526:	0f 90       	pop	r0
 528:	cf 91       	pop	r28
 52a:	df 91       	pop	r29
 52c:	08 95       	ret

0000052e <DIO_u8ReadPinValue>:


	u8 DIO_u8ReadPinValue(u8 port, u8 pin)
	{
 52e:	df 93       	push	r29
 530:	cf 93       	push	r28
 532:	00 d0       	rcall	.+0      	; 0x534 <DIO_u8ReadPinValue+0x6>
 534:	00 d0       	rcall	.+0      	; 0x536 <DIO_u8ReadPinValue+0x8>
 536:	0f 92       	push	r0
 538:	cd b7       	in	r28, 0x3d	; 61
 53a:	de b7       	in	r29, 0x3e	; 62
 53c:	89 83       	std	Y+1, r24	; 0x01
 53e:	6a 83       	std	Y+2, r22	; 0x02
		switch(port)
 540:	89 81       	ldd	r24, Y+1	; 0x01
 542:	28 2f       	mov	r18, r24
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	3d 83       	std	Y+5, r19	; 0x05
 548:	2c 83       	std	Y+4, r18	; 0x04
 54a:	4c 81       	ldd	r20, Y+4	; 0x04
 54c:	5d 81       	ldd	r21, Y+5	; 0x05
 54e:	41 30       	cpi	r20, 0x01	; 1
 550:	51 05       	cpc	r21, r1
 552:	b1 f1       	breq	.+108    	; 0x5c0 <DIO_u8ReadPinValue+0x92>
 554:	8c 81       	ldd	r24, Y+4	; 0x04
 556:	9d 81       	ldd	r25, Y+5	; 0x05
 558:	82 30       	cpi	r24, 0x02	; 2
 55a:	91 05       	cpc	r25, r1
 55c:	34 f4       	brge	.+12     	; 0x56a <DIO_u8ReadPinValue+0x3c>
 55e:	2c 81       	ldd	r18, Y+4	; 0x04
 560:	3d 81       	ldd	r19, Y+5	; 0x05
 562:	21 15       	cp	r18, r1
 564:	31 05       	cpc	r19, r1
 566:	71 f0       	breq	.+28     	; 0x584 <DIO_u8ReadPinValue+0x56>
 568:	85 c0       	rjmp	.+266    	; 0x674 <DIO_u8ReadPinValue+0x146>
 56a:	4c 81       	ldd	r20, Y+4	; 0x04
 56c:	5d 81       	ldd	r21, Y+5	; 0x05
 56e:	42 30       	cpi	r20, 0x02	; 2
 570:	51 05       	cpc	r21, r1
 572:	09 f4       	brne	.+2      	; 0x576 <DIO_u8ReadPinValue+0x48>
 574:	43 c0       	rjmp	.+134    	; 0x5fc <DIO_u8ReadPinValue+0xce>
 576:	8c 81       	ldd	r24, Y+4	; 0x04
 578:	9d 81       	ldd	r25, Y+5	; 0x05
 57a:	83 30       	cpi	r24, 0x03	; 3
 57c:	91 05       	cpc	r25, r1
 57e:	09 f4       	brne	.+2      	; 0x582 <DIO_u8ReadPinValue+0x54>
 580:	5b c0       	rjmp	.+182    	; 0x638 <DIO_u8ReadPinValue+0x10a>
 582:	78 c0       	rjmp	.+240    	; 0x674 <DIO_u8ReadPinValue+0x146>
		{
		case a:
			return Get_Bit(PINA,pin);
 584:	e9 e3       	ldi	r30, 0x39	; 57
 586:	f0 e0       	ldi	r31, 0x00	; 0
 588:	80 81       	ld	r24, Z
 58a:	48 2f       	mov	r20, r24
 58c:	50 e0       	ldi	r21, 0x00	; 0
 58e:	8a 81       	ldd	r24, Y+2	; 0x02
 590:	28 2f       	mov	r18, r24
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_u8ReadPinValue+0x70>
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	2a 95       	dec	r18
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_u8ReadPinValue+0x6c>
 5a2:	9a 01       	movw	r18, r20
 5a4:	28 23       	and	r18, r24
 5a6:	39 23       	and	r19, r25
 5a8:	8a 81       	ldd	r24, Y+2	; 0x02
 5aa:	88 2f       	mov	r24, r24
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	a9 01       	movw	r20, r18
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_u8ReadPinValue+0x88>
 5b2:	55 95       	asr	r21
 5b4:	47 95       	ror	r20
 5b6:	8a 95       	dec	r24
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_u8ReadPinValue+0x84>
 5ba:	ca 01       	movw	r24, r20
 5bc:	8b 83       	std	Y+3, r24	; 0x03
 5be:	5c c0       	rjmp	.+184    	; 0x678 <DIO_u8ReadPinValue+0x14a>
			break;
		case b:
			return Get_Bit(PINB,pin);
 5c0:	e6 e3       	ldi	r30, 0x36	; 54
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	80 81       	ld	r24, Z
 5c6:	48 2f       	mov	r20, r24
 5c8:	50 e0       	ldi	r21, 0x00	; 0
 5ca:	8a 81       	ldd	r24, Y+2	; 0x02
 5cc:	28 2f       	mov	r18, r24
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <DIO_u8ReadPinValue+0xac>
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	2a 95       	dec	r18
 5dc:	e2 f7       	brpl	.-8      	; 0x5d6 <DIO_u8ReadPinValue+0xa8>
 5de:	9a 01       	movw	r18, r20
 5e0:	28 23       	and	r18, r24
 5e2:	39 23       	and	r19, r25
 5e4:	8a 81       	ldd	r24, Y+2	; 0x02
 5e6:	88 2f       	mov	r24, r24
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	a9 01       	movw	r20, r18
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_u8ReadPinValue+0xc4>
 5ee:	55 95       	asr	r21
 5f0:	47 95       	ror	r20
 5f2:	8a 95       	dec	r24
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_u8ReadPinValue+0xc0>
 5f6:	ca 01       	movw	r24, r20
 5f8:	8b 83       	std	Y+3, r24	; 0x03
 5fa:	3e c0       	rjmp	.+124    	; 0x678 <DIO_u8ReadPinValue+0x14a>
			break;
		case c:
			return Get_Bit(PINC,pin);
 5fc:	e3 e3       	ldi	r30, 0x33	; 51
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	80 81       	ld	r24, Z
 602:	48 2f       	mov	r20, r24
 604:	50 e0       	ldi	r21, 0x00	; 0
 606:	8a 81       	ldd	r24, Y+2	; 0x02
 608:	28 2f       	mov	r18, r24
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_u8ReadPinValue+0xe8>
 612:	88 0f       	add	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	2a 95       	dec	r18
 618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_u8ReadPinValue+0xe4>
 61a:	9a 01       	movw	r18, r20
 61c:	28 23       	and	r18, r24
 61e:	39 23       	and	r19, r25
 620:	8a 81       	ldd	r24, Y+2	; 0x02
 622:	88 2f       	mov	r24, r24
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	a9 01       	movw	r20, r18
 628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_u8ReadPinValue+0x100>
 62a:	55 95       	asr	r21
 62c:	47 95       	ror	r20
 62e:	8a 95       	dec	r24
 630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_u8ReadPinValue+0xfc>
 632:	ca 01       	movw	r24, r20
 634:	8b 83       	std	Y+3, r24	; 0x03
 636:	20 c0       	rjmp	.+64     	; 0x678 <DIO_u8ReadPinValue+0x14a>
			break;
		case d:
			return Get_Bit(PIND,pin);
 638:	e0 e3       	ldi	r30, 0x30	; 48
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	80 81       	ld	r24, Z
 63e:	48 2f       	mov	r20, r24
 640:	50 e0       	ldi	r21, 0x00	; 0
 642:	8a 81       	ldd	r24, Y+2	; 0x02
 644:	28 2f       	mov	r18, r24
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	02 c0       	rjmp	.+4      	; 0x652 <DIO_u8ReadPinValue+0x124>
 64e:	88 0f       	add	r24, r24
 650:	99 1f       	adc	r25, r25
 652:	2a 95       	dec	r18
 654:	e2 f7       	brpl	.-8      	; 0x64e <DIO_u8ReadPinValue+0x120>
 656:	9a 01       	movw	r18, r20
 658:	28 23       	and	r18, r24
 65a:	39 23       	and	r19, r25
 65c:	8a 81       	ldd	r24, Y+2	; 0x02
 65e:	88 2f       	mov	r24, r24
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	a9 01       	movw	r20, r18
 664:	02 c0       	rjmp	.+4      	; 0x66a <DIO_u8ReadPinValue+0x13c>
 666:	55 95       	asr	r21
 668:	47 95       	ror	r20
 66a:	8a 95       	dec	r24
 66c:	e2 f7       	brpl	.-8      	; 0x666 <DIO_u8ReadPinValue+0x138>
 66e:	ca 01       	movw	r24, r20
 670:	8b 83       	std	Y+3, r24	; 0x03
 672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_u8ReadPinValue+0x14a>
			break;
		default :
			return port;
 674:	59 81       	ldd	r21, Y+1	; 0x01
 676:	5b 83       	std	Y+3, r21	; 0x03
 678:	8b 81       	ldd	r24, Y+3	; 0x03
			break;
		}


	}
 67a:	0f 90       	pop	r0
 67c:	0f 90       	pop	r0
 67e:	0f 90       	pop	r0
 680:	0f 90       	pop	r0
 682:	0f 90       	pop	r0
 684:	cf 91       	pop	r28
 686:	df 91       	pop	r29
 688:	08 95       	ret

0000068a <DIO_vidSetPortDir>:

	void DIO_vidSetPortDir(u8 port, u8 Dir)
		{
 68a:	df 93       	push	r29
 68c:	cf 93       	push	r28
 68e:	00 d0       	rcall	.+0      	; 0x690 <DIO_vidSetPortDir+0x6>
 690:	00 d0       	rcall	.+0      	; 0x692 <DIO_vidSetPortDir+0x8>
 692:	cd b7       	in	r28, 0x3d	; 61
 694:	de b7       	in	r29, 0x3e	; 62
 696:	89 83       	std	Y+1, r24	; 0x01
 698:	6a 83       	std	Y+2, r22	; 0x02
			switch(port)
 69a:	89 81       	ldd	r24, Y+1	; 0x01
 69c:	28 2f       	mov	r18, r24
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	3c 83       	std	Y+4, r19	; 0x04
 6a2:	2b 83       	std	Y+3, r18	; 0x03
 6a4:	8b 81       	ldd	r24, Y+3	; 0x03
 6a6:	9c 81       	ldd	r25, Y+4	; 0x04
 6a8:	81 30       	cpi	r24, 0x01	; 1
 6aa:	91 05       	cpc	r25, r1
 6ac:	d1 f0       	breq	.+52     	; 0x6e2 <DIO_vidSetPortDir+0x58>
 6ae:	2b 81       	ldd	r18, Y+3	; 0x03
 6b0:	3c 81       	ldd	r19, Y+4	; 0x04
 6b2:	22 30       	cpi	r18, 0x02	; 2
 6b4:	31 05       	cpc	r19, r1
 6b6:	2c f4       	brge	.+10     	; 0x6c2 <DIO_vidSetPortDir+0x38>
 6b8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ba:	9c 81       	ldd	r25, Y+4	; 0x04
 6bc:	00 97       	sbiw	r24, 0x00	; 0
 6be:	61 f0       	breq	.+24     	; 0x6d8 <DIO_vidSetPortDir+0x4e>
 6c0:	1e c0       	rjmp	.+60     	; 0x6fe <DIO_vidSetPortDir+0x74>
 6c2:	2b 81       	ldd	r18, Y+3	; 0x03
 6c4:	3c 81       	ldd	r19, Y+4	; 0x04
 6c6:	22 30       	cpi	r18, 0x02	; 2
 6c8:	31 05       	cpc	r19, r1
 6ca:	81 f0       	breq	.+32     	; 0x6ec <DIO_vidSetPortDir+0x62>
 6cc:	8b 81       	ldd	r24, Y+3	; 0x03
 6ce:	9c 81       	ldd	r25, Y+4	; 0x04
 6d0:	83 30       	cpi	r24, 0x03	; 3
 6d2:	91 05       	cpc	r25, r1
 6d4:	81 f0       	breq	.+32     	; 0x6f6 <DIO_vidSetPortDir+0x6c>
 6d6:	13 c0       	rjmp	.+38     	; 0x6fe <DIO_vidSetPortDir+0x74>
			{
			case a:
				DDRA=Dir;
 6d8:	ea e3       	ldi	r30, 0x3A	; 58
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	8a 81       	ldd	r24, Y+2	; 0x02
 6de:	80 83       	st	Z, r24
 6e0:	0e c0       	rjmp	.+28     	; 0x6fe <DIO_vidSetPortDir+0x74>
				break;
			case b:
				DDRB=Dir;
 6e2:	e7 e3       	ldi	r30, 0x37	; 55
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	8a 81       	ldd	r24, Y+2	; 0x02
 6e8:	80 83       	st	Z, r24
 6ea:	09 c0       	rjmp	.+18     	; 0x6fe <DIO_vidSetPortDir+0x74>
				break;
			case c:
				DDRC=Dir;
 6ec:	e4 e3       	ldi	r30, 0x34	; 52
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	8a 81       	ldd	r24, Y+2	; 0x02
 6f2:	80 83       	st	Z, r24
 6f4:	04 c0       	rjmp	.+8      	; 0x6fe <DIO_vidSetPortDir+0x74>
				break;
			case d:
				DDRD=Dir;
 6f6:	e1 e3       	ldi	r30, 0x31	; 49
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	8a 81       	ldd	r24, Y+2	; 0x02
 6fc:	80 83       	st	Z, r24
				break;

			}


		}
 6fe:	0f 90       	pop	r0
 700:	0f 90       	pop	r0
 702:	0f 90       	pop	r0
 704:	0f 90       	pop	r0
 706:	cf 91       	pop	r28
 708:	df 91       	pop	r29
 70a:	08 95       	ret

0000070c <DIO_vidWritePortValue>:

	void DIO_vidWritePortValue(u8 port, u8 Value)
			{
 70c:	df 93       	push	r29
 70e:	cf 93       	push	r28
 710:	00 d0       	rcall	.+0      	; 0x712 <DIO_vidWritePortValue+0x6>
 712:	00 d0       	rcall	.+0      	; 0x714 <DIO_vidWritePortValue+0x8>
 714:	cd b7       	in	r28, 0x3d	; 61
 716:	de b7       	in	r29, 0x3e	; 62
 718:	89 83       	std	Y+1, r24	; 0x01
 71a:	6a 83       	std	Y+2, r22	; 0x02
				switch(port)
 71c:	89 81       	ldd	r24, Y+1	; 0x01
 71e:	28 2f       	mov	r18, r24
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	3c 83       	std	Y+4, r19	; 0x04
 724:	2b 83       	std	Y+3, r18	; 0x03
 726:	8b 81       	ldd	r24, Y+3	; 0x03
 728:	9c 81       	ldd	r25, Y+4	; 0x04
 72a:	81 30       	cpi	r24, 0x01	; 1
 72c:	91 05       	cpc	r25, r1
 72e:	d1 f0       	breq	.+52     	; 0x764 <DIO_vidWritePortValue+0x58>
 730:	2b 81       	ldd	r18, Y+3	; 0x03
 732:	3c 81       	ldd	r19, Y+4	; 0x04
 734:	22 30       	cpi	r18, 0x02	; 2
 736:	31 05       	cpc	r19, r1
 738:	2c f4       	brge	.+10     	; 0x744 <DIO_vidWritePortValue+0x38>
 73a:	8b 81       	ldd	r24, Y+3	; 0x03
 73c:	9c 81       	ldd	r25, Y+4	; 0x04
 73e:	00 97       	sbiw	r24, 0x00	; 0
 740:	61 f0       	breq	.+24     	; 0x75a <DIO_vidWritePortValue+0x4e>
 742:	1e c0       	rjmp	.+60     	; 0x780 <DIO_vidWritePortValue+0x74>
 744:	2b 81       	ldd	r18, Y+3	; 0x03
 746:	3c 81       	ldd	r19, Y+4	; 0x04
 748:	22 30       	cpi	r18, 0x02	; 2
 74a:	31 05       	cpc	r19, r1
 74c:	81 f0       	breq	.+32     	; 0x76e <DIO_vidWritePortValue+0x62>
 74e:	8b 81       	ldd	r24, Y+3	; 0x03
 750:	9c 81       	ldd	r25, Y+4	; 0x04
 752:	83 30       	cpi	r24, 0x03	; 3
 754:	91 05       	cpc	r25, r1
 756:	81 f0       	breq	.+32     	; 0x778 <DIO_vidWritePortValue+0x6c>
 758:	13 c0       	rjmp	.+38     	; 0x780 <DIO_vidWritePortValue+0x74>
				{
				case a:
					PORTA=Value;
 75a:	eb e3       	ldi	r30, 0x3B	; 59
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	8a 81       	ldd	r24, Y+2	; 0x02
 760:	80 83       	st	Z, r24
 762:	0e c0       	rjmp	.+28     	; 0x780 <DIO_vidWritePortValue+0x74>
					break;
				case b:
					PORTB=Value;
 764:	e8 e3       	ldi	r30, 0x38	; 56
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	8a 81       	ldd	r24, Y+2	; 0x02
 76a:	80 83       	st	Z, r24
 76c:	09 c0       	rjmp	.+18     	; 0x780 <DIO_vidWritePortValue+0x74>
					break;
				case c:
					PORTC=Value;
 76e:	e5 e3       	ldi	r30, 0x35	; 53
 770:	f0 e0       	ldi	r31, 0x00	; 0
 772:	8a 81       	ldd	r24, Y+2	; 0x02
 774:	80 83       	st	Z, r24
 776:	04 c0       	rjmp	.+8      	; 0x780 <DIO_vidWritePortValue+0x74>
					break;
				case d:
					PORTD=Value;
 778:	e2 e3       	ldi	r30, 0x32	; 50
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	8a 81       	ldd	r24, Y+2	; 0x02
 77e:	80 83       	st	Z, r24
					break;

				}


			}
 780:	0f 90       	pop	r0
 782:	0f 90       	pop	r0
 784:	0f 90       	pop	r0
 786:	0f 90       	pop	r0
 788:	cf 91       	pop	r28
 78a:	df 91       	pop	r29
 78c:	08 95       	ret

0000078e <LED1>:
#include "utils.h"
#include "timer.h"
#include "scheduler.h"

void LED1(void)
{
 78e:	df 93       	push	r29
 790:	cf 93       	push	r28
 792:	cd b7       	in	r28, 0x3d	; 61
 794:	de b7       	in	r29, 0x3e	; 62
	toggle_Bit(PORTA,0);
 796:	ab e3       	ldi	r26, 0x3B	; 59
 798:	b0 e0       	ldi	r27, 0x00	; 0
 79a:	eb e3       	ldi	r30, 0x3B	; 59
 79c:	f0 e0       	ldi	r31, 0x00	; 0
 79e:	90 81       	ld	r25, Z
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	89 27       	eor	r24, r25
 7a4:	8c 93       	st	X, r24
}
 7a6:	cf 91       	pop	r28
 7a8:	df 91       	pop	r29
 7aa:	08 95       	ret

000007ac <LED2>:
void LED2(void)
{
 7ac:	df 93       	push	r29
 7ae:	cf 93       	push	r28
 7b0:	cd b7       	in	r28, 0x3d	; 61
 7b2:	de b7       	in	r29, 0x3e	; 62
	toggle_Bit(PORTA,1);
 7b4:	ab e3       	ldi	r26, 0x3B	; 59
 7b6:	b0 e0       	ldi	r27, 0x00	; 0
 7b8:	eb e3       	ldi	r30, 0x3B	; 59
 7ba:	f0 e0       	ldi	r31, 0x00	; 0
 7bc:	90 81       	ld	r25, Z
 7be:	82 e0       	ldi	r24, 0x02	; 2
 7c0:	89 27       	eor	r24, r25
 7c2:	8c 93       	st	X, r24
}
 7c4:	cf 91       	pop	r28
 7c6:	df 91       	pop	r29
 7c8:	08 95       	ret

000007ca <main>:

void main(void)
{
 7ca:	df 93       	push	r29
 7cc:	cf 93       	push	r28
 7ce:	cd b7       	in	r28, 0x3d	; 61
 7d0:	de b7       	in	r29, 0x3e	; 62
	os_vidCreateTask(0,1000,LED1);
 7d2:	27 ec       	ldi	r18, 0xC7	; 199
 7d4:	33 e0       	ldi	r19, 0x03	; 3
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	68 ee       	ldi	r22, 0xE8	; 232
 7da:	73 e0       	ldi	r23, 0x03	; 3
 7dc:	a9 01       	movw	r20, r18
 7de:	0e 94 06 04 	call	0x80c	; 0x80c <os_vidCreateTask>
	os_vidCreateTask(1,500,LED2);
 7e2:	26 ed       	ldi	r18, 0xD6	; 214
 7e4:	33 e0       	ldi	r19, 0x03	; 3
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	64 ef       	ldi	r22, 0xF4	; 244
 7ea:	71 e0       	ldi	r23, 0x01	; 1
 7ec:	a9 01       	movw	r20, r18
 7ee:	0e 94 06 04 	call	0x80c	; 0x80c <os_vidCreateTask>
    os_vidStartScheduler();
 7f2:	0e 94 80 04 	call	0x900	; 0x900 <os_vidStartScheduler>
    DIO_vidSetPinDir(a,pin0,output);
 7f6:	80 e0       	ldi	r24, 0x00	; 0
 7f8:	60 e0       	ldi	r22, 0x00	; 0
 7fa:	41 e0       	ldi	r20, 0x01	; 1
 7fc:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_vidSetPinDir>
    DIO_vidSetPinDir(a,pin1,output);
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	61 e0       	ldi	r22, 0x01	; 1
 804:	41 e0       	ldi	r20, 0x01	; 1
 806:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_vidSetPinDir>
 80a:	ff cf       	rjmp	.-2      	; 0x80a <main+0x40>

0000080c <os_vidCreateTask>:

task arr[nooFTasks];

void os_vidCreateTask(u8 Tpriority,u16  Tprodicity , void (*Tptr)(void)) // asm el function ma hwa 2ala awl pointer la awl instruction feha

{
 80c:	df 93       	push	r29
 80e:	cf 93       	push	r28
 810:	00 d0       	rcall	.+0      	; 0x812 <os_vidCreateTask+0x6>
 812:	00 d0       	rcall	.+0      	; 0x814 <os_vidCreateTask+0x8>
 814:	0f 92       	push	r0
 816:	cd b7       	in	r28, 0x3d	; 61
 818:	de b7       	in	r29, 0x3e	; 62
 81a:	89 83       	std	Y+1, r24	; 0x01
 81c:	7b 83       	std	Y+3, r23	; 0x03
 81e:	6a 83       	std	Y+2, r22	; 0x02
 820:	5d 83       	std	Y+5, r21	; 0x05
 822:	4c 83       	std	Y+4, r20	; 0x04
	arr[Tpriority].periodicity=Tprodicity ;
 824:	89 81       	ldd	r24, Y+1	; 0x01
 826:	88 2f       	mov	r24, r24
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	88 0f       	add	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	88 0f       	add	r24, r24
 830:	99 1f       	adc	r25, r25
 832:	fc 01       	movw	r30, r24
 834:	ec 59       	subi	r30, 0x9C	; 156
 836:	ff 4f       	sbci	r31, 0xFF	; 255
 838:	8a 81       	ldd	r24, Y+2	; 0x02
 83a:	9b 81       	ldd	r25, Y+3	; 0x03
 83c:	91 83       	std	Z+1, r25	; 0x01
 83e:	80 83       	st	Z, r24
	arr[Tpriority].fptr=Tptr ;
 840:	89 81       	ldd	r24, Y+1	; 0x01
 842:	88 2f       	mov	r24, r24
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	88 0f       	add	r24, r24
 848:	99 1f       	adc	r25, r25
 84a:	01 96       	adiw	r24, 0x01	; 1
 84c:	88 0f       	add	r24, r24
 84e:	99 1f       	adc	r25, r25
 850:	fc 01       	movw	r30, r24
 852:	ec 59       	subi	r30, 0x9C	; 156
 854:	ff 4f       	sbci	r31, 0xFF	; 255
 856:	8c 81       	ldd	r24, Y+4	; 0x04
 858:	9d 81       	ldd	r25, Y+5	; 0x05
 85a:	91 83       	std	Z+1, r25	; 0x01
 85c:	80 83       	st	Z, r24

}
 85e:	0f 90       	pop	r0
 860:	0f 90       	pop	r0
 862:	0f 90       	pop	r0
 864:	0f 90       	pop	r0
 866:	0f 90       	pop	r0
 868:	cf 91       	pop	r28
 86a:	df 91       	pop	r29
 86c:	08 95       	ret

0000086e <os_vidScheduler>:
void os_vidScheduler(void)
{ u8 i;
 86e:	ef 92       	push	r14
 870:	ff 92       	push	r15
 872:	0f 93       	push	r16
 874:	1f 93       	push	r17
 876:	df 93       	push	r29
 878:	cf 93       	push	r28
 87a:	0f 92       	push	r0
 87c:	cd b7       	in	r28, 0x3d	; 61
 87e:	de b7       	in	r29, 0x3e	; 62
  for(i=0;i<nooFTasks;i++)
 880:	19 82       	std	Y+1, r1	; 0x01
 882:	33 c0       	rjmp	.+102    	; 0x8ea <os_vidScheduler+0x7c>
  {
	  if(counter % arr[i].periodicity==0)//lw doraha nafazaha el hea el 7eta bata3at el common factor
 884:	e0 90 60 00 	lds	r14, 0x0060
 888:	f0 90 61 00 	lds	r15, 0x0061
 88c:	00 91 62 00 	lds	r16, 0x0062
 890:	10 91 63 00 	lds	r17, 0x0063
 894:	89 81       	ldd	r24, Y+1	; 0x01
 896:	88 2f       	mov	r24, r24
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	88 0f       	add	r24, r24
 89c:	99 1f       	adc	r25, r25
 89e:	88 0f       	add	r24, r24
 8a0:	99 1f       	adc	r25, r25
 8a2:	fc 01       	movw	r30, r24
 8a4:	ec 59       	subi	r30, 0x9C	; 156
 8a6:	ff 4f       	sbci	r31, 0xFF	; 255
 8a8:	80 81       	ld	r24, Z
 8aa:	91 81       	ldd	r25, Z+1	; 0x01
 8ac:	9c 01       	movw	r18, r24
 8ae:	40 e0       	ldi	r20, 0x00	; 0
 8b0:	50 e0       	ldi	r21, 0x00	; 0
 8b2:	c8 01       	movw	r24, r16
 8b4:	b7 01       	movw	r22, r14
 8b6:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__udivmodsi4>
 8ba:	dc 01       	movw	r26, r24
 8bc:	cb 01       	movw	r24, r22
 8be:	00 97       	sbiw	r24, 0x00	; 0
 8c0:	a1 05       	cpc	r26, r1
 8c2:	b1 05       	cpc	r27, r1
 8c4:	79 f4       	brne	.+30     	; 0x8e4 <os_vidScheduler+0x76>
	  {
		  arr[i].fptr(); //nafs el function
 8c6:	89 81       	ldd	r24, Y+1	; 0x01
 8c8:	88 2f       	mov	r24, r24
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	88 0f       	add	r24, r24
 8ce:	99 1f       	adc	r25, r25
 8d0:	01 96       	adiw	r24, 0x01	; 1
 8d2:	88 0f       	add	r24, r24
 8d4:	99 1f       	adc	r25, r25
 8d6:	fc 01       	movw	r30, r24
 8d8:	ec 59       	subi	r30, 0x9C	; 156
 8da:	ff 4f       	sbci	r31, 0xFF	; 255
 8dc:	01 90       	ld	r0, Z+
 8de:	f0 81       	ld	r31, Z
 8e0:	e0 2d       	mov	r30, r0
 8e2:	09 95       	icall
	arr[Tpriority].fptr=Tptr ;

}
void os_vidScheduler(void)
{ u8 i;
  for(i=0;i<nooFTasks;i++)
 8e4:	89 81       	ldd	r24, Y+1	; 0x01
 8e6:	8f 5f       	subi	r24, 0xFF	; 255
 8e8:	89 83       	std	Y+1, r24	; 0x01
 8ea:	89 81       	ldd	r24, Y+1	; 0x01
 8ec:	82 30       	cpi	r24, 0x02	; 2
 8ee:	50 f2       	brcs	.-108    	; 0x884 <os_vidScheduler+0x16>
	  if(counter % arr[i].periodicity==0)//lw doraha nafazaha el hea el 7eta bata3at el common factor
	  {
		  arr[i].fptr(); //nafs el function
	  }
  }
}
 8f0:	0f 90       	pop	r0
 8f2:	cf 91       	pop	r28
 8f4:	df 91       	pop	r29
 8f6:	1f 91       	pop	r17
 8f8:	0f 91       	pop	r16
 8fa:	ff 90       	pop	r15
 8fc:	ef 90       	pop	r14
 8fe:	08 95       	ret

00000900 <os_vidStartScheduler>:
void os_vidStartScheduler(void)
{
 900:	df 93       	push	r29
 902:	cf 93       	push	r28
 904:	cd b7       	in	r28, 0x3d	; 61
 906:	de b7       	in	r29, 0x3e	; 62
 timer_vidInit();
 908:	0e 94 89 04 	call	0x912	; 0x912 <timer_vidInit>
}
 90c:	cf 91       	pop	r28
 90e:	df 91       	pop	r29
 910:	08 95       	ret

00000912 <timer_vidInit>:

 u32 counter=0;


void timer_vidInit(void)
{
 912:	df 93       	push	r29
 914:	cf 93       	push	r28
 916:	cd b7       	in	r28, 0x3d	; 61
 918:	de b7       	in	r29, 0x3e	; 62
   	OCR0=125;  // value to compare
 91a:	ec e5       	ldi	r30, 0x5C	; 92
 91c:	f0 e0       	ldi	r31, 0x00	; 0
 91e:	8d e7       	ldi	r24, 0x7D	; 125
 920:	80 83       	st	Z, r24
	TCCR0=0b00001011; //timer control
 922:	e3 e5       	ldi	r30, 0x53	; 83
 924:	f0 e0       	ldi	r31, 0x00	; 0
 926:	8b e0       	ldi	r24, 0x0B	; 11
 928:	80 83       	st	Z, r24
	Set_Bit(TIMSK,1); //ENABLE INT bit0 or bit1(compare)
 92a:	a9 e5       	ldi	r26, 0x59	; 89
 92c:	b0 e0       	ldi	r27, 0x00	; 0
 92e:	e9 e5       	ldi	r30, 0x59	; 89
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	80 81       	ld	r24, Z
 934:	82 60       	ori	r24, 0x02	; 2
 936:	8c 93       	st	X, r24
	Set_Bit(SREG,7);  //global INT
 938:	af e5       	ldi	r26, 0x5F	; 95
 93a:	b0 e0       	ldi	r27, 0x00	; 0
 93c:	ef e5       	ldi	r30, 0x5F	; 95
 93e:	f0 e0       	ldi	r31, 0x00	; 0
 940:	80 81       	ld	r24, Z
 942:	80 68       	ori	r24, 0x80	; 128
 944:	8c 93       	st	X, r24

}
 946:	cf 91       	pop	r28
 948:	df 91       	pop	r29
 94a:	08 95       	ret

0000094c <__vector_10>:

void __vector_10(void)  __attribute__((signal,__INTR_ATTRS));
void __vector_10(void)
{
 94c:	1f 92       	push	r1
 94e:	0f 92       	push	r0
 950:	0f b6       	in	r0, 0x3f	; 63
 952:	0f 92       	push	r0
 954:	11 24       	eor	r1, r1
 956:	2f 93       	push	r18
 958:	3f 93       	push	r19
 95a:	4f 93       	push	r20
 95c:	5f 93       	push	r21
 95e:	6f 93       	push	r22
 960:	7f 93       	push	r23
 962:	8f 93       	push	r24
 964:	9f 93       	push	r25
 966:	af 93       	push	r26
 968:	bf 93       	push	r27
 96a:	ef 93       	push	r30
 96c:	ff 93       	push	r31
 96e:	df 93       	push	r29
 970:	cf 93       	push	r28
 972:	cd b7       	in	r28, 0x3d	; 61
 974:	de b7       	in	r29, 0x3e	; 62
   counter++;
 976:	80 91 60 00 	lds	r24, 0x0060
 97a:	90 91 61 00 	lds	r25, 0x0061
 97e:	a0 91 62 00 	lds	r26, 0x0062
 982:	b0 91 63 00 	lds	r27, 0x0063
 986:	01 96       	adiw	r24, 0x01	; 1
 988:	a1 1d       	adc	r26, r1
 98a:	b1 1d       	adc	r27, r1
 98c:	80 93 60 00 	sts	0x0060, r24
 990:	90 93 61 00 	sts	0x0061, r25
 994:	a0 93 62 00 	sts	0x0062, r26
 998:	b0 93 63 00 	sts	0x0063, r27
   os_vidScheduler();
 99c:	0e 94 37 04 	call	0x86e	; 0x86e <os_vidScheduler>
}
 9a0:	cf 91       	pop	r28
 9a2:	df 91       	pop	r29
 9a4:	ff 91       	pop	r31
 9a6:	ef 91       	pop	r30
 9a8:	bf 91       	pop	r27
 9aa:	af 91       	pop	r26
 9ac:	9f 91       	pop	r25
 9ae:	8f 91       	pop	r24
 9b0:	7f 91       	pop	r23
 9b2:	6f 91       	pop	r22
 9b4:	5f 91       	pop	r21
 9b6:	4f 91       	pop	r20
 9b8:	3f 91       	pop	r19
 9ba:	2f 91       	pop	r18
 9bc:	0f 90       	pop	r0
 9be:	0f be       	out	0x3f, r0	; 63
 9c0:	0f 90       	pop	r0
 9c2:	1f 90       	pop	r1
 9c4:	18 95       	reti

000009c6 <__udivmodsi4>:
 9c6:	a1 e2       	ldi	r26, 0x21	; 33
 9c8:	1a 2e       	mov	r1, r26
 9ca:	aa 1b       	sub	r26, r26
 9cc:	bb 1b       	sub	r27, r27
 9ce:	fd 01       	movw	r30, r26
 9d0:	0d c0       	rjmp	.+26     	; 0x9ec <__udivmodsi4_ep>

000009d2 <__udivmodsi4_loop>:
 9d2:	aa 1f       	adc	r26, r26
 9d4:	bb 1f       	adc	r27, r27
 9d6:	ee 1f       	adc	r30, r30
 9d8:	ff 1f       	adc	r31, r31
 9da:	a2 17       	cp	r26, r18
 9dc:	b3 07       	cpc	r27, r19
 9de:	e4 07       	cpc	r30, r20
 9e0:	f5 07       	cpc	r31, r21
 9e2:	20 f0       	brcs	.+8      	; 0x9ec <__udivmodsi4_ep>
 9e4:	a2 1b       	sub	r26, r18
 9e6:	b3 0b       	sbc	r27, r19
 9e8:	e4 0b       	sbc	r30, r20
 9ea:	f5 0b       	sbc	r31, r21

000009ec <__udivmodsi4_ep>:
 9ec:	66 1f       	adc	r22, r22
 9ee:	77 1f       	adc	r23, r23
 9f0:	88 1f       	adc	r24, r24
 9f2:	99 1f       	adc	r25, r25
 9f4:	1a 94       	dec	r1
 9f6:	69 f7       	brne	.-38     	; 0x9d2 <__udivmodsi4_loop>
 9f8:	60 95       	com	r22
 9fa:	70 95       	com	r23
 9fc:	80 95       	com	r24
 9fe:	90 95       	com	r25
 a00:	9b 01       	movw	r18, r22
 a02:	ac 01       	movw	r20, r24
 a04:	bd 01       	movw	r22, r26
 a06:	cf 01       	movw	r24, r30
 a08:	08 95       	ret

00000a0a <_exit>:
 a0a:	f8 94       	cli

00000a0c <__stop_program>:
 a0c:	ff cf       	rjmp	.-2      	; 0xa0c <__stop_program>
