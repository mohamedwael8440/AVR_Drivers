
Digital_External_Interrupt_MW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  0000076e  2**0
                  ALLOC
  2 .stab         000006a8  00000000  00000000  00000770  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000003c7  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 13 03 	jmp	0x626	; 0x626 <__vector_1>
   8:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__vector_2>
   c:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "DIO.h"
#include "DigExtInt.h"


int main (void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62

	DEI_voidInit();
  84:	0e 94 ac 02 	call	0x558	; 0x558 <DEI_voidInit>

	DIO_voidSetDirection(DIO_u8PinA0,DIO_u8PinOp);
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	61 e0       	ldi	r22, 0x01	; 1
  8c:	0e 94 51 00 	call	0xa2	; 0xa2 <DIO_voidSetDirection>

	DIO_voidWritePIN(DIO_u8PinD2,DIO_u8HIGH);
  90:	8a e1       	ldi	r24, 0x1A	; 26
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_voidWritePIN>
	DIO_voidWritePIN(DIO_u8PinD3,DIO_u8HIGH);
  98:	8b e1       	ldi	r24, 0x1B	; 27
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_voidWritePIN>
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <main+0x24>

000000a2 <DIO_voidSetDirection>:
#include "DIO.h"


//=========================================================================================
extern void DIO_voidSetDirection(u8 Copy_u8PinNum, u8 Copy_u8PinValue )
{
  a2:	df 93       	push	r29
  a4:	cf 93       	push	r28
  a6:	00 d0       	rcall	.+0      	; 0xa8 <DIO_voidSetDirection+0x6>
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
  ac:	89 83       	std	Y+1, r24	; 0x01
  ae:	6a 83       	std	Y+2, r22	; 0x02
	 * And it takes two input parameters :
	 * 			the first argument is the pin number which the user want to set its direction
	 *			the Second argument is the value (1 || 0) to set it to the selected pin
	 *	its return type is void that means it has no return value
	 */
	if( (Copy_u8PinNum>=0 && Copy_u8PinNum<=31) &&  (Copy_u8PinValue==0 || Copy_u8PinValue==1) )
  b0:	89 81       	ldd	r24, Y+1	; 0x01
  b2:	80 32       	cpi	r24, 0x20	; 32
  b4:	08 f0       	brcs	.+2      	; 0xb8 <DIO_voidSetDirection+0x16>
  b6:	ca c0       	rjmp	.+404    	; 0x24c <DIO_voidSetDirection+0x1aa>
  b8:	8a 81       	ldd	r24, Y+2	; 0x02
  ba:	88 23       	and	r24, r24
  bc:	21 f0       	breq	.+8      	; 0xc6 <DIO_voidSetDirection+0x24>
  be:	8a 81       	ldd	r24, Y+2	; 0x02
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	09 f0       	breq	.+2      	; 0xc6 <DIO_voidSetDirection+0x24>
  c4:	c3 c0       	rjmp	.+390    	; 0x24c <DIO_voidSetDirection+0x1aa>
	{
		//here is a switch case to specify which pin was passed to the function and assign the value to it
		if(Copy_u8PinNum/8==0)
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	88 30       	cpi	r24, 0x08	; 8
  ca:	68 f5       	brcc	.+90     	; 0x126 <DIO_voidSetDirection+0x84>
		{
			assign_bit(DDRA,Copy_u8PinNum%8,Copy_u8PinValue);
  cc:	aa e3       	ldi	r26, 0x3A	; 58
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	ea e3       	ldi	r30, 0x3A	; 58
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	48 2f       	mov	r20, r24
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	88 2f       	mov	r24, r24
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	9c 01       	movw	r18, r24
  e0:	27 70       	andi	r18, 0x07	; 7
  e2:	30 70       	andi	r19, 0x00	; 0
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <DIO_voidSetDirection+0x4c>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	2a 95       	dec	r18
  f0:	e2 f7       	brpl	.-8      	; 0xea <DIO_voidSetDirection+0x48>
  f2:	80 95       	com	r24
  f4:	84 23       	and	r24, r20
  f6:	8c 93       	st	X, r24
  f8:	aa e3       	ldi	r26, 0x3A	; 58
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	ea e3       	ldi	r30, 0x3A	; 58
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	48 2f       	mov	r20, r24
 104:	8a 81       	ldd	r24, Y+2	; 0x02
 106:	28 2f       	mov	r18, r24
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	88 2f       	mov	r24, r24
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	87 70       	andi	r24, 0x07	; 7
 112:	90 70       	andi	r25, 0x00	; 0
 114:	b9 01       	movw	r22, r18
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_voidSetDirection+0x7a>
 118:	66 0f       	add	r22, r22
 11a:	77 1f       	adc	r23, r23
 11c:	8a 95       	dec	r24
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_voidSetDirection+0x76>
 120:	cb 01       	movw	r24, r22
 122:	84 2b       	or	r24, r20
 124:	8c 93       	st	X, r24
		}
		if(Copy_u8PinNum/8==1)
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	88 50       	subi	r24, 0x08	; 8
 12a:	88 30       	cpi	r24, 0x08	; 8
 12c:	68 f5       	brcc	.+90     	; 0x188 <DIO_voidSetDirection+0xe6>
		{
			assign_bit(DDRB,Copy_u8PinNum%8,Copy_u8PinValue);
 12e:	a7 e3       	ldi	r26, 0x37	; 55
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	e7 e3       	ldi	r30, 0x37	; 55
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	48 2f       	mov	r20, r24
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	88 2f       	mov	r24, r24
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	9c 01       	movw	r18, r24
 142:	27 70       	andi	r18, 0x07	; 7
 144:	30 70       	andi	r19, 0x00	; 0
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_voidSetDirection+0xae>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	2a 95       	dec	r18
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_voidSetDirection+0xaa>
 154:	80 95       	com	r24
 156:	84 23       	and	r24, r20
 158:	8c 93       	st	X, r24
 15a:	a7 e3       	ldi	r26, 0x37	; 55
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	e7 e3       	ldi	r30, 0x37	; 55
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	48 2f       	mov	r20, r24
 166:	8a 81       	ldd	r24, Y+2	; 0x02
 168:	28 2f       	mov	r18, r24
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	88 2f       	mov	r24, r24
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	87 70       	andi	r24, 0x07	; 7
 174:	90 70       	andi	r25, 0x00	; 0
 176:	b9 01       	movw	r22, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_voidSetDirection+0xdc>
 17a:	66 0f       	add	r22, r22
 17c:	77 1f       	adc	r23, r23
 17e:	8a 95       	dec	r24
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_voidSetDirection+0xd8>
 182:	cb 01       	movw	r24, r22
 184:	84 2b       	or	r24, r20
 186:	8c 93       	st	X, r24
		}
		if(Copy_u8PinNum/8==2)
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	80 51       	subi	r24, 0x10	; 16
 18c:	88 30       	cpi	r24, 0x08	; 8
 18e:	68 f5       	brcc	.+90     	; 0x1ea <DIO_voidSetDirection+0x148>
		{
			assign_bit(DDRC,Copy_u8PinNum%8,Copy_u8PinValue);
 190:	a4 e3       	ldi	r26, 0x34	; 52
 192:	b0 e0       	ldi	r27, 0x00	; 0
 194:	e4 e3       	ldi	r30, 0x34	; 52
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	48 2f       	mov	r20, r24
 19c:	89 81       	ldd	r24, Y+1	; 0x01
 19e:	88 2f       	mov	r24, r24
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	9c 01       	movw	r18, r24
 1a4:	27 70       	andi	r18, 0x07	; 7
 1a6:	30 70       	andi	r19, 0x00	; 0
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_voidSetDirection+0x110>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	2a 95       	dec	r18
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_voidSetDirection+0x10c>
 1b6:	80 95       	com	r24
 1b8:	84 23       	and	r24, r20
 1ba:	8c 93       	st	X, r24
 1bc:	a4 e3       	ldi	r26, 0x34	; 52
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	e4 e3       	ldi	r30, 0x34	; 52
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	48 2f       	mov	r20, r24
 1c8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ca:	28 2f       	mov	r18, r24
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	88 2f       	mov	r24, r24
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	87 70       	andi	r24, 0x07	; 7
 1d6:	90 70       	andi	r25, 0x00	; 0
 1d8:	b9 01       	movw	r22, r18
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_voidSetDirection+0x13e>
 1dc:	66 0f       	add	r22, r22
 1de:	77 1f       	adc	r23, r23
 1e0:	8a 95       	dec	r24
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_voidSetDirection+0x13a>
 1e4:	cb 01       	movw	r24, r22
 1e6:	84 2b       	or	r24, r20
 1e8:	8c 93       	st	X, r24
		}
		if(Copy_u8PinNum/8==3)
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	88 51       	subi	r24, 0x18	; 24
 1ee:	88 30       	cpi	r24, 0x08	; 8
 1f0:	68 f5       	brcc	.+90     	; 0x24c <DIO_voidSetDirection+0x1aa>
		{
			assign_bit(DDRD,Copy_u8PinNum%8,Copy_u8PinValue);
 1f2:	a1 e3       	ldi	r26, 0x31	; 49
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	e1 e3       	ldi	r30, 0x31	; 49
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	48 2f       	mov	r20, r24
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	88 2f       	mov	r24, r24
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	9c 01       	movw	r18, r24
 206:	27 70       	andi	r18, 0x07	; 7
 208:	30 70       	andi	r19, 0x00	; 0
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_voidSetDirection+0x172>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	2a 95       	dec	r18
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_voidSetDirection+0x16e>
 218:	80 95       	com	r24
 21a:	84 23       	and	r24, r20
 21c:	8c 93       	st	X, r24
 21e:	a1 e3       	ldi	r26, 0x31	; 49
 220:	b0 e0       	ldi	r27, 0x00	; 0
 222:	e1 e3       	ldi	r30, 0x31	; 49
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	80 81       	ld	r24, Z
 228:	48 2f       	mov	r20, r24
 22a:	8a 81       	ldd	r24, Y+2	; 0x02
 22c:	28 2f       	mov	r18, r24
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	88 2f       	mov	r24, r24
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	87 70       	andi	r24, 0x07	; 7
 238:	90 70       	andi	r25, 0x00	; 0
 23a:	b9 01       	movw	r22, r18
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_voidSetDirection+0x1a0>
 23e:	66 0f       	add	r22, r22
 240:	77 1f       	adc	r23, r23
 242:	8a 95       	dec	r24
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_voidSetDirection+0x19c>
 246:	cb 01       	movw	r24, r22
 248:	84 2b       	or	r24, r20
 24a:	8c 93       	st	X, r24
		}
	}
}
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	cf 91       	pop	r28
 252:	df 91       	pop	r29
 254:	08 95       	ret

00000256 <DIO_voidWritePIN>:
//=========================================================================================
extern void DIO_voidWritePIN(u8 Copy_u8PinNum, u8 Copy_u8PinValue)
{
 256:	df 93       	push	r29
 258:	cf 93       	push	r28
 25a:	00 d0       	rcall	.+0      	; 0x25c <DIO_voidWritePIN+0x6>
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
 260:	89 83       	std	Y+1, r24	; 0x01
 262:	6a 83       	std	Y+2, r22	; 0x02
	*the 1st one is the number of the PIN
	*the 2nd one is the value that needed to be assigned to the pre-specified PIN
	*	its return type is void that means it has no return value
	*/

	if( (Copy_u8PinNum>=0 && Copy_u8PinNum<=31) &&  (Copy_u8PinValue==0 || Copy_u8PinValue==1) )
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	80 32       	cpi	r24, 0x20	; 32
 268:	08 f0       	brcs	.+2      	; 0x26c <DIO_voidWritePIN+0x16>
 26a:	ca c0       	rjmp	.+404    	; 0x400 <DIO_voidWritePIN+0x1aa>
 26c:	8a 81       	ldd	r24, Y+2	; 0x02
 26e:	88 23       	and	r24, r24
 270:	21 f0       	breq	.+8      	; 0x27a <DIO_voidWritePIN+0x24>
 272:	8a 81       	ldd	r24, Y+2	; 0x02
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	09 f0       	breq	.+2      	; 0x27a <DIO_voidWritePIN+0x24>
 278:	c3 c0       	rjmp	.+390    	; 0x400 <DIO_voidWritePIN+0x1aa>
	{
		//the switch case to specify which pin was selected by the user
		if((Copy_u8PinNum/8)==0)
 27a:	89 81       	ldd	r24, Y+1	; 0x01
 27c:	88 30       	cpi	r24, 0x08	; 8
 27e:	68 f5       	brcc	.+90     	; 0x2da <DIO_voidWritePIN+0x84>
		{
			assign_bit(PORTA,Copy_u8PinNum%8,Copy_u8PinValue);
 280:	ab e3       	ldi	r26, 0x3B	; 59
 282:	b0 e0       	ldi	r27, 0x00	; 0
 284:	eb e3       	ldi	r30, 0x3B	; 59
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	48 2f       	mov	r20, r24
 28c:	89 81       	ldd	r24, Y+1	; 0x01
 28e:	88 2f       	mov	r24, r24
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	9c 01       	movw	r18, r24
 294:	27 70       	andi	r18, 0x07	; 7
 296:	30 70       	andi	r19, 0x00	; 0
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_voidWritePIN+0x4c>
 29e:	88 0f       	add	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	2a 95       	dec	r18
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_voidWritePIN+0x48>
 2a6:	80 95       	com	r24
 2a8:	84 23       	and	r24, r20
 2aa:	8c 93       	st	X, r24
 2ac:	ab e3       	ldi	r26, 0x3B	; 59
 2ae:	b0 e0       	ldi	r27, 0x00	; 0
 2b0:	eb e3       	ldi	r30, 0x3B	; 59
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	48 2f       	mov	r20, r24
 2b8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ba:	28 2f       	mov	r18, r24
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	89 81       	ldd	r24, Y+1	; 0x01
 2c0:	88 2f       	mov	r24, r24
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	87 70       	andi	r24, 0x07	; 7
 2c6:	90 70       	andi	r25, 0x00	; 0
 2c8:	b9 01       	movw	r22, r18
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_voidWritePIN+0x7a>
 2cc:	66 0f       	add	r22, r22
 2ce:	77 1f       	adc	r23, r23
 2d0:	8a 95       	dec	r24
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_voidWritePIN+0x76>
 2d4:	cb 01       	movw	r24, r22
 2d6:	84 2b       	or	r24, r20
 2d8:	8c 93       	st	X, r24
		}
		if((Copy_u8PinNum/8)==1)
 2da:	89 81       	ldd	r24, Y+1	; 0x01
 2dc:	88 50       	subi	r24, 0x08	; 8
 2de:	88 30       	cpi	r24, 0x08	; 8
 2e0:	68 f5       	brcc	.+90     	; 0x33c <DIO_voidWritePIN+0xe6>
		{
			assign_bit(PORTB,Copy_u8PinNum%8,Copy_u8PinValue);
 2e2:	a8 e3       	ldi	r26, 0x38	; 56
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	e8 e3       	ldi	r30, 0x38	; 56
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	48 2f       	mov	r20, r24
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	88 2f       	mov	r24, r24
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	9c 01       	movw	r18, r24
 2f6:	27 70       	andi	r18, 0x07	; 7
 2f8:	30 70       	andi	r19, 0x00	; 0
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_voidWritePIN+0xae>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	2a 95       	dec	r18
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_voidWritePIN+0xaa>
 308:	80 95       	com	r24
 30a:	84 23       	and	r24, r20
 30c:	8c 93       	st	X, r24
 30e:	a8 e3       	ldi	r26, 0x38	; 56
 310:	b0 e0       	ldi	r27, 0x00	; 0
 312:	e8 e3       	ldi	r30, 0x38	; 56
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	48 2f       	mov	r20, r24
 31a:	8a 81       	ldd	r24, Y+2	; 0x02
 31c:	28 2f       	mov	r18, r24
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	89 81       	ldd	r24, Y+1	; 0x01
 322:	88 2f       	mov	r24, r24
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	87 70       	andi	r24, 0x07	; 7
 328:	90 70       	andi	r25, 0x00	; 0
 32a:	b9 01       	movw	r22, r18
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_voidWritePIN+0xdc>
 32e:	66 0f       	add	r22, r22
 330:	77 1f       	adc	r23, r23
 332:	8a 95       	dec	r24
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_voidWritePIN+0xd8>
 336:	cb 01       	movw	r24, r22
 338:	84 2b       	or	r24, r20
 33a:	8c 93       	st	X, r24
		}
		if((Copy_u8PinNum)/8==2)
 33c:	89 81       	ldd	r24, Y+1	; 0x01
 33e:	80 51       	subi	r24, 0x10	; 16
 340:	88 30       	cpi	r24, 0x08	; 8
 342:	68 f5       	brcc	.+90     	; 0x39e <DIO_voidWritePIN+0x148>
		{
			assign_bit(PORTC,Copy_u8PinNum%8,Copy_u8PinValue);
 344:	a5 e3       	ldi	r26, 0x35	; 53
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	e5 e3       	ldi	r30, 0x35	; 53
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	48 2f       	mov	r20, r24
 350:	89 81       	ldd	r24, Y+1	; 0x01
 352:	88 2f       	mov	r24, r24
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	9c 01       	movw	r18, r24
 358:	27 70       	andi	r18, 0x07	; 7
 35a:	30 70       	andi	r19, 0x00	; 0
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_voidWritePIN+0x110>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	2a 95       	dec	r18
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_voidWritePIN+0x10c>
 36a:	80 95       	com	r24
 36c:	84 23       	and	r24, r20
 36e:	8c 93       	st	X, r24
 370:	a5 e3       	ldi	r26, 0x35	; 53
 372:	b0 e0       	ldi	r27, 0x00	; 0
 374:	e5 e3       	ldi	r30, 0x35	; 53
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	48 2f       	mov	r20, r24
 37c:	8a 81       	ldd	r24, Y+2	; 0x02
 37e:	28 2f       	mov	r18, r24
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	88 2f       	mov	r24, r24
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	87 70       	andi	r24, 0x07	; 7
 38a:	90 70       	andi	r25, 0x00	; 0
 38c:	b9 01       	movw	r22, r18
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_voidWritePIN+0x13e>
 390:	66 0f       	add	r22, r22
 392:	77 1f       	adc	r23, r23
 394:	8a 95       	dec	r24
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_voidWritePIN+0x13a>
 398:	cb 01       	movw	r24, r22
 39a:	84 2b       	or	r24, r20
 39c:	8c 93       	st	X, r24
		}
		if((Copy_u8PinNum/8)==3)
 39e:	89 81       	ldd	r24, Y+1	; 0x01
 3a0:	88 51       	subi	r24, 0x18	; 24
 3a2:	88 30       	cpi	r24, 0x08	; 8
 3a4:	68 f5       	brcc	.+90     	; 0x400 <DIO_voidWritePIN+0x1aa>
		{
			assign_bit(PORTD,Copy_u8PinNum%8,Copy_u8PinValue);
 3a6:	a2 e3       	ldi	r26, 0x32	; 50
 3a8:	b0 e0       	ldi	r27, 0x00	; 0
 3aa:	e2 e3       	ldi	r30, 0x32	; 50
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	48 2f       	mov	r20, r24
 3b2:	89 81       	ldd	r24, Y+1	; 0x01
 3b4:	88 2f       	mov	r24, r24
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	9c 01       	movw	r18, r24
 3ba:	27 70       	andi	r18, 0x07	; 7
 3bc:	30 70       	andi	r19, 0x00	; 0
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_voidWritePIN+0x172>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	2a 95       	dec	r18
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_voidWritePIN+0x16e>
 3cc:	80 95       	com	r24
 3ce:	84 23       	and	r24, r20
 3d0:	8c 93       	st	X, r24
 3d2:	a2 e3       	ldi	r26, 0x32	; 50
 3d4:	b0 e0       	ldi	r27, 0x00	; 0
 3d6:	e2 e3       	ldi	r30, 0x32	; 50
 3d8:	f0 e0       	ldi	r31, 0x00	; 0
 3da:	80 81       	ld	r24, Z
 3dc:	48 2f       	mov	r20, r24
 3de:	8a 81       	ldd	r24, Y+2	; 0x02
 3e0:	28 2f       	mov	r18, r24
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	89 81       	ldd	r24, Y+1	; 0x01
 3e6:	88 2f       	mov	r24, r24
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	87 70       	andi	r24, 0x07	; 7
 3ec:	90 70       	andi	r25, 0x00	; 0
 3ee:	b9 01       	movw	r22, r18
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_voidWritePIN+0x1a0>
 3f2:	66 0f       	add	r22, r22
 3f4:	77 1f       	adc	r23, r23
 3f6:	8a 95       	dec	r24
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_voidWritePIN+0x19c>
 3fa:	cb 01       	movw	r24, r22
 3fc:	84 2b       	or	r24, r20
 3fe:	8c 93       	st	X, r24
		}
	}

}
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	cf 91       	pop	r28
 406:	df 91       	pop	r29
 408:	08 95       	ret

0000040a <DIO_u8ReadPIN>:
//=======================================================================================
extern u8 DIO_u8ReadPIN(u8 Copy_u8PinNum)
{
 40a:	df 93       	push	r29
 40c:	cf 93       	push	r28
 40e:	00 d0       	rcall	.+0      	; 0x410 <DIO_u8ReadPIN+0x6>
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
 414:	8a 83       	std	Y+2, r24	; 0x02
		*	its return type is u8 that means it has a return value with data type (u8)
		*/

	//a u8 variable to store the read value and return it
	u8 Local_u8ReturnValue;
	if( Copy_u8PinNum>=0 && Copy_u8PinNum<=31)
 416:	8a 81       	ldd	r24, Y+2	; 0x02
 418:	80 32       	cpi	r24, 0x20	; 32
 41a:	08 f0       	brcs	.+2      	; 0x41e <DIO_u8ReadPIN+0x14>
 41c:	97 c0       	rjmp	.+302    	; 0x54c <DIO_u8ReadPIN+0x142>
		{
			if(Copy_u8PinNum/8==0)
 41e:	8a 81       	ldd	r24, Y+2	; 0x02
 420:	88 30       	cpi	r24, 0x08	; 8
 422:	10 f5       	brcc	.+68     	; 0x468 <DIO_u8ReadPIN+0x5e>
			{
				Local_u8ReturnValue=get_bit(PINA,Copy_u8PinNum%8);
 424:	e9 e3       	ldi	r30, 0x39	; 57
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	48 2f       	mov	r20, r24
 42c:	50 e0       	ldi	r21, 0x00	; 0
 42e:	8a 81       	ldd	r24, Y+2	; 0x02
 430:	88 2f       	mov	r24, r24
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	9c 01       	movw	r18, r24
 436:	27 70       	andi	r18, 0x07	; 7
 438:	30 70       	andi	r19, 0x00	; 0
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	02 c0       	rjmp	.+4      	; 0x444 <DIO_u8ReadPIN+0x3a>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	2a 95       	dec	r18
 446:	e2 f7       	brpl	.-8      	; 0x440 <DIO_u8ReadPIN+0x36>
 448:	9a 01       	movw	r18, r20
 44a:	28 23       	and	r18, r24
 44c:	39 23       	and	r19, r25
 44e:	8a 81       	ldd	r24, Y+2	; 0x02
 450:	88 2f       	mov	r24, r24
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	87 70       	andi	r24, 0x07	; 7
 456:	90 70       	andi	r25, 0x00	; 0
 458:	a9 01       	movw	r20, r18
 45a:	02 c0       	rjmp	.+4      	; 0x460 <DIO_u8ReadPIN+0x56>
 45c:	55 95       	asr	r21
 45e:	47 95       	ror	r20
 460:	8a 95       	dec	r24
 462:	e2 f7       	brpl	.-8      	; 0x45c <DIO_u8ReadPIN+0x52>
 464:	ca 01       	movw	r24, r20
 466:	89 83       	std	Y+1, r24	; 0x01
			}
			if(Copy_u8PinNum/8==1)
 468:	8a 81       	ldd	r24, Y+2	; 0x02
 46a:	88 50       	subi	r24, 0x08	; 8
 46c:	88 30       	cpi	r24, 0x08	; 8
 46e:	10 f5       	brcc	.+68     	; 0x4b4 <DIO_u8ReadPIN+0xaa>
			{
				Local_u8ReturnValue=get_bit(PINB,Copy_u8PinNum%8);
 470:	e6 e3       	ldi	r30, 0x36	; 54
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	80 81       	ld	r24, Z
 476:	48 2f       	mov	r20, r24
 478:	50 e0       	ldi	r21, 0x00	; 0
 47a:	8a 81       	ldd	r24, Y+2	; 0x02
 47c:	88 2f       	mov	r24, r24
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	9c 01       	movw	r18, r24
 482:	27 70       	andi	r18, 0x07	; 7
 484:	30 70       	andi	r19, 0x00	; 0
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_u8ReadPIN+0x86>
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	2a 95       	dec	r18
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_u8ReadPIN+0x82>
 494:	9a 01       	movw	r18, r20
 496:	28 23       	and	r18, r24
 498:	39 23       	and	r19, r25
 49a:	8a 81       	ldd	r24, Y+2	; 0x02
 49c:	88 2f       	mov	r24, r24
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	87 70       	andi	r24, 0x07	; 7
 4a2:	90 70       	andi	r25, 0x00	; 0
 4a4:	a9 01       	movw	r20, r18
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_u8ReadPIN+0xa2>
 4a8:	55 95       	asr	r21
 4aa:	47 95       	ror	r20
 4ac:	8a 95       	dec	r24
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_u8ReadPIN+0x9e>
 4b0:	ca 01       	movw	r24, r20
 4b2:	89 83       	std	Y+1, r24	; 0x01
			}
			if(Copy_u8PinNum/8==2)
 4b4:	8a 81       	ldd	r24, Y+2	; 0x02
 4b6:	80 51       	subi	r24, 0x10	; 16
 4b8:	88 30       	cpi	r24, 0x08	; 8
 4ba:	10 f5       	brcc	.+68     	; 0x500 <DIO_u8ReadPIN+0xf6>
			{
				Local_u8ReturnValue=get_bit(PINC,Copy_u8PinNum%8);
 4bc:	e3 e3       	ldi	r30, 0x33	; 51
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	48 2f       	mov	r20, r24
 4c4:	50 e0       	ldi	r21, 0x00	; 0
 4c6:	8a 81       	ldd	r24, Y+2	; 0x02
 4c8:	88 2f       	mov	r24, r24
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	9c 01       	movw	r18, r24
 4ce:	27 70       	andi	r18, 0x07	; 7
 4d0:	30 70       	andi	r19, 0x00	; 0
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_u8ReadPIN+0xd2>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	2a 95       	dec	r18
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_u8ReadPIN+0xce>
 4e0:	9a 01       	movw	r18, r20
 4e2:	28 23       	and	r18, r24
 4e4:	39 23       	and	r19, r25
 4e6:	8a 81       	ldd	r24, Y+2	; 0x02
 4e8:	88 2f       	mov	r24, r24
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	87 70       	andi	r24, 0x07	; 7
 4ee:	90 70       	andi	r25, 0x00	; 0
 4f0:	a9 01       	movw	r20, r18
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_u8ReadPIN+0xee>
 4f4:	55 95       	asr	r21
 4f6:	47 95       	ror	r20
 4f8:	8a 95       	dec	r24
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_u8ReadPIN+0xea>
 4fc:	ca 01       	movw	r24, r20
 4fe:	89 83       	std	Y+1, r24	; 0x01
			}
			if(Copy_u8PinNum/8==3)
 500:	8a 81       	ldd	r24, Y+2	; 0x02
 502:	88 51       	subi	r24, 0x18	; 24
 504:	88 30       	cpi	r24, 0x08	; 8
 506:	10 f5       	brcc	.+68     	; 0x54c <DIO_u8ReadPIN+0x142>
			{
				Local_u8ReturnValue=get_bit(PIND,Copy_u8PinNum%8);
 508:	e0 e3       	ldi	r30, 0x30	; 48
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	48 2f       	mov	r20, r24
 510:	50 e0       	ldi	r21, 0x00	; 0
 512:	8a 81       	ldd	r24, Y+2	; 0x02
 514:	88 2f       	mov	r24, r24
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	9c 01       	movw	r18, r24
 51a:	27 70       	andi	r18, 0x07	; 7
 51c:	30 70       	andi	r19, 0x00	; 0
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_u8ReadPIN+0x11e>
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	2a 95       	dec	r18
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_u8ReadPIN+0x11a>
 52c:	9a 01       	movw	r18, r20
 52e:	28 23       	and	r18, r24
 530:	39 23       	and	r19, r25
 532:	8a 81       	ldd	r24, Y+2	; 0x02
 534:	88 2f       	mov	r24, r24
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	87 70       	andi	r24, 0x07	; 7
 53a:	90 70       	andi	r25, 0x00	; 0
 53c:	a9 01       	movw	r20, r18
 53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_u8ReadPIN+0x13a>
 540:	55 95       	asr	r21
 542:	47 95       	ror	r20
 544:	8a 95       	dec	r24
 546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_u8ReadPIN+0x136>
 548:	ca 01       	movw	r24, r20
 54a:	89 83       	std	Y+1, r24	; 0x01
			}
		}

	//return the output of the selected pin
	return Local_u8ReturnValue;
 54c:	89 81       	ldd	r24, Y+1	; 0x01
}
 54e:	0f 90       	pop	r0
 550:	0f 90       	pop	r0
 552:	cf 91       	pop	r28
 554:	df 91       	pop	r29
 556:	08 95       	ret

00000558 <DEI_voidInit>:
void __vector_2 (void)  __attribute__((signal,__INTR_ATTRS));
void __vector_3 (void)  __attribute__((signal,__INTR_ATTRS));


extern void DEI_voidInit(void)
{
 558:	df 93       	push	r29
 55a:	cf 93       	push	r28
 55c:	cd b7       	in	r28, 0x3d	; 61
 55e:	de b7       	in	r29, 0x3e	; 62
	/*Enable Global INterrupt */
	assign_bit(SREG,7,HIGH);
 560:	af e5       	ldi	r26, 0x5F	; 95
 562:	b0 e0       	ldi	r27, 0x00	; 0
 564:	ef e5       	ldi	r30, 0x5F	; 95
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	80 81       	ld	r24, Z
 56a:	8f 77       	andi	r24, 0x7F	; 127
 56c:	8c 93       	st	X, r24
 56e:	af e5       	ldi	r26, 0x5F	; 95
 570:	b0 e0       	ldi	r27, 0x00	; 0
 572:	ef e5       	ldi	r30, 0x5F	; 95
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	80 81       	ld	r24, Z
 578:	80 68       	ori	r24, 0x80	; 128
 57a:	8c 93       	st	X, r24

#if INT0 == Enable

	assign_bit(GICR,6,HIGH);
 57c:	ab e5       	ldi	r26, 0x5B	; 91
 57e:	b0 e0       	ldi	r27, 0x00	; 0
 580:	eb e5       	ldi	r30, 0x5B	; 91
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	8f 7b       	andi	r24, 0xBF	; 191
 588:	8c 93       	st	X, r24
 58a:	ab e5       	ldi	r26, 0x5B	; 91
 58c:	b0 e0       	ldi	r27, 0x00	; 0
 58e:	eb e5       	ldi	r30, 0x5B	; 91
 590:	f0 e0       	ldi	r31, 0x00	; 0
 592:	80 81       	ld	r24, Z
 594:	80 64       	ori	r24, 0x40	; 64
 596:	8c 93       	st	X, r24
	assign_bit(MCUCR,ISC00_bit,ISC00);
 598:	a5 e5       	ldi	r26, 0x55	; 85
 59a:	b0 e0       	ldi	r27, 0x00	; 0
 59c:	e5 e5       	ldi	r30, 0x55	; 85
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	80 81       	ld	r24, Z
 5a2:	8e 7f       	andi	r24, 0xFE	; 254
 5a4:	8c 93       	st	X, r24
 5a6:	a5 e5       	ldi	r26, 0x55	; 85
 5a8:	b0 e0       	ldi	r27, 0x00	; 0
 5aa:	e5 e5       	ldi	r30, 0x55	; 85
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	80 81       	ld	r24, Z
 5b0:	8c 93       	st	X, r24
	assign_bit(MCUCR,ISC01_bit,ISC01);
 5b2:	a5 e5       	ldi	r26, 0x55	; 85
 5b4:	b0 e0       	ldi	r27, 0x00	; 0
 5b6:	e5 e5       	ldi	r30, 0x55	; 85
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	80 81       	ld	r24, Z
 5bc:	8d 7f       	andi	r24, 0xFD	; 253
 5be:	8c 93       	st	X, r24
 5c0:	a5 e5       	ldi	r26, 0x55	; 85
 5c2:	b0 e0       	ldi	r27, 0x00	; 0
 5c4:	e5 e5       	ldi	r30, 0x55	; 85
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	80 81       	ld	r24, Z
 5ca:	82 60       	ori	r24, 0x02	; 2
 5cc:	8c 93       	st	X, r24

#endif

#if INT1 == Enable

	assign_bit(GICR,7,HIGH);
 5ce:	ab e5       	ldi	r26, 0x5B	; 91
 5d0:	b0 e0       	ldi	r27, 0x00	; 0
 5d2:	eb e5       	ldi	r30, 0x5B	; 91
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	80 81       	ld	r24, Z
 5d8:	8f 77       	andi	r24, 0x7F	; 127
 5da:	8c 93       	st	X, r24
 5dc:	ab e5       	ldi	r26, 0x5B	; 91
 5de:	b0 e0       	ldi	r27, 0x00	; 0
 5e0:	eb e5       	ldi	r30, 0x5B	; 91
 5e2:	f0 e0       	ldi	r31, 0x00	; 0
 5e4:	80 81       	ld	r24, Z
 5e6:	80 68       	ori	r24, 0x80	; 128
 5e8:	8c 93       	st	X, r24
	assign_bit(MCUCR,ISC10_bit,ISC10);
 5ea:	a5 e5       	ldi	r26, 0x55	; 85
 5ec:	b0 e0       	ldi	r27, 0x00	; 0
 5ee:	e5 e5       	ldi	r30, 0x55	; 85
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	80 81       	ld	r24, Z
 5f4:	8b 7f       	andi	r24, 0xFB	; 251
 5f6:	8c 93       	st	X, r24
 5f8:	a5 e5       	ldi	r26, 0x55	; 85
 5fa:	b0 e0       	ldi	r27, 0x00	; 0
 5fc:	e5 e5       	ldi	r30, 0x55	; 85
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	80 81       	ld	r24, Z
 602:	8c 93       	st	X, r24
	assign_bit(MCUCR,ISC11_bit,ISC11);
 604:	a5 e5       	ldi	r26, 0x55	; 85
 606:	b0 e0       	ldi	r27, 0x00	; 0
 608:	e5 e5       	ldi	r30, 0x55	; 85
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	80 81       	ld	r24, Z
 60e:	87 7f       	andi	r24, 0xF7	; 247
 610:	8c 93       	st	X, r24
 612:	a5 e5       	ldi	r26, 0x55	; 85
 614:	b0 e0       	ldi	r27, 0x00	; 0
 616:	e5 e5       	ldi	r30, 0x55	; 85
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	88 60       	ori	r24, 0x08	; 8
 61e:	8c 93       	st	X, r24
	assign_bit(GICR,5,HIGH);
	assign_bit(MCUCR,ISC2_bit,ISC2);

#endif

}
 620:	cf 91       	pop	r28
 622:	df 91       	pop	r29
 624:	08 95       	ret

00000626 <__vector_1>:

/*
 * ISR Function of External Digital Interrupt 0
 */
void __vector_1	 (void)
{
 626:	1f 92       	push	r1
 628:	0f 92       	push	r0
 62a:	0f b6       	in	r0, 0x3f	; 63
 62c:	0f 92       	push	r0
 62e:	11 24       	eor	r1, r1
 630:	2f 93       	push	r18
 632:	3f 93       	push	r19
 634:	4f 93       	push	r20
 636:	5f 93       	push	r21
 638:	6f 93       	push	r22
 63a:	7f 93       	push	r23
 63c:	8f 93       	push	r24
 63e:	9f 93       	push	r25
 640:	af 93       	push	r26
 642:	bf 93       	push	r27
 644:	ef 93       	push	r30
 646:	ff 93       	push	r31
 648:	df 93       	push	r29
 64a:	cf 93       	push	r28
 64c:	cd b7       	in	r28, 0x3d	; 61
 64e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidWritePIN(DIO_u8PinA0,DIO_u8HIGH);
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	61 e0       	ldi	r22, 0x01	; 1
 654:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_voidWritePIN>
}
 658:	cf 91       	pop	r28
 65a:	df 91       	pop	r29
 65c:	ff 91       	pop	r31
 65e:	ef 91       	pop	r30
 660:	bf 91       	pop	r27
 662:	af 91       	pop	r26
 664:	9f 91       	pop	r25
 666:	8f 91       	pop	r24
 668:	7f 91       	pop	r23
 66a:	6f 91       	pop	r22
 66c:	5f 91       	pop	r21
 66e:	4f 91       	pop	r20
 670:	3f 91       	pop	r19
 672:	2f 91       	pop	r18
 674:	0f 90       	pop	r0
 676:	0f be       	out	0x3f, r0	; 63
 678:	0f 90       	pop	r0
 67a:	1f 90       	pop	r1
 67c:	18 95       	reti

0000067e <__vector_2>:
/*
 * ISR Function of External Digital Interrupt 1
 */

void __vector_2 (void)
{
 67e:	1f 92       	push	r1
 680:	0f 92       	push	r0
 682:	0f b6       	in	r0, 0x3f	; 63
 684:	0f 92       	push	r0
 686:	11 24       	eor	r1, r1
 688:	2f 93       	push	r18
 68a:	3f 93       	push	r19
 68c:	4f 93       	push	r20
 68e:	5f 93       	push	r21
 690:	6f 93       	push	r22
 692:	7f 93       	push	r23
 694:	8f 93       	push	r24
 696:	9f 93       	push	r25
 698:	af 93       	push	r26
 69a:	bf 93       	push	r27
 69c:	ef 93       	push	r30
 69e:	ff 93       	push	r31
 6a0:	df 93       	push	r29
 6a2:	cf 93       	push	r28
 6a4:	cd b7       	in	r28, 0x3d	; 61
 6a6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidWritePIN(DIO_u8PinA0,DIO_u8LOW);
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	60 e0       	ldi	r22, 0x00	; 0
 6ac:	0e 94 2b 01 	call	0x256	; 0x256 <DIO_voidWritePIN>

}
 6b0:	cf 91       	pop	r28
 6b2:	df 91       	pop	r29
 6b4:	ff 91       	pop	r31
 6b6:	ef 91       	pop	r30
 6b8:	bf 91       	pop	r27
 6ba:	af 91       	pop	r26
 6bc:	9f 91       	pop	r25
 6be:	8f 91       	pop	r24
 6c0:	7f 91       	pop	r23
 6c2:	6f 91       	pop	r22
 6c4:	5f 91       	pop	r21
 6c6:	4f 91       	pop	r20
 6c8:	3f 91       	pop	r19
 6ca:	2f 91       	pop	r18
 6cc:	0f 90       	pop	r0
 6ce:	0f be       	out	0x3f, r0	; 63
 6d0:	0f 90       	pop	r0
 6d2:	1f 90       	pop	r1
 6d4:	18 95       	reti

000006d6 <__vector_3>:
/*
 * ISR Function of External Digital Interrupt 2
 */

void __vector_3 (void)
{
 6d6:	1f 92       	push	r1
 6d8:	0f 92       	push	r0
 6da:	0f b6       	in	r0, 0x3f	; 63
 6dc:	0f 92       	push	r0
 6de:	11 24       	eor	r1, r1
 6e0:	df 93       	push	r29
 6e2:	cf 93       	push	r28
 6e4:	cd b7       	in	r28, 0x3d	; 61
 6e6:	de b7       	in	r29, 0x3e	; 62

}
 6e8:	cf 91       	pop	r28
 6ea:	df 91       	pop	r29
 6ec:	0f 90       	pop	r0
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	0f 90       	pop	r0
 6f2:	1f 90       	pop	r1
 6f4:	18 95       	reti

000006f6 <_exit>:
 6f6:	f8 94       	cli

000006f8 <__stop_program>:
 6f8:	ff cf       	rjmp	.-2      	; 0x6f8 <__stop_program>
