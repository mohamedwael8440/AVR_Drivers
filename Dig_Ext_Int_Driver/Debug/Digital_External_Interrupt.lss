
Digital_External_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000662  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000006d6  2**0
                  ALLOC
  2 .stab         00000558  00000000  00000000  000006d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000391  00000000  00000000  00000c30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 99 02 	jmp	0x532	; 0x532 <__vector_1>
   8:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <main>
  74:	0c 94 2f 03 	jmp	0x65e	; 0x65e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_voidSetDirection>:
#include "DIO.h"


//=========================================================================================
extern void DIO_voidSetDirection(u8 Copy_u8PinNum, u8 Copy_u8PinValue )
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <DIO_voidSetDirection+0x6>
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	89 83       	std	Y+1, r24	; 0x01
  88:	6a 83       	std	Y+2, r22	; 0x02
	 * And it takes two input parameters :
	 * 			the first argument is the pin number which the user want to set its direction
	 *			the Second argument is the value (1 || 0) to set it to the selected pin
	 *	its return type is void that means it has no return value
	 */
	if( (Copy_u8PinNum>=0 && Copy_u8PinNum<=31) &&  (Copy_u8PinValue==0 || Copy_u8PinValue==1) )
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	80 32       	cpi	r24, 0x20	; 32
  8e:	08 f0       	brcs	.+2      	; 0x92 <DIO_voidSetDirection+0x16>
  90:	ca c0       	rjmp	.+404    	; 0x226 <DIO_voidSetDirection+0x1aa>
  92:	8a 81       	ldd	r24, Y+2	; 0x02
  94:	88 23       	and	r24, r24
  96:	21 f0       	breq	.+8      	; 0xa0 <DIO_voidSetDirection+0x24>
  98:	8a 81       	ldd	r24, Y+2	; 0x02
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_voidSetDirection+0x24>
  9e:	c3 c0       	rjmp	.+390    	; 0x226 <DIO_voidSetDirection+0x1aa>
	{
		//here is a switch case to specify which pin was passed to the function and assign the value to it
		if(Copy_u8PinNum/8==0)
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	68 f5       	brcc	.+90     	; 0x100 <DIO_voidSetDirection+0x84>
		{
			assign_bit(DDRA,Copy_u8PinNum%8,Copy_u8PinValue);
  a6:	aa e3       	ldi	r26, 0x3A	; 58
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	ea e3       	ldi	r30, 0x3A	; 58
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	48 2f       	mov	r20, r24
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	88 2f       	mov	r24, r24
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	9c 01       	movw	r18, r24
  ba:	27 70       	andi	r18, 0x07	; 7
  bc:	30 70       	andi	r19, 0x00	; 0
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_voidSetDirection+0x4c>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	2a 95       	dec	r18
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_voidSetDirection+0x48>
  cc:	80 95       	com	r24
  ce:	84 23       	and	r24, r20
  d0:	8c 93       	st	X, r24
  d2:	aa e3       	ldi	r26, 0x3A	; 58
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	ea e3       	ldi	r30, 0x3A	; 58
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	48 2f       	mov	r20, r24
  de:	8a 81       	ldd	r24, Y+2	; 0x02
  e0:	28 2f       	mov	r18, r24
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	88 2f       	mov	r24, r24
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	87 70       	andi	r24, 0x07	; 7
  ec:	90 70       	andi	r25, 0x00	; 0
  ee:	b9 01       	movw	r22, r18
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <DIO_voidSetDirection+0x7a>
  f2:	66 0f       	add	r22, r22
  f4:	77 1f       	adc	r23, r23
  f6:	8a 95       	dec	r24
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <DIO_voidSetDirection+0x76>
  fa:	cb 01       	movw	r24, r22
  fc:	84 2b       	or	r24, r20
  fe:	8c 93       	st	X, r24
		}
		if(Copy_u8PinNum/8==1)
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	88 50       	subi	r24, 0x08	; 8
 104:	88 30       	cpi	r24, 0x08	; 8
 106:	68 f5       	brcc	.+90     	; 0x162 <DIO_voidSetDirection+0xe6>
		{
			assign_bit(DDRB,Copy_u8PinNum%8,Copy_u8PinValue);
 108:	a7 e3       	ldi	r26, 0x37	; 55
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	e7 e3       	ldi	r30, 0x37	; 55
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	48 2f       	mov	r20, r24
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	88 2f       	mov	r24, r24
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	9c 01       	movw	r18, r24
 11c:	27 70       	andi	r18, 0x07	; 7
 11e:	30 70       	andi	r19, 0x00	; 0
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_voidSetDirection+0xae>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	2a 95       	dec	r18
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_voidSetDirection+0xaa>
 12e:	80 95       	com	r24
 130:	84 23       	and	r24, r20
 132:	8c 93       	st	X, r24
 134:	a7 e3       	ldi	r26, 0x37	; 55
 136:	b0 e0       	ldi	r27, 0x00	; 0
 138:	e7 e3       	ldi	r30, 0x37	; 55
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	48 2f       	mov	r20, r24
 140:	8a 81       	ldd	r24, Y+2	; 0x02
 142:	28 2f       	mov	r18, r24
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	88 2f       	mov	r24, r24
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	87 70       	andi	r24, 0x07	; 7
 14e:	90 70       	andi	r25, 0x00	; 0
 150:	b9 01       	movw	r22, r18
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_voidSetDirection+0xdc>
 154:	66 0f       	add	r22, r22
 156:	77 1f       	adc	r23, r23
 158:	8a 95       	dec	r24
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_voidSetDirection+0xd8>
 15c:	cb 01       	movw	r24, r22
 15e:	84 2b       	or	r24, r20
 160:	8c 93       	st	X, r24
		}
		if(Copy_u8PinNum/8==2)
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	80 51       	subi	r24, 0x10	; 16
 166:	88 30       	cpi	r24, 0x08	; 8
 168:	68 f5       	brcc	.+90     	; 0x1c4 <DIO_voidSetDirection+0x148>
		{
			assign_bit(DDRC,Copy_u8PinNum%8,Copy_u8PinValue);
 16a:	a4 e3       	ldi	r26, 0x34	; 52
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	e4 e3       	ldi	r30, 0x34	; 52
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	48 2f       	mov	r20, r24
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	88 2f       	mov	r24, r24
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	9c 01       	movw	r18, r24
 17e:	27 70       	andi	r18, 0x07	; 7
 180:	30 70       	andi	r19, 0x00	; 0
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_voidSetDirection+0x110>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	2a 95       	dec	r18
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_voidSetDirection+0x10c>
 190:	80 95       	com	r24
 192:	84 23       	and	r24, r20
 194:	8c 93       	st	X, r24
 196:	a4 e3       	ldi	r26, 0x34	; 52
 198:	b0 e0       	ldi	r27, 0x00	; 0
 19a:	e4 e3       	ldi	r30, 0x34	; 52
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	48 2f       	mov	r20, r24
 1a2:	8a 81       	ldd	r24, Y+2	; 0x02
 1a4:	28 2f       	mov	r18, r24
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	88 2f       	mov	r24, r24
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	87 70       	andi	r24, 0x07	; 7
 1b0:	90 70       	andi	r25, 0x00	; 0
 1b2:	b9 01       	movw	r22, r18
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_voidSetDirection+0x13e>
 1b6:	66 0f       	add	r22, r22
 1b8:	77 1f       	adc	r23, r23
 1ba:	8a 95       	dec	r24
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_voidSetDirection+0x13a>
 1be:	cb 01       	movw	r24, r22
 1c0:	84 2b       	or	r24, r20
 1c2:	8c 93       	st	X, r24
		}
		if(Copy_u8PinNum/8==3)
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	88 51       	subi	r24, 0x18	; 24
 1c8:	88 30       	cpi	r24, 0x08	; 8
 1ca:	68 f5       	brcc	.+90     	; 0x226 <DIO_voidSetDirection+0x1aa>
		{
			assign_bit(DDRD,Copy_u8PinNum%8,Copy_u8PinValue);
 1cc:	a1 e3       	ldi	r26, 0x31	; 49
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	e1 e3       	ldi	r30, 0x31	; 49
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	48 2f       	mov	r20, r24
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	88 2f       	mov	r24, r24
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	9c 01       	movw	r18, r24
 1e0:	27 70       	andi	r18, 0x07	; 7
 1e2:	30 70       	andi	r19, 0x00	; 0
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_voidSetDirection+0x172>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	2a 95       	dec	r18
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_voidSetDirection+0x16e>
 1f2:	80 95       	com	r24
 1f4:	84 23       	and	r24, r20
 1f6:	8c 93       	st	X, r24
 1f8:	a1 e3       	ldi	r26, 0x31	; 49
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	e1 e3       	ldi	r30, 0x31	; 49
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	48 2f       	mov	r20, r24
 204:	8a 81       	ldd	r24, Y+2	; 0x02
 206:	28 2f       	mov	r18, r24
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	88 2f       	mov	r24, r24
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	87 70       	andi	r24, 0x07	; 7
 212:	90 70       	andi	r25, 0x00	; 0
 214:	b9 01       	movw	r22, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_voidSetDirection+0x1a0>
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	8a 95       	dec	r24
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_voidSetDirection+0x19c>
 220:	cb 01       	movw	r24, r22
 222:	84 2b       	or	r24, r20
 224:	8c 93       	st	X, r24
		}
	}
}
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	cf 91       	pop	r28
 22c:	df 91       	pop	r29
 22e:	08 95       	ret

00000230 <DIO_voidWritePIN>:
//=========================================================================================
extern void DIO_voidWritePIN(u8 Copy_u8PinNum, u8 Copy_u8PinValue)
{
 230:	df 93       	push	r29
 232:	cf 93       	push	r28
 234:	00 d0       	rcall	.+0      	; 0x236 <DIO_voidWritePIN+0x6>
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	89 83       	std	Y+1, r24	; 0x01
 23c:	6a 83       	std	Y+2, r22	; 0x02
	*the 1st one is the number of the PIN
	*the 2nd one is the value that needed to be assigned to the pre-specified PIN
	*	its return type is void that means it has no return value
	*/

	if( (Copy_u8PinNum>=0 && Copy_u8PinNum<=31) &&  (Copy_u8PinValue==0 || Copy_u8PinValue==1) )
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	80 32       	cpi	r24, 0x20	; 32
 242:	08 f0       	brcs	.+2      	; 0x246 <DIO_voidWritePIN+0x16>
 244:	ca c0       	rjmp	.+404    	; 0x3da <DIO_voidWritePIN+0x1aa>
 246:	8a 81       	ldd	r24, Y+2	; 0x02
 248:	88 23       	and	r24, r24
 24a:	21 f0       	breq	.+8      	; 0x254 <DIO_voidWritePIN+0x24>
 24c:	8a 81       	ldd	r24, Y+2	; 0x02
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	09 f0       	breq	.+2      	; 0x254 <DIO_voidWritePIN+0x24>
 252:	c3 c0       	rjmp	.+390    	; 0x3da <DIO_voidWritePIN+0x1aa>
	{
		//the switch case to specify which pin was selected by the user
		if((Copy_u8PinNum/8)==0)
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	88 30       	cpi	r24, 0x08	; 8
 258:	68 f5       	brcc	.+90     	; 0x2b4 <DIO_voidWritePIN+0x84>
		{
			assign_bit(PORTA,Copy_u8PinNum%8,Copy_u8PinValue);
 25a:	ab e3       	ldi	r26, 0x3B	; 59
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	eb e3       	ldi	r30, 0x3B	; 59
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	48 2f       	mov	r20, r24
 266:	89 81       	ldd	r24, Y+1	; 0x01
 268:	88 2f       	mov	r24, r24
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	9c 01       	movw	r18, r24
 26e:	27 70       	andi	r18, 0x07	; 7
 270:	30 70       	andi	r19, 0x00	; 0
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_voidWritePIN+0x4c>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	2a 95       	dec	r18
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_voidWritePIN+0x48>
 280:	80 95       	com	r24
 282:	84 23       	and	r24, r20
 284:	8c 93       	st	X, r24
 286:	ab e3       	ldi	r26, 0x3B	; 59
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	eb e3       	ldi	r30, 0x3B	; 59
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	48 2f       	mov	r20, r24
 292:	8a 81       	ldd	r24, Y+2	; 0x02
 294:	28 2f       	mov	r18, r24
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	88 2f       	mov	r24, r24
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	87 70       	andi	r24, 0x07	; 7
 2a0:	90 70       	andi	r25, 0x00	; 0
 2a2:	b9 01       	movw	r22, r18
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_voidWritePIN+0x7a>
 2a6:	66 0f       	add	r22, r22
 2a8:	77 1f       	adc	r23, r23
 2aa:	8a 95       	dec	r24
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_voidWritePIN+0x76>
 2ae:	cb 01       	movw	r24, r22
 2b0:	84 2b       	or	r24, r20
 2b2:	8c 93       	st	X, r24
		}
		if((Copy_u8PinNum/8)==1)
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	88 50       	subi	r24, 0x08	; 8
 2b8:	88 30       	cpi	r24, 0x08	; 8
 2ba:	68 f5       	brcc	.+90     	; 0x316 <DIO_voidWritePIN+0xe6>
		{
			assign_bit(PORTB,Copy_u8PinNum%8,Copy_u8PinValue);
 2bc:	a8 e3       	ldi	r26, 0x38	; 56
 2be:	b0 e0       	ldi	r27, 0x00	; 0
 2c0:	e8 e3       	ldi	r30, 0x38	; 56
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	48 2f       	mov	r20, r24
 2c8:	89 81       	ldd	r24, Y+1	; 0x01
 2ca:	88 2f       	mov	r24, r24
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	9c 01       	movw	r18, r24
 2d0:	27 70       	andi	r18, 0x07	; 7
 2d2:	30 70       	andi	r19, 0x00	; 0
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_voidWritePIN+0xae>
 2da:	88 0f       	add	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	2a 95       	dec	r18
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_voidWritePIN+0xaa>
 2e2:	80 95       	com	r24
 2e4:	84 23       	and	r24, r20
 2e6:	8c 93       	st	X, r24
 2e8:	a8 e3       	ldi	r26, 0x38	; 56
 2ea:	b0 e0       	ldi	r27, 0x00	; 0
 2ec:	e8 e3       	ldi	r30, 0x38	; 56
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	48 2f       	mov	r20, r24
 2f4:	8a 81       	ldd	r24, Y+2	; 0x02
 2f6:	28 2f       	mov	r18, r24
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	89 81       	ldd	r24, Y+1	; 0x01
 2fc:	88 2f       	mov	r24, r24
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	87 70       	andi	r24, 0x07	; 7
 302:	90 70       	andi	r25, 0x00	; 0
 304:	b9 01       	movw	r22, r18
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_voidWritePIN+0xdc>
 308:	66 0f       	add	r22, r22
 30a:	77 1f       	adc	r23, r23
 30c:	8a 95       	dec	r24
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_voidWritePIN+0xd8>
 310:	cb 01       	movw	r24, r22
 312:	84 2b       	or	r24, r20
 314:	8c 93       	st	X, r24
		}
		if((Copy_u8PinNum)/8==2)
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	80 51       	subi	r24, 0x10	; 16
 31a:	88 30       	cpi	r24, 0x08	; 8
 31c:	68 f5       	brcc	.+90     	; 0x378 <DIO_voidWritePIN+0x148>
		{
			assign_bit(PORTC,Copy_u8PinNum%8,Copy_u8PinValue);
 31e:	a5 e3       	ldi	r26, 0x35	; 53
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	e5 e3       	ldi	r30, 0x35	; 53
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	48 2f       	mov	r20, r24
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	88 2f       	mov	r24, r24
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	9c 01       	movw	r18, r24
 332:	27 70       	andi	r18, 0x07	; 7
 334:	30 70       	andi	r19, 0x00	; 0
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_voidWritePIN+0x110>
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	2a 95       	dec	r18
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_voidWritePIN+0x10c>
 344:	80 95       	com	r24
 346:	84 23       	and	r24, r20
 348:	8c 93       	st	X, r24
 34a:	a5 e3       	ldi	r26, 0x35	; 53
 34c:	b0 e0       	ldi	r27, 0x00	; 0
 34e:	e5 e3       	ldi	r30, 0x35	; 53
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	48 2f       	mov	r20, r24
 356:	8a 81       	ldd	r24, Y+2	; 0x02
 358:	28 2f       	mov	r18, r24
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	88 2f       	mov	r24, r24
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	87 70       	andi	r24, 0x07	; 7
 364:	90 70       	andi	r25, 0x00	; 0
 366:	b9 01       	movw	r22, r18
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_voidWritePIN+0x13e>
 36a:	66 0f       	add	r22, r22
 36c:	77 1f       	adc	r23, r23
 36e:	8a 95       	dec	r24
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_voidWritePIN+0x13a>
 372:	cb 01       	movw	r24, r22
 374:	84 2b       	or	r24, r20
 376:	8c 93       	st	X, r24
		}
		if((Copy_u8PinNum/8)==3)
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	88 51       	subi	r24, 0x18	; 24
 37c:	88 30       	cpi	r24, 0x08	; 8
 37e:	68 f5       	brcc	.+90     	; 0x3da <DIO_voidWritePIN+0x1aa>
		{
			assign_bit(PORTD,Copy_u8PinNum%8,Copy_u8PinValue);
 380:	a2 e3       	ldi	r26, 0x32	; 50
 382:	b0 e0       	ldi	r27, 0x00	; 0
 384:	e2 e3       	ldi	r30, 0x32	; 50
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	48 2f       	mov	r20, r24
 38c:	89 81       	ldd	r24, Y+1	; 0x01
 38e:	88 2f       	mov	r24, r24
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	9c 01       	movw	r18, r24
 394:	27 70       	andi	r18, 0x07	; 7
 396:	30 70       	andi	r19, 0x00	; 0
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_voidWritePIN+0x172>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	2a 95       	dec	r18
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_voidWritePIN+0x16e>
 3a6:	80 95       	com	r24
 3a8:	84 23       	and	r24, r20
 3aa:	8c 93       	st	X, r24
 3ac:	a2 e3       	ldi	r26, 0x32	; 50
 3ae:	b0 e0       	ldi	r27, 0x00	; 0
 3b0:	e2 e3       	ldi	r30, 0x32	; 50
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	48 2f       	mov	r20, r24
 3b8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ba:	28 2f       	mov	r18, r24
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	89 81       	ldd	r24, Y+1	; 0x01
 3c0:	88 2f       	mov	r24, r24
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	87 70       	andi	r24, 0x07	; 7
 3c6:	90 70       	andi	r25, 0x00	; 0
 3c8:	b9 01       	movw	r22, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_voidWritePIN+0x1a0>
 3cc:	66 0f       	add	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	8a 95       	dec	r24
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_voidWritePIN+0x19c>
 3d4:	cb 01       	movw	r24, r22
 3d6:	84 2b       	or	r24, r20
 3d8:	8c 93       	st	X, r24
		}
	}

}
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	cf 91       	pop	r28
 3e0:	df 91       	pop	r29
 3e2:	08 95       	ret

000003e4 <DIO_u8ReadPIN>:
//=======================================================================================
extern u8 DIO_u8ReadPIN(u8 Copy_u8PinNum)
{
 3e4:	df 93       	push	r29
 3e6:	cf 93       	push	r28
 3e8:	00 d0       	rcall	.+0      	; 0x3ea <DIO_u8ReadPIN+0x6>
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
 3ee:	8a 83       	std	Y+2, r24	; 0x02
		*	its return type is u8 that means it has a return value with data type (u8)
		*/

	//a u8 variable to store the read value and return it
	u8 Local_u8ReturnValue;
	if( Copy_u8PinNum>=0 && Copy_u8PinNum<=31)
 3f0:	8a 81       	ldd	r24, Y+2	; 0x02
 3f2:	80 32       	cpi	r24, 0x20	; 32
 3f4:	08 f0       	brcs	.+2      	; 0x3f8 <DIO_u8ReadPIN+0x14>
 3f6:	97 c0       	rjmp	.+302    	; 0x526 <DIO_u8ReadPIN+0x142>
		{
			if(Copy_u8PinNum/8==0)
 3f8:	8a 81       	ldd	r24, Y+2	; 0x02
 3fa:	88 30       	cpi	r24, 0x08	; 8
 3fc:	10 f5       	brcc	.+68     	; 0x442 <DIO_u8ReadPIN+0x5e>
			{
				Local_u8ReturnValue=get_bit(PINA,Copy_u8PinNum%8);
 3fe:	e9 e3       	ldi	r30, 0x39	; 57
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	80 81       	ld	r24, Z
 404:	48 2f       	mov	r20, r24
 406:	50 e0       	ldi	r21, 0x00	; 0
 408:	8a 81       	ldd	r24, Y+2	; 0x02
 40a:	88 2f       	mov	r24, r24
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	9c 01       	movw	r18, r24
 410:	27 70       	andi	r18, 0x07	; 7
 412:	30 70       	andi	r19, 0x00	; 0
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	02 c0       	rjmp	.+4      	; 0x41e <DIO_u8ReadPIN+0x3a>
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	2a 95       	dec	r18
 420:	e2 f7       	brpl	.-8      	; 0x41a <DIO_u8ReadPIN+0x36>
 422:	9a 01       	movw	r18, r20
 424:	28 23       	and	r18, r24
 426:	39 23       	and	r19, r25
 428:	8a 81       	ldd	r24, Y+2	; 0x02
 42a:	88 2f       	mov	r24, r24
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	87 70       	andi	r24, 0x07	; 7
 430:	90 70       	andi	r25, 0x00	; 0
 432:	a9 01       	movw	r20, r18
 434:	02 c0       	rjmp	.+4      	; 0x43a <DIO_u8ReadPIN+0x56>
 436:	55 95       	asr	r21
 438:	47 95       	ror	r20
 43a:	8a 95       	dec	r24
 43c:	e2 f7       	brpl	.-8      	; 0x436 <DIO_u8ReadPIN+0x52>
 43e:	ca 01       	movw	r24, r20
 440:	89 83       	std	Y+1, r24	; 0x01
			}
			if(Copy_u8PinNum/8==1)
 442:	8a 81       	ldd	r24, Y+2	; 0x02
 444:	88 50       	subi	r24, 0x08	; 8
 446:	88 30       	cpi	r24, 0x08	; 8
 448:	10 f5       	brcc	.+68     	; 0x48e <DIO_u8ReadPIN+0xaa>
			{
				Local_u8ReturnValue=get_bit(PINB,Copy_u8PinNum%8);
 44a:	e6 e3       	ldi	r30, 0x36	; 54
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	48 2f       	mov	r20, r24
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	8a 81       	ldd	r24, Y+2	; 0x02
 456:	88 2f       	mov	r24, r24
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	9c 01       	movw	r18, r24
 45c:	27 70       	andi	r18, 0x07	; 7
 45e:	30 70       	andi	r19, 0x00	; 0
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 c0       	rjmp	.+4      	; 0x46a <DIO_u8ReadPIN+0x86>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	2a 95       	dec	r18
 46c:	e2 f7       	brpl	.-8      	; 0x466 <DIO_u8ReadPIN+0x82>
 46e:	9a 01       	movw	r18, r20
 470:	28 23       	and	r18, r24
 472:	39 23       	and	r19, r25
 474:	8a 81       	ldd	r24, Y+2	; 0x02
 476:	88 2f       	mov	r24, r24
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	87 70       	andi	r24, 0x07	; 7
 47c:	90 70       	andi	r25, 0x00	; 0
 47e:	a9 01       	movw	r20, r18
 480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_u8ReadPIN+0xa2>
 482:	55 95       	asr	r21
 484:	47 95       	ror	r20
 486:	8a 95       	dec	r24
 488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_u8ReadPIN+0x9e>
 48a:	ca 01       	movw	r24, r20
 48c:	89 83       	std	Y+1, r24	; 0x01
			}
			if(Copy_u8PinNum/8==2)
 48e:	8a 81       	ldd	r24, Y+2	; 0x02
 490:	80 51       	subi	r24, 0x10	; 16
 492:	88 30       	cpi	r24, 0x08	; 8
 494:	10 f5       	brcc	.+68     	; 0x4da <DIO_u8ReadPIN+0xf6>
			{
				Local_u8ReturnValue=get_bit(PINC,Copy_u8PinNum%8);
 496:	e3 e3       	ldi	r30, 0x33	; 51
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	80 81       	ld	r24, Z
 49c:	48 2f       	mov	r20, r24
 49e:	50 e0       	ldi	r21, 0x00	; 0
 4a0:	8a 81       	ldd	r24, Y+2	; 0x02
 4a2:	88 2f       	mov	r24, r24
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	9c 01       	movw	r18, r24
 4a8:	27 70       	andi	r18, 0x07	; 7
 4aa:	30 70       	andi	r19, 0x00	; 0
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <DIO_u8ReadPIN+0xd2>
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	2a 95       	dec	r18
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <DIO_u8ReadPIN+0xce>
 4ba:	9a 01       	movw	r18, r20
 4bc:	28 23       	and	r18, r24
 4be:	39 23       	and	r19, r25
 4c0:	8a 81       	ldd	r24, Y+2	; 0x02
 4c2:	88 2f       	mov	r24, r24
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	87 70       	andi	r24, 0x07	; 7
 4c8:	90 70       	andi	r25, 0x00	; 0
 4ca:	a9 01       	movw	r20, r18
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <DIO_u8ReadPIN+0xee>
 4ce:	55 95       	asr	r21
 4d0:	47 95       	ror	r20
 4d2:	8a 95       	dec	r24
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <DIO_u8ReadPIN+0xea>
 4d6:	ca 01       	movw	r24, r20
 4d8:	89 83       	std	Y+1, r24	; 0x01
			}
			if(Copy_u8PinNum/8==3)
 4da:	8a 81       	ldd	r24, Y+2	; 0x02
 4dc:	88 51       	subi	r24, 0x18	; 24
 4de:	88 30       	cpi	r24, 0x08	; 8
 4e0:	10 f5       	brcc	.+68     	; 0x526 <DIO_u8ReadPIN+0x142>
			{
				Local_u8ReturnValue=get_bit(PIND,Copy_u8PinNum%8);
 4e2:	e0 e3       	ldi	r30, 0x30	; 48
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	80 81       	ld	r24, Z
 4e8:	48 2f       	mov	r20, r24
 4ea:	50 e0       	ldi	r21, 0x00	; 0
 4ec:	8a 81       	ldd	r24, Y+2	; 0x02
 4ee:	88 2f       	mov	r24, r24
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	9c 01       	movw	r18, r24
 4f4:	27 70       	andi	r18, 0x07	; 7
 4f6:	30 70       	andi	r19, 0x00	; 0
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_u8ReadPIN+0x11e>
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	2a 95       	dec	r18
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_u8ReadPIN+0x11a>
 506:	9a 01       	movw	r18, r20
 508:	28 23       	and	r18, r24
 50a:	39 23       	and	r19, r25
 50c:	8a 81       	ldd	r24, Y+2	; 0x02
 50e:	88 2f       	mov	r24, r24
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	87 70       	andi	r24, 0x07	; 7
 514:	90 70       	andi	r25, 0x00	; 0
 516:	a9 01       	movw	r20, r18
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_u8ReadPIN+0x13a>
 51a:	55 95       	asr	r21
 51c:	47 95       	ror	r20
 51e:	8a 95       	dec	r24
 520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_u8ReadPIN+0x136>
 522:	ca 01       	movw	r24, r20
 524:	89 83       	std	Y+1, r24	; 0x01
			}
		}

	//return the output of the selected pin
	return Local_u8ReturnValue;
 526:	89 81       	ldd	r24, Y+1	; 0x01
}
 528:	0f 90       	pop	r0
 52a:	0f 90       	pop	r0
 52c:	cf 91       	pop	r28
 52e:	df 91       	pop	r29
 530:	08 95       	ret

00000532 <__vector_1>:
#define MCUCR *((u8*) 0x55)


void __vector_1 (void)  __attribute__((signal,__INTR_ATTRS));
void __vector_1 (void)
{
 532:	1f 92       	push	r1
 534:	0f 92       	push	r0
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	0f 92       	push	r0
 53a:	11 24       	eor	r1, r1
 53c:	2f 93       	push	r18
 53e:	3f 93       	push	r19
 540:	4f 93       	push	r20
 542:	5f 93       	push	r21
 544:	6f 93       	push	r22
 546:	7f 93       	push	r23
 548:	8f 93       	push	r24
 54a:	9f 93       	push	r25
 54c:	af 93       	push	r26
 54e:	bf 93       	push	r27
 550:	ef 93       	push	r30
 552:	ff 93       	push	r31
 554:	df 93       	push	r29
 556:	cf 93       	push	r28
 558:	cd b7       	in	r28, 0x3d	; 61
 55a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidWritePIN(DIO_u8PinA0,DIO_u8HIGH);
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	61 e0       	ldi	r22, 0x01	; 1
 560:	0e 94 18 01 	call	0x230	; 0x230 <DIO_voidWritePIN>
}
 564:	cf 91       	pop	r28
 566:	df 91       	pop	r29
 568:	ff 91       	pop	r31
 56a:	ef 91       	pop	r30
 56c:	bf 91       	pop	r27
 56e:	af 91       	pop	r26
 570:	9f 91       	pop	r25
 572:	8f 91       	pop	r24
 574:	7f 91       	pop	r23
 576:	6f 91       	pop	r22
 578:	5f 91       	pop	r21
 57a:	4f 91       	pop	r20
 57c:	3f 91       	pop	r19
 57e:	2f 91       	pop	r18
 580:	0f 90       	pop	r0
 582:	0f be       	out	0x3f, r0	; 63
 584:	0f 90       	pop	r0
 586:	1f 90       	pop	r1
 588:	18 95       	reti

0000058a <__vector_2>:


void __vector_2 (void)  __attribute__((signal,__INTR_ATTRS));
void __vector_2 (void)
{
 58a:	1f 92       	push	r1
 58c:	0f 92       	push	r0
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	0f 92       	push	r0
 592:	11 24       	eor	r1, r1
 594:	2f 93       	push	r18
 596:	3f 93       	push	r19
 598:	4f 93       	push	r20
 59a:	5f 93       	push	r21
 59c:	6f 93       	push	r22
 59e:	7f 93       	push	r23
 5a0:	8f 93       	push	r24
 5a2:	9f 93       	push	r25
 5a4:	af 93       	push	r26
 5a6:	bf 93       	push	r27
 5a8:	ef 93       	push	r30
 5aa:	ff 93       	push	r31
 5ac:	df 93       	push	r29
 5ae:	cf 93       	push	r28
 5b0:	cd b7       	in	r28, 0x3d	; 61
 5b2:	de b7       	in	r29, 0x3e	; 62
	DIO_voidWritePIN(DIO_u8PinA0,DIO_u8LOW);
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	0e 94 18 01 	call	0x230	; 0x230 <DIO_voidWritePIN>
}
 5bc:	cf 91       	pop	r28
 5be:	df 91       	pop	r29
 5c0:	ff 91       	pop	r31
 5c2:	ef 91       	pop	r30
 5c4:	bf 91       	pop	r27
 5c6:	af 91       	pop	r26
 5c8:	9f 91       	pop	r25
 5ca:	8f 91       	pop	r24
 5cc:	7f 91       	pop	r23
 5ce:	6f 91       	pop	r22
 5d0:	5f 91       	pop	r21
 5d2:	4f 91       	pop	r20
 5d4:	3f 91       	pop	r19
 5d6:	2f 91       	pop	r18
 5d8:	0f 90       	pop	r0
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	0f 90       	pop	r0
 5de:	1f 90       	pop	r1
 5e0:	18 95       	reti

000005e2 <main>:



int main (void)
{
 5e2:	df 93       	push	r29
 5e4:	cf 93       	push	r28
 5e6:	cd b7       	in	r28, 0x3d	; 61
 5e8:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetDirection(DIO_u8PinA0,DIO_u8HIGH);
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	61 e0       	ldi	r22, 0x01	; 1
 5ee:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidSetDirection>
	DIO_voidWritePIN(DIO_u8PinD2,DIO_u8HIGH);
 5f2:	8a e1       	ldi	r24, 0x1A	; 26
 5f4:	61 e0       	ldi	r22, 0x01	; 1
 5f6:	0e 94 18 01 	call	0x230	; 0x230 <DIO_voidWritePIN>
	set_bit(SREG,7);
 5fa:	af e5       	ldi	r26, 0x5F	; 95
 5fc:	b0 e0       	ldi	r27, 0x00	; 0
 5fe:	ef e5       	ldi	r30, 0x5F	; 95
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	80 81       	ld	r24, Z
 604:	80 68       	ori	r24, 0x80	; 128
 606:	8c 93       	st	X, r24
	set_bit(GICR,6);
 608:	ab e5       	ldi	r26, 0x5B	; 91
 60a:	b0 e0       	ldi	r27, 0x00	; 0
 60c:	eb e5       	ldi	r30, 0x5B	; 91
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	80 64       	ori	r24, 0x40	; 64
 614:	8c 93       	st	X, r24
	set_bit(GICR,7);
 616:	ab e5       	ldi	r26, 0x5B	; 91
 618:	b0 e0       	ldi	r27, 0x00	; 0
 61a:	eb e5       	ldi	r30, 0x5B	; 91
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	80 81       	ld	r24, Z
 620:	80 68       	ori	r24, 0x80	; 128
 622:	8c 93       	st	X, r24

	clr_bit(MCUCR,0);
 624:	a5 e5       	ldi	r26, 0x55	; 85
 626:	b0 e0       	ldi	r27, 0x00	; 0
 628:	e5 e5       	ldi	r30, 0x55	; 85
 62a:	f0 e0       	ldi	r31, 0x00	; 0
 62c:	80 81       	ld	r24, Z
 62e:	8e 7f       	andi	r24, 0xFE	; 254
 630:	8c 93       	st	X, r24
	set_bit(MCUCR,1);
 632:	a5 e5       	ldi	r26, 0x55	; 85
 634:	b0 e0       	ldi	r27, 0x00	; 0
 636:	e5 e5       	ldi	r30, 0x55	; 85
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	80 81       	ld	r24, Z
 63c:	82 60       	ori	r24, 0x02	; 2
 63e:	8c 93       	st	X, r24

	set_bit(MCUCR,2);
 640:	a5 e5       	ldi	r26, 0x55	; 85
 642:	b0 e0       	ldi	r27, 0x00	; 0
 644:	e5 e5       	ldi	r30, 0x55	; 85
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	80 81       	ld	r24, Z
 64a:	84 60       	ori	r24, 0x04	; 4
 64c:	8c 93       	st	X, r24
	set_bit(MCUCR,3);
 64e:	a5 e5       	ldi	r26, 0x55	; 85
 650:	b0 e0       	ldi	r27, 0x00	; 0
 652:	e5 e5       	ldi	r30, 0x55	; 85
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	80 81       	ld	r24, Z
 658:	88 60       	ori	r24, 0x08	; 8
 65a:	8c 93       	st	X, r24
 65c:	ff cf       	rjmp	.-2      	; 0x65c <main+0x7a>

0000065e <_exit>:
 65e:	f8 94       	cli

00000660 <__stop_program>:
 660:	ff cf       	rjmp	.-2      	; 0x660 <__stop_program>
