
servo_timer1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015a  00800060  00002c7e  00002d12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008001ba  008001ba  00002e6c  2**0
                  ALLOC
  3 .stab         00001d88  00000000  00000000  00002e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000aa3  00000000  00000000  00004bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005697  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00005837  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00005a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00007e33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  000091aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a384  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000a544  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000a837  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b205  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3b       	cpi	r26, 0xBA	; 186
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa eb       	ldi	r26, 0xBA	; 186
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3b       	cpi	r26, 0xBD	; 189
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <main>
      8a:	0c 94 3d 16 	jmp	0x2c7a	; 0x2c7a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 eb       	ldi	r26, 0xB1	; 177
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2e 16 	jmp	0x2c5c	; 0x2c5c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2e 16 	jmp	0x2c5c	; 0x2c5c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 06 16 	jmp	0x2c0c	; 0x2c0c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 eb       	ldi	r24, 0xB1	; 177
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0e 16 	jmp	0x2c1c	; 0x2c1c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 eb       	ldi	r22, 0xB1	; 177
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2a 16 	jmp	0x2c54	; 0x2c54 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2e 16 	jmp	0x2c5c	; 0x2c5c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2e 16 	jmp	0x2c5c	; 0x2c5c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2e 16 	jmp	0x2c5c	; 0x2c5c <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 0f 16 	jmp	0x2c1e	; 0x2c1e <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 32 16 	jmp	0x2c64	; 0x2c64 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e7 54       	subi	r30, 0x47	; 71
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <main>:
#include "lcd.h"

//FAST PWM for servo motor

int main (void)
{
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62
     e04:	c6 54       	subi	r28, 0x46	; 70
     e06:	d0 40       	sbci	r29, 0x00	; 0
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	f8 94       	cli
     e0c:	de bf       	out	0x3e, r29	; 62
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	cd bf       	out	0x3d, r28	; 61

	TIMER1_voidInit();
     e12:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <TIMER1_voidInit>
	LCD_Init();
     e16:	0e 94 b5 13 	call	0x276a	; 0x276a <LCD_Init>
	DIO_voidSetPinDirection(DIO_u8PinD5,DIO_u8PinOp); //OC1A
     e1a:	8d e1       	ldi	r24, 0x1D	; 29
     e1c:	61 e0       	ldi	r22, 0x01	; 1
     e1e:	0e 94 95 09 	call	0x132a	; 0x132a <DIO_voidSetPinDirection>
		while(1)
		{
			//OCR1AL=82;
			Gotoxy(1,1);
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	61 e0       	ldi	r22, 0x01	; 1
     e26:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <Gotoxy>
			LCD_String("Go to Ang : 0 ");
     e2a:	80 e6       	ldi	r24, 0x60	; 96
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 bf 14 	call	0x297e	; 0x297e <LCD_String>
			TIMER1_u8GotoAng(0);
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	0e 94 96 0c 	call	0x192c	; 0x192c <TIMER1_u8GotoAng>
     e38:	fe 01       	movw	r30, r28
     e3a:	ed 5b       	subi	r30, 0xBD	; 189
     e3c:	ff 4f       	sbci	r31, 0xFF	; 255
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	aa ef       	ldi	r26, 0xFA	; 250
     e44:	b4 e4       	ldi	r27, 0x44	; 68
     e46:	80 83       	st	Z, r24
     e48:	91 83       	std	Z+1, r25	; 0x01
     e4a:	a2 83       	std	Z+2, r26	; 0x02
     e4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e4e:	8e 01       	movw	r16, r28
     e50:	01 5c       	subi	r16, 0xC1	; 193
     e52:	1f 4f       	sbci	r17, 0xFF	; 255
     e54:	fe 01       	movw	r30, r28
     e56:	ed 5b       	subi	r30, 0xBD	; 189
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	60 81       	ld	r22, Z
     e5c:	71 81       	ldd	r23, Z+1	; 0x01
     e5e:	82 81       	ldd	r24, Z+2	; 0x02
     e60:	93 81       	ldd	r25, Z+3	; 0x03
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	4a ef       	ldi	r20, 0xFA	; 250
     e68:	54 e4       	ldi	r21, 0x44	; 68
     e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	f8 01       	movw	r30, r16
     e74:	80 83       	st	Z, r24
     e76:	91 83       	std	Z+1, r25	; 0x01
     e78:	a2 83       	std	Z+2, r26	; 0x02
     e7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e7c:	fe 01       	movw	r30, r28
     e7e:	ff 96       	adiw	r30, 0x3f	; 63
     e80:	60 81       	ld	r22, Z
     e82:	71 81       	ldd	r23, Z+1	; 0x01
     e84:	82 81       	ldd	r24, Z+2	; 0x02
     e86:	93 81       	ldd	r25, Z+3	; 0x03
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e8       	ldi	r20, 0x80	; 128
     e8e:	5f e3       	ldi	r21, 0x3F	; 63
     e90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e94:	88 23       	and	r24, r24
     e96:	2c f4       	brge	.+10     	; 0xea2 <main+0xaa>
		__ticks = 1;
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	9e af       	std	Y+62, r25	; 0x3e
     e9e:	8d af       	std	Y+61, r24	; 0x3d
     ea0:	46 c0       	rjmp	.+140    	; 0xf2e <main+0x136>
	else if (__tmp > 65535)
     ea2:	fe 01       	movw	r30, r28
     ea4:	ff 96       	adiw	r30, 0x3f	; 63
     ea6:	60 81       	ld	r22, Z
     ea8:	71 81       	ldd	r23, Z+1	; 0x01
     eaa:	82 81       	ldd	r24, Z+2	; 0x02
     eac:	93 81       	ldd	r25, Z+3	; 0x03
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	3f ef       	ldi	r19, 0xFF	; 255
     eb2:	4f e7       	ldi	r20, 0x7F	; 127
     eb4:	57 e4       	ldi	r21, 0x47	; 71
     eb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     eba:	18 16       	cp	r1, r24
     ebc:	64 f5       	brge	.+88     	; 0xf16 <main+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ebe:	fe 01       	movw	r30, r28
     ec0:	ed 5b       	subi	r30, 0xBD	; 189
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	60 81       	ld	r22, Z
     ec6:	71 81       	ldd	r23, Z+1	; 0x01
     ec8:	82 81       	ldd	r24, Z+2	; 0x02
     eca:	93 81       	ldd	r25, Z+3	; 0x03
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	40 e2       	ldi	r20, 0x20	; 32
     ed2:	51 e4       	ldi	r21, 0x41	; 65
     ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	bc 01       	movw	r22, r24
     ede:	cd 01       	movw	r24, r26
     ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	9e af       	std	Y+62, r25	; 0x3e
     eea:	8d af       	std	Y+61, r24	; 0x3d
     eec:	0f c0       	rjmp	.+30     	; 0xf0c <main+0x114>
     eee:	88 ec       	ldi	r24, 0xC8	; 200
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	9c af       	std	Y+60, r25	; 0x3c
     ef4:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ef6:	8b ad       	ldd	r24, Y+59	; 0x3b
     ef8:	9c ad       	ldd	r25, Y+60	; 0x3c
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	f1 f7       	brne	.-4      	; 0xefa <main+0x102>
     efe:	9c af       	std	Y+60, r25	; 0x3c
     f00:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f02:	8d ad       	ldd	r24, Y+61	; 0x3d
     f04:	9e ad       	ldd	r25, Y+62	; 0x3e
     f06:	01 97       	sbiw	r24, 0x01	; 1
     f08:	9e af       	std	Y+62, r25	; 0x3e
     f0a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f0c:	8d ad       	ldd	r24, Y+61	; 0x3d
     f0e:	9e ad       	ldd	r25, Y+62	; 0x3e
     f10:	00 97       	sbiw	r24, 0x00	; 0
     f12:	69 f7       	brne	.-38     	; 0xeee <main+0xf6>
     f14:	16 c0       	rjmp	.+44     	; 0xf42 <main+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f16:	fe 01       	movw	r30, r28
     f18:	ff 96       	adiw	r30, 0x3f	; 63
     f1a:	60 81       	ld	r22, Z
     f1c:	71 81       	ldd	r23, Z+1	; 0x01
     f1e:	82 81       	ldd	r24, Z+2	; 0x02
     f20:	93 81       	ldd	r25, Z+3	; 0x03
     f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f26:	dc 01       	movw	r26, r24
     f28:	cb 01       	movw	r24, r22
     f2a:	9e af       	std	Y+62, r25	; 0x3e
     f2c:	8d af       	std	Y+61, r24	; 0x3d
     f2e:	8d ad       	ldd	r24, Y+61	; 0x3d
     f30:	9e ad       	ldd	r25, Y+62	; 0x3e
     f32:	9a af       	std	Y+58, r25	; 0x3a
     f34:	89 af       	std	Y+57, r24	; 0x39
     f36:	89 ad       	ldd	r24, Y+57	; 0x39
     f38:	9a ad       	ldd	r25, Y+58	; 0x3a
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	f1 f7       	brne	.-4      	; 0xf3a <main+0x142>
     f3e:	9a af       	std	Y+58, r25	; 0x3a
     f40:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(2000);
LCD_Command(0x01);
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LCD_Command>
			LCD_String("Go to Ang : 60 ");
     f48:	8f e6       	ldi	r24, 0x6F	; 111
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 bf 14 	call	0x297e	; 0x297e <LCD_String>
			TIMER1_u8GotoAng(60);
     f50:	8c e3       	ldi	r24, 0x3C	; 60
     f52:	0e 94 96 0c 	call	0x192c	; 0x192c <TIMER1_u8GotoAng>
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	aa ef       	ldi	r26, 0xFA	; 250
     f5c:	b4 e4       	ldi	r27, 0x44	; 68
     f5e:	8d ab       	std	Y+53, r24	; 0x35
     f60:	9e ab       	std	Y+54, r25	; 0x36
     f62:	af ab       	std	Y+55, r26	; 0x37
     f64:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f66:	6d a9       	ldd	r22, Y+53	; 0x35
     f68:	7e a9       	ldd	r23, Y+54	; 0x36
     f6a:	8f a9       	ldd	r24, Y+55	; 0x37
     f6c:	98 ad       	ldd	r25, Y+56	; 0x38
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	4a ef       	ldi	r20, 0xFA	; 250
     f74:	54 e4       	ldi	r21, 0x44	; 68
     f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	89 ab       	std	Y+49, r24	; 0x31
     f80:	9a ab       	std	Y+50, r25	; 0x32
     f82:	ab ab       	std	Y+51, r26	; 0x33
     f84:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f86:	69 a9       	ldd	r22, Y+49	; 0x31
     f88:	7a a9       	ldd	r23, Y+50	; 0x32
     f8a:	8b a9       	ldd	r24, Y+51	; 0x33
     f8c:	9c a9       	ldd	r25, Y+52	; 0x34
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e8       	ldi	r20, 0x80	; 128
     f94:	5f e3       	ldi	r21, 0x3F	; 63
     f96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f9a:	88 23       	and	r24, r24
     f9c:	2c f4       	brge	.+10     	; 0xfa8 <main+0x1b0>
		__ticks = 1;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	98 ab       	std	Y+48, r25	; 0x30
     fa4:	8f a7       	std	Y+47, r24	; 0x2f
     fa6:	3f c0       	rjmp	.+126    	; 0x1026 <main+0x22e>
	else if (__tmp > 65535)
     fa8:	69 a9       	ldd	r22, Y+49	; 0x31
     faa:	7a a9       	ldd	r23, Y+50	; 0x32
     fac:	8b a9       	ldd	r24, Y+51	; 0x33
     fae:	9c a9       	ldd	r25, Y+52	; 0x34
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	3f ef       	ldi	r19, 0xFF	; 255
     fb4:	4f e7       	ldi	r20, 0x7F	; 127
     fb6:	57 e4       	ldi	r21, 0x47	; 71
     fb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fbc:	18 16       	cp	r1, r24
     fbe:	4c f5       	brge	.+82     	; 0x1012 <main+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fc0:	6d a9       	ldd	r22, Y+53	; 0x35
     fc2:	7e a9       	ldd	r23, Y+54	; 0x36
     fc4:	8f a9       	ldd	r24, Y+55	; 0x37
     fc6:	98 ad       	ldd	r25, Y+56	; 0x38
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e2       	ldi	r20, 0x20	; 32
     fce:	51 e4       	ldi	r21, 0x41	; 65
     fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	bc 01       	movw	r22, r24
     fda:	cd 01       	movw	r24, r26
     fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	98 ab       	std	Y+48, r25	; 0x30
     fe6:	8f a7       	std	Y+47, r24	; 0x2f
     fe8:	0f c0       	rjmp	.+30     	; 0x1008 <main+0x210>
     fea:	88 ec       	ldi	r24, 0xC8	; 200
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	9e a7       	std	Y+46, r25	; 0x2e
     ff0:	8d a7       	std	Y+45, r24	; 0x2d
     ff2:	8d a5       	ldd	r24, Y+45	; 0x2d
     ff4:	9e a5       	ldd	r25, Y+46	; 0x2e
     ff6:	01 97       	sbiw	r24, 0x01	; 1
     ff8:	f1 f7       	brne	.-4      	; 0xff6 <main+0x1fe>
     ffa:	9e a7       	std	Y+46, r25	; 0x2e
     ffc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ffe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1000:	98 a9       	ldd	r25, Y+48	; 0x30
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	98 ab       	std	Y+48, r25	; 0x30
    1006:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1008:	8f a5       	ldd	r24, Y+47	; 0x2f
    100a:	98 a9       	ldd	r25, Y+48	; 0x30
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	69 f7       	brne	.-38     	; 0xfea <main+0x1f2>
    1010:	14 c0       	rjmp	.+40     	; 0x103a <main+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1012:	69 a9       	ldd	r22, Y+49	; 0x31
    1014:	7a a9       	ldd	r23, Y+50	; 0x32
    1016:	8b a9       	ldd	r24, Y+51	; 0x33
    1018:	9c a9       	ldd	r25, Y+52	; 0x34
    101a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	98 ab       	std	Y+48, r25	; 0x30
    1024:	8f a7       	std	Y+47, r24	; 0x2f
    1026:	8f a5       	ldd	r24, Y+47	; 0x2f
    1028:	98 a9       	ldd	r25, Y+48	; 0x30
    102a:	9c a7       	std	Y+44, r25	; 0x2c
    102c:	8b a7       	std	Y+43, r24	; 0x2b
    102e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1030:	9c a5       	ldd	r25, Y+44	; 0x2c
    1032:	01 97       	sbiw	r24, 0x01	; 1
    1034:	f1 f7       	brne	.-4      	; 0x1032 <main+0x23a>
    1036:	9c a7       	std	Y+44, r25	; 0x2c
    1038:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(2000);
LCD_Command(0x01);
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LCD_Command>
			LCD_String("Go to Ang : 90 ");
    1040:	8f e7       	ldi	r24, 0x7F	; 127
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 bf 14 	call	0x297e	; 0x297e <LCD_String>
			TIMER1_u8GotoAng(90);
    1048:	8a e5       	ldi	r24, 0x5A	; 90
    104a:	0e 94 96 0c 	call	0x192c	; 0x192c <TIMER1_u8GotoAng>
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	aa ef       	ldi	r26, 0xFA	; 250
    1054:	b4 e4       	ldi	r27, 0x44	; 68
    1056:	8f a3       	std	Y+39, r24	; 0x27
    1058:	98 a7       	std	Y+40, r25	; 0x28
    105a:	a9 a7       	std	Y+41, r26	; 0x29
    105c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    105e:	6f a1       	ldd	r22, Y+39	; 0x27
    1060:	78 a5       	ldd	r23, Y+40	; 0x28
    1062:	89 a5       	ldd	r24, Y+41	; 0x29
    1064:	9a a5       	ldd	r25, Y+42	; 0x2a
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	4a ef       	ldi	r20, 0xFA	; 250
    106c:	54 e4       	ldi	r21, 0x44	; 68
    106e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	8b a3       	std	Y+35, r24	; 0x23
    1078:	9c a3       	std	Y+36, r25	; 0x24
    107a:	ad a3       	std	Y+37, r26	; 0x25
    107c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    107e:	6b a1       	ldd	r22, Y+35	; 0x23
    1080:	7c a1       	ldd	r23, Y+36	; 0x24
    1082:	8d a1       	ldd	r24, Y+37	; 0x25
    1084:	9e a1       	ldd	r25, Y+38	; 0x26
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e8       	ldi	r20, 0x80	; 128
    108c:	5f e3       	ldi	r21, 0x3F	; 63
    108e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1092:	88 23       	and	r24, r24
    1094:	2c f4       	brge	.+10     	; 0x10a0 <main+0x2a8>
		__ticks = 1;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	9a a3       	std	Y+34, r25	; 0x22
    109c:	89 a3       	std	Y+33, r24	; 0x21
    109e:	3f c0       	rjmp	.+126    	; 0x111e <main+0x326>
	else if (__tmp > 65535)
    10a0:	6b a1       	ldd	r22, Y+35	; 0x23
    10a2:	7c a1       	ldd	r23, Y+36	; 0x24
    10a4:	8d a1       	ldd	r24, Y+37	; 0x25
    10a6:	9e a1       	ldd	r25, Y+38	; 0x26
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	3f ef       	ldi	r19, 0xFF	; 255
    10ac:	4f e7       	ldi	r20, 0x7F	; 127
    10ae:	57 e4       	ldi	r21, 0x47	; 71
    10b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10b4:	18 16       	cp	r1, r24
    10b6:	4c f5       	brge	.+82     	; 0x110a <main+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b8:	6f a1       	ldd	r22, Y+39	; 0x27
    10ba:	78 a5       	ldd	r23, Y+40	; 0x28
    10bc:	89 a5       	ldd	r24, Y+41	; 0x29
    10be:	9a a5       	ldd	r25, Y+42	; 0x2a
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e2       	ldi	r20, 0x20	; 32
    10c6:	51 e4       	ldi	r21, 0x41	; 65
    10c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	bc 01       	movw	r22, r24
    10d2:	cd 01       	movw	r24, r26
    10d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	9a a3       	std	Y+34, r25	; 0x22
    10de:	89 a3       	std	Y+33, r24	; 0x21
    10e0:	0f c0       	rjmp	.+30     	; 0x1100 <main+0x308>
    10e2:	88 ec       	ldi	r24, 0xC8	; 200
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	98 a3       	std	Y+32, r25	; 0x20
    10e8:	8f 8f       	std	Y+31, r24	; 0x1f
    10ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10ec:	98 a1       	ldd	r25, Y+32	; 0x20
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <main+0x2f6>
    10f2:	98 a3       	std	Y+32, r25	; 0x20
    10f4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f6:	89 a1       	ldd	r24, Y+33	; 0x21
    10f8:	9a a1       	ldd	r25, Y+34	; 0x22
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	9a a3       	std	Y+34, r25	; 0x22
    10fe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1100:	89 a1       	ldd	r24, Y+33	; 0x21
    1102:	9a a1       	ldd	r25, Y+34	; 0x22
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	69 f7       	brne	.-38     	; 0x10e2 <main+0x2ea>
    1108:	14 c0       	rjmp	.+40     	; 0x1132 <main+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    110a:	6b a1       	ldd	r22, Y+35	; 0x23
    110c:	7c a1       	ldd	r23, Y+36	; 0x24
    110e:	8d a1       	ldd	r24, Y+37	; 0x25
    1110:	9e a1       	ldd	r25, Y+38	; 0x26
    1112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	9a a3       	std	Y+34, r25	; 0x22
    111c:	89 a3       	std	Y+33, r24	; 0x21
    111e:	89 a1       	ldd	r24, Y+33	; 0x21
    1120:	9a a1       	ldd	r25, Y+34	; 0x22
    1122:	9e 8f       	std	Y+30, r25	; 0x1e
    1124:	8d 8f       	std	Y+29, r24	; 0x1d
    1126:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1128:	9e 8d       	ldd	r25, Y+30	; 0x1e
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <main+0x332>
    112e:	9e 8f       	std	Y+30, r25	; 0x1e
    1130:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2000);
			LCD_Command(0x01);
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LCD_Command>
						LCD_String("Go to Ang : 120 ");
    1138:	8f e8       	ldi	r24, 0x8F	; 143
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 bf 14 	call	0x297e	; 0x297e <LCD_String>
						TIMER1_u8GotoAng(120);
    1140:	88 e7       	ldi	r24, 0x78	; 120
    1142:	0e 94 96 0c 	call	0x192c	; 0x192c <TIMER1_u8GotoAng>
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	aa ef       	ldi	r26, 0xFA	; 250
    114c:	b4 e4       	ldi	r27, 0x44	; 68
    114e:	89 8f       	std	Y+25, r24	; 0x19
    1150:	9a 8f       	std	Y+26, r25	; 0x1a
    1152:	ab 8f       	std	Y+27, r26	; 0x1b
    1154:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1156:	69 8d       	ldd	r22, Y+25	; 0x19
    1158:	7a 8d       	ldd	r23, Y+26	; 0x1a
    115a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    115c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	4a ef       	ldi	r20, 0xFA	; 250
    1164:	54 e4       	ldi	r21, 0x44	; 68
    1166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	8d 8b       	std	Y+21, r24	; 0x15
    1170:	9e 8b       	std	Y+22, r25	; 0x16
    1172:	af 8b       	std	Y+23, r26	; 0x17
    1174:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1176:	6d 89       	ldd	r22, Y+21	; 0x15
    1178:	7e 89       	ldd	r23, Y+22	; 0x16
    117a:	8f 89       	ldd	r24, Y+23	; 0x17
    117c:	98 8d       	ldd	r25, Y+24	; 0x18
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	40 e8       	ldi	r20, 0x80	; 128
    1184:	5f e3       	ldi	r21, 0x3F	; 63
    1186:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    118a:	88 23       	and	r24, r24
    118c:	2c f4       	brge	.+10     	; 0x1198 <main+0x3a0>
		__ticks = 1;
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9c 8b       	std	Y+20, r25	; 0x14
    1194:	8b 8b       	std	Y+19, r24	; 0x13
    1196:	3f c0       	rjmp	.+126    	; 0x1216 <main+0x41e>
	else if (__tmp > 65535)
    1198:	6d 89       	ldd	r22, Y+21	; 0x15
    119a:	7e 89       	ldd	r23, Y+22	; 0x16
    119c:	8f 89       	ldd	r24, Y+23	; 0x17
    119e:	98 8d       	ldd	r25, Y+24	; 0x18
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	3f ef       	ldi	r19, 0xFF	; 255
    11a4:	4f e7       	ldi	r20, 0x7F	; 127
    11a6:	57 e4       	ldi	r21, 0x47	; 71
    11a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11ac:	18 16       	cp	r1, r24
    11ae:	4c f5       	brge	.+82     	; 0x1202 <main+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b0:	69 8d       	ldd	r22, Y+25	; 0x19
    11b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	40 e2       	ldi	r20, 0x20	; 32
    11be:	51 e4       	ldi	r21, 0x41	; 65
    11c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c4:	dc 01       	movw	r26, r24
    11c6:	cb 01       	movw	r24, r22
    11c8:	bc 01       	movw	r22, r24
    11ca:	cd 01       	movw	r24, r26
    11cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	9c 8b       	std	Y+20, r25	; 0x14
    11d6:	8b 8b       	std	Y+19, r24	; 0x13
    11d8:	0f c0       	rjmp	.+30     	; 0x11f8 <main+0x400>
    11da:	88 ec       	ldi	r24, 0xC8	; 200
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	9a 8b       	std	Y+18, r25	; 0x12
    11e0:	89 8b       	std	Y+17, r24	; 0x11
    11e2:	89 89       	ldd	r24, Y+17	; 0x11
    11e4:	9a 89       	ldd	r25, Y+18	; 0x12
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <main+0x3ee>
    11ea:	9a 8b       	std	Y+18, r25	; 0x12
    11ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ee:	8b 89       	ldd	r24, Y+19	; 0x13
    11f0:	9c 89       	ldd	r25, Y+20	; 0x14
    11f2:	01 97       	sbiw	r24, 0x01	; 1
    11f4:	9c 8b       	std	Y+20, r25	; 0x14
    11f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f8:	8b 89       	ldd	r24, Y+19	; 0x13
    11fa:	9c 89       	ldd	r25, Y+20	; 0x14
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	69 f7       	brne	.-38     	; 0x11da <main+0x3e2>
    1200:	14 c0       	rjmp	.+40     	; 0x122a <main+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1202:	6d 89       	ldd	r22, Y+21	; 0x15
    1204:	7e 89       	ldd	r23, Y+22	; 0x16
    1206:	8f 89       	ldd	r24, Y+23	; 0x17
    1208:	98 8d       	ldd	r25, Y+24	; 0x18
    120a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	9c 8b       	std	Y+20, r25	; 0x14
    1214:	8b 8b       	std	Y+19, r24	; 0x13
    1216:	8b 89       	ldd	r24, Y+19	; 0x13
    1218:	9c 89       	ldd	r25, Y+20	; 0x14
    121a:	98 8b       	std	Y+16, r25	; 0x10
    121c:	8f 87       	std	Y+15, r24	; 0x0f
    121e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1220:	98 89       	ldd	r25, Y+16	; 0x10
    1222:	01 97       	sbiw	r24, 0x01	; 1
    1224:	f1 f7       	brne	.-4      	; 0x1222 <main+0x42a>
    1226:	98 8b       	std	Y+16, r25	; 0x10
    1228:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(2000);
LCD_Command(0x01);
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LCD_Command>
						LCD_String("Go to Ang : 180 ");
    1230:	80 ea       	ldi	r24, 0xA0	; 160
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	0e 94 bf 14 	call	0x297e	; 0x297e <LCD_String>
						TIMER1_u8GotoAng(180);
    1238:	84 eb       	ldi	r24, 0xB4	; 180
    123a:	0e 94 96 0c 	call	0x192c	; 0x192c <TIMER1_u8GotoAng>
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	aa ef       	ldi	r26, 0xFA	; 250
    1244:	b4 e4       	ldi	r27, 0x44	; 68
    1246:	8b 87       	std	Y+11, r24	; 0x0b
    1248:	9c 87       	std	Y+12, r25	; 0x0c
    124a:	ad 87       	std	Y+13, r26	; 0x0d
    124c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    124e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1250:	7c 85       	ldd	r23, Y+12	; 0x0c
    1252:	8d 85       	ldd	r24, Y+13	; 0x0d
    1254:	9e 85       	ldd	r25, Y+14	; 0x0e
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	4a ef       	ldi	r20, 0xFA	; 250
    125c:	54 e4       	ldi	r21, 0x44	; 68
    125e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	8f 83       	std	Y+7, r24	; 0x07
    1268:	98 87       	std	Y+8, r25	; 0x08
    126a:	a9 87       	std	Y+9, r26	; 0x09
    126c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    126e:	6f 81       	ldd	r22, Y+7	; 0x07
    1270:	78 85       	ldd	r23, Y+8	; 0x08
    1272:	89 85       	ldd	r24, Y+9	; 0x09
    1274:	9a 85       	ldd	r25, Y+10	; 0x0a
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 e8       	ldi	r20, 0x80	; 128
    127c:	5f e3       	ldi	r21, 0x3F	; 63
    127e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1282:	88 23       	and	r24, r24
    1284:	2c f4       	brge	.+10     	; 0x1290 <main+0x498>
		__ticks = 1;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	9e 83       	std	Y+6, r25	; 0x06
    128c:	8d 83       	std	Y+5, r24	; 0x05
    128e:	3f c0       	rjmp	.+126    	; 0x130e <main+0x516>
	else if (__tmp > 65535)
    1290:	6f 81       	ldd	r22, Y+7	; 0x07
    1292:	78 85       	ldd	r23, Y+8	; 0x08
    1294:	89 85       	ldd	r24, Y+9	; 0x09
    1296:	9a 85       	ldd	r25, Y+10	; 0x0a
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	3f ef       	ldi	r19, 0xFF	; 255
    129c:	4f e7       	ldi	r20, 0x7F	; 127
    129e:	57 e4       	ldi	r21, 0x47	; 71
    12a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12a4:	18 16       	cp	r1, r24
    12a6:	4c f5       	brge	.+82     	; 0x12fa <main+0x502>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	40 e2       	ldi	r20, 0x20	; 32
    12b6:	51 e4       	ldi	r21, 0x41	; 65
    12b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	bc 01       	movw	r22, r24
    12c2:	cd 01       	movw	r24, r26
    12c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	9e 83       	std	Y+6, r25	; 0x06
    12ce:	8d 83       	std	Y+5, r24	; 0x05
    12d0:	0f c0       	rjmp	.+30     	; 0x12f0 <main+0x4f8>
    12d2:	88 ec       	ldi	r24, 0xC8	; 200
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	9c 83       	std	Y+4, r25	; 0x04
    12d8:	8b 83       	std	Y+3, r24	; 0x03
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	f1 f7       	brne	.-4      	; 0x12de <main+0x4e6>
    12e2:	9c 83       	std	Y+4, r25	; 0x04
    12e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	9e 83       	std	Y+6, r25	; 0x06
    12ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f0:	8d 81       	ldd	r24, Y+5	; 0x05
    12f2:	9e 81       	ldd	r25, Y+6	; 0x06
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	69 f7       	brne	.-38     	; 0x12d2 <main+0x4da>
    12f8:	14 c0       	rjmp	.+40     	; 0x1322 <main+0x52a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12fa:	6f 81       	ldd	r22, Y+7	; 0x07
    12fc:	78 85       	ldd	r23, Y+8	; 0x08
    12fe:	89 85       	ldd	r24, Y+9	; 0x09
    1300:	9a 85       	ldd	r25, Y+10	; 0x0a
    1302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	9e 83       	std	Y+6, r25	; 0x06
    130c:	8d 83       	std	Y+5, r24	; 0x05
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	9a 83       	std	Y+2, r25	; 0x02
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	9a 81       	ldd	r25, Y+2	; 0x02
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	f1 f7       	brne	.-4      	; 0x131a <main+0x522>
    131e:	9a 83       	std	Y+2, r25	; 0x02
    1320:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(2000);
						LCD_Command(0x01);
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LCD_Command>
    1328:	7c cd       	rjmp	.-1288   	; 0xe22 <main+0x2a>

0000132a <DIO_voidSetPinDirection>:
 *    its return type is void that means it has no return value
 *
********************************************************************************************/

extern void DIO_voidSetPinDirection(u8 Copy_u8PinNum, u8 Copy_u8PinValue )
{
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	00 d0       	rcall	.+0      	; 0x1330 <DIO_voidSetPinDirection+0x6>
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	6a 83       	std	Y+2, r22	; 0x02
	if( (Copy_u8PinNum>=0 && Copy_u8PinNum<=31) &&  (Copy_u8PinValue==0 || Copy_u8PinValue==1) )
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	80 32       	cpi	r24, 0x20	; 32
    133c:	08 f0       	brcs	.+2      	; 0x1340 <DIO_voidSetPinDirection+0x16>
    133e:	cd c0       	rjmp	.+410    	; 0x14da <DIO_voidSetPinDirection+0x1b0>
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	88 23       	and	r24, r24
    1344:	21 f0       	breq	.+8      	; 0x134e <DIO_voidSetPinDirection+0x24>
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	09 f0       	breq	.+2      	; 0x134e <DIO_voidSetPinDirection+0x24>
    134c:	c6 c0       	rjmp	.+396    	; 0x14da <DIO_voidSetPinDirection+0x1b0>
	{
		//here is a switch case to specify which pin was passed to the function and assign the value to it
		if(Copy_u8PinNum/8==0)
    134e:	89 81       	ldd	r24, Y+1	; 0x01
    1350:	88 30       	cpi	r24, 0x08	; 8
    1352:	70 f5       	brcc	.+92     	; 0x13b0 <DIO_voidSetPinDirection+0x86>
		{
			assign_bit(DDRA,Copy_u8PinNum%8,Copy_u8PinValue);
    1354:	aa e3       	ldi	r26, 0x3A	; 58
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	ea e3       	ldi	r30, 0x3A	; 58
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	88 2f       	mov	r24, r24
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	9c 01       	movw	r18, r24
    1368:	27 70       	andi	r18, 0x07	; 7
    136a:	30 70       	andi	r19, 0x00	; 0
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_voidSetPinDirection+0x4c>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	2a 95       	dec	r18
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIO_voidSetPinDirection+0x48>
    137a:	80 95       	com	r24
    137c:	84 23       	and	r24, r20
    137e:	8c 93       	st	X, r24
    1380:	aa e3       	ldi	r26, 0x3A	; 58
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	ea e3       	ldi	r30, 0x3A	; 58
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8a 81       	ldd	r24, Y+2	; 0x02
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	87 70       	andi	r24, 0x07	; 7
    139a:	90 70       	andi	r25, 0x00	; 0
    139c:	b9 01       	movw	r22, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <DIO_voidSetPinDirection+0x7a>
    13a0:	66 0f       	add	r22, r22
    13a2:	77 1f       	adc	r23, r23
    13a4:	8a 95       	dec	r24
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <DIO_voidSetPinDirection+0x76>
    13a8:	cb 01       	movw	r24, r22
    13aa:	84 2b       	or	r24, r20
    13ac:	8c 93       	st	X, r24
    13ae:	95 c0       	rjmp	.+298    	; 0x14da <DIO_voidSetPinDirection+0x1b0>
		}
		else if(Copy_u8PinNum/8==1)
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	88 50       	subi	r24, 0x08	; 8
    13b4:	88 30       	cpi	r24, 0x08	; 8
    13b6:	70 f5       	brcc	.+92     	; 0x1414 <DIO_voidSetPinDirection+0xea>
		{
			assign_bit(DDRB,Copy_u8PinNum%8,Copy_u8PinValue);
    13b8:	a7 e3       	ldi	r26, 0x37	; 55
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	e7 e3       	ldi	r30, 0x37	; 55
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	88 2f       	mov	r24, r24
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	9c 01       	movw	r18, r24
    13cc:	27 70       	andi	r18, 0x07	; 7
    13ce:	30 70       	andi	r19, 0x00	; 0
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <DIO_voidSetPinDirection+0xb0>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	2a 95       	dec	r18
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <DIO_voidSetPinDirection+0xac>
    13de:	80 95       	com	r24
    13e0:	84 23       	and	r24, r20
    13e2:	8c 93       	st	X, r24
    13e4:	a7 e3       	ldi	r26, 0x37	; 55
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e7 e3       	ldi	r30, 0x37	; 55
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	48 2f       	mov	r20, r24
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	87 70       	andi	r24, 0x07	; 7
    13fe:	90 70       	andi	r25, 0x00	; 0
    1400:	b9 01       	movw	r22, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <DIO_voidSetPinDirection+0xde>
    1404:	66 0f       	add	r22, r22
    1406:	77 1f       	adc	r23, r23
    1408:	8a 95       	dec	r24
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <DIO_voidSetPinDirection+0xda>
    140c:	cb 01       	movw	r24, r22
    140e:	84 2b       	or	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	63 c0       	rjmp	.+198    	; 0x14da <DIO_voidSetPinDirection+0x1b0>
		}
		else if(Copy_u8PinNum/8==2)
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	80 51       	subi	r24, 0x10	; 16
    1418:	88 30       	cpi	r24, 0x08	; 8
    141a:	70 f5       	brcc	.+92     	; 0x1478 <DIO_voidSetPinDirection+0x14e>
		{
			assign_bit(DDRC,Copy_u8PinNum%8,Copy_u8PinValue);
    141c:	a4 e3       	ldi	r26, 0x34	; 52
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e4 e3       	ldi	r30, 0x34	; 52
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	48 2f       	mov	r20, r24
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	88 2f       	mov	r24, r24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	9c 01       	movw	r18, r24
    1430:	27 70       	andi	r18, 0x07	; 7
    1432:	30 70       	andi	r19, 0x00	; 0
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	02 c0       	rjmp	.+4      	; 0x143e <DIO_voidSetPinDirection+0x114>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	2a 95       	dec	r18
    1440:	e2 f7       	brpl	.-8      	; 0x143a <DIO_voidSetPinDirection+0x110>
    1442:	80 95       	com	r24
    1444:	84 23       	and	r24, r20
    1446:	8c 93       	st	X, r24
    1448:	a4 e3       	ldi	r26, 0x34	; 52
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e4 e3       	ldi	r30, 0x34	; 52
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	48 2f       	mov	r20, r24
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	88 2f       	mov	r24, r24
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	87 70       	andi	r24, 0x07	; 7
    1462:	90 70       	andi	r25, 0x00	; 0
    1464:	b9 01       	movw	r22, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <DIO_voidSetPinDirection+0x142>
    1468:	66 0f       	add	r22, r22
    146a:	77 1f       	adc	r23, r23
    146c:	8a 95       	dec	r24
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <DIO_voidSetPinDirection+0x13e>
    1470:	cb 01       	movw	r24, r22
    1472:	84 2b       	or	r24, r20
    1474:	8c 93       	st	X, r24
    1476:	31 c0       	rjmp	.+98     	; 0x14da <DIO_voidSetPinDirection+0x1b0>
		}
		else if(Copy_u8PinNum/8==3)
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	88 51       	subi	r24, 0x18	; 24
    147c:	88 30       	cpi	r24, 0x08	; 8
    147e:	68 f5       	brcc	.+90     	; 0x14da <DIO_voidSetPinDirection+0x1b0>
		{
			assign_bit(DDRD,Copy_u8PinNum%8,Copy_u8PinValue);
    1480:	a1 e3       	ldi	r26, 0x31	; 49
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e1 e3       	ldi	r30, 0x31	; 49
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	88 2f       	mov	r24, r24
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	9c 01       	movw	r18, r24
    1494:	27 70       	andi	r18, 0x07	; 7
    1496:	30 70       	andi	r19, 0x00	; 0
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_voidSetPinDirection+0x178>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	2a 95       	dec	r18
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_voidSetPinDirection+0x174>
    14a6:	80 95       	com	r24
    14a8:	84 23       	and	r24, r20
    14aa:	8c 93       	st	X, r24
    14ac:	a1 e3       	ldi	r26, 0x31	; 49
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e1 e3       	ldi	r30, 0x31	; 49
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	89 81       	ldd	r24, Y+1	; 0x01
    14c0:	88 2f       	mov	r24, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	87 70       	andi	r24, 0x07	; 7
    14c6:	90 70       	andi	r25, 0x00	; 0
    14c8:	b9 01       	movw	r22, r18
    14ca:	02 c0       	rjmp	.+4      	; 0x14d0 <DIO_voidSetPinDirection+0x1a6>
    14cc:	66 0f       	add	r22, r22
    14ce:	77 1f       	adc	r23, r23
    14d0:	8a 95       	dec	r24
    14d2:	e2 f7       	brpl	.-8      	; 0x14cc <DIO_voidSetPinDirection+0x1a2>
    14d4:	cb 01       	movw	r24, r22
    14d6:	84 2b       	or	r24, r20
    14d8:	8c 93       	st	X, r24
		}
	}
}
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <DIO_voidSetPortDirection>:
 *
********************************************************************************************/


extern void DIO_voidSetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <DIO_voidSetPortDirection+0x6>
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	89 83       	std	Y+1, r24	; 0x01
    14f0:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortID==PORTA_ID)
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	88 23       	and	r24, r24
    14f6:	29 f4       	brne	.+10     	; 0x1502 <DIO_voidSetPortDirection+0x1e>
	{
		DDRA=Copy_u8PortValue;
    14f8:	ea e3       	ldi	r30, 0x3A	; 58
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	80 83       	st	Z, r24
    1500:	17 c0       	rjmp	.+46     	; 0x1530 <DIO_voidSetPortDirection+0x4c>
	}
	else if (Copy_u8PortID==PORTB_ID)
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	81 30       	cpi	r24, 0x01	; 1
    1506:	29 f4       	brne	.+10     	; 0x1512 <DIO_voidSetPortDirection+0x2e>
	{
		DDRB=Copy_u8PortValue;
    1508:	e7 e3       	ldi	r30, 0x37	; 55
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	80 83       	st	Z, r24
    1510:	0f c0       	rjmp	.+30     	; 0x1530 <DIO_voidSetPortDirection+0x4c>
	}
	else if (Copy_u8PortID==PORTC_ID)
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	82 30       	cpi	r24, 0x02	; 2
    1516:	29 f4       	brne	.+10     	; 0x1522 <DIO_voidSetPortDirection+0x3e>
	{
		DDRC=Copy_u8PortValue;
    1518:	e4 e3       	ldi	r30, 0x34	; 52
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	80 83       	st	Z, r24
    1520:	07 c0       	rjmp	.+14     	; 0x1530 <DIO_voidSetPortDirection+0x4c>
	}
	else if (Copy_u8PortID==PORTD_ID)
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	83 30       	cpi	r24, 0x03	; 3
    1526:	21 f4       	brne	.+8      	; 0x1530 <DIO_voidSetPortDirection+0x4c>
	{
		DDRD=Copy_u8PortValue;
    1528:	e1 e3       	ldi	r30, 0x31	; 49
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	80 83       	st	Z, r24
	}
	else
	{

	}
}
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <DIO_voidWritePinValue>:
 *
 *
********************************************************************************************/

extern void DIO_voidWritePinValue(u8 Copy_u8PinNum, u8 Copy_u8PinValue)
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	00 d0       	rcall	.+0      	; 0x1540 <DIO_voidWritePinValue+0x6>
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	89 83       	std	Y+1, r24	; 0x01
    1546:	6a 83       	std	Y+2, r22	; 0x02
	*the 1st one is the number of the PIN
	*the 2nd one is the value that needed to be assigned to the pre-specified PIN
	*	its return type is void that means it has no return value
	*/

	if( (Copy_u8PinNum>=0 && Copy_u8PinNum<=31) &&  (Copy_u8PinValue==0 || Copy_u8PinValue==1) )
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	80 32       	cpi	r24, 0x20	; 32
    154c:	08 f0       	brcs	.+2      	; 0x1550 <DIO_voidWritePinValue+0x16>
    154e:	cd c0       	rjmp	.+410    	; 0x16ea <DIO_voidWritePinValue+0x1b0>
    1550:	8a 81       	ldd	r24, Y+2	; 0x02
    1552:	88 23       	and	r24, r24
    1554:	21 f0       	breq	.+8      	; 0x155e <DIO_voidWritePinValue+0x24>
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	09 f0       	breq	.+2      	; 0x155e <DIO_voidWritePinValue+0x24>
    155c:	c6 c0       	rjmp	.+396    	; 0x16ea <DIO_voidWritePinValue+0x1b0>
	{
		//the switch case to specify which pin was selected by the user
		if((Copy_u8PinNum/8)==0)
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	88 30       	cpi	r24, 0x08	; 8
    1562:	70 f5       	brcc	.+92     	; 0x15c0 <DIO_voidWritePinValue+0x86>
		{
			assign_bit(PORTA,Copy_u8PinNum%8,Copy_u8PinValue);
    1564:	ab e3       	ldi	r26, 0x3B	; 59
    1566:	b0 e0       	ldi	r27, 0x00	; 0
    1568:	eb e3       	ldi	r30, 0x3B	; 59
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	48 2f       	mov	r20, r24
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	88 2f       	mov	r24, r24
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	9c 01       	movw	r18, r24
    1578:	27 70       	andi	r18, 0x07	; 7
    157a:	30 70       	andi	r19, 0x00	; 0
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <DIO_voidWritePinValue+0x4c>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	2a 95       	dec	r18
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <DIO_voidWritePinValue+0x48>
    158a:	80 95       	com	r24
    158c:	84 23       	and	r24, r20
    158e:	8c 93       	st	X, r24
    1590:	ab e3       	ldi	r26, 0x3B	; 59
    1592:	b0 e0       	ldi	r27, 0x00	; 0
    1594:	eb e3       	ldi	r30, 0x3B	; 59
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	48 2f       	mov	r20, r24
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	88 2f       	mov	r24, r24
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	87 70       	andi	r24, 0x07	; 7
    15aa:	90 70       	andi	r25, 0x00	; 0
    15ac:	b9 01       	movw	r22, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <DIO_voidWritePinValue+0x7a>
    15b0:	66 0f       	add	r22, r22
    15b2:	77 1f       	adc	r23, r23
    15b4:	8a 95       	dec	r24
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <DIO_voidWritePinValue+0x76>
    15b8:	cb 01       	movw	r24, r22
    15ba:	84 2b       	or	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	95 c0       	rjmp	.+298    	; 0x16ea <DIO_voidWritePinValue+0x1b0>
		}
		else if((Copy_u8PinNum/8)==1)
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	88 50       	subi	r24, 0x08	; 8
    15c4:	88 30       	cpi	r24, 0x08	; 8
    15c6:	70 f5       	brcc	.+92     	; 0x1624 <DIO_voidWritePinValue+0xea>
		{
			assign_bit(PORTB,Copy_u8PinNum%8,Copy_u8PinValue);
    15c8:	a8 e3       	ldi	r26, 0x38	; 56
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e8 e3       	ldi	r30, 0x38	; 56
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	48 2f       	mov	r20, r24
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	88 2f       	mov	r24, r24
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	9c 01       	movw	r18, r24
    15dc:	27 70       	andi	r18, 0x07	; 7
    15de:	30 70       	andi	r19, 0x00	; 0
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <DIO_voidWritePinValue+0xb0>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	2a 95       	dec	r18
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <DIO_voidWritePinValue+0xac>
    15ee:	80 95       	com	r24
    15f0:	84 23       	and	r24, r20
    15f2:	8c 93       	st	X, r24
    15f4:	a8 e3       	ldi	r26, 0x38	; 56
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e8 e3       	ldi	r30, 0x38	; 56
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	48 2f       	mov	r20, r24
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	88 2f       	mov	r24, r24
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	87 70       	andi	r24, 0x07	; 7
    160e:	90 70       	andi	r25, 0x00	; 0
    1610:	b9 01       	movw	r22, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <DIO_voidWritePinValue+0xde>
    1614:	66 0f       	add	r22, r22
    1616:	77 1f       	adc	r23, r23
    1618:	8a 95       	dec	r24
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <DIO_voidWritePinValue+0xda>
    161c:	cb 01       	movw	r24, r22
    161e:	84 2b       	or	r24, r20
    1620:	8c 93       	st	X, r24
    1622:	63 c0       	rjmp	.+198    	; 0x16ea <DIO_voidWritePinValue+0x1b0>
		}
		else if((Copy_u8PinNum)/8==2)
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	80 51       	subi	r24, 0x10	; 16
    1628:	88 30       	cpi	r24, 0x08	; 8
    162a:	70 f5       	brcc	.+92     	; 0x1688 <DIO_voidWritePinValue+0x14e>
		{
			assign_bit(PORTC,Copy_u8PinNum%8,Copy_u8PinValue);
    162c:	a5 e3       	ldi	r26, 0x35	; 53
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	e5 e3       	ldi	r30, 0x35	; 53
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	48 2f       	mov	r20, r24
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	88 2f       	mov	r24, r24
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	9c 01       	movw	r18, r24
    1640:	27 70       	andi	r18, 0x07	; 7
    1642:	30 70       	andi	r19, 0x00	; 0
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 c0       	rjmp	.+4      	; 0x164e <DIO_voidWritePinValue+0x114>
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	2a 95       	dec	r18
    1650:	e2 f7       	brpl	.-8      	; 0x164a <DIO_voidWritePinValue+0x110>
    1652:	80 95       	com	r24
    1654:	84 23       	and	r24, r20
    1656:	8c 93       	st	X, r24
    1658:	a5 e3       	ldi	r26, 0x35	; 53
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e5 e3       	ldi	r30, 0x35	; 53
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	48 2f       	mov	r20, r24
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	88 2f       	mov	r24, r24
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	87 70       	andi	r24, 0x07	; 7
    1672:	90 70       	andi	r25, 0x00	; 0
    1674:	b9 01       	movw	r22, r18
    1676:	02 c0       	rjmp	.+4      	; 0x167c <DIO_voidWritePinValue+0x142>
    1678:	66 0f       	add	r22, r22
    167a:	77 1f       	adc	r23, r23
    167c:	8a 95       	dec	r24
    167e:	e2 f7       	brpl	.-8      	; 0x1678 <DIO_voidWritePinValue+0x13e>
    1680:	cb 01       	movw	r24, r22
    1682:	84 2b       	or	r24, r20
    1684:	8c 93       	st	X, r24
    1686:	31 c0       	rjmp	.+98     	; 0x16ea <DIO_voidWritePinValue+0x1b0>
		}
		else if((Copy_u8PinNum/8)==3)
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	88 51       	subi	r24, 0x18	; 24
    168c:	88 30       	cpi	r24, 0x08	; 8
    168e:	68 f5       	brcc	.+90     	; 0x16ea <DIO_voidWritePinValue+0x1b0>
		{
			assign_bit(PORTD,Copy_u8PinNum%8,Copy_u8PinValue);
    1690:	a2 e3       	ldi	r26, 0x32	; 50
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e2 e3       	ldi	r30, 0x32	; 50
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	48 2f       	mov	r20, r24
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	88 2f       	mov	r24, r24
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	9c 01       	movw	r18, r24
    16a4:	27 70       	andi	r18, 0x07	; 7
    16a6:	30 70       	andi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <DIO_voidWritePinValue+0x178>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	2a 95       	dec	r18
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <DIO_voidWritePinValue+0x174>
    16b6:	80 95       	com	r24
    16b8:	84 23       	and	r24, r20
    16ba:	8c 93       	st	X, r24
    16bc:	a2 e3       	ldi	r26, 0x32	; 50
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e2 e3       	ldi	r30, 0x32	; 50
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	48 2f       	mov	r20, r24
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	88 2f       	mov	r24, r24
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	87 70       	andi	r24, 0x07	; 7
    16d6:	90 70       	andi	r25, 0x00	; 0
    16d8:	b9 01       	movw	r22, r18
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <DIO_voidWritePinValue+0x1a6>
    16dc:	66 0f       	add	r22, r22
    16de:	77 1f       	adc	r23, r23
    16e0:	8a 95       	dec	r24
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <DIO_voidWritePinValue+0x1a2>
    16e4:	cb 01       	movw	r24, r22
    16e6:	84 2b       	or	r24, r20
    16e8:	8c 93       	st	X, r24
		}
	}

}
    16ea:	0f 90       	pop	r0
    16ec:	0f 90       	pop	r0
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <DIO_voidWritePortValue>:

/***********************************************************************/

extern void DIO_voidWritePortValue(u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	00 d0       	rcall	.+0      	; 0x16fa <DIO_voidWritePortValue+0x6>
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortID==PORTA_ID)
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	88 23       	and	r24, r24
    1706:	29 f4       	brne	.+10     	; 0x1712 <DIO_voidWritePortValue+0x1e>
	{
		PORTA=Copy_u8PortValue;
    1708:	eb e3       	ldi	r30, 0x3B	; 59
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	80 83       	st	Z, r24
    1710:	17 c0       	rjmp	.+46     	; 0x1740 <DIO_voidWritePortValue+0x4c>
	}
	else if (Copy_u8PortID==PORTB_ID)
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	29 f4       	brne	.+10     	; 0x1722 <DIO_voidWritePortValue+0x2e>
	{
		PORTB=Copy_u8PortValue;
    1718:	e8 e3       	ldi	r30, 0x38	; 56
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	80 83       	st	Z, r24
    1720:	0f c0       	rjmp	.+30     	; 0x1740 <DIO_voidWritePortValue+0x4c>
	}
	else if (Copy_u8PortID==PORTC_ID)
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	82 30       	cpi	r24, 0x02	; 2
    1726:	29 f4       	brne	.+10     	; 0x1732 <DIO_voidWritePortValue+0x3e>
	{
		PORTC=Copy_u8PortValue;
    1728:	e5 e3       	ldi	r30, 0x35	; 53
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	80 83       	st	Z, r24
    1730:	07 c0       	rjmp	.+14     	; 0x1740 <DIO_voidWritePortValue+0x4c>
	}
	else if (Copy_u8PortID==PORTD_ID)
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	83 30       	cpi	r24, 0x03	; 3
    1736:	21 f4       	brne	.+8      	; 0x1740 <DIO_voidWritePortValue+0x4c>
	{
		PORTD=Copy_u8PortValue;
    1738:	e2 e3       	ldi	r30, 0x32	; 50
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	80 83       	st	Z, r24
	}
	else
	{

	}
}
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <DIO_u8ReadPinValue>:

//=======================================================================================
extern u8 DIO_u8ReadPinValue(u8 Copy_u8PinNum)
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	00 d0       	rcall	.+0      	; 0x1750 <DIO_u8ReadPinValue+0x6>
    1750:	cd b7       	in	r28, 0x3d	; 61
    1752:	de b7       	in	r29, 0x3e	; 62
    1754:	8a 83       	std	Y+2, r24	; 0x02
		*	its return type is u8 that means it has a return value with data type (u8)
		*/

	//a u8 variable to store the read value and return it
	u8 Local_u8ReturnValue;
	if( Copy_u8PinNum>=0 && Copy_u8PinNum<=31)
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	80 32       	cpi	r24, 0x20	; 32
    175a:	08 f0       	brcs	.+2      	; 0x175e <DIO_u8ReadPinValue+0x14>
    175c:	9a c0       	rjmp	.+308    	; 0x1892 <DIO_u8ReadPinValue+0x148>
		{
			if(Copy_u8PinNum/8==0)
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	88 30       	cpi	r24, 0x08	; 8
    1762:	18 f5       	brcc	.+70     	; 0x17aa <DIO_u8ReadPinValue+0x60>
			{
				Local_u8ReturnValue=get_bit(PINA,Copy_u8PinNum%8);
    1764:	e9 e3       	ldi	r30, 0x39	; 57
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	48 2f       	mov	r20, r24
    176c:	50 e0       	ldi	r21, 0x00	; 0
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	88 2f       	mov	r24, r24
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	9c 01       	movw	r18, r24
    1776:	27 70       	andi	r18, 0x07	; 7
    1778:	30 70       	andi	r19, 0x00	; 0
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <DIO_u8ReadPinValue+0x3a>
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	2a 95       	dec	r18
    1786:	e2 f7       	brpl	.-8      	; 0x1780 <DIO_u8ReadPinValue+0x36>
    1788:	9a 01       	movw	r18, r20
    178a:	28 23       	and	r18, r24
    178c:	39 23       	and	r19, r25
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	88 2f       	mov	r24, r24
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	87 70       	andi	r24, 0x07	; 7
    1796:	90 70       	andi	r25, 0x00	; 0
    1798:	a9 01       	movw	r20, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <DIO_u8ReadPinValue+0x56>
    179c:	55 95       	asr	r21
    179e:	47 95       	ror	r20
    17a0:	8a 95       	dec	r24
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <DIO_u8ReadPinValue+0x52>
    17a4:	ca 01       	movw	r24, r20
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	74 c0       	rjmp	.+232    	; 0x1892 <DIO_u8ReadPinValue+0x148>
			}
			else if(Copy_u8PinNum/8==1)
    17aa:	8a 81       	ldd	r24, Y+2	; 0x02
    17ac:	88 50       	subi	r24, 0x08	; 8
    17ae:	88 30       	cpi	r24, 0x08	; 8
    17b0:	18 f5       	brcc	.+70     	; 0x17f8 <DIO_u8ReadPinValue+0xae>
			{
				Local_u8ReturnValue=get_bit(PINB,Copy_u8PinNum%8);
    17b2:	e6 e3       	ldi	r30, 0x36	; 54
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	50 e0       	ldi	r21, 0x00	; 0
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	88 2f       	mov	r24, r24
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	9c 01       	movw	r18, r24
    17c4:	27 70       	andi	r18, 0x07	; 7
    17c6:	30 70       	andi	r19, 0x00	; 0
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <DIO_u8ReadPinValue+0x88>
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	2a 95       	dec	r18
    17d4:	e2 f7       	brpl	.-8      	; 0x17ce <DIO_u8ReadPinValue+0x84>
    17d6:	9a 01       	movw	r18, r20
    17d8:	28 23       	and	r18, r24
    17da:	39 23       	and	r19, r25
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	88 2f       	mov	r24, r24
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	87 70       	andi	r24, 0x07	; 7
    17e4:	90 70       	andi	r25, 0x00	; 0
    17e6:	a9 01       	movw	r20, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <DIO_u8ReadPinValue+0xa4>
    17ea:	55 95       	asr	r21
    17ec:	47 95       	ror	r20
    17ee:	8a 95       	dec	r24
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <DIO_u8ReadPinValue+0xa0>
    17f2:	ca 01       	movw	r24, r20
    17f4:	89 83       	std	Y+1, r24	; 0x01
    17f6:	4d c0       	rjmp	.+154    	; 0x1892 <DIO_u8ReadPinValue+0x148>
			}
			else if(Copy_u8PinNum/8==2)
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	80 51       	subi	r24, 0x10	; 16
    17fc:	88 30       	cpi	r24, 0x08	; 8
    17fe:	18 f5       	brcc	.+70     	; 0x1846 <DIO_u8ReadPinValue+0xfc>
			{
				Local_u8ReturnValue=get_bit(PINC,Copy_u8PinNum%8);
    1800:	e3 e3       	ldi	r30, 0x33	; 51
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	48 2f       	mov	r20, r24
    1808:	50 e0       	ldi	r21, 0x00	; 0
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	88 2f       	mov	r24, r24
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9c 01       	movw	r18, r24
    1812:	27 70       	andi	r18, 0x07	; 7
    1814:	30 70       	andi	r19, 0x00	; 0
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <DIO_u8ReadPinValue+0xd6>
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	2a 95       	dec	r18
    1822:	e2 f7       	brpl	.-8      	; 0x181c <DIO_u8ReadPinValue+0xd2>
    1824:	9a 01       	movw	r18, r20
    1826:	28 23       	and	r18, r24
    1828:	39 23       	and	r19, r25
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	88 2f       	mov	r24, r24
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	87 70       	andi	r24, 0x07	; 7
    1832:	90 70       	andi	r25, 0x00	; 0
    1834:	a9 01       	movw	r20, r18
    1836:	02 c0       	rjmp	.+4      	; 0x183c <DIO_u8ReadPinValue+0xf2>
    1838:	55 95       	asr	r21
    183a:	47 95       	ror	r20
    183c:	8a 95       	dec	r24
    183e:	e2 f7       	brpl	.-8      	; 0x1838 <DIO_u8ReadPinValue+0xee>
    1840:	ca 01       	movw	r24, r20
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	26 c0       	rjmp	.+76     	; 0x1892 <DIO_u8ReadPinValue+0x148>
			}
			else if(Copy_u8PinNum/8==3)
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	88 51       	subi	r24, 0x18	; 24
    184a:	88 30       	cpi	r24, 0x08	; 8
    184c:	10 f5       	brcc	.+68     	; 0x1892 <DIO_u8ReadPinValue+0x148>
			{
				Local_u8ReturnValue=get_bit(PIND,Copy_u8PinNum%8);
    184e:	e0 e3       	ldi	r30, 0x30	; 48
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	48 2f       	mov	r20, r24
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	88 2f       	mov	r24, r24
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	9c 01       	movw	r18, r24
    1860:	27 70       	andi	r18, 0x07	; 7
    1862:	30 70       	andi	r19, 0x00	; 0
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	02 c0       	rjmp	.+4      	; 0x186e <DIO_u8ReadPinValue+0x124>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	2a 95       	dec	r18
    1870:	e2 f7       	brpl	.-8      	; 0x186a <DIO_u8ReadPinValue+0x120>
    1872:	9a 01       	movw	r18, r20
    1874:	28 23       	and	r18, r24
    1876:	39 23       	and	r19, r25
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	88 2f       	mov	r24, r24
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	87 70       	andi	r24, 0x07	; 7
    1880:	90 70       	andi	r25, 0x00	; 0
    1882:	a9 01       	movw	r20, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <DIO_u8ReadPinValue+0x140>
    1886:	55 95       	asr	r21
    1888:	47 95       	ror	r20
    188a:	8a 95       	dec	r24
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <DIO_u8ReadPinValue+0x13c>
    188e:	ca 01       	movw	r24, r20
    1890:	89 83       	std	Y+1, r24	; 0x01
			}
		}

	//return the output of the selected pin
	return Local_u8ReturnValue;
    1892:	89 81       	ldd	r24, Y+1	; 0x01
}
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <DIO_u8ReadPortValue>:

/*******************************************************************************************/
extern u8 DIO_u8ReadPortValue(u8 Copy_u8PortID)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <DIO_u8ReadPortValue+0x6>
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PortID==PORTA_ID)
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	88 23       	and	r24, r24
    18ae:	29 f4       	brne	.+10     	; 0x18ba <DIO_u8ReadPortValue+0x1c>
	{
		return PINA;
    18b0:	e9 e3       	ldi	r30, 0x39	; 57
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	8a 83       	std	Y+2, r24	; 0x02
    18b8:	1a c0       	rjmp	.+52     	; 0x18ee <DIO_u8ReadPortValue+0x50>
	}
	else if (Copy_u8PortID==PORTB_ID)
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	29 f4       	brne	.+10     	; 0x18ca <DIO_u8ReadPortValue+0x2c>
	{
		return PINB;
    18c0:	e6 e3       	ldi	r30, 0x36	; 54
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	8a 83       	std	Y+2, r24	; 0x02
    18c8:	12 c0       	rjmp	.+36     	; 0x18ee <DIO_u8ReadPortValue+0x50>
	}
	else if (Copy_u8PortID==PORTC_ID)
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	82 30       	cpi	r24, 0x02	; 2
    18ce:	29 f4       	brne	.+10     	; 0x18da <DIO_u8ReadPortValue+0x3c>
	{
		return PINC;
    18d0:	e3 e3       	ldi	r30, 0x33	; 51
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	8a 83       	std	Y+2, r24	; 0x02
    18d8:	0a c0       	rjmp	.+20     	; 0x18ee <DIO_u8ReadPortValue+0x50>
	}
	else if (Copy_u8PortID==PORTD_ID)
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	83 30       	cpi	r24, 0x03	; 3
    18de:	29 f4       	brne	.+10     	; 0x18ea <DIO_u8ReadPortValue+0x4c>
	{
		return PIND;
    18e0:	e0 e3       	ldi	r30, 0x30	; 48
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	8a 83       	std	Y+2, r24	; 0x02
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <DIO_u8ReadPortValue+0x50>
	}
	else
	{
	}
	return -1;
    18ea:	8f ef       	ldi	r24, 0xFF	; 255
    18ec:	8a 83       	std	Y+2, r24	; 0x02
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
}
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <TIMER1_voidInit>:

u16 y=0;


extern void TIMER1_voidInit(void)
{
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
	TCCR1A |=0b10000010;
    1902:	af e4       	ldi	r26, 0x4F	; 79
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	ef e4       	ldi	r30, 0x4F	; 79
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	82 68       	ori	r24, 0x82	; 130
    190e:	8c 93       	st	X, r24
	TCCR1B |=0b00011100;
    1910:	ae e4       	ldi	r26, 0x4E	; 78
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	ee e4       	ldi	r30, 0x4E	; 78
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	8c 61       	ori	r24, 0x1C	; 28
    191c:	8c 93       	st	X, r24
	ICR1L=625;
    191e:	e6 e4       	ldi	r30, 0x46	; 70
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	81 e7       	ldi	r24, 0x71	; 113
    1924:	80 83       	st	Z, r24

}
    1926:	cf 91       	pop	r28
    1928:	df 91       	pop	r29
    192a:	08 95       	ret

0000192c <TIMER1_u8GotoAng>:
extern void TIMER1_u8GotoAng(u8 ang)
{
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	00 d0       	rcall	.+0      	; 0x1932 <TIMER1_u8GotoAng+0x6>
    1932:	0f 92       	push	r0
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
    1938:	8b 83       	std	Y+3, r24	; 0x03
	if(ang>=0 && ang<181)
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	85 3b       	cpi	r24, 0xB5	; 181
    193e:	68 f5       	brcc	.+90     	; 0x199a <TIMER1_u8GotoAng+0x6e>
	{
	       u16 y=11+0.34*ang;
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	88 2f       	mov	r24, r24
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	aa 27       	eor	r26, r26
    1948:	97 fd       	sbrc	r25, 7
    194a:	a0 95       	com	r26
    194c:	ba 2f       	mov	r27, r26
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	bc 01       	movw	r22, r24
    195c:	cd 01       	movw	r24, r26
    195e:	2b e7       	ldi	r18, 0x7B	; 123
    1960:	34 e1       	ldi	r19, 0x14	; 20
    1962:	4e ea       	ldi	r20, 0xAE	; 174
    1964:	5e e3       	ldi	r21, 0x3E	; 62
    1966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	bc 01       	movw	r22, r24
    1970:	cd 01       	movw	r24, r26
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e3       	ldi	r20, 0x30	; 48
    1978:	51 e4       	ldi	r21, 0x41	; 65
    197a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9a 83       	std	Y+2, r25	; 0x02
    1990:	89 83       	std	Y+1, r24	; 0x01
			OCR1AL= y; // to keep it in  range of 11 and 82 which corresponds to 0 and 180 from calibration 82=11+factor(180)
    1992:	ea e4       	ldi	r30, 0x4A	; 74
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	80 83       	st	Z, r24

	}
}
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	08 95       	ret

000019a6 <LCD_Command>:
#include <util/delay.h>			/* Include Delay header file */
#include "lcd.h"


void LCD_Command( unsigned char cmnd )
{
    19a6:	0f 93       	push	r16
    19a8:	1f 93       	push	r17
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	c7 55       	subi	r28, 0x57	; 87
    19b4:	d0 40       	sbci	r29, 0x00	; 0
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cd bf       	out	0x3d, r28	; 61
    19c0:	fe 01       	movw	r30, r28
    19c2:	e9 5a       	subi	r30, 0xA9	; 169
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	80 83       	st	Z, r24
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
    19c8:	a5 e3       	ldi	r26, 0x35	; 53
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e5 e3       	ldi	r30, 0x35	; 53
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	98 2f       	mov	r25, r24
    19d4:	9f 70       	andi	r25, 0x0F	; 15
    19d6:	fe 01       	movw	r30, r28
    19d8:	e9 5a       	subi	r30, 0xA9	; 169
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	80 81       	ld	r24, Z
    19de:	80 7f       	andi	r24, 0xF0	; 240
    19e0:	89 2b       	or	r24, r25
    19e2:	8c 93       	st	X, r24
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
    19e4:	a5 e3       	ldi	r26, 0x35	; 53
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e5 e3       	ldi	r30, 0x35	; 53
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	8e 7f       	andi	r24, 0xFE	; 254
    19f0:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);		/* Enable pulse */
    19f2:	a5 e3       	ldi	r26, 0x35	; 53
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e5 e3       	ldi	r30, 0x35	; 53
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	82 60       	ori	r24, 0x02	; 2
    19fe:	8c 93       	st	X, r24
    1a00:	fe 01       	movw	r30, r28
    1a02:	ed 5a       	subi	r30, 0xAD	; 173
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	a0 e8       	ldi	r26, 0x80	; 128
    1a0c:	bf e3       	ldi	r27, 0x3F	; 63
    1a0e:	80 83       	st	Z, r24
    1a10:	91 83       	std	Z+1, r25	; 0x01
    1a12:	a2 83       	std	Z+2, r26	; 0x02
    1a14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a16:	8e 01       	movw	r16, r28
    1a18:	01 5b       	subi	r16, 0xB1	; 177
    1a1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	ed 5a       	subi	r30, 0xAD	; 173
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	60 81       	ld	r22, Z
    1a24:	71 81       	ldd	r23, Z+1	; 0x01
    1a26:	82 81       	ldd	r24, Z+2	; 0x02
    1a28:	93 81       	ldd	r25, Z+3	; 0x03
    1a2a:	2b ea       	ldi	r18, 0xAB	; 171
    1a2c:	3a ea       	ldi	r19, 0xAA	; 170
    1a2e:	4a e2       	ldi	r20, 0x2A	; 42
    1a30:	50 e4       	ldi	r21, 0x40	; 64
    1a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	f8 01       	movw	r30, r16
    1a3c:	80 83       	st	Z, r24
    1a3e:	91 83       	std	Z+1, r25	; 0x01
    1a40:	a2 83       	std	Z+2, r26	; 0x02
    1a42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a44:	fe 01       	movw	r30, r28
    1a46:	e1 5b       	subi	r30, 0xB1	; 177
    1a48:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4a:	60 81       	ld	r22, Z
    1a4c:	71 81       	ldd	r23, Z+1	; 0x01
    1a4e:	82 81       	ldd	r24, Z+2	; 0x02
    1a50:	93 81       	ldd	r25, Z+3	; 0x03
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e8       	ldi	r20, 0x80	; 128
    1a58:	5f e3       	ldi	r21, 0x3F	; 63
    1a5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a5e:	88 23       	and	r24, r24
    1a60:	34 f4       	brge	.+12     	; 0x1a6e <LCD_Command+0xc8>
		__ticks = 1;
    1a62:	fe 01       	movw	r30, r28
    1a64:	e2 5b       	subi	r30, 0xB2	; 178
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	80 83       	st	Z, r24
    1a6c:	e0 c0       	rjmp	.+448    	; 0x1c2e <LCD_Command+0x288>
	else if (__tmp > 255)
    1a6e:	fe 01       	movw	r30, r28
    1a70:	e1 5b       	subi	r30, 0xB1	; 177
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	60 81       	ld	r22, Z
    1a76:	71 81       	ldd	r23, Z+1	; 0x01
    1a78:	82 81       	ldd	r24, Z+2	; 0x02
    1a7a:	93 81       	ldd	r25, Z+3	; 0x03
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	4f e7       	ldi	r20, 0x7F	; 127
    1a82:	53 e4       	ldi	r21, 0x43	; 67
    1a84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a88:	18 16       	cp	r1, r24
    1a8a:	0c f0       	brlt	.+2      	; 0x1a8e <LCD_Command+0xe8>
    1a8c:	c0 c0       	rjmp	.+384    	; 0x1c0e <LCD_Command+0x268>
	{
		_delay_ms(__us / 1000.0);
    1a8e:	fe 01       	movw	r30, r28
    1a90:	ed 5a       	subi	r30, 0xAD	; 173
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	60 81       	ld	r22, Z
    1a96:	71 81       	ldd	r23, Z+1	; 0x01
    1a98:	82 81       	ldd	r24, Z+2	; 0x02
    1a9a:	93 81       	ldd	r25, Z+3	; 0x03
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	4a e7       	ldi	r20, 0x7A	; 122
    1aa2:	54 e4       	ldi	r21, 0x44	; 68
    1aa4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	fe 01       	movw	r30, r28
    1aae:	e6 5b       	subi	r30, 0xB6	; 182
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	80 83       	st	Z, r24
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	a2 83       	std	Z+2, r26	; 0x02
    1ab8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aba:	8e 01       	movw	r16, r28
    1abc:	0a 5b       	subi	r16, 0xBA	; 186
    1abe:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	e6 5b       	subi	r30, 0xB6	; 182
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	60 81       	ld	r22, Z
    1ac8:	71 81       	ldd	r23, Z+1	; 0x01
    1aca:	82 81       	ldd	r24, Z+2	; 0x02
    1acc:	93 81       	ldd	r25, Z+3	; 0x03
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	4a ef       	ldi	r20, 0xFA	; 250
    1ad4:	54 e4       	ldi	r21, 0x44	; 68
    1ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	f8 01       	movw	r30, r16
    1ae0:	80 83       	st	Z, r24
    1ae2:	91 83       	std	Z+1, r25	; 0x01
    1ae4:	a2 83       	std	Z+2, r26	; 0x02
    1ae6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ae8:	fe 01       	movw	r30, r28
    1aea:	ea 5b       	subi	r30, 0xBA	; 186
    1aec:	ff 4f       	sbci	r31, 0xFF	; 255
    1aee:	60 81       	ld	r22, Z
    1af0:	71 81       	ldd	r23, Z+1	; 0x01
    1af2:	82 81       	ldd	r24, Z+2	; 0x02
    1af4:	93 81       	ldd	r25, Z+3	; 0x03
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	40 e8       	ldi	r20, 0x80	; 128
    1afc:	5f e3       	ldi	r21, 0x3F	; 63
    1afe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b02:	88 23       	and	r24, r24
    1b04:	44 f4       	brge	.+16     	; 0x1b16 <LCD_Command+0x170>
		__ticks = 1;
    1b06:	fe 01       	movw	r30, r28
    1b08:	ec 5b       	subi	r30, 0xBC	; 188
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	91 83       	std	Z+1, r25	; 0x01
    1b12:	80 83       	st	Z, r24
    1b14:	64 c0       	rjmp	.+200    	; 0x1bde <LCD_Command+0x238>
	else if (__tmp > 65535)
    1b16:	fe 01       	movw	r30, r28
    1b18:	ea 5b       	subi	r30, 0xBA	; 186
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	60 81       	ld	r22, Z
    1b1e:	71 81       	ldd	r23, Z+1	; 0x01
    1b20:	82 81       	ldd	r24, Z+2	; 0x02
    1b22:	93 81       	ldd	r25, Z+3	; 0x03
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	3f ef       	ldi	r19, 0xFF	; 255
    1b28:	4f e7       	ldi	r20, 0x7F	; 127
    1b2a:	57 e4       	ldi	r21, 0x47	; 71
    1b2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b30:	18 16       	cp	r1, r24
    1b32:	0c f0       	brlt	.+2      	; 0x1b36 <LCD_Command+0x190>
    1b34:	43 c0       	rjmp	.+134    	; 0x1bbc <LCD_Command+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b36:	fe 01       	movw	r30, r28
    1b38:	e6 5b       	subi	r30, 0xB6	; 182
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	60 81       	ld	r22, Z
    1b3e:	71 81       	ldd	r23, Z+1	; 0x01
    1b40:	82 81       	ldd	r24, Z+2	; 0x02
    1b42:	93 81       	ldd	r25, Z+3	; 0x03
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e2       	ldi	r20, 0x20	; 32
    1b4a:	51 e4       	ldi	r21, 0x41	; 65
    1b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	8e 01       	movw	r16, r28
    1b56:	0c 5b       	subi	r16, 0xBC	; 188
    1b58:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5a:	bc 01       	movw	r22, r24
    1b5c:	cd 01       	movw	r24, r26
    1b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	f8 01       	movw	r30, r16
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	80 83       	st	Z, r24
    1b6c:	1f c0       	rjmp	.+62     	; 0x1bac <LCD_Command+0x206>
    1b6e:	fe 01       	movw	r30, r28
    1b70:	ee 5b       	subi	r30, 0xBE	; 190
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	88 ec       	ldi	r24, 0xC8	; 200
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	91 83       	std	Z+1, r25	; 0x01
    1b7a:	80 83       	st	Z, r24
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	ee 5b       	subi	r30, 0xBE	; 190
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	80 81       	ld	r24, Z
    1b84:	91 81       	ldd	r25, Z+1	; 0x01
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	f1 f7       	brne	.-4      	; 0x1b86 <LCD_Command+0x1e0>
    1b8a:	fe 01       	movw	r30, r28
    1b8c:	ee 5b       	subi	r30, 0xBE	; 190
    1b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b94:	de 01       	movw	r26, r28
    1b96:	ac 5b       	subi	r26, 0xBC	; 188
    1b98:	bf 4f       	sbci	r27, 0xFF	; 255
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	ec 5b       	subi	r30, 0xBC	; 188
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	80 81       	ld	r24, Z
    1ba2:	91 81       	ldd	r25, Z+1	; 0x01
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	11 96       	adiw	r26, 0x01	; 1
    1ba8:	9c 93       	st	X, r25
    1baa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bac:	fe 01       	movw	r30, r28
    1bae:	ec 5b       	subi	r30, 0xBC	; 188
    1bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb2:	80 81       	ld	r24, Z
    1bb4:	91 81       	ldd	r25, Z+1	; 0x01
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	d1 f6       	brne	.-76     	; 0x1b6e <LCD_Command+0x1c8>
    1bba:	42 c0       	rjmp	.+132    	; 0x1c40 <LCD_Command+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bbc:	8e 01       	movw	r16, r28
    1bbe:	0c 5b       	subi	r16, 0xBC	; 188
    1bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	ea 5b       	subi	r30, 0xBA	; 186
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	60 81       	ld	r22, Z
    1bca:	71 81       	ldd	r23, Z+1	; 0x01
    1bcc:	82 81       	ldd	r24, Z+2	; 0x02
    1bce:	93 81       	ldd	r25, Z+3	; 0x03
    1bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	f8 01       	movw	r30, r16
    1bda:	91 83       	std	Z+1, r25	; 0x01
    1bdc:	80 83       	st	Z, r24
    1bde:	de 01       	movw	r26, r28
    1be0:	a0 5c       	subi	r26, 0xC0	; 192
    1be2:	bf 4f       	sbci	r27, 0xFF	; 255
    1be4:	fe 01       	movw	r30, r28
    1be6:	ec 5b       	subi	r30, 0xBC	; 188
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	80 81       	ld	r24, Z
    1bec:	91 81       	ldd	r25, Z+1	; 0x01
    1bee:	11 96       	adiw	r26, 0x01	; 1
    1bf0:	9c 93       	st	X, r25
    1bf2:	8e 93       	st	-X, r24
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e0 5c       	subi	r30, 0xC0	; 192
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	80 81       	ld	r24, Z
    1bfc:	91 81       	ldd	r25, Z+1	; 0x01
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <LCD_Command+0x258>
    1c02:	fe 01       	movw	r30, r28
    1c04:	e0 5c       	subi	r30, 0xC0	; 192
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	91 83       	std	Z+1, r25	; 0x01
    1c0a:	80 83       	st	Z, r24
    1c0c:	19 c0       	rjmp	.+50     	; 0x1c40 <LCD_Command+0x29a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c0e:	8e 01       	movw	r16, r28
    1c10:	02 5b       	subi	r16, 0xB2	; 178
    1c12:	1f 4f       	sbci	r17, 0xFF	; 255
    1c14:	fe 01       	movw	r30, r28
    1c16:	e1 5b       	subi	r30, 0xB1	; 177
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	60 81       	ld	r22, Z
    1c1c:	71 81       	ldd	r23, Z+1	; 0x01
    1c1e:	82 81       	ldd	r24, Z+2	; 0x02
    1c20:	93 81       	ldd	r25, Z+3	; 0x03
    1c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	f8 01       	movw	r30, r16
    1c2c:	80 83       	st	Z, r24
    1c2e:	fe 01       	movw	r30, r28
    1c30:	e2 5b       	subi	r30, 0xB2	; 178
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	80 81       	ld	r24, Z
    1c36:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c38:	8f ad       	ldd	r24, Y+63	; 0x3f
    1c3a:	8a 95       	dec	r24
    1c3c:	f1 f7       	brne	.-4      	; 0x1c3a <LCD_Command+0x294>
    1c3e:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    1c40:	a5 e3       	ldi	r26, 0x35	; 53
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	e5 e3       	ldi	r30, 0x35	; 53
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	8d 7f       	andi	r24, 0xFD	; 253
    1c4c:	8c 93       	st	X, r24
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	a8 e4       	ldi	r26, 0x48	; 72
    1c54:	b3 e4       	ldi	r27, 0x43	; 67
    1c56:	8b af       	std	Y+59, r24	; 0x3b
    1c58:	9c af       	std	Y+60, r25	; 0x3c
    1c5a:	ad af       	std	Y+61, r26	; 0x3d
    1c5c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c5e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1c60:	7c ad       	ldd	r23, Y+60	; 0x3c
    1c62:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c64:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c66:	2b ea       	ldi	r18, 0xAB	; 171
    1c68:	3a ea       	ldi	r19, 0xAA	; 170
    1c6a:	4a e2       	ldi	r20, 0x2A	; 42
    1c6c:	50 e4       	ldi	r21, 0x40	; 64
    1c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	8f ab       	std	Y+55, r24	; 0x37
    1c78:	98 af       	std	Y+56, r25	; 0x38
    1c7a:	a9 af       	std	Y+57, r26	; 0x39
    1c7c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1c7e:	6f a9       	ldd	r22, Y+55	; 0x37
    1c80:	78 ad       	ldd	r23, Y+56	; 0x38
    1c82:	89 ad       	ldd	r24, Y+57	; 0x39
    1c84:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e8       	ldi	r20, 0x80	; 128
    1c8c:	5f e3       	ldi	r21, 0x3F	; 63
    1c8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c92:	88 23       	and	r24, r24
    1c94:	1c f4       	brge	.+6      	; 0x1c9c <LCD_Command+0x2f6>
		__ticks = 1;
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	8e ab       	std	Y+54, r24	; 0x36
    1c9a:	91 c0       	rjmp	.+290    	; 0x1dbe <LCD_Command+0x418>
	else if (__tmp > 255)
    1c9c:	6f a9       	ldd	r22, Y+55	; 0x37
    1c9e:	78 ad       	ldd	r23, Y+56	; 0x38
    1ca0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ca2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	4f e7       	ldi	r20, 0x7F	; 127
    1caa:	53 e4       	ldi	r21, 0x43	; 67
    1cac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cb0:	18 16       	cp	r1, r24
    1cb2:	0c f0       	brlt	.+2      	; 0x1cb6 <LCD_Command+0x310>
    1cb4:	7b c0       	rjmp	.+246    	; 0x1dac <LCD_Command+0x406>
	{
		_delay_ms(__us / 1000.0);
    1cb6:	6b ad       	ldd	r22, Y+59	; 0x3b
    1cb8:	7c ad       	ldd	r23, Y+60	; 0x3c
    1cba:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cbc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	4a e7       	ldi	r20, 0x7A	; 122
    1cc4:	54 e4       	ldi	r21, 0x44	; 68
    1cc6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	8a ab       	std	Y+50, r24	; 0x32
    1cd0:	9b ab       	std	Y+51, r25	; 0x33
    1cd2:	ac ab       	std	Y+52, r26	; 0x34
    1cd4:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd6:	6a a9       	ldd	r22, Y+50	; 0x32
    1cd8:	7b a9       	ldd	r23, Y+51	; 0x33
    1cda:	8c a9       	ldd	r24, Y+52	; 0x34
    1cdc:	9d a9       	ldd	r25, Y+53	; 0x35
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	4a ef       	ldi	r20, 0xFA	; 250
    1ce4:	54 e4       	ldi	r21, 0x44	; 68
    1ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	8e a7       	std	Y+46, r24	; 0x2e
    1cf0:	9f a7       	std	Y+47, r25	; 0x2f
    1cf2:	a8 ab       	std	Y+48, r26	; 0x30
    1cf4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1cf6:	6e a5       	ldd	r22, Y+46	; 0x2e
    1cf8:	7f a5       	ldd	r23, Y+47	; 0x2f
    1cfa:	88 a9       	ldd	r24, Y+48	; 0x30
    1cfc:	99 a9       	ldd	r25, Y+49	; 0x31
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e8       	ldi	r20, 0x80	; 128
    1d04:	5f e3       	ldi	r21, 0x3F	; 63
    1d06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d0a:	88 23       	and	r24, r24
    1d0c:	2c f4       	brge	.+10     	; 0x1d18 <LCD_Command+0x372>
		__ticks = 1;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	9d a7       	std	Y+45, r25	; 0x2d
    1d14:	8c a7       	std	Y+44, r24	; 0x2c
    1d16:	3f c0       	rjmp	.+126    	; 0x1d96 <LCD_Command+0x3f0>
	else if (__tmp > 65535)
    1d18:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d1a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d1c:	88 a9       	ldd	r24, Y+48	; 0x30
    1d1e:	99 a9       	ldd	r25, Y+49	; 0x31
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	3f ef       	ldi	r19, 0xFF	; 255
    1d24:	4f e7       	ldi	r20, 0x7F	; 127
    1d26:	57 e4       	ldi	r21, 0x47	; 71
    1d28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d2c:	18 16       	cp	r1, r24
    1d2e:	4c f5       	brge	.+82     	; 0x1d82 <LCD_Command+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d30:	6a a9       	ldd	r22, Y+50	; 0x32
    1d32:	7b a9       	ldd	r23, Y+51	; 0x33
    1d34:	8c a9       	ldd	r24, Y+52	; 0x34
    1d36:	9d a9       	ldd	r25, Y+53	; 0x35
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	40 e2       	ldi	r20, 0x20	; 32
    1d3e:	51 e4       	ldi	r21, 0x41	; 65
    1d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	bc 01       	movw	r22, r24
    1d4a:	cd 01       	movw	r24, r26
    1d4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	9d a7       	std	Y+45, r25	; 0x2d
    1d56:	8c a7       	std	Y+44, r24	; 0x2c
    1d58:	0f c0       	rjmp	.+30     	; 0x1d78 <LCD_Command+0x3d2>
    1d5a:	88 ec       	ldi	r24, 0xC8	; 200
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	9b a7       	std	Y+43, r25	; 0x2b
    1d60:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d62:	8a a5       	ldd	r24, Y+42	; 0x2a
    1d64:	9b a5       	ldd	r25, Y+43	; 0x2b
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <LCD_Command+0x3c0>
    1d6a:	9b a7       	std	Y+43, r25	; 0x2b
    1d6c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d70:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	9d a7       	std	Y+45, r25	; 0x2d
    1d76:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d78:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d7a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d7c:	00 97       	sbiw	r24, 0x00	; 0
    1d7e:	69 f7       	brne	.-38     	; 0x1d5a <LCD_Command+0x3b4>
    1d80:	24 c0       	rjmp	.+72     	; 0x1dca <LCD_Command+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d82:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d84:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d86:	88 a9       	ldd	r24, Y+48	; 0x30
    1d88:	99 a9       	ldd	r25, Y+49	; 0x31
    1d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	9d a7       	std	Y+45, r25	; 0x2d
    1d94:	8c a7       	std	Y+44, r24	; 0x2c
    1d96:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d98:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d9a:	99 a7       	std	Y+41, r25	; 0x29
    1d9c:	88 a7       	std	Y+40, r24	; 0x28
    1d9e:	88 a5       	ldd	r24, Y+40	; 0x28
    1da0:	99 a5       	ldd	r25, Y+41	; 0x29
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <LCD_Command+0x3fc>
    1da6:	99 a7       	std	Y+41, r25	; 0x29
    1da8:	88 a7       	std	Y+40, r24	; 0x28
    1daa:	0f c0       	rjmp	.+30     	; 0x1dca <LCD_Command+0x424>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dac:	6f a9       	ldd	r22, Y+55	; 0x37
    1dae:	78 ad       	ldd	r23, Y+56	; 0x38
    1db0:	89 ad       	ldd	r24, Y+57	; 0x39
    1db2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	8e ab       	std	Y+54, r24	; 0x36
    1dbe:	8e a9       	ldd	r24, Y+54	; 0x36
    1dc0:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dc2:	8f a1       	ldd	r24, Y+39	; 0x27
    1dc4:	8a 95       	dec	r24
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <LCD_Command+0x41e>
    1dc8:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
    1dca:	a5 e3       	ldi	r26, 0x35	; 53
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e5 e3       	ldi	r30, 0x35	; 53
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	2f 70       	andi	r18, 0x0F	; 15
    1dd8:	fe 01       	movw	r30, r28
    1dda:	e9 5a       	subi	r30, 0xA9	; 169
    1ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dde:	80 81       	ld	r24, Z
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	82 95       	swap	r24
    1de6:	92 95       	swap	r25
    1de8:	90 7f       	andi	r25, 0xF0	; 240
    1dea:	98 27       	eor	r25, r24
    1dec:	80 7f       	andi	r24, 0xF0	; 240
    1dee:	98 27       	eor	r25, r24
    1df0:	82 2b       	or	r24, r18
    1df2:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);
    1df4:	a5 e3       	ldi	r26, 0x35	; 53
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	e5 e3       	ldi	r30, 0x35	; 53
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	82 60       	ori	r24, 0x02	; 2
    1e00:	8c 93       	st	X, r24
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	a0 e8       	ldi	r26, 0x80	; 128
    1e08:	bf e3       	ldi	r27, 0x3F	; 63
    1e0a:	8b a3       	std	Y+35, r24	; 0x23
    1e0c:	9c a3       	std	Y+36, r25	; 0x24
    1e0e:	ad a3       	std	Y+37, r26	; 0x25
    1e10:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e12:	6b a1       	ldd	r22, Y+35	; 0x23
    1e14:	7c a1       	ldd	r23, Y+36	; 0x24
    1e16:	8d a1       	ldd	r24, Y+37	; 0x25
    1e18:	9e a1       	ldd	r25, Y+38	; 0x26
    1e1a:	2b ea       	ldi	r18, 0xAB	; 171
    1e1c:	3a ea       	ldi	r19, 0xAA	; 170
    1e1e:	4a e2       	ldi	r20, 0x2A	; 42
    1e20:	50 e4       	ldi	r21, 0x40	; 64
    1e22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	8f 8f       	std	Y+31, r24	; 0x1f
    1e2c:	98 a3       	std	Y+32, r25	; 0x20
    1e2e:	a9 a3       	std	Y+33, r26	; 0x21
    1e30:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1e32:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e34:	78 a1       	ldd	r23, Y+32	; 0x20
    1e36:	89 a1       	ldd	r24, Y+33	; 0x21
    1e38:	9a a1       	ldd	r25, Y+34	; 0x22
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e8       	ldi	r20, 0x80	; 128
    1e40:	5f e3       	ldi	r21, 0x3F	; 63
    1e42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e46:	88 23       	and	r24, r24
    1e48:	1c f4       	brge	.+6      	; 0x1e50 <LCD_Command+0x4aa>
		__ticks = 1;
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	8e 8f       	std	Y+30, r24	; 0x1e
    1e4e:	91 c0       	rjmp	.+290    	; 0x1f72 <LCD_Command+0x5cc>
	else if (__tmp > 255)
    1e50:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e52:	78 a1       	ldd	r23, Y+32	; 0x20
    1e54:	89 a1       	ldd	r24, Y+33	; 0x21
    1e56:	9a a1       	ldd	r25, Y+34	; 0x22
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	4f e7       	ldi	r20, 0x7F	; 127
    1e5e:	53 e4       	ldi	r21, 0x43	; 67
    1e60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e64:	18 16       	cp	r1, r24
    1e66:	0c f0       	brlt	.+2      	; 0x1e6a <LCD_Command+0x4c4>
    1e68:	7b c0       	rjmp	.+246    	; 0x1f60 <LCD_Command+0x5ba>
	{
		_delay_ms(__us / 1000.0);
    1e6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e70:	9e a1       	ldd	r25, Y+38	; 0x26
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	4a e7       	ldi	r20, 0x7A	; 122
    1e78:	54 e4       	ldi	r21, 0x44	; 68
    1e7a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	8a 8f       	std	Y+26, r24	; 0x1a
    1e84:	9b 8f       	std	Y+27, r25	; 0x1b
    1e86:	ac 8f       	std	Y+28, r26	; 0x1c
    1e88:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e8a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1e8c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1e8e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e90:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	4a ef       	ldi	r20, 0xFA	; 250
    1e98:	54 e4       	ldi	r21, 0x44	; 68
    1e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	8e 8b       	std	Y+22, r24	; 0x16
    1ea4:	9f 8b       	std	Y+23, r25	; 0x17
    1ea6:	a8 8f       	std	Y+24, r26	; 0x18
    1ea8:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1eaa:	6e 89       	ldd	r22, Y+22	; 0x16
    1eac:	7f 89       	ldd	r23, Y+23	; 0x17
    1eae:	88 8d       	ldd	r24, Y+24	; 0x18
    1eb0:	99 8d       	ldd	r25, Y+25	; 0x19
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e8       	ldi	r20, 0x80	; 128
    1eb8:	5f e3       	ldi	r21, 0x3F	; 63
    1eba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ebe:	88 23       	and	r24, r24
    1ec0:	2c f4       	brge	.+10     	; 0x1ecc <LCD_Command+0x526>
		__ticks = 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9d 8b       	std	Y+21, r25	; 0x15
    1ec8:	8c 8b       	std	Y+20, r24	; 0x14
    1eca:	3f c0       	rjmp	.+126    	; 0x1f4a <LCD_Command+0x5a4>
	else if (__tmp > 65535)
    1ecc:	6e 89       	ldd	r22, Y+22	; 0x16
    1ece:	7f 89       	ldd	r23, Y+23	; 0x17
    1ed0:	88 8d       	ldd	r24, Y+24	; 0x18
    1ed2:	99 8d       	ldd	r25, Y+25	; 0x19
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	3f ef       	ldi	r19, 0xFF	; 255
    1ed8:	4f e7       	ldi	r20, 0x7F	; 127
    1eda:	57 e4       	ldi	r21, 0x47	; 71
    1edc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ee0:	18 16       	cp	r1, r24
    1ee2:	4c f5       	brge	.+82     	; 0x1f36 <LCD_Command+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ee6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ee8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1eea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	40 e2       	ldi	r20, 0x20	; 32
    1ef2:	51 e4       	ldi	r21, 0x41	; 65
    1ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	bc 01       	movw	r22, r24
    1efe:	cd 01       	movw	r24, r26
    1f00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9d 8b       	std	Y+21, r25	; 0x15
    1f0a:	8c 8b       	std	Y+20, r24	; 0x14
    1f0c:	0f c0       	rjmp	.+30     	; 0x1f2c <LCD_Command+0x586>
    1f0e:	88 ec       	ldi	r24, 0xC8	; 200
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9b 8b       	std	Y+19, r25	; 0x13
    1f14:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f16:	8a 89       	ldd	r24, Y+18	; 0x12
    1f18:	9b 89       	ldd	r25, Y+19	; 0x13
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <LCD_Command+0x574>
    1f1e:	9b 8b       	std	Y+19, r25	; 0x13
    1f20:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f22:	8c 89       	ldd	r24, Y+20	; 0x14
    1f24:	9d 89       	ldd	r25, Y+21	; 0x15
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	9d 8b       	std	Y+21, r25	; 0x15
    1f2a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2c:	8c 89       	ldd	r24, Y+20	; 0x14
    1f2e:	9d 89       	ldd	r25, Y+21	; 0x15
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	69 f7       	brne	.-38     	; 0x1f0e <LCD_Command+0x568>
    1f34:	24 c0       	rjmp	.+72     	; 0x1f7e <LCD_Command+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f36:	6e 89       	ldd	r22, Y+22	; 0x16
    1f38:	7f 89       	ldd	r23, Y+23	; 0x17
    1f3a:	88 8d       	ldd	r24, Y+24	; 0x18
    1f3c:	99 8d       	ldd	r25, Y+25	; 0x19
    1f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	9d 8b       	std	Y+21, r25	; 0x15
    1f48:	8c 8b       	std	Y+20, r24	; 0x14
    1f4a:	8c 89       	ldd	r24, Y+20	; 0x14
    1f4c:	9d 89       	ldd	r25, Y+21	; 0x15
    1f4e:	99 8b       	std	Y+17, r25	; 0x11
    1f50:	88 8b       	std	Y+16, r24	; 0x10
    1f52:	88 89       	ldd	r24, Y+16	; 0x10
    1f54:	99 89       	ldd	r25, Y+17	; 0x11
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	f1 f7       	brne	.-4      	; 0x1f56 <LCD_Command+0x5b0>
    1f5a:	99 8b       	std	Y+17, r25	; 0x11
    1f5c:	88 8b       	std	Y+16, r24	; 0x10
    1f5e:	0f c0       	rjmp	.+30     	; 0x1f7e <LCD_Command+0x5d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f60:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f62:	78 a1       	ldd	r23, Y+32	; 0x20
    1f64:	89 a1       	ldd	r24, Y+33	; 0x21
    1f66:	9a a1       	ldd	r25, Y+34	; 0x22
    1f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	8e 8f       	std	Y+30, r24	; 0x1e
    1f72:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f74:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f78:	8a 95       	dec	r24
    1f7a:	f1 f7       	brne	.-4      	; 0x1f78 <LCD_Command+0x5d2>
    1f7c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    1f7e:	a5 e3       	ldi	r26, 0x35	; 53
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	e5 e3       	ldi	r30, 0x35	; 53
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	8d 7f       	andi	r24, 0xFD	; 253
    1f8a:	8c 93       	st	X, r24
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	a0 e0       	ldi	r26, 0x00	; 0
    1f92:	b0 e4       	ldi	r27, 0x40	; 64
    1f94:	8b 87       	std	Y+11, r24	; 0x0b
    1f96:	9c 87       	std	Y+12, r25	; 0x0c
    1f98:	ad 87       	std	Y+13, r26	; 0x0d
    1f9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	4a ef       	ldi	r20, 0xFA	; 250
    1faa:	54 e4       	ldi	r21, 0x44	; 68
    1fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	8f 83       	std	Y+7, r24	; 0x07
    1fb6:	98 87       	std	Y+8, r25	; 0x08
    1fb8:	a9 87       	std	Y+9, r26	; 0x09
    1fba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1fbe:	78 85       	ldd	r23, Y+8	; 0x08
    1fc0:	89 85       	ldd	r24, Y+9	; 0x09
    1fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e8       	ldi	r20, 0x80	; 128
    1fca:	5f e3       	ldi	r21, 0x3F	; 63
    1fcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fd0:	88 23       	and	r24, r24
    1fd2:	2c f4       	brge	.+10     	; 0x1fde <LCD_Command+0x638>
		__ticks = 1;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	9e 83       	std	Y+6, r25	; 0x06
    1fda:	8d 83       	std	Y+5, r24	; 0x05
    1fdc:	3f c0       	rjmp	.+126    	; 0x205c <LCD_Command+0x6b6>
	else if (__tmp > 65535)
    1fde:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe0:	78 85       	ldd	r23, Y+8	; 0x08
    1fe2:	89 85       	ldd	r24, Y+9	; 0x09
    1fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	3f ef       	ldi	r19, 0xFF	; 255
    1fea:	4f e7       	ldi	r20, 0x7F	; 127
    1fec:	57 e4       	ldi	r21, 0x47	; 71
    1fee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ff2:	18 16       	cp	r1, r24
    1ff4:	4c f5       	brge	.+82     	; 0x2048 <LCD_Command+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ff8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ffa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ffc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	40 e2       	ldi	r20, 0x20	; 32
    2004:	51 e4       	ldi	r21, 0x41	; 65
    2006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	bc 01       	movw	r22, r24
    2010:	cd 01       	movw	r24, r26
    2012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	9e 83       	std	Y+6, r25	; 0x06
    201c:	8d 83       	std	Y+5, r24	; 0x05
    201e:	0f c0       	rjmp	.+30     	; 0x203e <LCD_Command+0x698>
    2020:	88 ec       	ldi	r24, 0xC8	; 200
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	9c 83       	std	Y+4, r25	; 0x04
    2026:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	9c 81       	ldd	r25, Y+4	; 0x04
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	f1 f7       	brne	.-4      	; 0x202c <LCD_Command+0x686>
    2030:	9c 83       	std	Y+4, r25	; 0x04
    2032:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2034:	8d 81       	ldd	r24, Y+5	; 0x05
    2036:	9e 81       	ldd	r25, Y+6	; 0x06
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	9e 83       	std	Y+6, r25	; 0x06
    203c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    203e:	8d 81       	ldd	r24, Y+5	; 0x05
    2040:	9e 81       	ldd	r25, Y+6	; 0x06
    2042:	00 97       	sbiw	r24, 0x00	; 0
    2044:	69 f7       	brne	.-38     	; 0x2020 <LCD_Command+0x67a>
    2046:	14 c0       	rjmp	.+40     	; 0x2070 <LCD_Command+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2048:	6f 81       	ldd	r22, Y+7	; 0x07
    204a:	78 85       	ldd	r23, Y+8	; 0x08
    204c:	89 85       	ldd	r24, Y+9	; 0x09
    204e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	9e 83       	std	Y+6, r25	; 0x06
    205a:	8d 83       	std	Y+5, r24	; 0x05
    205c:	8d 81       	ldd	r24, Y+5	; 0x05
    205e:	9e 81       	ldd	r25, Y+6	; 0x06
    2060:	9a 83       	std	Y+2, r25	; 0x02
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	9a 81       	ldd	r25, Y+2	; 0x02
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <LCD_Command+0x6c2>
    206c:	9a 83       	std	Y+2, r25	; 0x02
    206e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2070:	c9 5a       	subi	r28, 0xA9	; 169
    2072:	df 4f       	sbci	r29, 0xFF	; 255
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	de bf       	out	0x3e, r29	; 62
    207a:	0f be       	out	0x3f, r0	; 63
    207c:	cd bf       	out	0x3d, r28	; 61
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	1f 91       	pop	r17
    2084:	0f 91       	pop	r16
    2086:	08 95       	ret

00002088 <LCD_Char>:


void LCD_Char( unsigned char data )
{
    2088:	0f 93       	push	r16
    208a:	1f 93       	push	r17
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	c7 55       	subi	r28, 0x57	; 87
    2096:	d0 40       	sbci	r29, 0x00	; 0
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	de bf       	out	0x3e, r29	; 62
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	cd bf       	out	0x3d, r28	; 61
    20a2:	fe 01       	movw	r30, r28
    20a4:	e9 5a       	subi	r30, 0xA9	; 169
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	80 83       	st	Z, r24
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
    20aa:	a5 e3       	ldi	r26, 0x35	; 53
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	e5 e3       	ldi	r30, 0x35	; 53
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	98 2f       	mov	r25, r24
    20b6:	9f 70       	andi	r25, 0x0F	; 15
    20b8:	fe 01       	movw	r30, r28
    20ba:	e9 5a       	subi	r30, 0xA9	; 169
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	80 81       	ld	r24, Z
    20c0:	80 7f       	andi	r24, 0xF0	; 240
    20c2:	89 2b       	or	r24, r25
    20c4:	8c 93       	st	X, r24
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
    20c6:	a5 e3       	ldi	r26, 0x35	; 53
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	e5 e3       	ldi	r30, 0x35	; 53
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	81 60       	ori	r24, 0x01	; 1
    20d2:	8c 93       	st	X, r24
	LCD_Port|= (1<<EN);
    20d4:	a5 e3       	ldi	r26, 0x35	; 53
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e5 e3       	ldi	r30, 0x35	; 53
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	82 60       	ori	r24, 0x02	; 2
    20e0:	8c 93       	st	X, r24
    20e2:	fe 01       	movw	r30, r28
    20e4:	ed 5a       	subi	r30, 0xAD	; 173
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	a0 e8       	ldi	r26, 0x80	; 128
    20ee:	bf e3       	ldi	r27, 0x3F	; 63
    20f0:	80 83       	st	Z, r24
    20f2:	91 83       	std	Z+1, r25	; 0x01
    20f4:	a2 83       	std	Z+2, r26	; 0x02
    20f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20f8:	8e 01       	movw	r16, r28
    20fa:	01 5b       	subi	r16, 0xB1	; 177
    20fc:	1f 4f       	sbci	r17, 0xFF	; 255
    20fe:	fe 01       	movw	r30, r28
    2100:	ed 5a       	subi	r30, 0xAD	; 173
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	60 81       	ld	r22, Z
    2106:	71 81       	ldd	r23, Z+1	; 0x01
    2108:	82 81       	ldd	r24, Z+2	; 0x02
    210a:	93 81       	ldd	r25, Z+3	; 0x03
    210c:	2b ea       	ldi	r18, 0xAB	; 171
    210e:	3a ea       	ldi	r19, 0xAA	; 170
    2110:	4a e2       	ldi	r20, 0x2A	; 42
    2112:	50 e4       	ldi	r21, 0x40	; 64
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	f8 01       	movw	r30, r16
    211e:	80 83       	st	Z, r24
    2120:	91 83       	std	Z+1, r25	; 0x01
    2122:	a2 83       	std	Z+2, r26	; 0x02
    2124:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2126:	fe 01       	movw	r30, r28
    2128:	e1 5b       	subi	r30, 0xB1	; 177
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	60 81       	ld	r22, Z
    212e:	71 81       	ldd	r23, Z+1	; 0x01
    2130:	82 81       	ldd	r24, Z+2	; 0x02
    2132:	93 81       	ldd	r25, Z+3	; 0x03
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e8       	ldi	r20, 0x80	; 128
    213a:	5f e3       	ldi	r21, 0x3F	; 63
    213c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2140:	88 23       	and	r24, r24
    2142:	34 f4       	brge	.+12     	; 0x2150 <LCD_Char+0xc8>
		__ticks = 1;
    2144:	fe 01       	movw	r30, r28
    2146:	e2 5b       	subi	r30, 0xB2	; 178
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	80 83       	st	Z, r24
    214e:	e0 c0       	rjmp	.+448    	; 0x2310 <LCD_Char+0x288>
	else if (__tmp > 255)
    2150:	fe 01       	movw	r30, r28
    2152:	e1 5b       	subi	r30, 0xB1	; 177
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	60 81       	ld	r22, Z
    2158:	71 81       	ldd	r23, Z+1	; 0x01
    215a:	82 81       	ldd	r24, Z+2	; 0x02
    215c:	93 81       	ldd	r25, Z+3	; 0x03
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	4f e7       	ldi	r20, 0x7F	; 127
    2164:	53 e4       	ldi	r21, 0x43	; 67
    2166:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    216a:	18 16       	cp	r1, r24
    216c:	0c f0       	brlt	.+2      	; 0x2170 <LCD_Char+0xe8>
    216e:	c0 c0       	rjmp	.+384    	; 0x22f0 <LCD_Char+0x268>
	{
		_delay_ms(__us / 1000.0);
    2170:	fe 01       	movw	r30, r28
    2172:	ed 5a       	subi	r30, 0xAD	; 173
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	60 81       	ld	r22, Z
    2178:	71 81       	ldd	r23, Z+1	; 0x01
    217a:	82 81       	ldd	r24, Z+2	; 0x02
    217c:	93 81       	ldd	r25, Z+3	; 0x03
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	4a e7       	ldi	r20, 0x7A	; 122
    2184:	54 e4       	ldi	r21, 0x44	; 68
    2186:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	fe 01       	movw	r30, r28
    2190:	e6 5b       	subi	r30, 0xB6	; 182
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	80 83       	st	Z, r24
    2196:	91 83       	std	Z+1, r25	; 0x01
    2198:	a2 83       	std	Z+2, r26	; 0x02
    219a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219c:	8e 01       	movw	r16, r28
    219e:	0a 5b       	subi	r16, 0xBA	; 186
    21a0:	1f 4f       	sbci	r17, 0xFF	; 255
    21a2:	fe 01       	movw	r30, r28
    21a4:	e6 5b       	subi	r30, 0xB6	; 182
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	60 81       	ld	r22, Z
    21aa:	71 81       	ldd	r23, Z+1	; 0x01
    21ac:	82 81       	ldd	r24, Z+2	; 0x02
    21ae:	93 81       	ldd	r25, Z+3	; 0x03
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	4a ef       	ldi	r20, 0xFA	; 250
    21b6:	54 e4       	ldi	r21, 0x44	; 68
    21b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	f8 01       	movw	r30, r16
    21c2:	80 83       	st	Z, r24
    21c4:	91 83       	std	Z+1, r25	; 0x01
    21c6:	a2 83       	std	Z+2, r26	; 0x02
    21c8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21ca:	fe 01       	movw	r30, r28
    21cc:	ea 5b       	subi	r30, 0xBA	; 186
    21ce:	ff 4f       	sbci	r31, 0xFF	; 255
    21d0:	60 81       	ld	r22, Z
    21d2:	71 81       	ldd	r23, Z+1	; 0x01
    21d4:	82 81       	ldd	r24, Z+2	; 0x02
    21d6:	93 81       	ldd	r25, Z+3	; 0x03
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e8       	ldi	r20, 0x80	; 128
    21de:	5f e3       	ldi	r21, 0x3F	; 63
    21e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21e4:	88 23       	and	r24, r24
    21e6:	44 f4       	brge	.+16     	; 0x21f8 <LCD_Char+0x170>
		__ticks = 1;
    21e8:	fe 01       	movw	r30, r28
    21ea:	ec 5b       	subi	r30, 0xBC	; 188
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	91 83       	std	Z+1, r25	; 0x01
    21f4:	80 83       	st	Z, r24
    21f6:	64 c0       	rjmp	.+200    	; 0x22c0 <LCD_Char+0x238>
	else if (__tmp > 65535)
    21f8:	fe 01       	movw	r30, r28
    21fa:	ea 5b       	subi	r30, 0xBA	; 186
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	60 81       	ld	r22, Z
    2200:	71 81       	ldd	r23, Z+1	; 0x01
    2202:	82 81       	ldd	r24, Z+2	; 0x02
    2204:	93 81       	ldd	r25, Z+3	; 0x03
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	3f ef       	ldi	r19, 0xFF	; 255
    220a:	4f e7       	ldi	r20, 0x7F	; 127
    220c:	57 e4       	ldi	r21, 0x47	; 71
    220e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2212:	18 16       	cp	r1, r24
    2214:	0c f0       	brlt	.+2      	; 0x2218 <LCD_Char+0x190>
    2216:	43 c0       	rjmp	.+134    	; 0x229e <LCD_Char+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2218:	fe 01       	movw	r30, r28
    221a:	e6 5b       	subi	r30, 0xB6	; 182
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	60 81       	ld	r22, Z
    2220:	71 81       	ldd	r23, Z+1	; 0x01
    2222:	82 81       	ldd	r24, Z+2	; 0x02
    2224:	93 81       	ldd	r25, Z+3	; 0x03
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e2       	ldi	r20, 0x20	; 32
    222c:	51 e4       	ldi	r21, 0x41	; 65
    222e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	8e 01       	movw	r16, r28
    2238:	0c 5b       	subi	r16, 0xBC	; 188
    223a:	1f 4f       	sbci	r17, 0xFF	; 255
    223c:	bc 01       	movw	r22, r24
    223e:	cd 01       	movw	r24, r26
    2240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	f8 01       	movw	r30, r16
    224a:	91 83       	std	Z+1, r25	; 0x01
    224c:	80 83       	st	Z, r24
    224e:	1f c0       	rjmp	.+62     	; 0x228e <LCD_Char+0x206>
    2250:	fe 01       	movw	r30, r28
    2252:	ee 5b       	subi	r30, 0xBE	; 190
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	88 ec       	ldi	r24, 0xC8	; 200
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	91 83       	std	Z+1, r25	; 0x01
    225c:	80 83       	st	Z, r24
    225e:	fe 01       	movw	r30, r28
    2260:	ee 5b       	subi	r30, 0xBE	; 190
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	80 81       	ld	r24, Z
    2266:	91 81       	ldd	r25, Z+1	; 0x01
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <LCD_Char+0x1e0>
    226c:	fe 01       	movw	r30, r28
    226e:	ee 5b       	subi	r30, 0xBE	; 190
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	91 83       	std	Z+1, r25	; 0x01
    2274:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2276:	de 01       	movw	r26, r28
    2278:	ac 5b       	subi	r26, 0xBC	; 188
    227a:	bf 4f       	sbci	r27, 0xFF	; 255
    227c:	fe 01       	movw	r30, r28
    227e:	ec 5b       	subi	r30, 0xBC	; 188
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	80 81       	ld	r24, Z
    2284:	91 81       	ldd	r25, Z+1	; 0x01
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	11 96       	adiw	r26, 0x01	; 1
    228a:	9c 93       	st	X, r25
    228c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228e:	fe 01       	movw	r30, r28
    2290:	ec 5b       	subi	r30, 0xBC	; 188
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	80 81       	ld	r24, Z
    2296:	91 81       	ldd	r25, Z+1	; 0x01
    2298:	00 97       	sbiw	r24, 0x00	; 0
    229a:	d1 f6       	brne	.-76     	; 0x2250 <LCD_Char+0x1c8>
    229c:	42 c0       	rjmp	.+132    	; 0x2322 <LCD_Char+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229e:	8e 01       	movw	r16, r28
    22a0:	0c 5b       	subi	r16, 0xBC	; 188
    22a2:	1f 4f       	sbci	r17, 0xFF	; 255
    22a4:	fe 01       	movw	r30, r28
    22a6:	ea 5b       	subi	r30, 0xBA	; 186
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	60 81       	ld	r22, Z
    22ac:	71 81       	ldd	r23, Z+1	; 0x01
    22ae:	82 81       	ldd	r24, Z+2	; 0x02
    22b0:	93 81       	ldd	r25, Z+3	; 0x03
    22b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	f8 01       	movw	r30, r16
    22bc:	91 83       	std	Z+1, r25	; 0x01
    22be:	80 83       	st	Z, r24
    22c0:	de 01       	movw	r26, r28
    22c2:	a0 5c       	subi	r26, 0xC0	; 192
    22c4:	bf 4f       	sbci	r27, 0xFF	; 255
    22c6:	fe 01       	movw	r30, r28
    22c8:	ec 5b       	subi	r30, 0xBC	; 188
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	80 81       	ld	r24, Z
    22ce:	91 81       	ldd	r25, Z+1	; 0x01
    22d0:	11 96       	adiw	r26, 0x01	; 1
    22d2:	9c 93       	st	X, r25
    22d4:	8e 93       	st	-X, r24
    22d6:	fe 01       	movw	r30, r28
    22d8:	e0 5c       	subi	r30, 0xC0	; 192
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	80 81       	ld	r24, Z
    22de:	91 81       	ldd	r25, Z+1	; 0x01
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	f1 f7       	brne	.-4      	; 0x22e0 <LCD_Char+0x258>
    22e4:	fe 01       	movw	r30, r28
    22e6:	e0 5c       	subi	r30, 0xC0	; 192
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	91 83       	std	Z+1, r25	; 0x01
    22ec:	80 83       	st	Z, r24
    22ee:	19 c0       	rjmp	.+50     	; 0x2322 <LCD_Char+0x29a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22f0:	8e 01       	movw	r16, r28
    22f2:	02 5b       	subi	r16, 0xB2	; 178
    22f4:	1f 4f       	sbci	r17, 0xFF	; 255
    22f6:	fe 01       	movw	r30, r28
    22f8:	e1 5b       	subi	r30, 0xB1	; 177
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	60 81       	ld	r22, Z
    22fe:	71 81       	ldd	r23, Z+1	; 0x01
    2300:	82 81       	ldd	r24, Z+2	; 0x02
    2302:	93 81       	ldd	r25, Z+3	; 0x03
    2304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	f8 01       	movw	r30, r16
    230e:	80 83       	st	Z, r24
    2310:	fe 01       	movw	r30, r28
    2312:	e2 5b       	subi	r30, 0xB2	; 178
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	80 81       	ld	r24, Z
    2318:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    231a:	8f ad       	ldd	r24, Y+63	; 0x3f
    231c:	8a 95       	dec	r24
    231e:	f1 f7       	brne	.-4      	; 0x231c <LCD_Char+0x294>
    2320:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    2322:	a5 e3       	ldi	r26, 0x35	; 53
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	e5 e3       	ldi	r30, 0x35	; 53
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	8d 7f       	andi	r24, 0xFD	; 253
    232e:	8c 93       	st	X, r24
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	a8 e4       	ldi	r26, 0x48	; 72
    2336:	b3 e4       	ldi	r27, 0x43	; 67
    2338:	8b af       	std	Y+59, r24	; 0x3b
    233a:	9c af       	std	Y+60, r25	; 0x3c
    233c:	ad af       	std	Y+61, r26	; 0x3d
    233e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2340:	6b ad       	ldd	r22, Y+59	; 0x3b
    2342:	7c ad       	ldd	r23, Y+60	; 0x3c
    2344:	8d ad       	ldd	r24, Y+61	; 0x3d
    2346:	9e ad       	ldd	r25, Y+62	; 0x3e
    2348:	2b ea       	ldi	r18, 0xAB	; 171
    234a:	3a ea       	ldi	r19, 0xAA	; 170
    234c:	4a e2       	ldi	r20, 0x2A	; 42
    234e:	50 e4       	ldi	r21, 0x40	; 64
    2350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	8f ab       	std	Y+55, r24	; 0x37
    235a:	98 af       	std	Y+56, r25	; 0x38
    235c:	a9 af       	std	Y+57, r26	; 0x39
    235e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2360:	6f a9       	ldd	r22, Y+55	; 0x37
    2362:	78 ad       	ldd	r23, Y+56	; 0x38
    2364:	89 ad       	ldd	r24, Y+57	; 0x39
    2366:	9a ad       	ldd	r25, Y+58	; 0x3a
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e8       	ldi	r20, 0x80	; 128
    236e:	5f e3       	ldi	r21, 0x3F	; 63
    2370:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2374:	88 23       	and	r24, r24
    2376:	1c f4       	brge	.+6      	; 0x237e <LCD_Char+0x2f6>
		__ticks = 1;
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	8e ab       	std	Y+54, r24	; 0x36
    237c:	91 c0       	rjmp	.+290    	; 0x24a0 <LCD_Char+0x418>
	else if (__tmp > 255)
    237e:	6f a9       	ldd	r22, Y+55	; 0x37
    2380:	78 ad       	ldd	r23, Y+56	; 0x38
    2382:	89 ad       	ldd	r24, Y+57	; 0x39
    2384:	9a ad       	ldd	r25, Y+58	; 0x3a
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	4f e7       	ldi	r20, 0x7F	; 127
    238c:	53 e4       	ldi	r21, 0x43	; 67
    238e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2392:	18 16       	cp	r1, r24
    2394:	0c f0       	brlt	.+2      	; 0x2398 <LCD_Char+0x310>
    2396:	7b c0       	rjmp	.+246    	; 0x248e <LCD_Char+0x406>
	{
		_delay_ms(__us / 1000.0);
    2398:	6b ad       	ldd	r22, Y+59	; 0x3b
    239a:	7c ad       	ldd	r23, Y+60	; 0x3c
    239c:	8d ad       	ldd	r24, Y+61	; 0x3d
    239e:	9e ad       	ldd	r25, Y+62	; 0x3e
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	4a e7       	ldi	r20, 0x7A	; 122
    23a6:	54 e4       	ldi	r21, 0x44	; 68
    23a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	8a ab       	std	Y+50, r24	; 0x32
    23b2:	9b ab       	std	Y+51, r25	; 0x33
    23b4:	ac ab       	std	Y+52, r26	; 0x34
    23b6:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b8:	6a a9       	ldd	r22, Y+50	; 0x32
    23ba:	7b a9       	ldd	r23, Y+51	; 0x33
    23bc:	8c a9       	ldd	r24, Y+52	; 0x34
    23be:	9d a9       	ldd	r25, Y+53	; 0x35
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	4a ef       	ldi	r20, 0xFA	; 250
    23c6:	54 e4       	ldi	r21, 0x44	; 68
    23c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	8e a7       	std	Y+46, r24	; 0x2e
    23d2:	9f a7       	std	Y+47, r25	; 0x2f
    23d4:	a8 ab       	std	Y+48, r26	; 0x30
    23d6:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    23d8:	6e a5       	ldd	r22, Y+46	; 0x2e
    23da:	7f a5       	ldd	r23, Y+47	; 0x2f
    23dc:	88 a9       	ldd	r24, Y+48	; 0x30
    23de:	99 a9       	ldd	r25, Y+49	; 0x31
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e8       	ldi	r20, 0x80	; 128
    23e6:	5f e3       	ldi	r21, 0x3F	; 63
    23e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23ec:	88 23       	and	r24, r24
    23ee:	2c f4       	brge	.+10     	; 0x23fa <LCD_Char+0x372>
		__ticks = 1;
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	9d a7       	std	Y+45, r25	; 0x2d
    23f6:	8c a7       	std	Y+44, r24	; 0x2c
    23f8:	3f c0       	rjmp	.+126    	; 0x2478 <LCD_Char+0x3f0>
	else if (__tmp > 65535)
    23fa:	6e a5       	ldd	r22, Y+46	; 0x2e
    23fc:	7f a5       	ldd	r23, Y+47	; 0x2f
    23fe:	88 a9       	ldd	r24, Y+48	; 0x30
    2400:	99 a9       	ldd	r25, Y+49	; 0x31
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	3f ef       	ldi	r19, 0xFF	; 255
    2406:	4f e7       	ldi	r20, 0x7F	; 127
    2408:	57 e4       	ldi	r21, 0x47	; 71
    240a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    240e:	18 16       	cp	r1, r24
    2410:	4c f5       	brge	.+82     	; 0x2464 <LCD_Char+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2412:	6a a9       	ldd	r22, Y+50	; 0x32
    2414:	7b a9       	ldd	r23, Y+51	; 0x33
    2416:	8c a9       	ldd	r24, Y+52	; 0x34
    2418:	9d a9       	ldd	r25, Y+53	; 0x35
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	40 e2       	ldi	r20, 0x20	; 32
    2420:	51 e4       	ldi	r21, 0x41	; 65
    2422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	bc 01       	movw	r22, r24
    242c:	cd 01       	movw	r24, r26
    242e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	9d a7       	std	Y+45, r25	; 0x2d
    2438:	8c a7       	std	Y+44, r24	; 0x2c
    243a:	0f c0       	rjmp	.+30     	; 0x245a <LCD_Char+0x3d2>
    243c:	88 ec       	ldi	r24, 0xC8	; 200
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	9b a7       	std	Y+43, r25	; 0x2b
    2442:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2444:	8a a5       	ldd	r24, Y+42	; 0x2a
    2446:	9b a5       	ldd	r25, Y+43	; 0x2b
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <LCD_Char+0x3c0>
    244c:	9b a7       	std	Y+43, r25	; 0x2b
    244e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2450:	8c a5       	ldd	r24, Y+44	; 0x2c
    2452:	9d a5       	ldd	r25, Y+45	; 0x2d
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	9d a7       	std	Y+45, r25	; 0x2d
    2458:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245a:	8c a5       	ldd	r24, Y+44	; 0x2c
    245c:	9d a5       	ldd	r25, Y+45	; 0x2d
    245e:	00 97       	sbiw	r24, 0x00	; 0
    2460:	69 f7       	brne	.-38     	; 0x243c <LCD_Char+0x3b4>
    2462:	24 c0       	rjmp	.+72     	; 0x24ac <LCD_Char+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2464:	6e a5       	ldd	r22, Y+46	; 0x2e
    2466:	7f a5       	ldd	r23, Y+47	; 0x2f
    2468:	88 a9       	ldd	r24, Y+48	; 0x30
    246a:	99 a9       	ldd	r25, Y+49	; 0x31
    246c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	9d a7       	std	Y+45, r25	; 0x2d
    2476:	8c a7       	std	Y+44, r24	; 0x2c
    2478:	8c a5       	ldd	r24, Y+44	; 0x2c
    247a:	9d a5       	ldd	r25, Y+45	; 0x2d
    247c:	99 a7       	std	Y+41, r25	; 0x29
    247e:	88 a7       	std	Y+40, r24	; 0x28
    2480:	88 a5       	ldd	r24, Y+40	; 0x28
    2482:	99 a5       	ldd	r25, Y+41	; 0x29
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	f1 f7       	brne	.-4      	; 0x2484 <LCD_Char+0x3fc>
    2488:	99 a7       	std	Y+41, r25	; 0x29
    248a:	88 a7       	std	Y+40, r24	; 0x28
    248c:	0f c0       	rjmp	.+30     	; 0x24ac <LCD_Char+0x424>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    248e:	6f a9       	ldd	r22, Y+55	; 0x37
    2490:	78 ad       	ldd	r23, Y+56	; 0x38
    2492:	89 ad       	ldd	r24, Y+57	; 0x39
    2494:	9a ad       	ldd	r25, Y+58	; 0x3a
    2496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249a:	dc 01       	movw	r26, r24
    249c:	cb 01       	movw	r24, r22
    249e:	8e ab       	std	Y+54, r24	; 0x36
    24a0:	8e a9       	ldd	r24, Y+54	; 0x36
    24a2:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24a4:	8f a1       	ldd	r24, Y+39	; 0x27
    24a6:	8a 95       	dec	r24
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <LCD_Char+0x41e>
    24aa:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
    24ac:	a5 e3       	ldi	r26, 0x35	; 53
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	e5 e3       	ldi	r30, 0x35	; 53
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	28 2f       	mov	r18, r24
    24b8:	2f 70       	andi	r18, 0x0F	; 15
    24ba:	fe 01       	movw	r30, r28
    24bc:	e9 5a       	subi	r30, 0xA9	; 169
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	80 81       	ld	r24, Z
    24c2:	88 2f       	mov	r24, r24
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	82 95       	swap	r24
    24c8:	92 95       	swap	r25
    24ca:	90 7f       	andi	r25, 0xF0	; 240
    24cc:	98 27       	eor	r25, r24
    24ce:	80 7f       	andi	r24, 0xF0	; 240
    24d0:	98 27       	eor	r25, r24
    24d2:	82 2b       	or	r24, r18
    24d4:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);
    24d6:	a5 e3       	ldi	r26, 0x35	; 53
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e5 e3       	ldi	r30, 0x35	; 53
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	82 60       	ori	r24, 0x02	; 2
    24e2:	8c 93       	st	X, r24
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	a0 e8       	ldi	r26, 0x80	; 128
    24ea:	bf e3       	ldi	r27, 0x3F	; 63
    24ec:	8b a3       	std	Y+35, r24	; 0x23
    24ee:	9c a3       	std	Y+36, r25	; 0x24
    24f0:	ad a3       	std	Y+37, r26	; 0x25
    24f2:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24f4:	6b a1       	ldd	r22, Y+35	; 0x23
    24f6:	7c a1       	ldd	r23, Y+36	; 0x24
    24f8:	8d a1       	ldd	r24, Y+37	; 0x25
    24fa:	9e a1       	ldd	r25, Y+38	; 0x26
    24fc:	2b ea       	ldi	r18, 0xAB	; 171
    24fe:	3a ea       	ldi	r19, 0xAA	; 170
    2500:	4a e2       	ldi	r20, 0x2A	; 42
    2502:	50 e4       	ldi	r21, 0x40	; 64
    2504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	8f 8f       	std	Y+31, r24	; 0x1f
    250e:	98 a3       	std	Y+32, r25	; 0x20
    2510:	a9 a3       	std	Y+33, r26	; 0x21
    2512:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2514:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2516:	78 a1       	ldd	r23, Y+32	; 0x20
    2518:	89 a1       	ldd	r24, Y+33	; 0x21
    251a:	9a a1       	ldd	r25, Y+34	; 0x22
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 e8       	ldi	r20, 0x80	; 128
    2522:	5f e3       	ldi	r21, 0x3F	; 63
    2524:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2528:	88 23       	and	r24, r24
    252a:	1c f4       	brge	.+6      	; 0x2532 <LCD_Char+0x4aa>
		__ticks = 1;
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	8e 8f       	std	Y+30, r24	; 0x1e
    2530:	91 c0       	rjmp	.+290    	; 0x2654 <LCD_Char+0x5cc>
	else if (__tmp > 255)
    2532:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2534:	78 a1       	ldd	r23, Y+32	; 0x20
    2536:	89 a1       	ldd	r24, Y+33	; 0x21
    2538:	9a a1       	ldd	r25, Y+34	; 0x22
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	4f e7       	ldi	r20, 0x7F	; 127
    2540:	53 e4       	ldi	r21, 0x43	; 67
    2542:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2546:	18 16       	cp	r1, r24
    2548:	0c f0       	brlt	.+2      	; 0x254c <LCD_Char+0x4c4>
    254a:	7b c0       	rjmp	.+246    	; 0x2642 <LCD_Char+0x5ba>
	{
		_delay_ms(__us / 1000.0);
    254c:	6b a1       	ldd	r22, Y+35	; 0x23
    254e:	7c a1       	ldd	r23, Y+36	; 0x24
    2550:	8d a1       	ldd	r24, Y+37	; 0x25
    2552:	9e a1       	ldd	r25, Y+38	; 0x26
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	4a e7       	ldi	r20, 0x7A	; 122
    255a:	54 e4       	ldi	r21, 0x44	; 68
    255c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	8a 8f       	std	Y+26, r24	; 0x1a
    2566:	9b 8f       	std	Y+27, r25	; 0x1b
    2568:	ac 8f       	std	Y+28, r26	; 0x1c
    256a:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    256c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    256e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2570:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2572:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	4a ef       	ldi	r20, 0xFA	; 250
    257a:	54 e4       	ldi	r21, 0x44	; 68
    257c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	8e 8b       	std	Y+22, r24	; 0x16
    2586:	9f 8b       	std	Y+23, r25	; 0x17
    2588:	a8 8f       	std	Y+24, r26	; 0x18
    258a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    258c:	6e 89       	ldd	r22, Y+22	; 0x16
    258e:	7f 89       	ldd	r23, Y+23	; 0x17
    2590:	88 8d       	ldd	r24, Y+24	; 0x18
    2592:	99 8d       	ldd	r25, Y+25	; 0x19
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e8       	ldi	r20, 0x80	; 128
    259a:	5f e3       	ldi	r21, 0x3F	; 63
    259c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25a0:	88 23       	and	r24, r24
    25a2:	2c f4       	brge	.+10     	; 0x25ae <LCD_Char+0x526>
		__ticks = 1;
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	9d 8b       	std	Y+21, r25	; 0x15
    25aa:	8c 8b       	std	Y+20, r24	; 0x14
    25ac:	3f c0       	rjmp	.+126    	; 0x262c <LCD_Char+0x5a4>
	else if (__tmp > 65535)
    25ae:	6e 89       	ldd	r22, Y+22	; 0x16
    25b0:	7f 89       	ldd	r23, Y+23	; 0x17
    25b2:	88 8d       	ldd	r24, Y+24	; 0x18
    25b4:	99 8d       	ldd	r25, Y+25	; 0x19
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	3f ef       	ldi	r19, 0xFF	; 255
    25ba:	4f e7       	ldi	r20, 0x7F	; 127
    25bc:	57 e4       	ldi	r21, 0x47	; 71
    25be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25c2:	18 16       	cp	r1, r24
    25c4:	4c f5       	brge	.+82     	; 0x2618 <LCD_Char+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    25c8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    25ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    25cc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	40 e2       	ldi	r20, 0x20	; 32
    25d4:	51 e4       	ldi	r21, 0x41	; 65
    25d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	bc 01       	movw	r22, r24
    25e0:	cd 01       	movw	r24, r26
    25e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	9d 8b       	std	Y+21, r25	; 0x15
    25ec:	8c 8b       	std	Y+20, r24	; 0x14
    25ee:	0f c0       	rjmp	.+30     	; 0x260e <LCD_Char+0x586>
    25f0:	88 ec       	ldi	r24, 0xC8	; 200
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	9b 8b       	std	Y+19, r25	; 0x13
    25f6:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25f8:	8a 89       	ldd	r24, Y+18	; 0x12
    25fa:	9b 89       	ldd	r25, Y+19	; 0x13
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	f1 f7       	brne	.-4      	; 0x25fc <LCD_Char+0x574>
    2600:	9b 8b       	std	Y+19, r25	; 0x13
    2602:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2604:	8c 89       	ldd	r24, Y+20	; 0x14
    2606:	9d 89       	ldd	r25, Y+21	; 0x15
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	9d 8b       	std	Y+21, r25	; 0x15
    260c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    260e:	8c 89       	ldd	r24, Y+20	; 0x14
    2610:	9d 89       	ldd	r25, Y+21	; 0x15
    2612:	00 97       	sbiw	r24, 0x00	; 0
    2614:	69 f7       	brne	.-38     	; 0x25f0 <LCD_Char+0x568>
    2616:	24 c0       	rjmp	.+72     	; 0x2660 <LCD_Char+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2618:	6e 89       	ldd	r22, Y+22	; 0x16
    261a:	7f 89       	ldd	r23, Y+23	; 0x17
    261c:	88 8d       	ldd	r24, Y+24	; 0x18
    261e:	99 8d       	ldd	r25, Y+25	; 0x19
    2620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	9d 8b       	std	Y+21, r25	; 0x15
    262a:	8c 8b       	std	Y+20, r24	; 0x14
    262c:	8c 89       	ldd	r24, Y+20	; 0x14
    262e:	9d 89       	ldd	r25, Y+21	; 0x15
    2630:	99 8b       	std	Y+17, r25	; 0x11
    2632:	88 8b       	std	Y+16, r24	; 0x10
    2634:	88 89       	ldd	r24, Y+16	; 0x10
    2636:	99 89       	ldd	r25, Y+17	; 0x11
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	f1 f7       	brne	.-4      	; 0x2638 <LCD_Char+0x5b0>
    263c:	99 8b       	std	Y+17, r25	; 0x11
    263e:	88 8b       	std	Y+16, r24	; 0x10
    2640:	0f c0       	rjmp	.+30     	; 0x2660 <LCD_Char+0x5d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2642:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2644:	78 a1       	ldd	r23, Y+32	; 0x20
    2646:	89 a1       	ldd	r24, Y+33	; 0x21
    2648:	9a a1       	ldd	r25, Y+34	; 0x22
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	8e 8f       	std	Y+30, r24	; 0x1e
    2654:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2656:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2658:	8f 85       	ldd	r24, Y+15	; 0x0f
    265a:	8a 95       	dec	r24
    265c:	f1 f7       	brne	.-4      	; 0x265a <LCD_Char+0x5d2>
    265e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    2660:	a5 e3       	ldi	r26, 0x35	; 53
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	e5 e3       	ldi	r30, 0x35	; 53
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	8d 7f       	andi	r24, 0xFD	; 253
    266c:	8c 93       	st	X, r24
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	a0 e0       	ldi	r26, 0x00	; 0
    2674:	b0 e4       	ldi	r27, 0x40	; 64
    2676:	8b 87       	std	Y+11, r24	; 0x0b
    2678:	9c 87       	std	Y+12, r25	; 0x0c
    267a:	ad 87       	std	Y+13, r26	; 0x0d
    267c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2680:	7c 85       	ldd	r23, Y+12	; 0x0c
    2682:	8d 85       	ldd	r24, Y+13	; 0x0d
    2684:	9e 85       	ldd	r25, Y+14	; 0x0e
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	4a ef       	ldi	r20, 0xFA	; 250
    268c:	54 e4       	ldi	r21, 0x44	; 68
    268e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	8f 83       	std	Y+7, r24	; 0x07
    2698:	98 87       	std	Y+8, r25	; 0x08
    269a:	a9 87       	std	Y+9, r26	; 0x09
    269c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    269e:	6f 81       	ldd	r22, Y+7	; 0x07
    26a0:	78 85       	ldd	r23, Y+8	; 0x08
    26a2:	89 85       	ldd	r24, Y+9	; 0x09
    26a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e8       	ldi	r20, 0x80	; 128
    26ac:	5f e3       	ldi	r21, 0x3F	; 63
    26ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26b2:	88 23       	and	r24, r24
    26b4:	2c f4       	brge	.+10     	; 0x26c0 <LCD_Char+0x638>
		__ticks = 1;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	9e 83       	std	Y+6, r25	; 0x06
    26bc:	8d 83       	std	Y+5, r24	; 0x05
    26be:	3f c0       	rjmp	.+126    	; 0x273e <LCD_Char+0x6b6>
	else if (__tmp > 65535)
    26c0:	6f 81       	ldd	r22, Y+7	; 0x07
    26c2:	78 85       	ldd	r23, Y+8	; 0x08
    26c4:	89 85       	ldd	r24, Y+9	; 0x09
    26c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	3f ef       	ldi	r19, 0xFF	; 255
    26cc:	4f e7       	ldi	r20, 0x7F	; 127
    26ce:	57 e4       	ldi	r21, 0x47	; 71
    26d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26d4:	18 16       	cp	r1, r24
    26d6:	4c f5       	brge	.+82     	; 0x272a <LCD_Char+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26da:	7c 85       	ldd	r23, Y+12	; 0x0c
    26dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26de:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e2       	ldi	r20, 0x20	; 32
    26e6:	51 e4       	ldi	r21, 0x41	; 65
    26e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	9e 83       	std	Y+6, r25	; 0x06
    26fe:	8d 83       	std	Y+5, r24	; 0x05
    2700:	0f c0       	rjmp	.+30     	; 0x2720 <LCD_Char+0x698>
    2702:	88 ec       	ldi	r24, 0xC8	; 200
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	9c 83       	std	Y+4, r25	; 0x04
    2708:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    270a:	8b 81       	ldd	r24, Y+3	; 0x03
    270c:	9c 81       	ldd	r25, Y+4	; 0x04
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	f1 f7       	brne	.-4      	; 0x270e <LCD_Char+0x686>
    2712:	9c 83       	std	Y+4, r25	; 0x04
    2714:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2716:	8d 81       	ldd	r24, Y+5	; 0x05
    2718:	9e 81       	ldd	r25, Y+6	; 0x06
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	9e 83       	std	Y+6, r25	; 0x06
    271e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2720:	8d 81       	ldd	r24, Y+5	; 0x05
    2722:	9e 81       	ldd	r25, Y+6	; 0x06
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	69 f7       	brne	.-38     	; 0x2702 <LCD_Char+0x67a>
    2728:	14 c0       	rjmp	.+40     	; 0x2752 <LCD_Char+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272a:	6f 81       	ldd	r22, Y+7	; 0x07
    272c:	78 85       	ldd	r23, Y+8	; 0x08
    272e:	89 85       	ldd	r24, Y+9	; 0x09
    2730:	9a 85       	ldd	r25, Y+10	; 0x0a
    2732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
    273e:	8d 81       	ldd	r24, Y+5	; 0x05
    2740:	9e 81       	ldd	r25, Y+6	; 0x06
    2742:	9a 83       	std	Y+2, r25	; 0x02
    2744:	89 83       	std	Y+1, r24	; 0x01
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	9a 81       	ldd	r25, Y+2	; 0x02
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	f1 f7       	brne	.-4      	; 0x274a <LCD_Char+0x6c2>
    274e:	9a 83       	std	Y+2, r25	; 0x02
    2750:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2752:	c9 5a       	subi	r28, 0xA9	; 169
    2754:	df 4f       	sbci	r29, 0xFF	; 255
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	f8 94       	cli
    275a:	de bf       	out	0x3e, r29	; 62
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	1f 91       	pop	r17
    2766:	0f 91       	pop	r16
    2768:	08 95       	ret

0000276a <LCD_Init>:

void LCD_Init (void)			/* LCD Initialize function */
{
    276a:	df 93       	push	r29
    276c:	cf 93       	push	r28
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	6c 97       	sbiw	r28, 0x1c	; 28
    2774:	0f b6       	in	r0, 0x3f	; 63
    2776:	f8 94       	cli
    2778:	de bf       	out	0x3e, r29	; 62
    277a:	0f be       	out	0x3f, r0	; 63
    277c:	cd bf       	out	0x3d, r28	; 61
	LCD_Dir = 0xFF;			/* Make LCD port direction as o/p */
    277e:	e4 e3       	ldi	r30, 0x34	; 52
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	8f ef       	ldi	r24, 0xFF	; 255
    2784:	80 83       	st	Z, r24
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	a0 ef       	ldi	r26, 0xF0	; 240
    278c:	b1 e4       	ldi	r27, 0x41	; 65
    278e:	89 8f       	std	Y+25, r24	; 0x19
    2790:	9a 8f       	std	Y+26, r25	; 0x1a
    2792:	ab 8f       	std	Y+27, r26	; 0x1b
    2794:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2796:	69 8d       	ldd	r22, Y+25	; 0x19
    2798:	7a 8d       	ldd	r23, Y+26	; 0x1a
    279a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    279c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	4a ef       	ldi	r20, 0xFA	; 250
    27a4:	54 e4       	ldi	r21, 0x44	; 68
    27a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	8d 8b       	std	Y+21, r24	; 0x15
    27b0:	9e 8b       	std	Y+22, r25	; 0x16
    27b2:	af 8b       	std	Y+23, r26	; 0x17
    27b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27b6:	6d 89       	ldd	r22, Y+21	; 0x15
    27b8:	7e 89       	ldd	r23, Y+22	; 0x16
    27ba:	8f 89       	ldd	r24, Y+23	; 0x17
    27bc:	98 8d       	ldd	r25, Y+24	; 0x18
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	40 e8       	ldi	r20, 0x80	; 128
    27c4:	5f e3       	ldi	r21, 0x3F	; 63
    27c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ca:	88 23       	and	r24, r24
    27cc:	2c f4       	brge	.+10     	; 0x27d8 <LCD_Init+0x6e>
		__ticks = 1;
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	9c 8b       	std	Y+20, r25	; 0x14
    27d4:	8b 8b       	std	Y+19, r24	; 0x13
    27d6:	3f c0       	rjmp	.+126    	; 0x2856 <LCD_Init+0xec>
	else if (__tmp > 65535)
    27d8:	6d 89       	ldd	r22, Y+21	; 0x15
    27da:	7e 89       	ldd	r23, Y+22	; 0x16
    27dc:	8f 89       	ldd	r24, Y+23	; 0x17
    27de:	98 8d       	ldd	r25, Y+24	; 0x18
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	3f ef       	ldi	r19, 0xFF	; 255
    27e4:	4f e7       	ldi	r20, 0x7F	; 127
    27e6:	57 e4       	ldi	r21, 0x47	; 71
    27e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ec:	18 16       	cp	r1, r24
    27ee:	4c f5       	brge	.+82     	; 0x2842 <LCD_Init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f0:	69 8d       	ldd	r22, Y+25	; 0x19
    27f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e2       	ldi	r20, 0x20	; 32
    27fe:	51 e4       	ldi	r21, 0x41	; 65
    2800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	bc 01       	movw	r22, r24
    280a:	cd 01       	movw	r24, r26
    280c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	9c 8b       	std	Y+20, r25	; 0x14
    2816:	8b 8b       	std	Y+19, r24	; 0x13
    2818:	0f c0       	rjmp	.+30     	; 0x2838 <LCD_Init+0xce>
    281a:	88 ec       	ldi	r24, 0xC8	; 200
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	9a 8b       	std	Y+18, r25	; 0x12
    2820:	89 8b       	std	Y+17, r24	; 0x11
    2822:	89 89       	ldd	r24, Y+17	; 0x11
    2824:	9a 89       	ldd	r25, Y+18	; 0x12
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	f1 f7       	brne	.-4      	; 0x2826 <LCD_Init+0xbc>
    282a:	9a 8b       	std	Y+18, r25	; 0x12
    282c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282e:	8b 89       	ldd	r24, Y+19	; 0x13
    2830:	9c 89       	ldd	r25, Y+20	; 0x14
    2832:	01 97       	sbiw	r24, 0x01	; 1
    2834:	9c 8b       	std	Y+20, r25	; 0x14
    2836:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2838:	8b 89       	ldd	r24, Y+19	; 0x13
    283a:	9c 89       	ldd	r25, Y+20	; 0x14
    283c:	00 97       	sbiw	r24, 0x00	; 0
    283e:	69 f7       	brne	.-38     	; 0x281a <LCD_Init+0xb0>
    2840:	14 c0       	rjmp	.+40     	; 0x286a <LCD_Init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2842:	6d 89       	ldd	r22, Y+21	; 0x15
    2844:	7e 89       	ldd	r23, Y+22	; 0x16
    2846:	8f 89       	ldd	r24, Y+23	; 0x17
    2848:	98 8d       	ldd	r25, Y+24	; 0x18
    284a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	9c 8b       	std	Y+20, r25	; 0x14
    2854:	8b 8b       	std	Y+19, r24	; 0x13
    2856:	8b 89       	ldd	r24, Y+19	; 0x13
    2858:	9c 89       	ldd	r25, Y+20	; 0x14
    285a:	98 8b       	std	Y+16, r25	; 0x10
    285c:	8f 87       	std	Y+15, r24	; 0x0f
    285e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2860:	98 89       	ldd	r25, Y+16	; 0x10
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	f1 f7       	brne	.-4      	; 0x2862 <LCD_Init+0xf8>
    2866:	98 8b       	std	Y+16, r25	; 0x10
    2868:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(30);			/* LCD Power ON delay always >15ms */


	LCD_Command(0x01);              /* Clear display screen*/
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LCD_Command>
	LCD_Command(0x02);       /* return cursor to first position on first line */
    2870:	82 e0       	ldi	r24, 0x02	; 2
    2872:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
    2876:	88 e2       	ldi	r24, 0x28	; 40
    2878:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
    287c:	8c e0       	ldi	r24, 0x0C	; 12
    287e:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
    2882:	86 e0       	ldi	r24, 0x06	; 6
    2884:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LCD_Command>
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	a0 e0       	ldi	r26, 0x00	; 0
    288e:	b0 e4       	ldi	r27, 0x40	; 64
    2890:	8b 87       	std	Y+11, r24	; 0x0b
    2892:	9c 87       	std	Y+12, r25	; 0x0c
    2894:	ad 87       	std	Y+13, r26	; 0x0d
    2896:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2898:	6b 85       	ldd	r22, Y+11	; 0x0b
    289a:	7c 85       	ldd	r23, Y+12	; 0x0c
    289c:	8d 85       	ldd	r24, Y+13	; 0x0d
    289e:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	4a ef       	ldi	r20, 0xFA	; 250
    28a6:	54 e4       	ldi	r21, 0x44	; 68
    28a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	8f 83       	std	Y+7, r24	; 0x07
    28b2:	98 87       	std	Y+8, r25	; 0x08
    28b4:	a9 87       	std	Y+9, r26	; 0x09
    28b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28b8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ba:	78 85       	ldd	r23, Y+8	; 0x08
    28bc:	89 85       	ldd	r24, Y+9	; 0x09
    28be:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	40 e8       	ldi	r20, 0x80	; 128
    28c6:	5f e3       	ldi	r21, 0x3F	; 63
    28c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28cc:	88 23       	and	r24, r24
    28ce:	2c f4       	brge	.+10     	; 0x28da <LCD_Init+0x170>
		__ticks = 1;
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	9e 83       	std	Y+6, r25	; 0x06
    28d6:	8d 83       	std	Y+5, r24	; 0x05
    28d8:	3f c0       	rjmp	.+126    	; 0x2958 <LCD_Init+0x1ee>
	else if (__tmp > 65535)
    28da:	6f 81       	ldd	r22, Y+7	; 0x07
    28dc:	78 85       	ldd	r23, Y+8	; 0x08
    28de:	89 85       	ldd	r24, Y+9	; 0x09
    28e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	3f ef       	ldi	r19, 0xFF	; 255
    28e6:	4f e7       	ldi	r20, 0x7F	; 127
    28e8:	57 e4       	ldi	r21, 0x47	; 71
    28ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ee:	18 16       	cp	r1, r24
    28f0:	4c f5       	brge	.+82     	; 0x2944 <LCD_Init+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	40 e2       	ldi	r20, 0x20	; 32
    2900:	51 e4       	ldi	r21, 0x41	; 65
    2902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	bc 01       	movw	r22, r24
    290c:	cd 01       	movw	r24, r26
    290e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	9e 83       	std	Y+6, r25	; 0x06
    2918:	8d 83       	std	Y+5, r24	; 0x05
    291a:	0f c0       	rjmp	.+30     	; 0x293a <LCD_Init+0x1d0>
    291c:	88 ec       	ldi	r24, 0xC8	; 200
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	9c 83       	std	Y+4, r25	; 0x04
    2922:	8b 83       	std	Y+3, r24	; 0x03
    2924:	8b 81       	ldd	r24, Y+3	; 0x03
    2926:	9c 81       	ldd	r25, Y+4	; 0x04
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	f1 f7       	brne	.-4      	; 0x2928 <LCD_Init+0x1be>
    292c:	9c 83       	std	Y+4, r25	; 0x04
    292e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2930:	8d 81       	ldd	r24, Y+5	; 0x05
    2932:	9e 81       	ldd	r25, Y+6	; 0x06
    2934:	01 97       	sbiw	r24, 0x01	; 1
    2936:	9e 83       	std	Y+6, r25	; 0x06
    2938:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293a:	8d 81       	ldd	r24, Y+5	; 0x05
    293c:	9e 81       	ldd	r25, Y+6	; 0x06
    293e:	00 97       	sbiw	r24, 0x00	; 0
    2940:	69 f7       	brne	.-38     	; 0x291c <LCD_Init+0x1b2>
    2942:	14 c0       	rjmp	.+40     	; 0x296c <LCD_Init+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2944:	6f 81       	ldd	r22, Y+7	; 0x07
    2946:	78 85       	ldd	r23, Y+8	; 0x08
    2948:	89 85       	ldd	r24, Y+9	; 0x09
    294a:	9a 85       	ldd	r25, Y+10	; 0x0a
    294c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	9e 83       	std	Y+6, r25	; 0x06
    2956:	8d 83       	std	Y+5, r24	; 0x05
    2958:	8d 81       	ldd	r24, Y+5	; 0x05
    295a:	9e 81       	ldd	r25, Y+6	; 0x06
    295c:	9a 83       	std	Y+2, r25	; 0x02
    295e:	89 83       	std	Y+1, r24	; 0x01
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	9a 81       	ldd	r25, Y+2	; 0x02
    2964:	01 97       	sbiw	r24, 0x01	; 1
    2966:	f1 f7       	brne	.-4      	; 0x2964 <LCD_Init+0x1fa>
    2968:	9a 83       	std	Y+2, r25	; 0x02
    296a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);
}
    296c:	6c 96       	adiw	r28, 0x1c	; 28
    296e:	0f b6       	in	r0, 0x3f	; 63
    2970:	f8 94       	cli
    2972:	de bf       	out	0x3e, r29	; 62
    2974:	0f be       	out	0x3f, r0	; 63
    2976:	cd bf       	out	0x3d, r28	; 61
    2978:	cf 91       	pop	r28
    297a:	df 91       	pop	r29
    297c:	08 95       	ret

0000297e <LCD_String>:


void LCD_String (char *str)		/* Send string to LCD function */
{
    297e:	df 93       	push	r29
    2980:	cf 93       	push	r28
    2982:	00 d0       	rcall	.+0      	; 0x2984 <LCD_String+0x6>
    2984:	00 d0       	rcall	.+0      	; 0x2986 <LCD_String+0x8>
    2986:	cd b7       	in	r28, 0x3d	; 61
    2988:	de b7       	in	r29, 0x3e	; 62
    298a:	9c 83       	std	Y+4, r25	; 0x04
    298c:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    298e:	1a 82       	std	Y+2, r1	; 0x02
    2990:	19 82       	std	Y+1, r1	; 0x01
    2992:	0f c0       	rjmp	.+30     	; 0x29b2 <LCD_String+0x34>
	{
		LCD_Char (str[i]);
    2994:	29 81       	ldd	r18, Y+1	; 0x01
    2996:	3a 81       	ldd	r19, Y+2	; 0x02
    2998:	8b 81       	ldd	r24, Y+3	; 0x03
    299a:	9c 81       	ldd	r25, Y+4	; 0x04
    299c:	fc 01       	movw	r30, r24
    299e:	e2 0f       	add	r30, r18
    29a0:	f3 1f       	adc	r31, r19
    29a2:	80 81       	ld	r24, Z
    29a4:	0e 94 44 10 	call	0x2088	; 0x2088 <LCD_Char>


void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    29a8:	89 81       	ldd	r24, Y+1	; 0x01
    29aa:	9a 81       	ldd	r25, Y+2	; 0x02
    29ac:	01 96       	adiw	r24, 0x01	; 1
    29ae:	9a 83       	std	Y+2, r25	; 0x02
    29b0:	89 83       	std	Y+1, r24	; 0x01
    29b2:	29 81       	ldd	r18, Y+1	; 0x01
    29b4:	3a 81       	ldd	r19, Y+2	; 0x02
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	9c 81       	ldd	r25, Y+4	; 0x04
    29ba:	fc 01       	movw	r30, r24
    29bc:	e2 0f       	add	r30, r18
    29be:	f3 1f       	adc	r31, r19
    29c0:	80 81       	ld	r24, Z
    29c2:	88 23       	and	r24, r24
    29c4:	39 f7       	brne	.-50     	; 0x2994 <LCD_String+0x16>
	{
		LCD_Char (str[i]);
	}
}
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	0f 90       	pop	r0
    29ce:	cf 91       	pop	r28
    29d0:	df 91       	pop	r29
    29d2:	08 95       	ret

000029d4 <Gotoxy>:

void Gotoxy (char Y,char X)
{
    29d4:	df 93       	push	r29
    29d6:	cf 93       	push	r28
    29d8:	00 d0       	rcall	.+0      	; 0x29da <Gotoxy+0x6>
    29da:	00 d0       	rcall	.+0      	; 0x29dc <Gotoxy+0x8>
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	89 83       	std	Y+1, r24	; 0x01
    29e2:	6a 83       	std	Y+2, r22	; 0x02
	if (X>0 && X<=16)
    29e4:	8a 81       	ldd	r24, Y+2	; 0x02
    29e6:	88 23       	and	r24, r24
    29e8:	e1 f0       	breq	.+56     	; 0x2a22 <Gotoxy+0x4e>
    29ea:	8a 81       	ldd	r24, Y+2	; 0x02
    29ec:	81 31       	cpi	r24, 0x11	; 17
    29ee:	c8 f4       	brcc	.+50     	; 0x2a22 <Gotoxy+0x4e>
	{
	    switch(Y)
    29f0:	89 81       	ldd	r24, Y+1	; 0x01
    29f2:	28 2f       	mov	r18, r24
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	3c 83       	std	Y+4, r19	; 0x04
    29f8:	2b 83       	std	Y+3, r18	; 0x03
    29fa:	8b 81       	ldd	r24, Y+3	; 0x03
    29fc:	9c 81       	ldd	r25, Y+4	; 0x04
    29fe:	81 30       	cpi	r24, 0x01	; 1
    2a00:	91 05       	cpc	r25, r1
    2a02:	31 f0       	breq	.+12     	; 0x2a10 <Gotoxy+0x3c>
    2a04:	2b 81       	ldd	r18, Y+3	; 0x03
    2a06:	3c 81       	ldd	r19, Y+4	; 0x04
    2a08:	22 30       	cpi	r18, 0x02	; 2
    2a0a:	31 05       	cpc	r19, r1
    2a0c:	31 f0       	breq	.+12     	; 0x2a1a <Gotoxy+0x46>
    2a0e:	09 c0       	rjmp	.+18     	; 0x2a22 <Gotoxy+0x4e>
	    {
		    case 1:
		    	LCD_Command(X+127);
    2a10:	8a 81       	ldd	r24, Y+2	; 0x02
    2a12:	81 58       	subi	r24, 0x81	; 129
    2a14:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LCD_Command>
    2a18:	04 c0       	rjmp	.+8      	; 0x2a22 <Gotoxy+0x4e>
		    break;
		    case 2:
		    	LCD_Command(X+191);
    2a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1c:	81 54       	subi	r24, 0x41	; 65
    2a1e:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LCD_Command>
		    break;
		    default:
		    break;
	    }
	}
}
    2a22:	0f 90       	pop	r0
    2a24:	0f 90       	pop	r0
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
    2a2a:	cf 91       	pop	r28
    2a2c:	df 91       	pop	r29
    2a2e:	08 95       	ret

00002a30 <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
    2a30:	df 93       	push	r29
    2a32:	cf 93       	push	r28
    2a34:	00 d0       	rcall	.+0      	; 0x2a36 <LCD_String_xy+0x6>
    2a36:	00 d0       	rcall	.+0      	; 0x2a38 <LCD_String_xy+0x8>
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
    2a3c:	89 83       	std	Y+1, r24	; 0x01
    2a3e:	6a 83       	std	Y+2, r22	; 0x02
    2a40:	5c 83       	std	Y+4, r21	; 0x04
    2a42:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 0 && pos<16)
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	88 23       	and	r24, r24
    2a48:	49 f4       	brne	.+18     	; 0x2a5c <LCD_String_xy+0x2c>
    2a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4c:	80 31       	cpi	r24, 0x10	; 16
    2a4e:	30 f4       	brcc	.+12     	; 0x2a5c <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    2a50:	8a 81       	ldd	r24, Y+2	; 0x02
    2a52:	8f 70       	andi	r24, 0x0F	; 15
    2a54:	80 68       	ori	r24, 0x80	; 128
    2a56:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LCD_Command>
    2a5a:	0b c0       	rjmp	.+22     	; 0x2a72 <LCD_String_xy+0x42>
	else if (row == 1 && pos<16)
    2a5c:	89 81       	ldd	r24, Y+1	; 0x01
    2a5e:	81 30       	cpi	r24, 0x01	; 1
    2a60:	41 f4       	brne	.+16     	; 0x2a72 <LCD_String_xy+0x42>
    2a62:	8a 81       	ldd	r24, Y+2	; 0x02
    2a64:	80 31       	cpi	r24, 0x10	; 16
    2a66:	28 f4       	brcc	.+10     	; 0x2a72 <LCD_String_xy+0x42>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    2a68:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6a:	8f 70       	andi	r24, 0x0F	; 15
    2a6c:	80 6c       	ori	r24, 0xC0	; 192
    2a6e:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
    2a72:	8b 81       	ldd	r24, Y+3	; 0x03
    2a74:	9c 81       	ldd	r25, Y+4	; 0x04
    2a76:	0e 94 bf 14 	call	0x297e	; 0x297e <LCD_String>
}
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	0f 90       	pop	r0
    2a82:	cf 91       	pop	r28
    2a84:	df 91       	pop	r29
    2a86:	08 95       	ret

00002a88 <LCD_Clear>:

void LCD_Clear()
{
    2a88:	df 93       	push	r29
    2a8a:	cf 93       	push	r28
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
    2a90:	2e 97       	sbiw	r28, 0x0e	; 14
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	f8 94       	cli
    2a96:	de bf       	out	0x3e, r29	; 62
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	cd bf       	out	0x3d, r28	; 61
	LCD_Command (0x01);		/* Clear display */
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LCD_Command>
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	a0 e0       	ldi	r26, 0x00	; 0
    2aa8:	b0 e4       	ldi	r27, 0x40	; 64
    2aaa:	8b 87       	std	Y+11, r24	; 0x0b
    2aac:	9c 87       	std	Y+12, r25	; 0x0c
    2aae:	ad 87       	std	Y+13, r26	; 0x0d
    2ab0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	4a ef       	ldi	r20, 0xFA	; 250
    2ac0:	54 e4       	ldi	r21, 0x44	; 68
    2ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	8f 83       	std	Y+7, r24	; 0x07
    2acc:	98 87       	std	Y+8, r25	; 0x08
    2ace:	a9 87       	std	Y+9, r26	; 0x09
    2ad0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad4:	78 85       	ldd	r23, Y+8	; 0x08
    2ad6:	89 85       	ldd	r24, Y+9	; 0x09
    2ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	40 e8       	ldi	r20, 0x80	; 128
    2ae0:	5f e3       	ldi	r21, 0x3F	; 63
    2ae2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ae6:	88 23       	and	r24, r24
    2ae8:	2c f4       	brge	.+10     	; 0x2af4 <LCD_Clear+0x6c>
		__ticks = 1;
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	9e 83       	std	Y+6, r25	; 0x06
    2af0:	8d 83       	std	Y+5, r24	; 0x05
    2af2:	3f c0       	rjmp	.+126    	; 0x2b72 <LCD_Clear+0xea>
	else if (__tmp > 65535)
    2af4:	6f 81       	ldd	r22, Y+7	; 0x07
    2af6:	78 85       	ldd	r23, Y+8	; 0x08
    2af8:	89 85       	ldd	r24, Y+9	; 0x09
    2afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	3f ef       	ldi	r19, 0xFF	; 255
    2b00:	4f e7       	ldi	r20, 0x7F	; 127
    2b02:	57 e4       	ldi	r21, 0x47	; 71
    2b04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b08:	18 16       	cp	r1, r24
    2b0a:	4c f5       	brge	.+82     	; 0x2b5e <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	40 e2       	ldi	r20, 0x20	; 32
    2b1a:	51 e4       	ldi	r21, 0x41	; 65
    2b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	bc 01       	movw	r22, r24
    2b26:	cd 01       	movw	r24, r26
    2b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	9e 83       	std	Y+6, r25	; 0x06
    2b32:	8d 83       	std	Y+5, r24	; 0x05
    2b34:	0f c0       	rjmp	.+30     	; 0x2b54 <LCD_Clear+0xcc>
    2b36:	88 ec       	ldi	r24, 0xC8	; 200
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	9c 83       	std	Y+4, r25	; 0x04
    2b3c:	8b 83       	std	Y+3, r24	; 0x03
    2b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b40:	9c 81       	ldd	r25, Y+4	; 0x04
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	f1 f7       	brne	.-4      	; 0x2b42 <LCD_Clear+0xba>
    2b46:	9c 83       	std	Y+4, r25	; 0x04
    2b48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	9e 83       	std	Y+6, r25	; 0x06
    2b52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b54:	8d 81       	ldd	r24, Y+5	; 0x05
    2b56:	9e 81       	ldd	r25, Y+6	; 0x06
    2b58:	00 97       	sbiw	r24, 0x00	; 0
    2b5a:	69 f7       	brne	.-38     	; 0x2b36 <LCD_Clear+0xae>
    2b5c:	14 c0       	rjmp	.+40     	; 0x2b86 <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b60:	78 85       	ldd	r23, Y+8	; 0x08
    2b62:	89 85       	ldd	r24, Y+9	; 0x09
    2b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	9e 83       	std	Y+6, r25	; 0x06
    2b70:	8d 83       	std	Y+5, r24	; 0x05
    2b72:	8d 81       	ldd	r24, Y+5	; 0x05
    2b74:	9e 81       	ldd	r25, Y+6	; 0x06
    2b76:	9a 83       	std	Y+2, r25	; 0x02
    2b78:	89 83       	std	Y+1, r24	; 0x01
    2b7a:	89 81       	ldd	r24, Y+1	; 0x01
    2b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	f1 f7       	brne	.-4      	; 0x2b7e <LCD_Clear+0xf6>
    2b82:	9a 83       	std	Y+2, r25	; 0x02
    2b84:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
    2b86:	80 e8       	ldi	r24, 0x80	; 128
    2b88:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LCD_Command>
}
    2b8c:	2e 96       	adiw	r28, 0x0e	; 14
    2b8e:	0f b6       	in	r0, 0x3f	; 63
    2b90:	f8 94       	cli
    2b92:	de bf       	out	0x3e, r29	; 62
    2b94:	0f be       	out	0x3f, r0	; 63
    2b96:	cd bf       	out	0x3d, r28	; 61
    2b98:	cf 91       	pop	r28
    2b9a:	df 91       	pop	r29
    2b9c:	08 95       	ret

00002b9e <LCD_CreateCustomCharacter>:

void LCD_CreateCustomCharacter(unsigned char *Pattern,const char cLocation)
{
    2b9e:	df 93       	push	r29
    2ba0:	cf 93       	push	r28
    2ba2:	00 d0       	rcall	.+0      	; 0x2ba4 <LCD_CreateCustomCharacter+0x6>
    2ba4:	00 d0       	rcall	.+0      	; 0x2ba6 <LCD_CreateCustomCharacter+0x8>
    2ba6:	0f 92       	push	r0
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	9c 83       	std	Y+4, r25	; 0x04
    2bae:	8b 83       	std	Y+3, r24	; 0x03
    2bb0:	6d 83       	std	Y+5, r22	; 0x05
	int iLoop=0;
    2bb2:	1a 82       	std	Y+2, r1	; 0x02
    2bb4:	19 82       	std	Y+1, r1	; 0x01

	LCD_Command(0x40+(cLocation*8)); //Send the Address of CGRAM
    2bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb8:	88 2f       	mov	r24, r24
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	08 96       	adiw	r24, 0x08	; 8
    2bbe:	88 0f       	add	r24, r24
    2bc0:	99 1f       	adc	r25, r25
    2bc2:	88 0f       	add	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	88 0f       	add	r24, r24
    2bc8:	99 1f       	adc	r25, r25
    2bca:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LCD_Command>
	for(iLoop=0;iLoop<8;iLoop++)
    2bce:	1a 82       	std	Y+2, r1	; 0x02
    2bd0:	19 82       	std	Y+1, r1	; 0x01
    2bd2:	0f c0       	rjmp	.+30     	; 0x2bf2 <LCD_CreateCustomCharacter+0x54>
	LCD_Char(Pattern[iLoop]); //Pass the bytes of pattern on LCD
    2bd4:	29 81       	ldd	r18, Y+1	; 0x01
    2bd6:	3a 81       	ldd	r19, Y+2	; 0x02
    2bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bda:	9c 81       	ldd	r25, Y+4	; 0x04
    2bdc:	fc 01       	movw	r30, r24
    2bde:	e2 0f       	add	r30, r18
    2be0:	f3 1f       	adc	r31, r19
    2be2:	80 81       	ld	r24, Z
    2be4:	0e 94 44 10 	call	0x2088	; 0x2088 <LCD_Char>
void LCD_CreateCustomCharacter(unsigned char *Pattern,const char cLocation)
{
	int iLoop=0;

	LCD_Command(0x40+(cLocation*8)); //Send the Address of CGRAM
	for(iLoop=0;iLoop<8;iLoop++)
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
    2bea:	9a 81       	ldd	r25, Y+2	; 0x02
    2bec:	01 96       	adiw	r24, 0x01	; 1
    2bee:	9a 83       	std	Y+2, r25	; 0x02
    2bf0:	89 83       	std	Y+1, r24	; 0x01
    2bf2:	89 81       	ldd	r24, Y+1	; 0x01
    2bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf6:	88 30       	cpi	r24, 0x08	; 8
    2bf8:	91 05       	cpc	r25, r1
    2bfa:	64 f3       	brlt	.-40     	; 0x2bd4 <LCD_CreateCustomCharacter+0x36>
	LCD_Char(Pattern[iLoop]); //Pass the bytes of pattern on LCD
}
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	cf 91       	pop	r28
    2c08:	df 91       	pop	r29
    2c0a:	08 95       	ret

00002c0c <__prologue_saves__>:
    2c0c:	2f 92       	push	r2
    2c0e:	3f 92       	push	r3
    2c10:	4f 92       	push	r4
    2c12:	5f 92       	push	r5
    2c14:	6f 92       	push	r6
    2c16:	7f 92       	push	r7
    2c18:	8f 92       	push	r8
    2c1a:	9f 92       	push	r9
    2c1c:	af 92       	push	r10
    2c1e:	bf 92       	push	r11
    2c20:	cf 92       	push	r12
    2c22:	df 92       	push	r13
    2c24:	ef 92       	push	r14
    2c26:	ff 92       	push	r15
    2c28:	0f 93       	push	r16
    2c2a:	1f 93       	push	r17
    2c2c:	cf 93       	push	r28
    2c2e:	df 93       	push	r29
    2c30:	cd b7       	in	r28, 0x3d	; 61
    2c32:	de b7       	in	r29, 0x3e	; 62
    2c34:	ca 1b       	sub	r28, r26
    2c36:	db 0b       	sbc	r29, r27
    2c38:	0f b6       	in	r0, 0x3f	; 63
    2c3a:	f8 94       	cli
    2c3c:	de bf       	out	0x3e, r29	; 62
    2c3e:	0f be       	out	0x3f, r0	; 63
    2c40:	cd bf       	out	0x3d, r28	; 61
    2c42:	09 94       	ijmp

00002c44 <__epilogue_restores__>:
    2c44:	2a 88       	ldd	r2, Y+18	; 0x12
    2c46:	39 88       	ldd	r3, Y+17	; 0x11
    2c48:	48 88       	ldd	r4, Y+16	; 0x10
    2c4a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c4c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c4e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c50:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c52:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c54:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c56:	b9 84       	ldd	r11, Y+9	; 0x09
    2c58:	c8 84       	ldd	r12, Y+8	; 0x08
    2c5a:	df 80       	ldd	r13, Y+7	; 0x07
    2c5c:	ee 80       	ldd	r14, Y+6	; 0x06
    2c5e:	fd 80       	ldd	r15, Y+5	; 0x05
    2c60:	0c 81       	ldd	r16, Y+4	; 0x04
    2c62:	1b 81       	ldd	r17, Y+3	; 0x03
    2c64:	aa 81       	ldd	r26, Y+2	; 0x02
    2c66:	b9 81       	ldd	r27, Y+1	; 0x01
    2c68:	ce 0f       	add	r28, r30
    2c6a:	d1 1d       	adc	r29, r1
    2c6c:	0f b6       	in	r0, 0x3f	; 63
    2c6e:	f8 94       	cli
    2c70:	de bf       	out	0x3e, r29	; 62
    2c72:	0f be       	out	0x3f, r0	; 63
    2c74:	cd bf       	out	0x3d, r28	; 61
    2c76:	ed 01       	movw	r28, r26
    2c78:	08 95       	ret

00002c7a <_exit>:
    2c7a:	f8 94       	cli

00002c7c <__stop_program>:
    2c7c:	ff cf       	rjmp	.-2      	; 0x2c7c <__stop_program>
