
lcd_4bit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  000021e8  0000225c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001470  00000000  00000000  00002298  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000894  00000000  00000000  00003708  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00003f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  000040fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  0000428b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  000062d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  000073d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00008354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  000084d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00008796  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009024  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <main>
      7a:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ac e7       	ldi	r26, 0x7C	; 124
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8c e7       	ldi	r24, 0x7C	; 124
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c3 10 	jmp	0x2186	; 0x2186 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6c e7       	ldi	r22, 0x7C	; 124
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 df 10 	jmp	0x21be	; 0x21be <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 cb 10 	jmp	0x2196	; 0x2196 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 e7 10 	jmp	0x21ce	; 0x21ce <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <LCD_Command>:
#include <util/delay.h>			/* Include Delay header file */
#include "lcd.h"


void LCD_Command( unsigned char cmnd )
{
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	c7 55       	subi	r28, 0x57	; 87
     c9c:	d0 40       	sbci	r29, 0x00	; 0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
     ca8:	fe 01       	movw	r30, r28
     caa:	e9 5a       	subi	r30, 0xA9	; 169
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	80 83       	st	Z, r24
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
     cb0:	a5 e3       	ldi	r26, 0x35	; 53
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e5 e3       	ldi	r30, 0x35	; 53
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	98 2f       	mov	r25, r24
     cbc:	9f 70       	andi	r25, 0x0F	; 15
     cbe:	fe 01       	movw	r30, r28
     cc0:	e9 5a       	subi	r30, 0xA9	; 169
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	80 81       	ld	r24, Z
     cc6:	80 7f       	andi	r24, 0xF0	; 240
     cc8:	89 2b       	or	r24, r25
     cca:	8c 93       	st	X, r24
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
     ccc:	a5 e3       	ldi	r26, 0x35	; 53
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	e5 e3       	ldi	r30, 0x35	; 53
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	8e 7f       	andi	r24, 0xFE	; 254
     cd8:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);		/* Enable pulse */
     cda:	a5 e3       	ldi	r26, 0x35	; 53
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e5 e3       	ldi	r30, 0x35	; 53
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	82 60       	ori	r24, 0x02	; 2
     ce6:	8c 93       	st	X, r24
     ce8:	fe 01       	movw	r30, r28
     cea:	ed 5a       	subi	r30, 0xAD	; 173
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	a0 e8       	ldi	r26, 0x80	; 128
     cf4:	bf e3       	ldi	r27, 0x3F	; 63
     cf6:	80 83       	st	Z, r24
     cf8:	91 83       	std	Z+1, r25	; 0x01
     cfa:	a2 83       	std	Z+2, r26	; 0x02
     cfc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     cfe:	8e 01       	movw	r16, r28
     d00:	01 5b       	subi	r16, 0xB1	; 177
     d02:	1f 4f       	sbci	r17, 0xFF	; 255
     d04:	fe 01       	movw	r30, r28
     d06:	ed 5a       	subi	r30, 0xAD	; 173
     d08:	ff 4f       	sbci	r31, 0xFF	; 255
     d0a:	60 81       	ld	r22, Z
     d0c:	71 81       	ldd	r23, Z+1	; 0x01
     d0e:	82 81       	ldd	r24, Z+2	; 0x02
     d10:	93 81       	ldd	r25, Z+3	; 0x03
     d12:	2b ea       	ldi	r18, 0xAB	; 171
     d14:	3a ea       	ldi	r19, 0xAA	; 170
     d16:	4a e2       	ldi	r20, 0x2A	; 42
     d18:	50 e4       	ldi	r21, 0x40	; 64
     d1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	f8 01       	movw	r30, r16
     d24:	80 83       	st	Z, r24
     d26:	91 83       	std	Z+1, r25	; 0x01
     d28:	a2 83       	std	Z+2, r26	; 0x02
     d2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d2c:	fe 01       	movw	r30, r28
     d2e:	e1 5b       	subi	r30, 0xB1	; 177
     d30:	ff 4f       	sbci	r31, 0xFF	; 255
     d32:	60 81       	ld	r22, Z
     d34:	71 81       	ldd	r23, Z+1	; 0x01
     d36:	82 81       	ldd	r24, Z+2	; 0x02
     d38:	93 81       	ldd	r25, Z+3	; 0x03
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	40 e8       	ldi	r20, 0x80	; 128
     d40:	5f e3       	ldi	r21, 0x3F	; 63
     d42:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     d46:	88 23       	and	r24, r24
     d48:	34 f4       	brge	.+12     	; 0xd56 <LCD_Command+0xc8>
		__ticks = 1;
     d4a:	fe 01       	movw	r30, r28
     d4c:	e2 5b       	subi	r30, 0xB2	; 178
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	80 83       	st	Z, r24
     d54:	e0 c0       	rjmp	.+448    	; 0xf16 <LCD_Command+0x288>
	else if (__tmp > 255)
     d56:	fe 01       	movw	r30, r28
     d58:	e1 5b       	subi	r30, 0xB1	; 177
     d5a:	ff 4f       	sbci	r31, 0xFF	; 255
     d5c:	60 81       	ld	r22, Z
     d5e:	71 81       	ldd	r23, Z+1	; 0x01
     d60:	82 81       	ldd	r24, Z+2	; 0x02
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	4f e7       	ldi	r20, 0x7F	; 127
     d6a:	53 e4       	ldi	r21, 0x43	; 67
     d6c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     d70:	18 16       	cp	r1, r24
     d72:	0c f0       	brlt	.+2      	; 0xd76 <LCD_Command+0xe8>
     d74:	c0 c0       	rjmp	.+384    	; 0xef6 <LCD_Command+0x268>
	{
		_delay_ms(__us / 1000.0);
     d76:	fe 01       	movw	r30, r28
     d78:	ed 5a       	subi	r30, 0xAD	; 173
     d7a:	ff 4f       	sbci	r31, 0xFF	; 255
     d7c:	60 81       	ld	r22, Z
     d7e:	71 81       	ldd	r23, Z+1	; 0x01
     d80:	82 81       	ldd	r24, Z+2	; 0x02
     d82:	93 81       	ldd	r25, Z+3	; 0x03
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	4a e7       	ldi	r20, 0x7A	; 122
     d8a:	54 e4       	ldi	r21, 0x44	; 68
     d8c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	fe 01       	movw	r30, r28
     d96:	e6 5b       	subi	r30, 0xB6	; 182
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	80 83       	st	Z, r24
     d9c:	91 83       	std	Z+1, r25	; 0x01
     d9e:	a2 83       	std	Z+2, r26	; 0x02
     da0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     da2:	8e 01       	movw	r16, r28
     da4:	0a 5b       	subi	r16, 0xBA	; 186
     da6:	1f 4f       	sbci	r17, 0xFF	; 255
     da8:	fe 01       	movw	r30, r28
     daa:	e6 5b       	subi	r30, 0xB6	; 182
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	60 81       	ld	r22, Z
     db0:	71 81       	ldd	r23, Z+1	; 0x01
     db2:	82 81       	ldd	r24, Z+2	; 0x02
     db4:	93 81       	ldd	r25, Z+3	; 0x03
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	4a ef       	ldi	r20, 0xFA	; 250
     dbc:	54 e4       	ldi	r21, 0x44	; 68
     dbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	f8 01       	movw	r30, r16
     dc8:	80 83       	st	Z, r24
     dca:	91 83       	std	Z+1, r25	; 0x01
     dcc:	a2 83       	std	Z+2, r26	; 0x02
     dce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dd0:	fe 01       	movw	r30, r28
     dd2:	ea 5b       	subi	r30, 0xBA	; 186
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	60 81       	ld	r22, Z
     dd8:	71 81       	ldd	r23, Z+1	; 0x01
     dda:	82 81       	ldd	r24, Z+2	; 0x02
     ddc:	93 81       	ldd	r25, Z+3	; 0x03
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	40 e8       	ldi	r20, 0x80	; 128
     de4:	5f e3       	ldi	r21, 0x3F	; 63
     de6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     dea:	88 23       	and	r24, r24
     dec:	44 f4       	brge	.+16     	; 0xdfe <LCD_Command+0x170>
		__ticks = 1;
     dee:	fe 01       	movw	r30, r28
     df0:	ec 5b       	subi	r30, 0xBC	; 188
     df2:	ff 4f       	sbci	r31, 0xFF	; 255
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	91 83       	std	Z+1, r25	; 0x01
     dfa:	80 83       	st	Z, r24
     dfc:	64 c0       	rjmp	.+200    	; 0xec6 <LCD_Command+0x238>
	else if (__tmp > 65535)
     dfe:	fe 01       	movw	r30, r28
     e00:	ea 5b       	subi	r30, 0xBA	; 186
     e02:	ff 4f       	sbci	r31, 0xFF	; 255
     e04:	60 81       	ld	r22, Z
     e06:	71 81       	ldd	r23, Z+1	; 0x01
     e08:	82 81       	ldd	r24, Z+2	; 0x02
     e0a:	93 81       	ldd	r25, Z+3	; 0x03
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	3f ef       	ldi	r19, 0xFF	; 255
     e10:	4f e7       	ldi	r20, 0x7F	; 127
     e12:	57 e4       	ldi	r21, 0x47	; 71
     e14:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e18:	18 16       	cp	r1, r24
     e1a:	0c f0       	brlt	.+2      	; 0xe1e <LCD_Command+0x190>
     e1c:	43 c0       	rjmp	.+134    	; 0xea4 <LCD_Command+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e1e:	fe 01       	movw	r30, r28
     e20:	e6 5b       	subi	r30, 0xB6	; 182
     e22:	ff 4f       	sbci	r31, 0xFF	; 255
     e24:	60 81       	ld	r22, Z
     e26:	71 81       	ldd	r23, Z+1	; 0x01
     e28:	82 81       	ldd	r24, Z+2	; 0x02
     e2a:	93 81       	ldd	r25, Z+3	; 0x03
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	40 e2       	ldi	r20, 0x20	; 32
     e32:	51 e4       	ldi	r21, 0x41	; 65
     e34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	8e 01       	movw	r16, r28
     e3e:	0c 5b       	subi	r16, 0xBC	; 188
     e40:	1f 4f       	sbci	r17, 0xFF	; 255
     e42:	bc 01       	movw	r22, r24
     e44:	cd 01       	movw	r24, r26
     e46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e4a:	dc 01       	movw	r26, r24
     e4c:	cb 01       	movw	r24, r22
     e4e:	f8 01       	movw	r30, r16
     e50:	91 83       	std	Z+1, r25	; 0x01
     e52:	80 83       	st	Z, r24
     e54:	1f c0       	rjmp	.+62     	; 0xe94 <LCD_Command+0x206>
     e56:	fe 01       	movw	r30, r28
     e58:	ee 5b       	subi	r30, 0xBE	; 190
     e5a:	ff 4f       	sbci	r31, 0xFF	; 255
     e5c:	88 ec       	ldi	r24, 0xC8	; 200
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	91 83       	std	Z+1, r25	; 0x01
     e62:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e64:	fe 01       	movw	r30, r28
     e66:	ee 5b       	subi	r30, 0xBE	; 190
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	80 81       	ld	r24, Z
     e6c:	91 81       	ldd	r25, Z+1	; 0x01
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	f1 f7       	brne	.-4      	; 0xe6e <LCD_Command+0x1e0>
     e72:	fe 01       	movw	r30, r28
     e74:	ee 5b       	subi	r30, 0xBE	; 190
     e76:	ff 4f       	sbci	r31, 0xFF	; 255
     e78:	91 83       	std	Z+1, r25	; 0x01
     e7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7c:	de 01       	movw	r26, r28
     e7e:	ac 5b       	subi	r26, 0xBC	; 188
     e80:	bf 4f       	sbci	r27, 0xFF	; 255
     e82:	fe 01       	movw	r30, r28
     e84:	ec 5b       	subi	r30, 0xBC	; 188
     e86:	ff 4f       	sbci	r31, 0xFF	; 255
     e88:	80 81       	ld	r24, Z
     e8a:	91 81       	ldd	r25, Z+1	; 0x01
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	11 96       	adiw	r26, 0x01	; 1
     e90:	9c 93       	st	X, r25
     e92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e94:	fe 01       	movw	r30, r28
     e96:	ec 5b       	subi	r30, 0xBC	; 188
     e98:	ff 4f       	sbci	r31, 0xFF	; 255
     e9a:	80 81       	ld	r24, Z
     e9c:	91 81       	ldd	r25, Z+1	; 0x01
     e9e:	00 97       	sbiw	r24, 0x00	; 0
     ea0:	d1 f6       	brne	.-76     	; 0xe56 <LCD_Command+0x1c8>
     ea2:	42 c0       	rjmp	.+132    	; 0xf28 <LCD_Command+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea4:	8e 01       	movw	r16, r28
     ea6:	0c 5b       	subi	r16, 0xBC	; 188
     ea8:	1f 4f       	sbci	r17, 0xFF	; 255
     eaa:	fe 01       	movw	r30, r28
     eac:	ea 5b       	subi	r30, 0xBA	; 186
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	60 81       	ld	r22, Z
     eb2:	71 81       	ldd	r23, Z+1	; 0x01
     eb4:	82 81       	ldd	r24, Z+2	; 0x02
     eb6:	93 81       	ldd	r25, Z+3	; 0x03
     eb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	f8 01       	movw	r30, r16
     ec2:	91 83       	std	Z+1, r25	; 0x01
     ec4:	80 83       	st	Z, r24
     ec6:	de 01       	movw	r26, r28
     ec8:	a0 5c       	subi	r26, 0xC0	; 192
     eca:	bf 4f       	sbci	r27, 0xFF	; 255
     ecc:	fe 01       	movw	r30, r28
     ece:	ec 5b       	subi	r30, 0xBC	; 188
     ed0:	ff 4f       	sbci	r31, 0xFF	; 255
     ed2:	80 81       	ld	r24, Z
     ed4:	91 81       	ldd	r25, Z+1	; 0x01
     ed6:	11 96       	adiw	r26, 0x01	; 1
     ed8:	9c 93       	st	X, r25
     eda:	8e 93       	st	-X, r24
     edc:	fe 01       	movw	r30, r28
     ede:	e0 5c       	subi	r30, 0xC0	; 192
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	80 81       	ld	r24, Z
     ee4:	91 81       	ldd	r25, Z+1	; 0x01
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <LCD_Command+0x258>
     eea:	fe 01       	movw	r30, r28
     eec:	e0 5c       	subi	r30, 0xC0	; 192
     eee:	ff 4f       	sbci	r31, 0xFF	; 255
     ef0:	91 83       	std	Z+1, r25	; 0x01
     ef2:	80 83       	st	Z, r24
     ef4:	19 c0       	rjmp	.+50     	; 0xf28 <LCD_Command+0x29a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ef6:	8e 01       	movw	r16, r28
     ef8:	02 5b       	subi	r16, 0xB2	; 178
     efa:	1f 4f       	sbci	r17, 0xFF	; 255
     efc:	fe 01       	movw	r30, r28
     efe:	e1 5b       	subi	r30, 0xB1	; 177
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	60 81       	ld	r22, Z
     f04:	71 81       	ldd	r23, Z+1	; 0x01
     f06:	82 81       	ldd	r24, Z+2	; 0x02
     f08:	93 81       	ldd	r25, Z+3	; 0x03
     f0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	f8 01       	movw	r30, r16
     f14:	80 83       	st	Z, r24
     f16:	fe 01       	movw	r30, r28
     f18:	e2 5b       	subi	r30, 0xB2	; 178
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	80 81       	ld	r24, Z
     f1e:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f20:	8f ad       	ldd	r24, Y+63	; 0x3f
     f22:	8a 95       	dec	r24
     f24:	f1 f7       	brne	.-4      	; 0xf22 <LCD_Command+0x294>
     f26:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     f28:	a5 e3       	ldi	r26, 0x35	; 53
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e5 e3       	ldi	r30, 0x35	; 53
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	8d 7f       	andi	r24, 0xFD	; 253
     f34:	8c 93       	st	X, r24
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	a8 e4       	ldi	r26, 0x48	; 72
     f3c:	b3 e4       	ldi	r27, 0x43	; 67
     f3e:	8b af       	std	Y+59, r24	; 0x3b
     f40:	9c af       	std	Y+60, r25	; 0x3c
     f42:	ad af       	std	Y+61, r26	; 0x3d
     f44:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     f46:	6b ad       	ldd	r22, Y+59	; 0x3b
     f48:	7c ad       	ldd	r23, Y+60	; 0x3c
     f4a:	8d ad       	ldd	r24, Y+61	; 0x3d
     f4c:	9e ad       	ldd	r25, Y+62	; 0x3e
     f4e:	2b ea       	ldi	r18, 0xAB	; 171
     f50:	3a ea       	ldi	r19, 0xAA	; 170
     f52:	4a e2       	ldi	r20, 0x2A	; 42
     f54:	50 e4       	ldi	r21, 0x40	; 64
     f56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	8f ab       	std	Y+55, r24	; 0x37
     f60:	98 af       	std	Y+56, r25	; 0x38
     f62:	a9 af       	std	Y+57, r26	; 0x39
     f64:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
     f66:	6f a9       	ldd	r22, Y+55	; 0x37
     f68:	78 ad       	ldd	r23, Y+56	; 0x38
     f6a:	89 ad       	ldd	r24, Y+57	; 0x39
     f6c:	9a ad       	ldd	r25, Y+58	; 0x3a
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e8       	ldi	r20, 0x80	; 128
     f74:	5f e3       	ldi	r21, 0x3F	; 63
     f76:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f7a:	88 23       	and	r24, r24
     f7c:	1c f4       	brge	.+6      	; 0xf84 <LCD_Command+0x2f6>
		__ticks = 1;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	8e ab       	std	Y+54, r24	; 0x36
     f82:	91 c0       	rjmp	.+290    	; 0x10a6 <LCD_Command+0x418>
	else if (__tmp > 255)
     f84:	6f a9       	ldd	r22, Y+55	; 0x37
     f86:	78 ad       	ldd	r23, Y+56	; 0x38
     f88:	89 ad       	ldd	r24, Y+57	; 0x39
     f8a:	9a ad       	ldd	r25, Y+58	; 0x3a
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	4f e7       	ldi	r20, 0x7F	; 127
     f92:	53 e4       	ldi	r21, 0x43	; 67
     f94:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f98:	18 16       	cp	r1, r24
     f9a:	0c f0       	brlt	.+2      	; 0xf9e <LCD_Command+0x310>
     f9c:	7b c0       	rjmp	.+246    	; 0x1094 <LCD_Command+0x406>
	{
		_delay_ms(__us / 1000.0);
     f9e:	6b ad       	ldd	r22, Y+59	; 0x3b
     fa0:	7c ad       	ldd	r23, Y+60	; 0x3c
     fa2:	8d ad       	ldd	r24, Y+61	; 0x3d
     fa4:	9e ad       	ldd	r25, Y+62	; 0x3e
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	4a e7       	ldi	r20, 0x7A	; 122
     fac:	54 e4       	ldi	r21, 0x44	; 68
     fae:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	8a ab       	std	Y+50, r24	; 0x32
     fb8:	9b ab       	std	Y+51, r25	; 0x33
     fba:	ac ab       	std	Y+52, r26	; 0x34
     fbc:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fbe:	6a a9       	ldd	r22, Y+50	; 0x32
     fc0:	7b a9       	ldd	r23, Y+51	; 0x33
     fc2:	8c a9       	ldd	r24, Y+52	; 0x34
     fc4:	9d a9       	ldd	r25, Y+53	; 0x35
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	4a ef       	ldi	r20, 0xFA	; 250
     fcc:	54 e4       	ldi	r21, 0x44	; 68
     fce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	8e a7       	std	Y+46, r24	; 0x2e
     fd8:	9f a7       	std	Y+47, r25	; 0x2f
     fda:	a8 ab       	std	Y+48, r26	; 0x30
     fdc:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
     fde:	6e a5       	ldd	r22, Y+46	; 0x2e
     fe0:	7f a5       	ldd	r23, Y+47	; 0x2f
     fe2:	88 a9       	ldd	r24, Y+48	; 0x30
     fe4:	99 a9       	ldd	r25, Y+49	; 0x31
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e8       	ldi	r20, 0x80	; 128
     fec:	5f e3       	ldi	r21, 0x3F	; 63
     fee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     ff2:	88 23       	and	r24, r24
     ff4:	2c f4       	brge	.+10     	; 0x1000 <LCD_Command+0x372>
		__ticks = 1;
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	9d a7       	std	Y+45, r25	; 0x2d
     ffc:	8c a7       	std	Y+44, r24	; 0x2c
     ffe:	3f c0       	rjmp	.+126    	; 0x107e <LCD_Command+0x3f0>
	else if (__tmp > 65535)
    1000:	6e a5       	ldd	r22, Y+46	; 0x2e
    1002:	7f a5       	ldd	r23, Y+47	; 0x2f
    1004:	88 a9       	ldd	r24, Y+48	; 0x30
    1006:	99 a9       	ldd	r25, Y+49	; 0x31
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	3f ef       	ldi	r19, 0xFF	; 255
    100c:	4f e7       	ldi	r20, 0x7F	; 127
    100e:	57 e4       	ldi	r21, 0x47	; 71
    1010:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1014:	18 16       	cp	r1, r24
    1016:	4c f5       	brge	.+82     	; 0x106a <LCD_Command+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1018:	6a a9       	ldd	r22, Y+50	; 0x32
    101a:	7b a9       	ldd	r23, Y+51	; 0x33
    101c:	8c a9       	ldd	r24, Y+52	; 0x34
    101e:	9d a9       	ldd	r25, Y+53	; 0x35
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e2       	ldi	r20, 0x20	; 32
    1026:	51 e4       	ldi	r21, 0x41	; 65
    1028:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	bc 01       	movw	r22, r24
    1032:	cd 01       	movw	r24, r26
    1034:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	9d a7       	std	Y+45, r25	; 0x2d
    103e:	8c a7       	std	Y+44, r24	; 0x2c
    1040:	0f c0       	rjmp	.+30     	; 0x1060 <LCD_Command+0x3d2>
    1042:	88 ec       	ldi	r24, 0xC8	; 200
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	9b a7       	std	Y+43, r25	; 0x2b
    1048:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    104a:	8a a5       	ldd	r24, Y+42	; 0x2a
    104c:	9b a5       	ldd	r25, Y+43	; 0x2b
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	f1 f7       	brne	.-4      	; 0x104e <LCD_Command+0x3c0>
    1052:	9b a7       	std	Y+43, r25	; 0x2b
    1054:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1056:	8c a5       	ldd	r24, Y+44	; 0x2c
    1058:	9d a5       	ldd	r25, Y+45	; 0x2d
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	9d a7       	std	Y+45, r25	; 0x2d
    105e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1060:	8c a5       	ldd	r24, Y+44	; 0x2c
    1062:	9d a5       	ldd	r25, Y+45	; 0x2d
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	69 f7       	brne	.-38     	; 0x1042 <LCD_Command+0x3b4>
    1068:	24 c0       	rjmp	.+72     	; 0x10b2 <LCD_Command+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    106a:	6e a5       	ldd	r22, Y+46	; 0x2e
    106c:	7f a5       	ldd	r23, Y+47	; 0x2f
    106e:	88 a9       	ldd	r24, Y+48	; 0x30
    1070:	99 a9       	ldd	r25, Y+49	; 0x31
    1072:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	9d a7       	std	Y+45, r25	; 0x2d
    107c:	8c a7       	std	Y+44, r24	; 0x2c
    107e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1080:	9d a5       	ldd	r25, Y+45	; 0x2d
    1082:	99 a7       	std	Y+41, r25	; 0x29
    1084:	88 a7       	std	Y+40, r24	; 0x28
    1086:	88 a5       	ldd	r24, Y+40	; 0x28
    1088:	99 a5       	ldd	r25, Y+41	; 0x29
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <LCD_Command+0x3fc>
    108e:	99 a7       	std	Y+41, r25	; 0x29
    1090:	88 a7       	std	Y+40, r24	; 0x28
    1092:	0f c0       	rjmp	.+30     	; 0x10b2 <LCD_Command+0x424>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1094:	6f a9       	ldd	r22, Y+55	; 0x37
    1096:	78 ad       	ldd	r23, Y+56	; 0x38
    1098:	89 ad       	ldd	r24, Y+57	; 0x39
    109a:	9a ad       	ldd	r25, Y+58	; 0x3a
    109c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	8e ab       	std	Y+54, r24	; 0x36
    10a6:	8e a9       	ldd	r24, Y+54	; 0x36
    10a8:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    10aa:	8f a1       	ldd	r24, Y+39	; 0x27
    10ac:	8a 95       	dec	r24
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <LCD_Command+0x41e>
    10b0:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
    10b2:	a5 e3       	ldi	r26, 0x35	; 53
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e5 e3       	ldi	r30, 0x35	; 53
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	28 2f       	mov	r18, r24
    10be:	2f 70       	andi	r18, 0x0F	; 15
    10c0:	fe 01       	movw	r30, r28
    10c2:	e9 5a       	subi	r30, 0xA9	; 169
    10c4:	ff 4f       	sbci	r31, 0xFF	; 255
    10c6:	80 81       	ld	r24, Z
    10c8:	88 2f       	mov	r24, r24
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	82 95       	swap	r24
    10ce:	92 95       	swap	r25
    10d0:	90 7f       	andi	r25, 0xF0	; 240
    10d2:	98 27       	eor	r25, r24
    10d4:	80 7f       	andi	r24, 0xF0	; 240
    10d6:	98 27       	eor	r25, r24
    10d8:	82 2b       	or	r24, r18
    10da:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);
    10dc:	a5 e3       	ldi	r26, 0x35	; 53
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e5 e3       	ldi	r30, 0x35	; 53
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	82 60       	ori	r24, 0x02	; 2
    10e8:	8c 93       	st	X, r24
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	a0 e8       	ldi	r26, 0x80	; 128
    10f0:	bf e3       	ldi	r27, 0x3F	; 63
    10f2:	8b a3       	std	Y+35, r24	; 0x23
    10f4:	9c a3       	std	Y+36, r25	; 0x24
    10f6:	ad a3       	std	Y+37, r26	; 0x25
    10f8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    10fa:	6b a1       	ldd	r22, Y+35	; 0x23
    10fc:	7c a1       	ldd	r23, Y+36	; 0x24
    10fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1100:	9e a1       	ldd	r25, Y+38	; 0x26
    1102:	2b ea       	ldi	r18, 0xAB	; 171
    1104:	3a ea       	ldi	r19, 0xAA	; 170
    1106:	4a e2       	ldi	r20, 0x2A	; 42
    1108:	50 e4       	ldi	r21, 0x40	; 64
    110a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	8f 8f       	std	Y+31, r24	; 0x1f
    1114:	98 a3       	std	Y+32, r25	; 0x20
    1116:	a9 a3       	std	Y+33, r26	; 0x21
    1118:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    111a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    111c:	78 a1       	ldd	r23, Y+32	; 0x20
    111e:	89 a1       	ldd	r24, Y+33	; 0x21
    1120:	9a a1       	ldd	r25, Y+34	; 0x22
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e8       	ldi	r20, 0x80	; 128
    1128:	5f e3       	ldi	r21, 0x3F	; 63
    112a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    112e:	88 23       	and	r24, r24
    1130:	1c f4       	brge	.+6      	; 0x1138 <LCD_Command+0x4aa>
		__ticks = 1;
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	8e 8f       	std	Y+30, r24	; 0x1e
    1136:	91 c0       	rjmp	.+290    	; 0x125a <LCD_Command+0x5cc>
	else if (__tmp > 255)
    1138:	6f 8d       	ldd	r22, Y+31	; 0x1f
    113a:	78 a1       	ldd	r23, Y+32	; 0x20
    113c:	89 a1       	ldd	r24, Y+33	; 0x21
    113e:	9a a1       	ldd	r25, Y+34	; 0x22
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	4f e7       	ldi	r20, 0x7F	; 127
    1146:	53 e4       	ldi	r21, 0x43	; 67
    1148:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    114c:	18 16       	cp	r1, r24
    114e:	0c f0       	brlt	.+2      	; 0x1152 <LCD_Command+0x4c4>
    1150:	7b c0       	rjmp	.+246    	; 0x1248 <LCD_Command+0x5ba>
	{
		_delay_ms(__us / 1000.0);
    1152:	6b a1       	ldd	r22, Y+35	; 0x23
    1154:	7c a1       	ldd	r23, Y+36	; 0x24
    1156:	8d a1       	ldd	r24, Y+37	; 0x25
    1158:	9e a1       	ldd	r25, Y+38	; 0x26
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	4a e7       	ldi	r20, 0x7A	; 122
    1160:	54 e4       	ldi	r21, 0x44	; 68
    1162:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	8a 8f       	std	Y+26, r24	; 0x1a
    116c:	9b 8f       	std	Y+27, r25	; 0x1b
    116e:	ac 8f       	std	Y+28, r26	; 0x1c
    1170:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1172:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1174:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1176:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1178:	9d 8d       	ldd	r25, Y+29	; 0x1d
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	4a ef       	ldi	r20, 0xFA	; 250
    1180:	54 e4       	ldi	r21, 0x44	; 68
    1182:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	8e 8b       	std	Y+22, r24	; 0x16
    118c:	9f 8b       	std	Y+23, r25	; 0x17
    118e:	a8 8f       	std	Y+24, r26	; 0x18
    1190:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1192:	6e 89       	ldd	r22, Y+22	; 0x16
    1194:	7f 89       	ldd	r23, Y+23	; 0x17
    1196:	88 8d       	ldd	r24, Y+24	; 0x18
    1198:	99 8d       	ldd	r25, Y+25	; 0x19
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	40 e8       	ldi	r20, 0x80	; 128
    11a0:	5f e3       	ldi	r21, 0x3F	; 63
    11a2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    11a6:	88 23       	and	r24, r24
    11a8:	2c f4       	brge	.+10     	; 0x11b4 <LCD_Command+0x526>
		__ticks = 1;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	9d 8b       	std	Y+21, r25	; 0x15
    11b0:	8c 8b       	std	Y+20, r24	; 0x14
    11b2:	3f c0       	rjmp	.+126    	; 0x1232 <LCD_Command+0x5a4>
	else if (__tmp > 65535)
    11b4:	6e 89       	ldd	r22, Y+22	; 0x16
    11b6:	7f 89       	ldd	r23, Y+23	; 0x17
    11b8:	88 8d       	ldd	r24, Y+24	; 0x18
    11ba:	99 8d       	ldd	r25, Y+25	; 0x19
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	3f ef       	ldi	r19, 0xFF	; 255
    11c0:	4f e7       	ldi	r20, 0x7F	; 127
    11c2:	57 e4       	ldi	r21, 0x47	; 71
    11c4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    11c8:	18 16       	cp	r1, r24
    11ca:	4c f5       	brge	.+82     	; 0x121e <LCD_Command+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11cc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    11ce:	7b 8d       	ldd	r23, Y+27	; 0x1b
    11d0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    11d2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	40 e2       	ldi	r20, 0x20	; 32
    11da:	51 e4       	ldi	r21, 0x41	; 65
    11dc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	bc 01       	movw	r22, r24
    11e6:	cd 01       	movw	r24, r26
    11e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	9d 8b       	std	Y+21, r25	; 0x15
    11f2:	8c 8b       	std	Y+20, r24	; 0x14
    11f4:	0f c0       	rjmp	.+30     	; 0x1214 <LCD_Command+0x586>
    11f6:	88 ec       	ldi	r24, 0xC8	; 200
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	9b 8b       	std	Y+19, r25	; 0x13
    11fc:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11fe:	8a 89       	ldd	r24, Y+18	; 0x12
    1200:	9b 89       	ldd	r25, Y+19	; 0x13
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	f1 f7       	brne	.-4      	; 0x1202 <LCD_Command+0x574>
    1206:	9b 8b       	std	Y+19, r25	; 0x13
    1208:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    120a:	8c 89       	ldd	r24, Y+20	; 0x14
    120c:	9d 89       	ldd	r25, Y+21	; 0x15
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	9d 8b       	std	Y+21, r25	; 0x15
    1212:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1214:	8c 89       	ldd	r24, Y+20	; 0x14
    1216:	9d 89       	ldd	r25, Y+21	; 0x15
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	69 f7       	brne	.-38     	; 0x11f6 <LCD_Command+0x568>
    121c:	24 c0       	rjmp	.+72     	; 0x1266 <LCD_Command+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    121e:	6e 89       	ldd	r22, Y+22	; 0x16
    1220:	7f 89       	ldd	r23, Y+23	; 0x17
    1222:	88 8d       	ldd	r24, Y+24	; 0x18
    1224:	99 8d       	ldd	r25, Y+25	; 0x19
    1226:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	9d 8b       	std	Y+21, r25	; 0x15
    1230:	8c 8b       	std	Y+20, r24	; 0x14
    1232:	8c 89       	ldd	r24, Y+20	; 0x14
    1234:	9d 89       	ldd	r25, Y+21	; 0x15
    1236:	99 8b       	std	Y+17, r25	; 0x11
    1238:	88 8b       	std	Y+16, r24	; 0x10
    123a:	88 89       	ldd	r24, Y+16	; 0x10
    123c:	99 89       	ldd	r25, Y+17	; 0x11
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	f1 f7       	brne	.-4      	; 0x123e <LCD_Command+0x5b0>
    1242:	99 8b       	std	Y+17, r25	; 0x11
    1244:	88 8b       	std	Y+16, r24	; 0x10
    1246:	0f c0       	rjmp	.+30     	; 0x1266 <LCD_Command+0x5d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1248:	6f 8d       	ldd	r22, Y+31	; 0x1f
    124a:	78 a1       	ldd	r23, Y+32	; 0x20
    124c:	89 a1       	ldd	r24, Y+33	; 0x21
    124e:	9a a1       	ldd	r25, Y+34	; 0x22
    1250:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	8e 8f       	std	Y+30, r24	; 0x1e
    125a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    125c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    125e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1260:	8a 95       	dec	r24
    1262:	f1 f7       	brne	.-4      	; 0x1260 <LCD_Command+0x5d2>
    1264:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    1266:	a5 e3       	ldi	r26, 0x35	; 53
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e5 e3       	ldi	r30, 0x35	; 53
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	8d 7f       	andi	r24, 0xFD	; 253
    1272:	8c 93       	st	X, r24
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	a0 e0       	ldi	r26, 0x00	; 0
    127a:	b0 e4       	ldi	r27, 0x40	; 64
    127c:	8b 87       	std	Y+11, r24	; 0x0b
    127e:	9c 87       	std	Y+12, r25	; 0x0c
    1280:	ad 87       	std	Y+13, r26	; 0x0d
    1282:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1284:	6b 85       	ldd	r22, Y+11	; 0x0b
    1286:	7c 85       	ldd	r23, Y+12	; 0x0c
    1288:	8d 85       	ldd	r24, Y+13	; 0x0d
    128a:	9e 85       	ldd	r25, Y+14	; 0x0e
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	4a ef       	ldi	r20, 0xFA	; 250
    1292:	54 e4       	ldi	r21, 0x44	; 68
    1294:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1298:	dc 01       	movw	r26, r24
    129a:	cb 01       	movw	r24, r22
    129c:	8f 83       	std	Y+7, r24	; 0x07
    129e:	98 87       	std	Y+8, r25	; 0x08
    12a0:	a9 87       	std	Y+9, r26	; 0x09
    12a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12a4:	6f 81       	ldd	r22, Y+7	; 0x07
    12a6:	78 85       	ldd	r23, Y+8	; 0x08
    12a8:	89 85       	ldd	r24, Y+9	; 0x09
    12aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	40 e8       	ldi	r20, 0x80	; 128
    12b2:	5f e3       	ldi	r21, 0x3F	; 63
    12b4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    12b8:	88 23       	and	r24, r24
    12ba:	2c f4       	brge	.+10     	; 0x12c6 <LCD_Command+0x638>
		__ticks = 1;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	9e 83       	std	Y+6, r25	; 0x06
    12c2:	8d 83       	std	Y+5, r24	; 0x05
    12c4:	3f c0       	rjmp	.+126    	; 0x1344 <LCD_Command+0x6b6>
	else if (__tmp > 65535)
    12c6:	6f 81       	ldd	r22, Y+7	; 0x07
    12c8:	78 85       	ldd	r23, Y+8	; 0x08
    12ca:	89 85       	ldd	r24, Y+9	; 0x09
    12cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	3f ef       	ldi	r19, 0xFF	; 255
    12d2:	4f e7       	ldi	r20, 0x7F	; 127
    12d4:	57 e4       	ldi	r21, 0x47	; 71
    12d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    12da:	18 16       	cp	r1, r24
    12dc:	4c f5       	brge	.+82     	; 0x1330 <LCD_Command+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12de:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	40 e2       	ldi	r20, 0x20	; 32
    12ec:	51 e4       	ldi	r21, 0x41	; 65
    12ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	bc 01       	movw	r22, r24
    12f8:	cd 01       	movw	r24, r26
    12fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	9e 83       	std	Y+6, r25	; 0x06
    1304:	8d 83       	std	Y+5, r24	; 0x05
    1306:	0f c0       	rjmp	.+30     	; 0x1326 <LCD_Command+0x698>
    1308:	88 ec       	ldi	r24, 0xC8	; 200
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	9c 83       	std	Y+4, r25	; 0x04
    130e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	9c 81       	ldd	r25, Y+4	; 0x04
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <LCD_Command+0x686>
    1318:	9c 83       	std	Y+4, r25	; 0x04
    131a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	9e 83       	std	Y+6, r25	; 0x06
    1324:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1326:	8d 81       	ldd	r24, Y+5	; 0x05
    1328:	9e 81       	ldd	r25, Y+6	; 0x06
    132a:	00 97       	sbiw	r24, 0x00	; 0
    132c:	69 f7       	brne	.-38     	; 0x1308 <LCD_Command+0x67a>
    132e:	14 c0       	rjmp	.+40     	; 0x1358 <LCD_Command+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1330:	6f 81       	ldd	r22, Y+7	; 0x07
    1332:	78 85       	ldd	r23, Y+8	; 0x08
    1334:	89 85       	ldd	r24, Y+9	; 0x09
    1336:	9a 85       	ldd	r25, Y+10	; 0x0a
    1338:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	9e 83       	std	Y+6, r25	; 0x06
    1342:	8d 83       	std	Y+5, r24	; 0x05
    1344:	8d 81       	ldd	r24, Y+5	; 0x05
    1346:	9e 81       	ldd	r25, Y+6	; 0x06
    1348:	9a 83       	std	Y+2, r25	; 0x02
    134a:	89 83       	std	Y+1, r24	; 0x01
    134c:	89 81       	ldd	r24, Y+1	; 0x01
    134e:	9a 81       	ldd	r25, Y+2	; 0x02
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	f1 f7       	brne	.-4      	; 0x1350 <LCD_Command+0x6c2>
    1354:	9a 83       	std	Y+2, r25	; 0x02
    1356:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1358:	c9 5a       	subi	r28, 0xA9	; 169
    135a:	df 4f       	sbci	r29, 0xFF	; 255
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	1f 91       	pop	r17
    136c:	0f 91       	pop	r16
    136e:	08 95       	ret

00001370 <LCD_Char>:


void LCD_Char( unsigned char data )
{
    1370:	0f 93       	push	r16
    1372:	1f 93       	push	r17
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	c7 55       	subi	r28, 0x57	; 87
    137e:	d0 40       	sbci	r29, 0x00	; 0
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	fe 01       	movw	r30, r28
    138c:	e9 5a       	subi	r30, 0xA9	; 169
    138e:	ff 4f       	sbci	r31, 0xFF	; 255
    1390:	80 83       	st	Z, r24
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
    1392:	a5 e3       	ldi	r26, 0x35	; 53
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e5 e3       	ldi	r30, 0x35	; 53
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	98 2f       	mov	r25, r24
    139e:	9f 70       	andi	r25, 0x0F	; 15
    13a0:	fe 01       	movw	r30, r28
    13a2:	e9 5a       	subi	r30, 0xA9	; 169
    13a4:	ff 4f       	sbci	r31, 0xFF	; 255
    13a6:	80 81       	ld	r24, Z
    13a8:	80 7f       	andi	r24, 0xF0	; 240
    13aa:	89 2b       	or	r24, r25
    13ac:	8c 93       	st	X, r24
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
    13ae:	a5 e3       	ldi	r26, 0x35	; 53
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e5 e3       	ldi	r30, 0x35	; 53
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	81 60       	ori	r24, 0x01	; 1
    13ba:	8c 93       	st	X, r24
	LCD_Port|= (1<<EN);
    13bc:	a5 e3       	ldi	r26, 0x35	; 53
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	e5 e3       	ldi	r30, 0x35	; 53
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	82 60       	ori	r24, 0x02	; 2
    13c8:	8c 93       	st	X, r24
    13ca:	fe 01       	movw	r30, r28
    13cc:	ed 5a       	subi	r30, 0xAD	; 173
    13ce:	ff 4f       	sbci	r31, 0xFF	; 255
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	a0 e8       	ldi	r26, 0x80	; 128
    13d6:	bf e3       	ldi	r27, 0x3F	; 63
    13d8:	80 83       	st	Z, r24
    13da:	91 83       	std	Z+1, r25	; 0x01
    13dc:	a2 83       	std	Z+2, r26	; 0x02
    13de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    13e0:	8e 01       	movw	r16, r28
    13e2:	01 5b       	subi	r16, 0xB1	; 177
    13e4:	1f 4f       	sbci	r17, 0xFF	; 255
    13e6:	fe 01       	movw	r30, r28
    13e8:	ed 5a       	subi	r30, 0xAD	; 173
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	60 81       	ld	r22, Z
    13ee:	71 81       	ldd	r23, Z+1	; 0x01
    13f0:	82 81       	ldd	r24, Z+2	; 0x02
    13f2:	93 81       	ldd	r25, Z+3	; 0x03
    13f4:	2b ea       	ldi	r18, 0xAB	; 171
    13f6:	3a ea       	ldi	r19, 0xAA	; 170
    13f8:	4a e2       	ldi	r20, 0x2A	; 42
    13fa:	50 e4       	ldi	r21, 0x40	; 64
    13fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	f8 01       	movw	r30, r16
    1406:	80 83       	st	Z, r24
    1408:	91 83       	std	Z+1, r25	; 0x01
    140a:	a2 83       	std	Z+2, r26	; 0x02
    140c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    140e:	fe 01       	movw	r30, r28
    1410:	e1 5b       	subi	r30, 0xB1	; 177
    1412:	ff 4f       	sbci	r31, 0xFF	; 255
    1414:	60 81       	ld	r22, Z
    1416:	71 81       	ldd	r23, Z+1	; 0x01
    1418:	82 81       	ldd	r24, Z+2	; 0x02
    141a:	93 81       	ldd	r25, Z+3	; 0x03
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e8       	ldi	r20, 0x80	; 128
    1422:	5f e3       	ldi	r21, 0x3F	; 63
    1424:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1428:	88 23       	and	r24, r24
    142a:	34 f4       	brge	.+12     	; 0x1438 <LCD_Char+0xc8>
		__ticks = 1;
    142c:	fe 01       	movw	r30, r28
    142e:	e2 5b       	subi	r30, 0xB2	; 178
    1430:	ff 4f       	sbci	r31, 0xFF	; 255
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	80 83       	st	Z, r24
    1436:	e0 c0       	rjmp	.+448    	; 0x15f8 <LCD_Char+0x288>
	else if (__tmp > 255)
    1438:	fe 01       	movw	r30, r28
    143a:	e1 5b       	subi	r30, 0xB1	; 177
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	60 81       	ld	r22, Z
    1440:	71 81       	ldd	r23, Z+1	; 0x01
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	4f e7       	ldi	r20, 0x7F	; 127
    144c:	53 e4       	ldi	r21, 0x43	; 67
    144e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1452:	18 16       	cp	r1, r24
    1454:	0c f0       	brlt	.+2      	; 0x1458 <LCD_Char+0xe8>
    1456:	c0 c0       	rjmp	.+384    	; 0x15d8 <LCD_Char+0x268>
	{
		_delay_ms(__us / 1000.0);
    1458:	fe 01       	movw	r30, r28
    145a:	ed 5a       	subi	r30, 0xAD	; 173
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	60 81       	ld	r22, Z
    1460:	71 81       	ldd	r23, Z+1	; 0x01
    1462:	82 81       	ldd	r24, Z+2	; 0x02
    1464:	93 81       	ldd	r25, Z+3	; 0x03
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	4a e7       	ldi	r20, 0x7A	; 122
    146c:	54 e4       	ldi	r21, 0x44	; 68
    146e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	fe 01       	movw	r30, r28
    1478:	e6 5b       	subi	r30, 0xB6	; 182
    147a:	ff 4f       	sbci	r31, 0xFF	; 255
    147c:	80 83       	st	Z, r24
    147e:	91 83       	std	Z+1, r25	; 0x01
    1480:	a2 83       	std	Z+2, r26	; 0x02
    1482:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1484:	8e 01       	movw	r16, r28
    1486:	0a 5b       	subi	r16, 0xBA	; 186
    1488:	1f 4f       	sbci	r17, 0xFF	; 255
    148a:	fe 01       	movw	r30, r28
    148c:	e6 5b       	subi	r30, 0xB6	; 182
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	60 81       	ld	r22, Z
    1492:	71 81       	ldd	r23, Z+1	; 0x01
    1494:	82 81       	ldd	r24, Z+2	; 0x02
    1496:	93 81       	ldd	r25, Z+3	; 0x03
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	4a ef       	ldi	r20, 0xFA	; 250
    149e:	54 e4       	ldi	r21, 0x44	; 68
    14a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	f8 01       	movw	r30, r16
    14aa:	80 83       	st	Z, r24
    14ac:	91 83       	std	Z+1, r25	; 0x01
    14ae:	a2 83       	std	Z+2, r26	; 0x02
    14b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14b2:	fe 01       	movw	r30, r28
    14b4:	ea 5b       	subi	r30, 0xBA	; 186
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	60 81       	ld	r22, Z
    14ba:	71 81       	ldd	r23, Z+1	; 0x01
    14bc:	82 81       	ldd	r24, Z+2	; 0x02
    14be:	93 81       	ldd	r25, Z+3	; 0x03
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	40 e8       	ldi	r20, 0x80	; 128
    14c6:	5f e3       	ldi	r21, 0x3F	; 63
    14c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14cc:	88 23       	and	r24, r24
    14ce:	44 f4       	brge	.+16     	; 0x14e0 <LCD_Char+0x170>
		__ticks = 1;
    14d0:	fe 01       	movw	r30, r28
    14d2:	ec 5b       	subi	r30, 0xBC	; 188
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	91 83       	std	Z+1, r25	; 0x01
    14dc:	80 83       	st	Z, r24
    14de:	64 c0       	rjmp	.+200    	; 0x15a8 <LCD_Char+0x238>
	else if (__tmp > 65535)
    14e0:	fe 01       	movw	r30, r28
    14e2:	ea 5b       	subi	r30, 0xBA	; 186
    14e4:	ff 4f       	sbci	r31, 0xFF	; 255
    14e6:	60 81       	ld	r22, Z
    14e8:	71 81       	ldd	r23, Z+1	; 0x01
    14ea:	82 81       	ldd	r24, Z+2	; 0x02
    14ec:	93 81       	ldd	r25, Z+3	; 0x03
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	3f ef       	ldi	r19, 0xFF	; 255
    14f2:	4f e7       	ldi	r20, 0x7F	; 127
    14f4:	57 e4       	ldi	r21, 0x47	; 71
    14f6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14fa:	18 16       	cp	r1, r24
    14fc:	0c f0       	brlt	.+2      	; 0x1500 <LCD_Char+0x190>
    14fe:	43 c0       	rjmp	.+134    	; 0x1586 <LCD_Char+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1500:	fe 01       	movw	r30, r28
    1502:	e6 5b       	subi	r30, 0xB6	; 182
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	60 81       	ld	r22, Z
    1508:	71 81       	ldd	r23, Z+1	; 0x01
    150a:	82 81       	ldd	r24, Z+2	; 0x02
    150c:	93 81       	ldd	r25, Z+3	; 0x03
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e2       	ldi	r20, 0x20	; 32
    1514:	51 e4       	ldi	r21, 0x41	; 65
    1516:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	8e 01       	movw	r16, r28
    1520:	0c 5b       	subi	r16, 0xBC	; 188
    1522:	1f 4f       	sbci	r17, 0xFF	; 255
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	f8 01       	movw	r30, r16
    1532:	91 83       	std	Z+1, r25	; 0x01
    1534:	80 83       	st	Z, r24
    1536:	1f c0       	rjmp	.+62     	; 0x1576 <LCD_Char+0x206>
    1538:	fe 01       	movw	r30, r28
    153a:	ee 5b       	subi	r30, 0xBE	; 190
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	88 ec       	ldi	r24, 0xC8	; 200
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	91 83       	std	Z+1, r25	; 0x01
    1544:	80 83       	st	Z, r24
    1546:	fe 01       	movw	r30, r28
    1548:	ee 5b       	subi	r30, 0xBE	; 190
    154a:	ff 4f       	sbci	r31, 0xFF	; 255
    154c:	80 81       	ld	r24, Z
    154e:	91 81       	ldd	r25, Z+1	; 0x01
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	f1 f7       	brne	.-4      	; 0x1550 <LCD_Char+0x1e0>
    1554:	fe 01       	movw	r30, r28
    1556:	ee 5b       	subi	r30, 0xBE	; 190
    1558:	ff 4f       	sbci	r31, 0xFF	; 255
    155a:	91 83       	std	Z+1, r25	; 0x01
    155c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155e:	de 01       	movw	r26, r28
    1560:	ac 5b       	subi	r26, 0xBC	; 188
    1562:	bf 4f       	sbci	r27, 0xFF	; 255
    1564:	fe 01       	movw	r30, r28
    1566:	ec 5b       	subi	r30, 0xBC	; 188
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	80 81       	ld	r24, Z
    156c:	91 81       	ldd	r25, Z+1	; 0x01
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	11 96       	adiw	r26, 0x01	; 1
    1572:	9c 93       	st	X, r25
    1574:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1576:	fe 01       	movw	r30, r28
    1578:	ec 5b       	subi	r30, 0xBC	; 188
    157a:	ff 4f       	sbci	r31, 0xFF	; 255
    157c:	80 81       	ld	r24, Z
    157e:	91 81       	ldd	r25, Z+1	; 0x01
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	d1 f6       	brne	.-76     	; 0x1538 <LCD_Char+0x1c8>
    1584:	42 c0       	rjmp	.+132    	; 0x160a <LCD_Char+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1586:	8e 01       	movw	r16, r28
    1588:	0c 5b       	subi	r16, 0xBC	; 188
    158a:	1f 4f       	sbci	r17, 0xFF	; 255
    158c:	fe 01       	movw	r30, r28
    158e:	ea 5b       	subi	r30, 0xBA	; 186
    1590:	ff 4f       	sbci	r31, 0xFF	; 255
    1592:	60 81       	ld	r22, Z
    1594:	71 81       	ldd	r23, Z+1	; 0x01
    1596:	82 81       	ldd	r24, Z+2	; 0x02
    1598:	93 81       	ldd	r25, Z+3	; 0x03
    159a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	f8 01       	movw	r30, r16
    15a4:	91 83       	std	Z+1, r25	; 0x01
    15a6:	80 83       	st	Z, r24
    15a8:	de 01       	movw	r26, r28
    15aa:	a0 5c       	subi	r26, 0xC0	; 192
    15ac:	bf 4f       	sbci	r27, 0xFF	; 255
    15ae:	fe 01       	movw	r30, r28
    15b0:	ec 5b       	subi	r30, 0xBC	; 188
    15b2:	ff 4f       	sbci	r31, 0xFF	; 255
    15b4:	80 81       	ld	r24, Z
    15b6:	91 81       	ldd	r25, Z+1	; 0x01
    15b8:	11 96       	adiw	r26, 0x01	; 1
    15ba:	9c 93       	st	X, r25
    15bc:	8e 93       	st	-X, r24
    15be:	fe 01       	movw	r30, r28
    15c0:	e0 5c       	subi	r30, 0xC0	; 192
    15c2:	ff 4f       	sbci	r31, 0xFF	; 255
    15c4:	80 81       	ld	r24, Z
    15c6:	91 81       	ldd	r25, Z+1	; 0x01
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <LCD_Char+0x258>
    15cc:	fe 01       	movw	r30, r28
    15ce:	e0 5c       	subi	r30, 0xC0	; 192
    15d0:	ff 4f       	sbci	r31, 0xFF	; 255
    15d2:	91 83       	std	Z+1, r25	; 0x01
    15d4:	80 83       	st	Z, r24
    15d6:	19 c0       	rjmp	.+50     	; 0x160a <LCD_Char+0x29a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15d8:	8e 01       	movw	r16, r28
    15da:	02 5b       	subi	r16, 0xB2	; 178
    15dc:	1f 4f       	sbci	r17, 0xFF	; 255
    15de:	fe 01       	movw	r30, r28
    15e0:	e1 5b       	subi	r30, 0xB1	; 177
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	60 81       	ld	r22, Z
    15e6:	71 81       	ldd	r23, Z+1	; 0x01
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	93 81       	ldd	r25, Z+3	; 0x03
    15ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	f8 01       	movw	r30, r16
    15f6:	80 83       	st	Z, r24
    15f8:	fe 01       	movw	r30, r28
    15fa:	e2 5b       	subi	r30, 0xB2	; 178
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	80 81       	ld	r24, Z
    1600:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1602:	8f ad       	ldd	r24, Y+63	; 0x3f
    1604:	8a 95       	dec	r24
    1606:	f1 f7       	brne	.-4      	; 0x1604 <LCD_Char+0x294>
    1608:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    160a:	a5 e3       	ldi	r26, 0x35	; 53
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e5 e3       	ldi	r30, 0x35	; 53
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	8d 7f       	andi	r24, 0xFD	; 253
    1616:	8c 93       	st	X, r24
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	a8 e4       	ldi	r26, 0x48	; 72
    161e:	b3 e4       	ldi	r27, 0x43	; 67
    1620:	8b af       	std	Y+59, r24	; 0x3b
    1622:	9c af       	std	Y+60, r25	; 0x3c
    1624:	ad af       	std	Y+61, r26	; 0x3d
    1626:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1628:	6b ad       	ldd	r22, Y+59	; 0x3b
    162a:	7c ad       	ldd	r23, Y+60	; 0x3c
    162c:	8d ad       	ldd	r24, Y+61	; 0x3d
    162e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1630:	2b ea       	ldi	r18, 0xAB	; 171
    1632:	3a ea       	ldi	r19, 0xAA	; 170
    1634:	4a e2       	ldi	r20, 0x2A	; 42
    1636:	50 e4       	ldi	r21, 0x40	; 64
    1638:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    163c:	dc 01       	movw	r26, r24
    163e:	cb 01       	movw	r24, r22
    1640:	8f ab       	std	Y+55, r24	; 0x37
    1642:	98 af       	std	Y+56, r25	; 0x38
    1644:	a9 af       	std	Y+57, r26	; 0x39
    1646:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1648:	6f a9       	ldd	r22, Y+55	; 0x37
    164a:	78 ad       	ldd	r23, Y+56	; 0x38
    164c:	89 ad       	ldd	r24, Y+57	; 0x39
    164e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	40 e8       	ldi	r20, 0x80	; 128
    1656:	5f e3       	ldi	r21, 0x3F	; 63
    1658:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    165c:	88 23       	and	r24, r24
    165e:	1c f4       	brge	.+6      	; 0x1666 <LCD_Char+0x2f6>
		__ticks = 1;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	8e ab       	std	Y+54, r24	; 0x36
    1664:	91 c0       	rjmp	.+290    	; 0x1788 <LCD_Char+0x418>
	else if (__tmp > 255)
    1666:	6f a9       	ldd	r22, Y+55	; 0x37
    1668:	78 ad       	ldd	r23, Y+56	; 0x38
    166a:	89 ad       	ldd	r24, Y+57	; 0x39
    166c:	9a ad       	ldd	r25, Y+58	; 0x3a
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	4f e7       	ldi	r20, 0x7F	; 127
    1674:	53 e4       	ldi	r21, 0x43	; 67
    1676:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    167a:	18 16       	cp	r1, r24
    167c:	0c f0       	brlt	.+2      	; 0x1680 <LCD_Char+0x310>
    167e:	7b c0       	rjmp	.+246    	; 0x1776 <LCD_Char+0x406>
	{
		_delay_ms(__us / 1000.0);
    1680:	6b ad       	ldd	r22, Y+59	; 0x3b
    1682:	7c ad       	ldd	r23, Y+60	; 0x3c
    1684:	8d ad       	ldd	r24, Y+61	; 0x3d
    1686:	9e ad       	ldd	r25, Y+62	; 0x3e
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	4a e7       	ldi	r20, 0x7A	; 122
    168e:	54 e4       	ldi	r21, 0x44	; 68
    1690:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	8a ab       	std	Y+50, r24	; 0x32
    169a:	9b ab       	std	Y+51, r25	; 0x33
    169c:	ac ab       	std	Y+52, r26	; 0x34
    169e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a0:	6a a9       	ldd	r22, Y+50	; 0x32
    16a2:	7b a9       	ldd	r23, Y+51	; 0x33
    16a4:	8c a9       	ldd	r24, Y+52	; 0x34
    16a6:	9d a9       	ldd	r25, Y+53	; 0x35
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	4a ef       	ldi	r20, 0xFA	; 250
    16ae:	54 e4       	ldi	r21, 0x44	; 68
    16b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	8e a7       	std	Y+46, r24	; 0x2e
    16ba:	9f a7       	std	Y+47, r25	; 0x2f
    16bc:	a8 ab       	std	Y+48, r26	; 0x30
    16be:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    16c0:	6e a5       	ldd	r22, Y+46	; 0x2e
    16c2:	7f a5       	ldd	r23, Y+47	; 0x2f
    16c4:	88 a9       	ldd	r24, Y+48	; 0x30
    16c6:	99 a9       	ldd	r25, Y+49	; 0x31
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	40 e8       	ldi	r20, 0x80	; 128
    16ce:	5f e3       	ldi	r21, 0x3F	; 63
    16d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16d4:	88 23       	and	r24, r24
    16d6:	2c f4       	brge	.+10     	; 0x16e2 <LCD_Char+0x372>
		__ticks = 1;
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	9d a7       	std	Y+45, r25	; 0x2d
    16de:	8c a7       	std	Y+44, r24	; 0x2c
    16e0:	3f c0       	rjmp	.+126    	; 0x1760 <LCD_Char+0x3f0>
	else if (__tmp > 65535)
    16e2:	6e a5       	ldd	r22, Y+46	; 0x2e
    16e4:	7f a5       	ldd	r23, Y+47	; 0x2f
    16e6:	88 a9       	ldd	r24, Y+48	; 0x30
    16e8:	99 a9       	ldd	r25, Y+49	; 0x31
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	3f ef       	ldi	r19, 0xFF	; 255
    16ee:	4f e7       	ldi	r20, 0x7F	; 127
    16f0:	57 e4       	ldi	r21, 0x47	; 71
    16f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16f6:	18 16       	cp	r1, r24
    16f8:	4c f5       	brge	.+82     	; 0x174c <LCD_Char+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fa:	6a a9       	ldd	r22, Y+50	; 0x32
    16fc:	7b a9       	ldd	r23, Y+51	; 0x33
    16fe:	8c a9       	ldd	r24, Y+52	; 0x34
    1700:	9d a9       	ldd	r25, Y+53	; 0x35
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	40 e2       	ldi	r20, 0x20	; 32
    1708:	51 e4       	ldi	r21, 0x41	; 65
    170a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	bc 01       	movw	r22, r24
    1714:	cd 01       	movw	r24, r26
    1716:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	9d a7       	std	Y+45, r25	; 0x2d
    1720:	8c a7       	std	Y+44, r24	; 0x2c
    1722:	0f c0       	rjmp	.+30     	; 0x1742 <LCD_Char+0x3d2>
    1724:	88 ec       	ldi	r24, 0xC8	; 200
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	9b a7       	std	Y+43, r25	; 0x2b
    172a:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    172c:	8a a5       	ldd	r24, Y+42	; 0x2a
    172e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	f1 f7       	brne	.-4      	; 0x1730 <LCD_Char+0x3c0>
    1734:	9b a7       	std	Y+43, r25	; 0x2b
    1736:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1738:	8c a5       	ldd	r24, Y+44	; 0x2c
    173a:	9d a5       	ldd	r25, Y+45	; 0x2d
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	9d a7       	std	Y+45, r25	; 0x2d
    1740:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1742:	8c a5       	ldd	r24, Y+44	; 0x2c
    1744:	9d a5       	ldd	r25, Y+45	; 0x2d
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	69 f7       	brne	.-38     	; 0x1724 <LCD_Char+0x3b4>
    174a:	24 c0       	rjmp	.+72     	; 0x1794 <LCD_Char+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174c:	6e a5       	ldd	r22, Y+46	; 0x2e
    174e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1750:	88 a9       	ldd	r24, Y+48	; 0x30
    1752:	99 a9       	ldd	r25, Y+49	; 0x31
    1754:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	9d a7       	std	Y+45, r25	; 0x2d
    175e:	8c a7       	std	Y+44, r24	; 0x2c
    1760:	8c a5       	ldd	r24, Y+44	; 0x2c
    1762:	9d a5       	ldd	r25, Y+45	; 0x2d
    1764:	99 a7       	std	Y+41, r25	; 0x29
    1766:	88 a7       	std	Y+40, r24	; 0x28
    1768:	88 a5       	ldd	r24, Y+40	; 0x28
    176a:	99 a5       	ldd	r25, Y+41	; 0x29
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <LCD_Char+0x3fc>
    1770:	99 a7       	std	Y+41, r25	; 0x29
    1772:	88 a7       	std	Y+40, r24	; 0x28
    1774:	0f c0       	rjmp	.+30     	; 0x1794 <LCD_Char+0x424>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1776:	6f a9       	ldd	r22, Y+55	; 0x37
    1778:	78 ad       	ldd	r23, Y+56	; 0x38
    177a:	89 ad       	ldd	r24, Y+57	; 0x39
    177c:	9a ad       	ldd	r25, Y+58	; 0x3a
    177e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	8e ab       	std	Y+54, r24	; 0x36
    1788:	8e a9       	ldd	r24, Y+54	; 0x36
    178a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    178c:	8f a1       	ldd	r24, Y+39	; 0x27
    178e:	8a 95       	dec	r24
    1790:	f1 f7       	brne	.-4      	; 0x178e <LCD_Char+0x41e>
    1792:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
    1794:	a5 e3       	ldi	r26, 0x35	; 53
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e5 e3       	ldi	r30, 0x35	; 53
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	28 2f       	mov	r18, r24
    17a0:	2f 70       	andi	r18, 0x0F	; 15
    17a2:	fe 01       	movw	r30, r28
    17a4:	e9 5a       	subi	r30, 0xA9	; 169
    17a6:	ff 4f       	sbci	r31, 0xFF	; 255
    17a8:	80 81       	ld	r24, Z
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	82 95       	swap	r24
    17b0:	92 95       	swap	r25
    17b2:	90 7f       	andi	r25, 0xF0	; 240
    17b4:	98 27       	eor	r25, r24
    17b6:	80 7f       	andi	r24, 0xF0	; 240
    17b8:	98 27       	eor	r25, r24
    17ba:	82 2b       	or	r24, r18
    17bc:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);
    17be:	a5 e3       	ldi	r26, 0x35	; 53
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e5 e3       	ldi	r30, 0x35	; 53
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	82 60       	ori	r24, 0x02	; 2
    17ca:	8c 93       	st	X, r24
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	a0 e8       	ldi	r26, 0x80	; 128
    17d2:	bf e3       	ldi	r27, 0x3F	; 63
    17d4:	8b a3       	std	Y+35, r24	; 0x23
    17d6:	9c a3       	std	Y+36, r25	; 0x24
    17d8:	ad a3       	std	Y+37, r26	; 0x25
    17da:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17dc:	6b a1       	ldd	r22, Y+35	; 0x23
    17de:	7c a1       	ldd	r23, Y+36	; 0x24
    17e0:	8d a1       	ldd	r24, Y+37	; 0x25
    17e2:	9e a1       	ldd	r25, Y+38	; 0x26
    17e4:	2b ea       	ldi	r18, 0xAB	; 171
    17e6:	3a ea       	ldi	r19, 0xAA	; 170
    17e8:	4a e2       	ldi	r20, 0x2A	; 42
    17ea:	50 e4       	ldi	r21, 0x40	; 64
    17ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	8f 8f       	std	Y+31, r24	; 0x1f
    17f6:	98 a3       	std	Y+32, r25	; 0x20
    17f8:	a9 a3       	std	Y+33, r26	; 0x21
    17fa:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    17fc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    17fe:	78 a1       	ldd	r23, Y+32	; 0x20
    1800:	89 a1       	ldd	r24, Y+33	; 0x21
    1802:	9a a1       	ldd	r25, Y+34	; 0x22
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e8       	ldi	r20, 0x80	; 128
    180a:	5f e3       	ldi	r21, 0x3F	; 63
    180c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1810:	88 23       	and	r24, r24
    1812:	1c f4       	brge	.+6      	; 0x181a <LCD_Char+0x4aa>
		__ticks = 1;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	8e 8f       	std	Y+30, r24	; 0x1e
    1818:	91 c0       	rjmp	.+290    	; 0x193c <LCD_Char+0x5cc>
	else if (__tmp > 255)
    181a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    181c:	78 a1       	ldd	r23, Y+32	; 0x20
    181e:	89 a1       	ldd	r24, Y+33	; 0x21
    1820:	9a a1       	ldd	r25, Y+34	; 0x22
    1822:	20 e0       	ldi	r18, 0x00	; 0
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	4f e7       	ldi	r20, 0x7F	; 127
    1828:	53 e4       	ldi	r21, 0x43	; 67
    182a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    182e:	18 16       	cp	r1, r24
    1830:	0c f0       	brlt	.+2      	; 0x1834 <LCD_Char+0x4c4>
    1832:	7b c0       	rjmp	.+246    	; 0x192a <LCD_Char+0x5ba>
	{
		_delay_ms(__us / 1000.0);
    1834:	6b a1       	ldd	r22, Y+35	; 0x23
    1836:	7c a1       	ldd	r23, Y+36	; 0x24
    1838:	8d a1       	ldd	r24, Y+37	; 0x25
    183a:	9e a1       	ldd	r25, Y+38	; 0x26
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	4a e7       	ldi	r20, 0x7A	; 122
    1842:	54 e4       	ldi	r21, 0x44	; 68
    1844:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1848:	dc 01       	movw	r26, r24
    184a:	cb 01       	movw	r24, r22
    184c:	8a 8f       	std	Y+26, r24	; 0x1a
    184e:	9b 8f       	std	Y+27, r25	; 0x1b
    1850:	ac 8f       	std	Y+28, r26	; 0x1c
    1852:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1854:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1856:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1858:	8c 8d       	ldd	r24, Y+28	; 0x1c
    185a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	4a ef       	ldi	r20, 0xFA	; 250
    1862:	54 e4       	ldi	r21, 0x44	; 68
    1864:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	8e 8b       	std	Y+22, r24	; 0x16
    186e:	9f 8b       	std	Y+23, r25	; 0x17
    1870:	a8 8f       	std	Y+24, r26	; 0x18
    1872:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1874:	6e 89       	ldd	r22, Y+22	; 0x16
    1876:	7f 89       	ldd	r23, Y+23	; 0x17
    1878:	88 8d       	ldd	r24, Y+24	; 0x18
    187a:	99 8d       	ldd	r25, Y+25	; 0x19
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 e8       	ldi	r20, 0x80	; 128
    1882:	5f e3       	ldi	r21, 0x3F	; 63
    1884:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1888:	88 23       	and	r24, r24
    188a:	2c f4       	brge	.+10     	; 0x1896 <LCD_Char+0x526>
		__ticks = 1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	9d 8b       	std	Y+21, r25	; 0x15
    1892:	8c 8b       	std	Y+20, r24	; 0x14
    1894:	3f c0       	rjmp	.+126    	; 0x1914 <LCD_Char+0x5a4>
	else if (__tmp > 65535)
    1896:	6e 89       	ldd	r22, Y+22	; 0x16
    1898:	7f 89       	ldd	r23, Y+23	; 0x17
    189a:	88 8d       	ldd	r24, Y+24	; 0x18
    189c:	99 8d       	ldd	r25, Y+25	; 0x19
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	3f ef       	ldi	r19, 0xFF	; 255
    18a2:	4f e7       	ldi	r20, 0x7F	; 127
    18a4:	57 e4       	ldi	r21, 0x47	; 71
    18a6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18aa:	18 16       	cp	r1, r24
    18ac:	4c f5       	brge	.+82     	; 0x1900 <LCD_Char+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ae:	6a 8d       	ldd	r22, Y+26	; 0x1a
    18b0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    18b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18b4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	40 e2       	ldi	r20, 0x20	; 32
    18bc:	51 e4       	ldi	r21, 0x41	; 65
    18be:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	9d 8b       	std	Y+21, r25	; 0x15
    18d4:	8c 8b       	std	Y+20, r24	; 0x14
    18d6:	0f c0       	rjmp	.+30     	; 0x18f6 <LCD_Char+0x586>
    18d8:	88 ec       	ldi	r24, 0xC8	; 200
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	9b 8b       	std	Y+19, r25	; 0x13
    18de:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18e0:	8a 89       	ldd	r24, Y+18	; 0x12
    18e2:	9b 89       	ldd	r25, Y+19	; 0x13
    18e4:	01 97       	sbiw	r24, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <LCD_Char+0x574>
    18e8:	9b 8b       	std	Y+19, r25	; 0x13
    18ea:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ec:	8c 89       	ldd	r24, Y+20	; 0x14
    18ee:	9d 89       	ldd	r25, Y+21	; 0x15
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	9d 8b       	std	Y+21, r25	; 0x15
    18f4:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f6:	8c 89       	ldd	r24, Y+20	; 0x14
    18f8:	9d 89       	ldd	r25, Y+21	; 0x15
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	69 f7       	brne	.-38     	; 0x18d8 <LCD_Char+0x568>
    18fe:	24 c0       	rjmp	.+72     	; 0x1948 <LCD_Char+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1900:	6e 89       	ldd	r22, Y+22	; 0x16
    1902:	7f 89       	ldd	r23, Y+23	; 0x17
    1904:	88 8d       	ldd	r24, Y+24	; 0x18
    1906:	99 8d       	ldd	r25, Y+25	; 0x19
    1908:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	9d 8b       	std	Y+21, r25	; 0x15
    1912:	8c 8b       	std	Y+20, r24	; 0x14
    1914:	8c 89       	ldd	r24, Y+20	; 0x14
    1916:	9d 89       	ldd	r25, Y+21	; 0x15
    1918:	99 8b       	std	Y+17, r25	; 0x11
    191a:	88 8b       	std	Y+16, r24	; 0x10
    191c:	88 89       	ldd	r24, Y+16	; 0x10
    191e:	99 89       	ldd	r25, Y+17	; 0x11
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <LCD_Char+0x5b0>
    1924:	99 8b       	std	Y+17, r25	; 0x11
    1926:	88 8b       	std	Y+16, r24	; 0x10
    1928:	0f c0       	rjmp	.+30     	; 0x1948 <LCD_Char+0x5d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    192a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    192c:	78 a1       	ldd	r23, Y+32	; 0x20
    192e:	89 a1       	ldd	r24, Y+33	; 0x21
    1930:	9a a1       	ldd	r25, Y+34	; 0x22
    1932:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	8e 8f       	std	Y+30, r24	; 0x1e
    193c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    193e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1940:	8f 85       	ldd	r24, Y+15	; 0x0f
    1942:	8a 95       	dec	r24
    1944:	f1 f7       	brne	.-4      	; 0x1942 <LCD_Char+0x5d2>
    1946:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    1948:	a5 e3       	ldi	r26, 0x35	; 53
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e5 e3       	ldi	r30, 0x35	; 53
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	8d 7f       	andi	r24, 0xFD	; 253
    1954:	8c 93       	st	X, r24
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	a0 e0       	ldi	r26, 0x00	; 0
    195c:	b0 e4       	ldi	r27, 0x40	; 64
    195e:	8b 87       	std	Y+11, r24	; 0x0b
    1960:	9c 87       	std	Y+12, r25	; 0x0c
    1962:	ad 87       	std	Y+13, r26	; 0x0d
    1964:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1966:	6b 85       	ldd	r22, Y+11	; 0x0b
    1968:	7c 85       	ldd	r23, Y+12	; 0x0c
    196a:	8d 85       	ldd	r24, Y+13	; 0x0d
    196c:	9e 85       	ldd	r25, Y+14	; 0x0e
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	4a ef       	ldi	r20, 0xFA	; 250
    1974:	54 e4       	ldi	r21, 0x44	; 68
    1976:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	8f 83       	std	Y+7, r24	; 0x07
    1980:	98 87       	std	Y+8, r25	; 0x08
    1982:	a9 87       	std	Y+9, r26	; 0x09
    1984:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1986:	6f 81       	ldd	r22, Y+7	; 0x07
    1988:	78 85       	ldd	r23, Y+8	; 0x08
    198a:	89 85       	ldd	r24, Y+9	; 0x09
    198c:	9a 85       	ldd	r25, Y+10	; 0x0a
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	40 e8       	ldi	r20, 0x80	; 128
    1994:	5f e3       	ldi	r21, 0x3F	; 63
    1996:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    199a:	88 23       	and	r24, r24
    199c:	2c f4       	brge	.+10     	; 0x19a8 <LCD_Char+0x638>
		__ticks = 1;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	9e 83       	std	Y+6, r25	; 0x06
    19a4:	8d 83       	std	Y+5, r24	; 0x05
    19a6:	3f c0       	rjmp	.+126    	; 0x1a26 <LCD_Char+0x6b6>
	else if (__tmp > 65535)
    19a8:	6f 81       	ldd	r22, Y+7	; 0x07
    19aa:	78 85       	ldd	r23, Y+8	; 0x08
    19ac:	89 85       	ldd	r24, Y+9	; 0x09
    19ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	3f ef       	ldi	r19, 0xFF	; 255
    19b4:	4f e7       	ldi	r20, 0x7F	; 127
    19b6:	57 e4       	ldi	r21, 0x47	; 71
    19b8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19bc:	18 16       	cp	r1, r24
    19be:	4c f5       	brge	.+82     	; 0x1a12 <LCD_Char+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e2       	ldi	r20, 0x20	; 32
    19ce:	51 e4       	ldi	r21, 0x41	; 65
    19d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	bc 01       	movw	r22, r24
    19da:	cd 01       	movw	r24, r26
    19dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	9e 83       	std	Y+6, r25	; 0x06
    19e6:	8d 83       	std	Y+5, r24	; 0x05
    19e8:	0f c0       	rjmp	.+30     	; 0x1a08 <LCD_Char+0x698>
    19ea:	88 ec       	ldi	r24, 0xC8	; 200
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	9c 83       	std	Y+4, r25	; 0x04
    19f0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	9c 81       	ldd	r25, Y+4	; 0x04
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <LCD_Char+0x686>
    19fa:	9c 83       	std	Y+4, r25	; 0x04
    19fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1a00:	9e 81       	ldd	r25, Y+6	; 0x06
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	9e 83       	std	Y+6, r25	; 0x06
    1a06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a08:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	69 f7       	brne	.-38     	; 0x19ea <LCD_Char+0x67a>
    1a10:	14 c0       	rjmp	.+40     	; 0x1a3a <LCD_Char+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a12:	6f 81       	ldd	r22, Y+7	; 0x07
    1a14:	78 85       	ldd	r23, Y+8	; 0x08
    1a16:	89 85       	ldd	r24, Y+9	; 0x09
    1a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	9e 83       	std	Y+6, r25	; 0x06
    1a24:	8d 83       	std	Y+5, r24	; 0x05
    1a26:	8d 81       	ldd	r24, Y+5	; 0x05
    1a28:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2a:	9a 83       	std	Y+2, r25	; 0x02
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	9a 81       	ldd	r25, Y+2	; 0x02
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	f1 f7       	brne	.-4      	; 0x1a32 <LCD_Char+0x6c2>
    1a36:	9a 83       	std	Y+2, r25	; 0x02
    1a38:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1a3a:	c9 5a       	subi	r28, 0xA9	; 169
    1a3c:	df 4f       	sbci	r29, 0xFF	; 255
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	f8 94       	cli
    1a42:	de bf       	out	0x3e, r29	; 62
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	cd bf       	out	0x3d, r28	; 61
    1a48:	cf 91       	pop	r28
    1a4a:	df 91       	pop	r29
    1a4c:	1f 91       	pop	r17
    1a4e:	0f 91       	pop	r16
    1a50:	08 95       	ret

00001a52 <LCD_Init>:

void LCD_Init (void)			/* LCD Initialize function */
{
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	6c 97       	sbiw	r28, 0x1c	; 28
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
	LCD_Dir = 0xFF;			/* Make LCD port direction as o/p */
    1a66:	e4 e3       	ldi	r30, 0x34	; 52
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	8f ef       	ldi	r24, 0xFF	; 255
    1a6c:	80 83       	st	Z, r24
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	a0 ef       	ldi	r26, 0xF0	; 240
    1a74:	b1 e4       	ldi	r27, 0x41	; 65
    1a76:	89 8f       	std	Y+25, r24	; 0x19
    1a78:	9a 8f       	std	Y+26, r25	; 0x1a
    1a7a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a7c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	4a ef       	ldi	r20, 0xFA	; 250
    1a8c:	54 e4       	ldi	r21, 0x44	; 68
    1a8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	8d 8b       	std	Y+21, r24	; 0x15
    1a98:	9e 8b       	std	Y+22, r25	; 0x16
    1a9a:	af 8b       	std	Y+23, r26	; 0x17
    1a9c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa0:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa2:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa4:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e8       	ldi	r20, 0x80	; 128
    1aac:	5f e3       	ldi	r21, 0x3F	; 63
    1aae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ab2:	88 23       	and	r24, r24
    1ab4:	2c f4       	brge	.+10     	; 0x1ac0 <LCD_Init+0x6e>
		__ticks = 1;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	9c 8b       	std	Y+20, r25	; 0x14
    1abc:	8b 8b       	std	Y+19, r24	; 0x13
    1abe:	3f c0       	rjmp	.+126    	; 0x1b3e <LCD_Init+0xec>
	else if (__tmp > 65535)
    1ac0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	3f ef       	ldi	r19, 0xFF	; 255
    1acc:	4f e7       	ldi	r20, 0x7F	; 127
    1ace:	57 e4       	ldi	r21, 0x47	; 71
    1ad0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ad4:	18 16       	cp	r1, r24
    1ad6:	4c f5       	brge	.+82     	; 0x1b2a <LCD_Init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad8:	69 8d       	ldd	r22, Y+25	; 0x19
    1ada:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1adc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ade:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e2       	ldi	r20, 0x20	; 32
    1ae6:	51 e4       	ldi	r21, 0x41	; 65
    1ae8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	bc 01       	movw	r22, r24
    1af2:	cd 01       	movw	r24, r26
    1af4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9c 8b       	std	Y+20, r25	; 0x14
    1afe:	8b 8b       	std	Y+19, r24	; 0x13
    1b00:	0f c0       	rjmp	.+30     	; 0x1b20 <LCD_Init+0xce>
    1b02:	88 ec       	ldi	r24, 0xC8	; 200
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	9a 8b       	std	Y+18, r25	; 0x12
    1b08:	89 8b       	std	Y+17, r24	; 0x11
    1b0a:	89 89       	ldd	r24, Y+17	; 0x11
    1b0c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <LCD_Init+0xbc>
    1b12:	9a 8b       	std	Y+18, r25	; 0x12
    1b14:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b16:	8b 89       	ldd	r24, Y+19	; 0x13
    1b18:	9c 89       	ldd	r25, Y+20	; 0x14
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	9c 8b       	std	Y+20, r25	; 0x14
    1b1e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b20:	8b 89       	ldd	r24, Y+19	; 0x13
    1b22:	9c 89       	ldd	r25, Y+20	; 0x14
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	69 f7       	brne	.-38     	; 0x1b02 <LCD_Init+0xb0>
    1b28:	14 c0       	rjmp	.+40     	; 0x1b52 <LCD_Init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b30:	98 8d       	ldd	r25, Y+24	; 0x18
    1b32:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	9c 8b       	std	Y+20, r25	; 0x14
    1b3c:	8b 8b       	std	Y+19, r24	; 0x13
    1b3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b40:	9c 89       	ldd	r25, Y+20	; 0x14
    1b42:	98 8b       	std	Y+16, r25	; 0x10
    1b44:	8f 87       	std	Y+15, r24	; 0x0f
    1b46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b48:	98 89       	ldd	r25, Y+16	; 0x10
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <LCD_Init+0xf8>
    1b4e:	98 8b       	std	Y+16, r25	; 0x10
    1b50:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(30);			/* LCD Power ON delay always >15ms */


	LCD_Command(0x01);              /* Clear display screen*/
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	0e 94 47 06 	call	0xc8e	; 0xc8e <LCD_Command>
	LCD_Command(0x02);       /* return cursor to first position on first line */
    1b58:	82 e0       	ldi	r24, 0x02	; 2
    1b5a:	0e 94 47 06 	call	0xc8e	; 0xc8e <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
    1b5e:	88 e2       	ldi	r24, 0x28	; 40
    1b60:	0e 94 47 06 	call	0xc8e	; 0xc8e <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
    1b64:	8c e0       	ldi	r24, 0x0C	; 12
    1b66:	0e 94 47 06 	call	0xc8e	; 0xc8e <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
    1b6a:	86 e0       	ldi	r24, 0x06	; 6
    1b6c:	0e 94 47 06 	call	0xc8e	; 0xc8e <LCD_Command>
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	a0 e0       	ldi	r26, 0x00	; 0
    1b76:	b0 e4       	ldi	r27, 0x40	; 64
    1b78:	8b 87       	std	Y+11, r24	; 0x0b
    1b7a:	9c 87       	std	Y+12, r25	; 0x0c
    1b7c:	ad 87       	std	Y+13, r26	; 0x0d
    1b7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	4a ef       	ldi	r20, 0xFA	; 250
    1b8e:	54 e4       	ldi	r21, 0x44	; 68
    1b90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	8f 83       	std	Y+7, r24	; 0x07
    1b9a:	98 87       	std	Y+8, r25	; 0x08
    1b9c:	a9 87       	std	Y+9, r26	; 0x09
    1b9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba2:	78 85       	ldd	r23, Y+8	; 0x08
    1ba4:	89 85       	ldd	r24, Y+9	; 0x09
    1ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e8       	ldi	r20, 0x80	; 128
    1bae:	5f e3       	ldi	r21, 0x3F	; 63
    1bb0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bb4:	88 23       	and	r24, r24
    1bb6:	2c f4       	brge	.+10     	; 0x1bc2 <LCD_Init+0x170>
		__ticks = 1;
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	9e 83       	std	Y+6, r25	; 0x06
    1bbe:	8d 83       	std	Y+5, r24	; 0x05
    1bc0:	3f c0       	rjmp	.+126    	; 0x1c40 <LCD_Init+0x1ee>
	else if (__tmp > 65535)
    1bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc4:	78 85       	ldd	r23, Y+8	; 0x08
    1bc6:	89 85       	ldd	r24, Y+9	; 0x09
    1bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	3f ef       	ldi	r19, 0xFF	; 255
    1bce:	4f e7       	ldi	r20, 0x7F	; 127
    1bd0:	57 e4       	ldi	r21, 0x47	; 71
    1bd2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bd6:	18 16       	cp	r1, r24
    1bd8:	4c f5       	brge	.+82     	; 0x1c2c <LCD_Init+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e2       	ldi	r20, 0x20	; 32
    1be8:	51 e4       	ldi	r21, 0x41	; 65
    1bea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	bc 01       	movw	r22, r24
    1bf4:	cd 01       	movw	r24, r26
    1bf6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	9e 83       	std	Y+6, r25	; 0x06
    1c00:	8d 83       	std	Y+5, r24	; 0x05
    1c02:	0f c0       	rjmp	.+30     	; 0x1c22 <LCD_Init+0x1d0>
    1c04:	88 ec       	ldi	r24, 0xC8	; 200
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9c 83       	std	Y+4, r25	; 0x04
    1c0a:	8b 83       	std	Y+3, r24	; 0x03
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	f1 f7       	brne	.-4      	; 0x1c10 <LCD_Init+0x1be>
    1c14:	9c 83       	std	Y+4, r25	; 0x04
    1c16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c18:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	9e 83       	std	Y+6, r25	; 0x06
    1c20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c22:	8d 81       	ldd	r24, Y+5	; 0x05
    1c24:	9e 81       	ldd	r25, Y+6	; 0x06
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	69 f7       	brne	.-38     	; 0x1c04 <LCD_Init+0x1b2>
    1c2a:	14 c0       	rjmp	.+40     	; 0x1c54 <LCD_Init+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2e:	78 85       	ldd	r23, Y+8	; 0x08
    1c30:	89 85       	ldd	r24, Y+9	; 0x09
    1c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	9e 83       	std	Y+6, r25	; 0x06
    1c3e:	8d 83       	std	Y+5, r24	; 0x05
    1c40:	8d 81       	ldd	r24, Y+5	; 0x05
    1c42:	9e 81       	ldd	r25, Y+6	; 0x06
    1c44:	9a 83       	std	Y+2, r25	; 0x02
    1c46:	89 83       	std	Y+1, r24	; 0x01
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <LCD_Init+0x1fa>
    1c50:	9a 83       	std	Y+2, r25	; 0x02
    1c52:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);
}
    1c54:	6c 96       	adiw	r28, 0x1c	; 28
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	f8 94       	cli
    1c5a:	de bf       	out	0x3e, r29	; 62
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	cd bf       	out	0x3d, r28	; 61
    1c60:	cf 91       	pop	r28
    1c62:	df 91       	pop	r29
    1c64:	08 95       	ret

00001c66 <LCD_String>:


void LCD_String (char *str)		/* Send string to LCD function */
{
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	00 d0       	rcall	.+0      	; 0x1c6c <LCD_String+0x6>
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <LCD_String+0x8>
    1c6e:	cd b7       	in	r28, 0x3d	; 61
    1c70:	de b7       	in	r29, 0x3e	; 62
    1c72:	9c 83       	std	Y+4, r25	; 0x04
    1c74:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    1c76:	1a 82       	std	Y+2, r1	; 0x02
    1c78:	19 82       	std	Y+1, r1	; 0x01
    1c7a:	0f c0       	rjmp	.+30     	; 0x1c9a <LCD_String+0x34>
	{
		LCD_Char (str[i]);
    1c7c:	29 81       	ldd	r18, Y+1	; 0x01
    1c7e:	3a 81       	ldd	r19, Y+2	; 0x02
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	9c 81       	ldd	r25, Y+4	; 0x04
    1c84:	fc 01       	movw	r30, r24
    1c86:	e2 0f       	add	r30, r18
    1c88:	f3 1f       	adc	r31, r19
    1c8a:	80 81       	ld	r24, Z
    1c8c:	0e 94 b8 09 	call	0x1370	; 0x1370 <LCD_Char>


void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	9a 81       	ldd	r25, Y+2	; 0x02
    1c94:	01 96       	adiw	r24, 0x01	; 1
    1c96:	9a 83       	std	Y+2, r25	; 0x02
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	29 81       	ldd	r18, Y+1	; 0x01
    1c9c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	e2 0f       	add	r30, r18
    1ca6:	f3 1f       	adc	r31, r19
    1ca8:	80 81       	ld	r24, Z
    1caa:	88 23       	and	r24, r24
    1cac:	39 f7       	brne	.-50     	; 0x1c7c <LCD_String+0x16>
	{
		LCD_Char (str[i]);
	}
}
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	cf 91       	pop	r28
    1cb8:	df 91       	pop	r29
    1cba:	08 95       	ret

00001cbc <Gotoxy>:

void Gotoxy (char Y,char X)
{
    1cbc:	df 93       	push	r29
    1cbe:	cf 93       	push	r28
    1cc0:	00 d0       	rcall	.+0      	; 0x1cc2 <Gotoxy+0x6>
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <Gotoxy+0x8>
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    1cca:	6a 83       	std	Y+2, r22	; 0x02
	if (X>0 && X<=16)
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	88 23       	and	r24, r24
    1cd0:	e1 f0       	breq	.+56     	; 0x1d0a <Gotoxy+0x4e>
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	81 31       	cpi	r24, 0x11	; 17
    1cd6:	c8 f4       	brcc	.+50     	; 0x1d0a <Gotoxy+0x4e>
	{
	    switch(Y)
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	3c 83       	std	Y+4, r19	; 0x04
    1ce0:	2b 83       	std	Y+3, r18	; 0x03
    1ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce6:	81 30       	cpi	r24, 0x01	; 1
    1ce8:	91 05       	cpc	r25, r1
    1cea:	31 f0       	breq	.+12     	; 0x1cf8 <Gotoxy+0x3c>
    1cec:	2b 81       	ldd	r18, Y+3	; 0x03
    1cee:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf0:	22 30       	cpi	r18, 0x02	; 2
    1cf2:	31 05       	cpc	r19, r1
    1cf4:	31 f0       	breq	.+12     	; 0x1d02 <Gotoxy+0x46>
    1cf6:	09 c0       	rjmp	.+18     	; 0x1d0a <Gotoxy+0x4e>
	    {
		    case 1:
		    	LCD_Command(X+127);
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	81 58       	subi	r24, 0x81	; 129
    1cfc:	0e 94 47 06 	call	0xc8e	; 0xc8e <LCD_Command>
    1d00:	04 c0       	rjmp	.+8      	; 0x1d0a <Gotoxy+0x4e>
		    break;
		    case 2:
		    	LCD_Command(X+191);
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	81 54       	subi	r24, 0x41	; 65
    1d06:	0e 94 47 06 	call	0xc8e	; 0xc8e <LCD_Command>
		    break;
		    default:
		    break;
	    }
	}
}
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	0f 90       	pop	r0
    1d10:	0f 90       	pop	r0
    1d12:	cf 91       	pop	r28
    1d14:	df 91       	pop	r29
    1d16:	08 95       	ret

00001d18 <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
    1d18:	df 93       	push	r29
    1d1a:	cf 93       	push	r28
    1d1c:	00 d0       	rcall	.+0      	; 0x1d1e <LCD_String_xy+0x6>
    1d1e:	00 d0       	rcall	.+0      	; 0x1d20 <LCD_String_xy+0x8>
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    1d24:	89 83       	std	Y+1, r24	; 0x01
    1d26:	6a 83       	std	Y+2, r22	; 0x02
    1d28:	5c 83       	std	Y+4, r21	; 0x04
    1d2a:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 0 && pos<16)
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	88 23       	and	r24, r24
    1d30:	49 f4       	brne	.+18     	; 0x1d44 <LCD_String_xy+0x2c>
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	80 31       	cpi	r24, 0x10	; 16
    1d36:	30 f4       	brcc	.+12     	; 0x1d44 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	8f 70       	andi	r24, 0x0F	; 15
    1d3c:	80 68       	ori	r24, 0x80	; 128
    1d3e:	0e 94 47 06 	call	0xc8e	; 0xc8e <LCD_Command>
    1d42:	0b c0       	rjmp	.+22     	; 0x1d5a <LCD_String_xy+0x42>
	else if (row == 1 && pos<16)
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	81 30       	cpi	r24, 0x01	; 1
    1d48:	41 f4       	brne	.+16     	; 0x1d5a <LCD_String_xy+0x42>
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	80 31       	cpi	r24, 0x10	; 16
    1d4e:	28 f4       	brcc	.+10     	; 0x1d5a <LCD_String_xy+0x42>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	8f 70       	andi	r24, 0x0F	; 15
    1d54:	80 6c       	ori	r24, 0xC0	; 192
    1d56:	0e 94 47 06 	call	0xc8e	; 0xc8e <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5e:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <LCD_String>
}
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <LCD_Clear>:

void LCD_Clear()
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	2e 97       	sbiw	r28, 0x0e	; 14
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
	LCD_Command (0x01);		/* Clear display */
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	0e 94 47 06 	call	0xc8e	; 0xc8e <LCD_Command>
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a0 e0       	ldi	r26, 0x00	; 0
    1d90:	b0 e4       	ldi	r27, 0x40	; 64
    1d92:	8b 87       	std	Y+11, r24	; 0x0b
    1d94:	9c 87       	std	Y+12, r25	; 0x0c
    1d96:	ad 87       	std	Y+13, r26	; 0x0d
    1d98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	4a ef       	ldi	r20, 0xFA	; 250
    1da8:	54 e4       	ldi	r21, 0x44	; 68
    1daa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	8f 83       	std	Y+7, r24	; 0x07
    1db4:	98 87       	std	Y+8, r25	; 0x08
    1db6:	a9 87       	std	Y+9, r26	; 0x09
    1db8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dba:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbc:	78 85       	ldd	r23, Y+8	; 0x08
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e8       	ldi	r20, 0x80	; 128
    1dc8:	5f e3       	ldi	r21, 0x3F	; 63
    1dca:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1dce:	88 23       	and	r24, r24
    1dd0:	2c f4       	brge	.+10     	; 0x1ddc <LCD_Clear+0x6c>
		__ticks = 1;
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	9e 83       	std	Y+6, r25	; 0x06
    1dd8:	8d 83       	std	Y+5, r24	; 0x05
    1dda:	3f c0       	rjmp	.+126    	; 0x1e5a <LCD_Clear+0xea>
	else if (__tmp > 65535)
    1ddc:	6f 81       	ldd	r22, Y+7	; 0x07
    1dde:	78 85       	ldd	r23, Y+8	; 0x08
    1de0:	89 85       	ldd	r24, Y+9	; 0x09
    1de2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	3f ef       	ldi	r19, 0xFF	; 255
    1de8:	4f e7       	ldi	r20, 0x7F	; 127
    1dea:	57 e4       	ldi	r21, 0x47	; 71
    1dec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1df0:	18 16       	cp	r1, r24
    1df2:	4c f5       	brge	.+82     	; 0x1e46 <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1df6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1df8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e2       	ldi	r20, 0x20	; 32
    1e02:	51 e4       	ldi	r21, 0x41	; 65
    1e04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	bc 01       	movw	r22, r24
    1e0e:	cd 01       	movw	r24, r26
    1e10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	9e 83       	std	Y+6, r25	; 0x06
    1e1a:	8d 83       	std	Y+5, r24	; 0x05
    1e1c:	0f c0       	rjmp	.+30     	; 0x1e3c <LCD_Clear+0xcc>
    1e1e:	88 ec       	ldi	r24, 0xC8	; 200
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	9c 83       	std	Y+4, r25	; 0x04
    1e24:	8b 83       	std	Y+3, r24	; 0x03
    1e26:	8b 81       	ldd	r24, Y+3	; 0x03
    1e28:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <LCD_Clear+0xba>
    1e2e:	9c 83       	std	Y+4, r25	; 0x04
    1e30:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e32:	8d 81       	ldd	r24, Y+5	; 0x05
    1e34:	9e 81       	ldd	r25, Y+6	; 0x06
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	9e 83       	std	Y+6, r25	; 0x06
    1e3a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	69 f7       	brne	.-38     	; 0x1e1e <LCD_Clear+0xae>
    1e44:	14 c0       	rjmp	.+40     	; 0x1e6e <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e46:	6f 81       	ldd	r22, Y+7	; 0x07
    1e48:	78 85       	ldd	r23, Y+8	; 0x08
    1e4a:	89 85       	ldd	r24, Y+9	; 0x09
    1e4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	9e 83       	std	Y+6, r25	; 0x06
    1e58:	8d 83       	std	Y+5, r24	; 0x05
    1e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5e:	9a 83       	std	Y+2, r25	; 0x02
    1e60:	89 83       	std	Y+1, r24	; 0x01
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	9a 81       	ldd	r25, Y+2	; 0x02
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <LCD_Clear+0xf6>
    1e6a:	9a 83       	std	Y+2, r25	; 0x02
    1e6c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
    1e6e:	80 e8       	ldi	r24, 0x80	; 128
    1e70:	0e 94 47 06 	call	0xc8e	; 0xc8e <LCD_Command>
}
    1e74:	2e 96       	adiw	r28, 0x0e	; 14
    1e76:	0f b6       	in	r0, 0x3f	; 63
    1e78:	f8 94       	cli
    1e7a:	de bf       	out	0x3e, r29	; 62
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	cd bf       	out	0x3d, r28	; 61
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	08 95       	ret

00001e86 <LCD_CreateCustomCharacter>:

void LCD_CreateCustomCharacter(unsigned char *Pattern,const char cLocation)
{
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <LCD_CreateCustomCharacter+0x6>
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <LCD_CreateCustomCharacter+0x8>
    1e8e:	0f 92       	push	r0
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	9c 83       	std	Y+4, r25	; 0x04
    1e96:	8b 83       	std	Y+3, r24	; 0x03
    1e98:	6d 83       	std	Y+5, r22	; 0x05
	int iLoop=0;
    1e9a:	1a 82       	std	Y+2, r1	; 0x02
    1e9c:	19 82       	std	Y+1, r1	; 0x01

	LCD_Command(0x40+(cLocation*8)); //Send the Address of CGRAM
    1e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea0:	88 2f       	mov	r24, r24
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	08 96       	adiw	r24, 0x08	; 8
    1ea6:	88 0f       	add	r24, r24
    1ea8:	99 1f       	adc	r25, r25
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	0e 94 47 06 	call	0xc8e	; 0xc8e <LCD_Command>
	for(iLoop=0;iLoop<8;iLoop++)
    1eb6:	1a 82       	std	Y+2, r1	; 0x02
    1eb8:	19 82       	std	Y+1, r1	; 0x01
    1eba:	0f c0       	rjmp	.+30     	; 0x1eda <LCD_CreateCustomCharacter+0x54>
	LCD_Char(Pattern[iLoop]); //Pass the bytes of pattern on LCD
    1ebc:	29 81       	ldd	r18, Y+1	; 0x01
    1ebe:	3a 81       	ldd	r19, Y+2	; 0x02
    1ec0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	e2 0f       	add	r30, r18
    1ec8:	f3 1f       	adc	r31, r19
    1eca:	80 81       	ld	r24, Z
    1ecc:	0e 94 b8 09 	call	0x1370	; 0x1370 <LCD_Char>
void LCD_CreateCustomCharacter(unsigned char *Pattern,const char cLocation)
{
	int iLoop=0;

	LCD_Command(0x40+(cLocation*8)); //Send the Address of CGRAM
	for(iLoop=0;iLoop<8;iLoop++)
    1ed0:	89 81       	ldd	r24, Y+1	; 0x01
    1ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	9a 83       	std	Y+2, r25	; 0x02
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ede:	88 30       	cpi	r24, 0x08	; 8
    1ee0:	91 05       	cpc	r25, r1
    1ee2:	64 f3       	brlt	.-40     	; 0x1ebc <LCD_CreateCustomCharacter+0x36>
	LCD_Char(Pattern[iLoop]); //Pass the bytes of pattern on LCD
}
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <main>:
unsigned char Pattern2[]= {0x0e,0x11,0x11,0x11,0x11,0x11,0x11,0x11};
unsigned char Pattern3[] = {0x11,0x11,0x11,0x1f,0x00,0x00,0x00,0x00};


void main(void)
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	6c 97       	sbiw	r28, 0x1c	; 28
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61

	LCD_Init();			/* Initialization of LCD*/
    1f08:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <LCD_Init>
	LCD_CreateCustomCharacter(Pattern1,0);
    1f0c:	84 e8       	ldi	r24, 0x84	; 132
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	60 e0       	ldi	r22, 0x00	; 0
    1f12:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <LCD_CreateCustomCharacter>
	LCD_CreateCustomCharacter(Pattern2,1);
    1f16:	8c e8       	ldi	r24, 0x8C	; 140
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	61 e0       	ldi	r22, 0x01	; 1
    1f1c:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <LCD_CreateCustomCharacter>
	LCD_CreateCustomCharacter(Pattern3,2);
    1f20:	84 e9       	ldi	r24, 0x94	; 148
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	62 e0       	ldi	r22, 0x02	; 2
    1f26:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <LCD_CreateCustomCharacter>


	while(1)
	{
  Gotoxy(1,4);
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	64 e0       	ldi	r22, 0x04	; 4
    1f2e:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <Gotoxy>
  LCD_String("say hello t'y");
    1f32:	80 e6       	ldi	r24, 0x60	; 96
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <LCD_String>
  Gotoxy(2,4);
    1f3a:	82 e0       	ldi	r24, 0x02	; 2
    1f3c:	64 e0       	ldi	r22, 0x04	; 4
    1f3e:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <Gotoxy>
  LCD_String("little friend");
    1f42:	8e e6       	ldi	r24, 0x6E	; 110
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <LCD_String>
Gotoxy(1,1);
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	61 e0       	ldi	r22, 0x01	; 1
    1f4e:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <Gotoxy>
LCD_Char(0);
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	0e 94 b8 09 	call	0x1370	; 0x1370 <LCD_Char>
Gotoxy(1,3);
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	63 e0       	ldi	r22, 0x03	; 3
    1f5c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <Gotoxy>
LCD_Char(0);
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	0e 94 b8 09 	call	0x1370	; 0x1370 <LCD_Char>
Gotoxy(2,1);
    1f66:	82 e0       	ldi	r24, 0x02	; 2
    1f68:	61 e0       	ldi	r22, 0x01	; 1
    1f6a:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <Gotoxy>
LCD_Char(2);
    1f6e:	82 e0       	ldi	r24, 0x02	; 2
    1f70:	0e 94 b8 09 	call	0x1370	; 0x1370 <LCD_Char>
Gotoxy(2,2);
    1f74:	82 e0       	ldi	r24, 0x02	; 2
    1f76:	62 e0       	ldi	r22, 0x02	; 2
    1f78:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <Gotoxy>
LCD_Char(2);
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
    1f7e:	0e 94 b8 09 	call	0x1370	; 0x1370 <LCD_Char>
Gotoxy(2,3);
    1f82:	82 e0       	ldi	r24, 0x02	; 2
    1f84:	63 e0       	ldi	r22, 0x03	; 3
    1f86:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <Gotoxy>
LCD_Char(2);
    1f8a:	82 e0       	ldi	r24, 0x02	; 2
    1f8c:	0e 94 b8 09 	call	0x1370	; 0x1370 <LCD_Char>


Gotoxy(1,2);
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	62 e0       	ldi	r22, 0x02	; 2
    1f94:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <Gotoxy>
LCD_Char(0);
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	0e 94 b8 09 	call	0x1370	; 0x1370 <LCD_Char>
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	aa e7       	ldi	r26, 0x7A	; 122
    1fa4:	b3 e4       	ldi	r27, 0x43	; 67
    1fa6:	89 8f       	std	Y+25, r24	; 0x19
    1fa8:	9a 8f       	std	Y+26, r25	; 0x1a
    1faa:	ab 8f       	std	Y+27, r26	; 0x1b
    1fac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fae:	69 8d       	ldd	r22, Y+25	; 0x19
    1fb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	4a ef       	ldi	r20, 0xFA	; 250
    1fbc:	54 e4       	ldi	r21, 0x44	; 68
    1fbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	8d 8b       	std	Y+21, r24	; 0x15
    1fc8:	9e 8b       	std	Y+22, r25	; 0x16
    1fca:	af 8b       	std	Y+23, r26	; 0x17
    1fcc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fce:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e8       	ldi	r20, 0x80	; 128
    1fdc:	5f e3       	ldi	r21, 0x3F	; 63
    1fde:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fe2:	88 23       	and	r24, r24
    1fe4:	2c f4       	brge	.+10     	; 0x1ff0 <main+0xfc>
		__ticks = 1;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	9c 8b       	std	Y+20, r25	; 0x14
    1fec:	8b 8b       	std	Y+19, r24	; 0x13
    1fee:	3f c0       	rjmp	.+126    	; 0x206e <main+0x17a>
	else if (__tmp > 65535)
    1ff0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	3f ef       	ldi	r19, 0xFF	; 255
    1ffc:	4f e7       	ldi	r20, 0x7F	; 127
    1ffe:	57 e4       	ldi	r21, 0x47	; 71
    2000:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2004:	18 16       	cp	r1, r24
    2006:	4c f5       	brge	.+82     	; 0x205a <main+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2008:	69 8d       	ldd	r22, Y+25	; 0x19
    200a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    200c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    200e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e2       	ldi	r20, 0x20	; 32
    2016:	51 e4       	ldi	r21, 0x41	; 65
    2018:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	bc 01       	movw	r22, r24
    2022:	cd 01       	movw	r24, r26
    2024:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	9c 8b       	std	Y+20, r25	; 0x14
    202e:	8b 8b       	std	Y+19, r24	; 0x13
    2030:	0f c0       	rjmp	.+30     	; 0x2050 <main+0x15c>
    2032:	88 ec       	ldi	r24, 0xC8	; 200
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	9a 8b       	std	Y+18, r25	; 0x12
    2038:	89 8b       	std	Y+17, r24	; 0x11
    203a:	89 89       	ldd	r24, Y+17	; 0x11
    203c:	9a 89       	ldd	r25, Y+18	; 0x12
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	f1 f7       	brne	.-4      	; 0x203e <main+0x14a>
    2042:	9a 8b       	std	Y+18, r25	; 0x12
    2044:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2046:	8b 89       	ldd	r24, Y+19	; 0x13
    2048:	9c 89       	ldd	r25, Y+20	; 0x14
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	9c 8b       	std	Y+20, r25	; 0x14
    204e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2050:	8b 89       	ldd	r24, Y+19	; 0x13
    2052:	9c 89       	ldd	r25, Y+20	; 0x14
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	69 f7       	brne	.-38     	; 0x2032 <main+0x13e>
    2058:	14 c0       	rjmp	.+40     	; 0x2082 <main+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205a:	6d 89       	ldd	r22, Y+21	; 0x15
    205c:	7e 89       	ldd	r23, Y+22	; 0x16
    205e:	8f 89       	ldd	r24, Y+23	; 0x17
    2060:	98 8d       	ldd	r25, Y+24	; 0x18
    2062:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	9c 8b       	std	Y+20, r25	; 0x14
    206c:	8b 8b       	std	Y+19, r24	; 0x13
    206e:	8b 89       	ldd	r24, Y+19	; 0x13
    2070:	9c 89       	ldd	r25, Y+20	; 0x14
    2072:	98 8b       	std	Y+16, r25	; 0x10
    2074:	8f 87       	std	Y+15, r24	; 0x0f
    2076:	8f 85       	ldd	r24, Y+15	; 0x0f
    2078:	98 89       	ldd	r25, Y+16	; 0x10
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <main+0x186>
    207e:	98 8b       	std	Y+16, r25	; 0x10
    2080:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(250);
Gotoxy(1,2);
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	62 e0       	ldi	r22, 0x02	; 2
    2086:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <Gotoxy>
LCD_Char(1);
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	0e 94 b8 09 	call	0x1370	; 0x1370 <LCD_Char>
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	aa e7       	ldi	r26, 0x7A	; 122
    2096:	b3 e4       	ldi	r27, 0x43	; 67
    2098:	8b 87       	std	Y+11, r24	; 0x0b
    209a:	9c 87       	std	Y+12, r25	; 0x0c
    209c:	ad 87       	std	Y+13, r26	; 0x0d
    209e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	4a ef       	ldi	r20, 0xFA	; 250
    20ae:	54 e4       	ldi	r21, 0x44	; 68
    20b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	8f 83       	std	Y+7, r24	; 0x07
    20ba:	98 87       	std	Y+8, r25	; 0x08
    20bc:	a9 87       	std	Y+9, r26	; 0x09
    20be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20c0:	6f 81       	ldd	r22, Y+7	; 0x07
    20c2:	78 85       	ldd	r23, Y+8	; 0x08
    20c4:	89 85       	ldd	r24, Y+9	; 0x09
    20c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 e8       	ldi	r20, 0x80	; 128
    20ce:	5f e3       	ldi	r21, 0x3F	; 63
    20d0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20d4:	88 23       	and	r24, r24
    20d6:	2c f4       	brge	.+10     	; 0x20e2 <main+0x1ee>
		__ticks = 1;
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	9e 83       	std	Y+6, r25	; 0x06
    20de:	8d 83       	std	Y+5, r24	; 0x05
    20e0:	3f c0       	rjmp	.+126    	; 0x2160 <main+0x26c>
	else if (__tmp > 65535)
    20e2:	6f 81       	ldd	r22, Y+7	; 0x07
    20e4:	78 85       	ldd	r23, Y+8	; 0x08
    20e6:	89 85       	ldd	r24, Y+9	; 0x09
    20e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	3f ef       	ldi	r19, 0xFF	; 255
    20ee:	4f e7       	ldi	r20, 0x7F	; 127
    20f0:	57 e4       	ldi	r21, 0x47	; 71
    20f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20f6:	18 16       	cp	r1, r24
    20f8:	4c f5       	brge	.+82     	; 0x214c <main+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    20fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    20fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2100:	9e 85       	ldd	r25, Y+14	; 0x0e
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e2       	ldi	r20, 0x20	; 32
    2108:	51 e4       	ldi	r21, 0x41	; 65
    210a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	bc 01       	movw	r22, r24
    2114:	cd 01       	movw	r24, r26
    2116:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	9e 83       	std	Y+6, r25	; 0x06
    2120:	8d 83       	std	Y+5, r24	; 0x05
    2122:	0f c0       	rjmp	.+30     	; 0x2142 <main+0x24e>
    2124:	88 ec       	ldi	r24, 0xC8	; 200
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	9c 83       	std	Y+4, r25	; 0x04
    212a:	8b 83       	std	Y+3, r24	; 0x03
    212c:	8b 81       	ldd	r24, Y+3	; 0x03
    212e:	9c 81       	ldd	r25, Y+4	; 0x04
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	f1 f7       	brne	.-4      	; 0x2130 <main+0x23c>
    2134:	9c 83       	std	Y+4, r25	; 0x04
    2136:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2138:	8d 81       	ldd	r24, Y+5	; 0x05
    213a:	9e 81       	ldd	r25, Y+6	; 0x06
    213c:	01 97       	sbiw	r24, 0x01	; 1
    213e:	9e 83       	std	Y+6, r25	; 0x06
    2140:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2142:	8d 81       	ldd	r24, Y+5	; 0x05
    2144:	9e 81       	ldd	r25, Y+6	; 0x06
    2146:	00 97       	sbiw	r24, 0x00	; 0
    2148:	69 f7       	brne	.-38     	; 0x2124 <main+0x230>
    214a:	ef ce       	rjmp	.-546    	; 0x1f2a <main+0x36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214c:	6f 81       	ldd	r22, Y+7	; 0x07
    214e:	78 85       	ldd	r23, Y+8	; 0x08
    2150:	89 85       	ldd	r24, Y+9	; 0x09
    2152:	9a 85       	ldd	r25, Y+10	; 0x0a
    2154:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	9e 83       	std	Y+6, r25	; 0x06
    215e:	8d 83       	std	Y+5, r24	; 0x05
    2160:	8d 81       	ldd	r24, Y+5	; 0x05
    2162:	9e 81       	ldd	r25, Y+6	; 0x06
    2164:	9a 83       	std	Y+2, r25	; 0x02
    2166:	89 83       	std	Y+1, r24	; 0x01
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	9a 81       	ldd	r25, Y+2	; 0x02
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	f1 f7       	brne	.-4      	; 0x216c <main+0x278>
    2170:	9a 83       	std	Y+2, r25	; 0x02
    2172:	89 83       	std	Y+1, r24	; 0x01
    2174:	da ce       	rjmp	.-588    	; 0x1f2a <main+0x36>

00002176 <__prologue_saves__>:
    2176:	2f 92       	push	r2
    2178:	3f 92       	push	r3
    217a:	4f 92       	push	r4
    217c:	5f 92       	push	r5
    217e:	6f 92       	push	r6
    2180:	7f 92       	push	r7
    2182:	8f 92       	push	r8
    2184:	9f 92       	push	r9
    2186:	af 92       	push	r10
    2188:	bf 92       	push	r11
    218a:	cf 92       	push	r12
    218c:	df 92       	push	r13
    218e:	ef 92       	push	r14
    2190:	ff 92       	push	r15
    2192:	0f 93       	push	r16
    2194:	1f 93       	push	r17
    2196:	cf 93       	push	r28
    2198:	df 93       	push	r29
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	ca 1b       	sub	r28, r26
    21a0:	db 0b       	sbc	r29, r27
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	09 94       	ijmp

000021ae <__epilogue_restores__>:
    21ae:	2a 88       	ldd	r2, Y+18	; 0x12
    21b0:	39 88       	ldd	r3, Y+17	; 0x11
    21b2:	48 88       	ldd	r4, Y+16	; 0x10
    21b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    21b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    21b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    21ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    21bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    21be:	aa 84       	ldd	r10, Y+10	; 0x0a
    21c0:	b9 84       	ldd	r11, Y+9	; 0x09
    21c2:	c8 84       	ldd	r12, Y+8	; 0x08
    21c4:	df 80       	ldd	r13, Y+7	; 0x07
    21c6:	ee 80       	ldd	r14, Y+6	; 0x06
    21c8:	fd 80       	ldd	r15, Y+5	; 0x05
    21ca:	0c 81       	ldd	r16, Y+4	; 0x04
    21cc:	1b 81       	ldd	r17, Y+3	; 0x03
    21ce:	aa 81       	ldd	r26, Y+2	; 0x02
    21d0:	b9 81       	ldd	r27, Y+1	; 0x01
    21d2:	ce 0f       	add	r28, r30
    21d4:	d1 1d       	adc	r29, r1
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	cd bf       	out	0x3d, r28	; 61
    21e0:	ed 01       	movw	r28, r26
    21e2:	08 95       	ret

000021e4 <_exit>:
    21e4:	f8 94       	cli

000021e6 <__stop_program>:
    21e6:	ff cf       	rjmp	.-2      	; 0x21e6 <__stop_program>
