
lcd_d.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003186  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00003186  000031fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001f44  00000000  00000000  00003208  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000094c  00000000  00000000  0000514c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00005d87  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00009e50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a292  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ab20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 67 18 	call	0x30ce	; 0x30ce <main>
      7a:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a5 e6       	ldi	r26, 0x65	; 101
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 a6 18 	jmp	0x314c	; 0x314c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 96 18 	jmp	0x312c	; 0x312c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 96 18 	jmp	0x312c	; 0x312c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	85 e6       	ldi	r24, 0x65	; 101
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 a6 18 	jmp	0x314c	; 0x314c <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 92 18 	jmp	0x3124	; 0x3124 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	65 e6       	ldi	r22, 0x65	; 101
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 ae 18 	jmp	0x315c	; 0x315c <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 96 18 	jmp	0x312c	; 0x312c <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 96 18 	jmp	0x312c	; 0x312c <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 96 18 	jmp	0x312c	; 0x312c <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 9a 18 	jmp	0x3134	; 0x3134 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 b6 18 	jmp	0x316c	; 0x316c <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_vidSetPinDir>:
#include "DIO.h"



void DIO_vidSetPinDir (u8 port,u8 pin,u8 dir)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <DIO_vidSetPinDir+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <DIO_vidSetPinDir+0x8>
     c96:	0f 92       	push	r0
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	89 83       	std	Y+1, r24	; 0x01
     c9e:	6a 83       	std	Y+2, r22	; 0x02
     ca0:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
     ca2:	89 81       	ldd	r24, Y+1	; 0x01
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	3d 83       	std	Y+5, r19	; 0x05
     caa:	2c 83       	std	Y+4, r18	; 0x04
     cac:	8c 81       	ldd	r24, Y+4	; 0x04
     cae:	9d 81       	ldd	r25, Y+5	; 0x05
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	91 05       	cpc	r25, r1
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <DIO_vidSetPinDir+0x2a>
     cb6:	46 c0       	rjmp	.+140    	; 0xd44 <DIO_vidSetPinDir+0xb6>
     cb8:	2c 81       	ldd	r18, Y+4	; 0x04
     cba:	3d 81       	ldd	r19, Y+5	; 0x05
     cbc:	22 30       	cpi	r18, 0x02	; 2
     cbe:	31 05       	cpc	r19, r1
     cc0:	2c f4       	brge	.+10     	; 0xccc <DIO_vidSetPinDir+0x3e>
     cc2:	8c 81       	ldd	r24, Y+4	; 0x04
     cc4:	9d 81       	ldd	r25, Y+5	; 0x05
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	71 f0       	breq	.+28     	; 0xce6 <DIO_vidSetPinDir+0x58>
     cca:	c7 c0       	rjmp	.+398    	; 0xe5a <DIO_vidSetPinDir+0x1cc>
     ccc:	2c 81       	ldd	r18, Y+4	; 0x04
     cce:	3d 81       	ldd	r19, Y+5	; 0x05
     cd0:	22 30       	cpi	r18, 0x02	; 2
     cd2:	31 05       	cpc	r19, r1
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <DIO_vidSetPinDir+0x4a>
     cd6:	65 c0       	rjmp	.+202    	; 0xda2 <DIO_vidSetPinDir+0x114>
     cd8:	8c 81       	ldd	r24, Y+4	; 0x04
     cda:	9d 81       	ldd	r25, Y+5	; 0x05
     cdc:	83 30       	cpi	r24, 0x03	; 3
     cde:	91 05       	cpc	r25, r1
     ce0:	09 f4       	brne	.+2      	; 0xce4 <DIO_vidSetPinDir+0x56>
     ce2:	8e c0       	rjmp	.+284    	; 0xe00 <DIO_vidSetPinDir+0x172>
     ce4:	ba c0       	rjmp	.+372    	; 0xe5a <DIO_vidSetPinDir+0x1cc>
	{
	case 0:
		if(dir==input)
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	88 23       	and	r24, r24
     cea:	a1 f4       	brne	.+40     	; 0xd14 <DIO_vidSetPinDir+0x86>
			Clr_Bit(DDRA,pin);
     cec:	aa e3       	ldi	r26, 0x3A	; 58
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	ea e3       	ldi	r30, 0x3A	; 58
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	48 2f       	mov	r20, r24
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	02 2e       	mov	r0, r18
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <DIO_vidSetPinDir+0x7c>
     d06:	88 0f       	add	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	0a 94       	dec	r0
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <DIO_vidSetPinDir+0x78>
     d0e:	80 95       	com	r24
     d10:	84 23       	and	r24, r20
     d12:	8c 93       	st	X, r24
		if(dir==output)
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	09 f0       	breq	.+2      	; 0xd1c <DIO_vidSetPinDir+0x8e>
     d1a:	9f c0       	rjmp	.+318    	; 0xe5a <DIO_vidSetPinDir+0x1cc>
			Set_Bit(DDRA,pin);
     d1c:	aa e3       	ldi	r26, 0x3A	; 58
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	ea e3       	ldi	r30, 0x3A	; 58
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	48 2f       	mov	r20, r24
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	02 2e       	mov	r0, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <DIO_vidSetPinDir+0xac>
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	0a 94       	dec	r0
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <DIO_vidSetPinDir+0xa8>
     d3e:	84 2b       	or	r24, r20
     d40:	8c 93       	st	X, r24
     d42:	8b c0       	rjmp	.+278    	; 0xe5a <DIO_vidSetPinDir+0x1cc>
		break;

	case 1:
			if(dir==input)
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	88 23       	and	r24, r24
     d48:	a1 f4       	brne	.+40     	; 0xd72 <DIO_vidSetPinDir+0xe4>
				Clr_Bit(DDRB,pin);
     d4a:	a7 e3       	ldi	r26, 0x37	; 55
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e7 e3       	ldi	r30, 0x37	; 55
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	48 2f       	mov	r20, r24
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	02 2e       	mov	r0, r18
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <DIO_vidSetPinDir+0xda>
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	0a 94       	dec	r0
     d6a:	e2 f7       	brpl	.-8      	; 0xd64 <DIO_vidSetPinDir+0xd6>
     d6c:	80 95       	com	r24
     d6e:	84 23       	and	r24, r20
     d70:	8c 93       	st	X, r24
			if(dir==output)
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	81 30       	cpi	r24, 0x01	; 1
     d76:	09 f0       	breq	.+2      	; 0xd7a <DIO_vidSetPinDir+0xec>
     d78:	70 c0       	rjmp	.+224    	; 0xe5a <DIO_vidSetPinDir+0x1cc>
				Set_Bit(DDRB,pin);
     d7a:	a7 e3       	ldi	r26, 0x37	; 55
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e7 e3       	ldi	r30, 0x37	; 55
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <DIO_vidSetPinDir+0x10a>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <DIO_vidSetPinDir+0x106>
     d9c:	84 2b       	or	r24, r20
     d9e:	8c 93       	st	X, r24
     da0:	5c c0       	rjmp	.+184    	; 0xe5a <DIO_vidSetPinDir+0x1cc>
			break;

	case 2:
			if(dir==input)
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	88 23       	and	r24, r24
     da6:	a1 f4       	brne	.+40     	; 0xdd0 <DIO_vidSetPinDir+0x142>
				Clr_Bit(DDRC,pin);
     da8:	a4 e3       	ldi	r26, 0x34	; 52
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e4 e3       	ldi	r30, 0x34	; 52
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	48 2f       	mov	r20, r24
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 2e       	mov	r0, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <DIO_vidSetPinDir+0x138>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <DIO_vidSetPinDir+0x134>
     dca:	80 95       	com	r24
     dcc:	84 23       	and	r24, r20
     dce:	8c 93       	st	X, r24
			if(dir==output)
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	09 f0       	breq	.+2      	; 0xdd8 <DIO_vidSetPinDir+0x14a>
     dd6:	41 c0       	rjmp	.+130    	; 0xe5a <DIO_vidSetPinDir+0x1cc>
				Set_Bit(DDRC,pin);
     dd8:	a4 e3       	ldi	r26, 0x34	; 52
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	e4 e3       	ldi	r30, 0x34	; 52
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	48 2f       	mov	r20, r24
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	02 2e       	mov	r0, r18
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_vidSetPinDir+0x168>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	0a 94       	dec	r0
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_vidSetPinDir+0x164>
     dfa:	84 2b       	or	r24, r20
     dfc:	8c 93       	st	X, r24
     dfe:	2d c0       	rjmp	.+90     	; 0xe5a <DIO_vidSetPinDir+0x1cc>
			break;

	case 3:
			if(dir==input)
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	88 23       	and	r24, r24
     e04:	a1 f4       	brne	.+40     	; 0xe2e <DIO_vidSetPinDir+0x1a0>
				Clr_Bit(DDRD,pin);
     e06:	a1 e3       	ldi	r26, 0x31	; 49
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e1 e3       	ldi	r30, 0x31	; 49
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	48 2f       	mov	r20, r24
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	02 2e       	mov	r0, r18
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_vidSetPinDir+0x196>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	0a 94       	dec	r0
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_vidSetPinDir+0x192>
     e28:	80 95       	com	r24
     e2a:	84 23       	and	r24, r20
     e2c:	8c 93       	st	X, r24
			if(dir==output)
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	81 30       	cpi	r24, 0x01	; 1
     e32:	99 f4       	brne	.+38     	; 0xe5a <DIO_vidSetPinDir+0x1cc>
				Set_Bit(DDRD,pin);
     e34:	a1 e3       	ldi	r26, 0x31	; 49
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e1 e3       	ldi	r30, 0x31	; 49
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	48 2f       	mov	r20, r24
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	28 2f       	mov	r18, r24
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 2e       	mov	r0, r18
     e4c:	02 c0       	rjmp	.+4      	; 0xe52 <DIO_vidSetPinDir+0x1c4>
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	0a 94       	dec	r0
     e54:	e2 f7       	brpl	.-8      	; 0xe4e <DIO_vidSetPinDir+0x1c0>
     e56:	84 2b       	or	r24, r20
     e58:	8c 93       	st	X, r24
			break;
	}
}
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <DIO_vidWritePinValue>:

	void DIO_vidWritePinValue (u8 port,u8 pin,u8 value)
	{
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <DIO_vidWritePinValue+0x6>
     e70:	00 d0       	rcall	.+0      	; 0xe72 <DIO_vidWritePinValue+0x8>
     e72:	0f 92       	push	r0
     e74:	cd b7       	in	r28, 0x3d	; 61
     e76:	de b7       	in	r29, 0x3e	; 62
     e78:	89 83       	std	Y+1, r24	; 0x01
     e7a:	6a 83       	std	Y+2, r22	; 0x02
     e7c:	4b 83       	std	Y+3, r20	; 0x03
		switch(port)
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	3d 83       	std	Y+5, r19	; 0x05
     e86:	2c 83       	std	Y+4, r18	; 0x04
     e88:	8c 81       	ldd	r24, Y+4	; 0x04
     e8a:	9d 81       	ldd	r25, Y+5	; 0x05
     e8c:	81 30       	cpi	r24, 0x01	; 1
     e8e:	91 05       	cpc	r25, r1
     e90:	09 f4       	brne	.+2      	; 0xe94 <DIO_vidWritePinValue+0x2a>
     e92:	46 c0       	rjmp	.+140    	; 0xf20 <DIO_vidWritePinValue+0xb6>
     e94:	2c 81       	ldd	r18, Y+4	; 0x04
     e96:	3d 81       	ldd	r19, Y+5	; 0x05
     e98:	22 30       	cpi	r18, 0x02	; 2
     e9a:	31 05       	cpc	r19, r1
     e9c:	2c f4       	brge	.+10     	; 0xea8 <DIO_vidWritePinValue+0x3e>
     e9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ea0:	9d 81       	ldd	r25, Y+5	; 0x05
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	71 f0       	breq	.+28     	; 0xec2 <DIO_vidWritePinValue+0x58>
     ea6:	c7 c0       	rjmp	.+398    	; 0x1036 <DIO_vidWritePinValue+0x1cc>
     ea8:	2c 81       	ldd	r18, Y+4	; 0x04
     eaa:	3d 81       	ldd	r19, Y+5	; 0x05
     eac:	22 30       	cpi	r18, 0x02	; 2
     eae:	31 05       	cpc	r19, r1
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <DIO_vidWritePinValue+0x4a>
     eb2:	65 c0       	rjmp	.+202    	; 0xf7e <DIO_vidWritePinValue+0x114>
     eb4:	8c 81       	ldd	r24, Y+4	; 0x04
     eb6:	9d 81       	ldd	r25, Y+5	; 0x05
     eb8:	83 30       	cpi	r24, 0x03	; 3
     eba:	91 05       	cpc	r25, r1
     ebc:	09 f4       	brne	.+2      	; 0xec0 <DIO_vidWritePinValue+0x56>
     ebe:	8e c0       	rjmp	.+284    	; 0xfdc <DIO_vidWritePinValue+0x172>
     ec0:	ba c0       	rjmp	.+372    	; 0x1036 <DIO_vidWritePinValue+0x1cc>
		{
		case 0:
			if(value==low)
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	88 23       	and	r24, r24
     ec6:	a1 f4       	brne	.+40     	; 0xef0 <DIO_vidWritePinValue+0x86>
				Clr_Bit(PORTA,pin);
     ec8:	ab e3       	ldi	r26, 0x3B	; 59
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	eb e3       	ldi	r30, 0x3B	; 59
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <DIO_vidWritePinValue+0x7c>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <DIO_vidWritePinValue+0x78>
     eea:	80 95       	com	r24
     eec:	84 23       	and	r24, r20
     eee:	8c 93       	st	X, r24
			if(value==high)
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	81 30       	cpi	r24, 0x01	; 1
     ef4:	09 f0       	breq	.+2      	; 0xef8 <DIO_vidWritePinValue+0x8e>
     ef6:	9f c0       	rjmp	.+318    	; 0x1036 <DIO_vidWritePinValue+0x1cc>
				Set_Bit(PORTA,pin);
     ef8:	ab e3       	ldi	r26, 0x3B	; 59
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	eb e3       	ldi	r30, 0x3B	; 59
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	48 2f       	mov	r20, r24
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	02 2e       	mov	r0, r18
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <DIO_vidWritePinValue+0xac>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	0a 94       	dec	r0
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <DIO_vidWritePinValue+0xa8>
     f1a:	84 2b       	or	r24, r20
     f1c:	8c 93       	st	X, r24
     f1e:	8b c0       	rjmp	.+278    	; 0x1036 <DIO_vidWritePinValue+0x1cc>
			break;

		case 1:
				if(value==low)
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	88 23       	and	r24, r24
     f24:	a1 f4       	brne	.+40     	; 0xf4e <DIO_vidWritePinValue+0xe4>
					Clr_Bit(PORTB,pin);
     f26:	a8 e3       	ldi	r26, 0x38	; 56
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e8 e3       	ldi	r30, 0x38	; 56
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	48 2f       	mov	r20, r24
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 2e       	mov	r0, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_vidWritePinValue+0xda>
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	0a 94       	dec	r0
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_vidWritePinValue+0xd6>
     f48:	80 95       	com	r24
     f4a:	84 23       	and	r24, r20
     f4c:	8c 93       	st	X, r24
				if(value==high)
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	09 f0       	breq	.+2      	; 0xf56 <DIO_vidWritePinValue+0xec>
     f54:	70 c0       	rjmp	.+224    	; 0x1036 <DIO_vidWritePinValue+0x1cc>
					Set_Bit(PORTB,pin);
     f56:	a8 e3       	ldi	r26, 0x38	; 56
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e8 e3       	ldi	r30, 0x38	; 56
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 2e       	mov	r0, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <DIO_vidWritePinValue+0x10a>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <DIO_vidWritePinValue+0x106>
     f78:	84 2b       	or	r24, r20
     f7a:	8c 93       	st	X, r24
     f7c:	5c c0       	rjmp	.+184    	; 0x1036 <DIO_vidWritePinValue+0x1cc>
				break;

		case 2:
				if(value==low)
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	88 23       	and	r24, r24
     f82:	a1 f4       	brne	.+40     	; 0xfac <DIO_vidWritePinValue+0x142>
					Clr_Bit(PORTC,pin);
     f84:	a5 e3       	ldi	r26, 0x35	; 53
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e5 e3       	ldi	r30, 0x35	; 53
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	48 2f       	mov	r20, r24
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 2e       	mov	r0, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <DIO_vidWritePinValue+0x138>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	0a 94       	dec	r0
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <DIO_vidWritePinValue+0x134>
     fa6:	80 95       	com	r24
     fa8:	84 23       	and	r24, r20
     faa:	8c 93       	st	X, r24
				if(value==high)
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	81 30       	cpi	r24, 0x01	; 1
     fb0:	09 f0       	breq	.+2      	; 0xfb4 <DIO_vidWritePinValue+0x14a>
     fb2:	41 c0       	rjmp	.+130    	; 0x1036 <DIO_vidWritePinValue+0x1cc>
					Set_Bit(PORTC,pin);
     fb4:	a5 e3       	ldi	r26, 0x35	; 53
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e5 e3       	ldi	r30, 0x35	; 53
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <DIO_vidWritePinValue+0x168>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <DIO_vidWritePinValue+0x164>
     fd6:	84 2b       	or	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	2d c0       	rjmp	.+90     	; 0x1036 <DIO_vidWritePinValue+0x1cc>
				break;

		case 3:
				if(value==low)
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	88 23       	and	r24, r24
     fe0:	a1 f4       	brne	.+40     	; 0x100a <DIO_vidWritePinValue+0x1a0>
					Clr_Bit(PORTD,pin);
     fe2:	a2 e3       	ldi	r26, 0x32	; 50
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e2 e3       	ldi	r30, 0x32	; 50
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_vidWritePinValue+0x196>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_vidWritePinValue+0x192>
    1004:	80 95       	com	r24
    1006:	84 23       	and	r24, r20
    1008:	8c 93       	st	X, r24
				if(value==high)
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	81 30       	cpi	r24, 0x01	; 1
    100e:	99 f4       	brne	.+38     	; 0x1036 <DIO_vidWritePinValue+0x1cc>
					Set_Bit(PORTD,pin);
    1010:	a2 e3       	ldi	r26, 0x32	; 50
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e2 e3       	ldi	r30, 0x32	; 50
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 2e       	mov	r0, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <DIO_vidWritePinValue+0x1c4>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <DIO_vidWritePinValue+0x1c0>
    1032:	84 2b       	or	r24, r20
    1034:	8c 93       	st	X, r24
				break;
		}
	}
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <DIO_u8ReadPinValue>:

	u8 DIO_u8ReadPinValue(u8 port, u8 pin)
	{
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	00 d0       	rcall	.+0      	; 0x104c <DIO_u8ReadPinValue+0x6>
    104c:	00 d0       	rcall	.+0      	; 0x104e <DIO_u8ReadPinValue+0x8>
    104e:	0f 92       	push	r0
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	6a 83       	std	Y+2, r22	; 0x02
		switch(port)
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	3d 83       	std	Y+5, r19	; 0x05
    1060:	2c 83       	std	Y+4, r18	; 0x04
    1062:	4c 81       	ldd	r20, Y+4	; 0x04
    1064:	5d 81       	ldd	r21, Y+5	; 0x05
    1066:	41 30       	cpi	r20, 0x01	; 1
    1068:	51 05       	cpc	r21, r1
    106a:	b1 f1       	breq	.+108    	; 0x10d8 <DIO_u8ReadPinValue+0x92>
    106c:	8c 81       	ldd	r24, Y+4	; 0x04
    106e:	9d 81       	ldd	r25, Y+5	; 0x05
    1070:	82 30       	cpi	r24, 0x02	; 2
    1072:	91 05       	cpc	r25, r1
    1074:	34 f4       	brge	.+12     	; 0x1082 <DIO_u8ReadPinValue+0x3c>
    1076:	2c 81       	ldd	r18, Y+4	; 0x04
    1078:	3d 81       	ldd	r19, Y+5	; 0x05
    107a:	21 15       	cp	r18, r1
    107c:	31 05       	cpc	r19, r1
    107e:	71 f0       	breq	.+28     	; 0x109c <DIO_u8ReadPinValue+0x56>
    1080:	85 c0       	rjmp	.+266    	; 0x118c <DIO_u8ReadPinValue+0x146>
    1082:	4c 81       	ldd	r20, Y+4	; 0x04
    1084:	5d 81       	ldd	r21, Y+5	; 0x05
    1086:	42 30       	cpi	r20, 0x02	; 2
    1088:	51 05       	cpc	r21, r1
    108a:	09 f4       	brne	.+2      	; 0x108e <DIO_u8ReadPinValue+0x48>
    108c:	43 c0       	rjmp	.+134    	; 0x1114 <DIO_u8ReadPinValue+0xce>
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	9d 81       	ldd	r25, Y+5	; 0x05
    1092:	83 30       	cpi	r24, 0x03	; 3
    1094:	91 05       	cpc	r25, r1
    1096:	09 f4       	brne	.+2      	; 0x109a <DIO_u8ReadPinValue+0x54>
    1098:	5b c0       	rjmp	.+182    	; 0x1150 <DIO_u8ReadPinValue+0x10a>
    109a:	78 c0       	rjmp	.+240    	; 0x118c <DIO_u8ReadPinValue+0x146>
		{
		case a:
			return Get_Bit(PINA,pin);
    109c:	e9 e3       	ldi	r30, 0x39	; 57
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	50 e0       	ldi	r21, 0x00	; 0
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_u8ReadPinValue+0x70>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	2a 95       	dec	r18
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_u8ReadPinValue+0x6c>
    10ba:	9a 01       	movw	r18, r20
    10bc:	28 23       	and	r18, r24
    10be:	39 23       	and	r19, r25
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	88 2f       	mov	r24, r24
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	a9 01       	movw	r20, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_u8ReadPinValue+0x88>
    10ca:	55 95       	asr	r21
    10cc:	47 95       	ror	r20
    10ce:	8a 95       	dec	r24
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_u8ReadPinValue+0x84>
    10d2:	ca 01       	movw	r24, r20
    10d4:	8b 83       	std	Y+3, r24	; 0x03
    10d6:	5c c0       	rjmp	.+184    	; 0x1190 <DIO_u8ReadPinValue+0x14a>
			break;
		case b:
			return Get_Bit(PINB,pin);
    10d8:	e6 e3       	ldi	r30, 0x36	; 54
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <DIO_u8ReadPinValue+0xac>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	2a 95       	dec	r18
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <DIO_u8ReadPinValue+0xa8>
    10f6:	9a 01       	movw	r18, r20
    10f8:	28 23       	and	r18, r24
    10fa:	39 23       	and	r19, r25
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	a9 01       	movw	r20, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <DIO_u8ReadPinValue+0xc4>
    1106:	55 95       	asr	r21
    1108:	47 95       	ror	r20
    110a:	8a 95       	dec	r24
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <DIO_u8ReadPinValue+0xc0>
    110e:	ca 01       	movw	r24, r20
    1110:	8b 83       	std	Y+3, r24	; 0x03
    1112:	3e c0       	rjmp	.+124    	; 0x1190 <DIO_u8ReadPinValue+0x14a>
			break;
		case c:
			return Get_Bit(PINC,pin);
    1114:	e3 e3       	ldi	r30, 0x33	; 51
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	50 e0       	ldi	r21, 0x00	; 0
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_u8ReadPinValue+0xe8>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	2a 95       	dec	r18
    1130:	e2 f7       	brpl	.-8      	; 0x112a <DIO_u8ReadPinValue+0xe4>
    1132:	9a 01       	movw	r18, r20
    1134:	28 23       	and	r18, r24
    1136:	39 23       	and	r19, r25
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	a9 01       	movw	r20, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_u8ReadPinValue+0x100>
    1142:	55 95       	asr	r21
    1144:	47 95       	ror	r20
    1146:	8a 95       	dec	r24
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <DIO_u8ReadPinValue+0xfc>
    114a:	ca 01       	movw	r24, r20
    114c:	8b 83       	std	Y+3, r24	; 0x03
    114e:	20 c0       	rjmp	.+64     	; 0x1190 <DIO_u8ReadPinValue+0x14a>
			break;
		case d:
			return Get_Bit(PIND,pin);
    1150:	e0 e3       	ldi	r30, 0x30	; 48
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	48 2f       	mov	r20, r24
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 c0       	rjmp	.+4      	; 0x116a <DIO_u8ReadPinValue+0x124>
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	2a 95       	dec	r18
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <DIO_u8ReadPinValue+0x120>
    116e:	9a 01       	movw	r18, r20
    1170:	28 23       	and	r18, r24
    1172:	39 23       	and	r19, r25
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	88 2f       	mov	r24, r24
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	a9 01       	movw	r20, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <DIO_u8ReadPinValue+0x13c>
    117e:	55 95       	asr	r21
    1180:	47 95       	ror	r20
    1182:	8a 95       	dec	r24
    1184:	e2 f7       	brpl	.-8      	; 0x117e <DIO_u8ReadPinValue+0x138>
    1186:	ca 01       	movw	r24, r20
    1188:	8b 83       	std	Y+3, r24	; 0x03
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_u8ReadPinValue+0x14a>
			break;
		default :
			return port;
    118c:	59 81       	ldd	r21, Y+1	; 0x01
    118e:	5b 83       	std	Y+3, r21	; 0x03
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
			break;
		}


	}
    1192:	0f 90       	pop	r0
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <DIO_vidSetPortDir>:

	void DIO_vidSetPortDir(u8 port, u8 Dir)
		{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <DIO_vidSetPortDir+0x6>
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <DIO_vidSetPortDir+0x8>
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	6a 83       	std	Y+2, r22	; 0x02
			switch(port)
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	3c 83       	std	Y+4, r19	; 0x04
    11ba:	2b 83       	std	Y+3, r18	; 0x03
    11bc:	8b 81       	ldd	r24, Y+3	; 0x03
    11be:	9c 81       	ldd	r25, Y+4	; 0x04
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	91 05       	cpc	r25, r1
    11c4:	d1 f0       	breq	.+52     	; 0x11fa <DIO_vidSetPortDir+0x58>
    11c6:	2b 81       	ldd	r18, Y+3	; 0x03
    11c8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ca:	22 30       	cpi	r18, 0x02	; 2
    11cc:	31 05       	cpc	r19, r1
    11ce:	2c f4       	brge	.+10     	; 0x11da <DIO_vidSetPortDir+0x38>
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	61 f0       	breq	.+24     	; 0x11f0 <DIO_vidSetPortDir+0x4e>
    11d8:	1e c0       	rjmp	.+60     	; 0x1216 <DIO_vidSetPortDir+0x74>
    11da:	2b 81       	ldd	r18, Y+3	; 0x03
    11dc:	3c 81       	ldd	r19, Y+4	; 0x04
    11de:	22 30       	cpi	r18, 0x02	; 2
    11e0:	31 05       	cpc	r19, r1
    11e2:	81 f0       	breq	.+32     	; 0x1204 <DIO_vidSetPortDir+0x62>
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	83 30       	cpi	r24, 0x03	; 3
    11ea:	91 05       	cpc	r25, r1
    11ec:	81 f0       	breq	.+32     	; 0x120e <DIO_vidSetPortDir+0x6c>
    11ee:	13 c0       	rjmp	.+38     	; 0x1216 <DIO_vidSetPortDir+0x74>
			{
			case a:
				DDRA=Dir;
    11f0:	ea e3       	ldi	r30, 0x3A	; 58
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	80 83       	st	Z, r24
    11f8:	0e c0       	rjmp	.+28     	; 0x1216 <DIO_vidSetPortDir+0x74>
				break;
			case b:
				DDRB=Dir;
    11fa:	e7 e3       	ldi	r30, 0x37	; 55
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	80 83       	st	Z, r24
    1202:	09 c0       	rjmp	.+18     	; 0x1216 <DIO_vidSetPortDir+0x74>
				break;
			case c:
				DDRC=Dir;
    1204:	e4 e3       	ldi	r30, 0x34	; 52
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	80 83       	st	Z, r24
    120c:	04 c0       	rjmp	.+8      	; 0x1216 <DIO_vidSetPortDir+0x74>
				break;
			case d:
				DDRD=Dir;
    120e:	e1 e3       	ldi	r30, 0x31	; 49
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	80 83       	st	Z, r24
				break;

			}


		}
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	0f 90       	pop	r0
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <DIO_vidWritePortValue>:

	void DIO_vidWritePortValue(u8 port, u8 Value)
			{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	00 d0       	rcall	.+0      	; 0x122a <DIO_vidWritePortValue+0x6>
    122a:	00 d0       	rcall	.+0      	; 0x122c <DIO_vidWritePortValue+0x8>
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	89 83       	std	Y+1, r24	; 0x01
    1232:	6a 83       	std	Y+2, r22	; 0x02
				switch(port)
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	3c 83       	std	Y+4, r19	; 0x04
    123c:	2b 83       	std	Y+3, r18	; 0x03
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	9c 81       	ldd	r25, Y+4	; 0x04
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	91 05       	cpc	r25, r1
    1246:	d1 f0       	breq	.+52     	; 0x127c <DIO_vidWritePortValue+0x58>
    1248:	2b 81       	ldd	r18, Y+3	; 0x03
    124a:	3c 81       	ldd	r19, Y+4	; 0x04
    124c:	22 30       	cpi	r18, 0x02	; 2
    124e:	31 05       	cpc	r19, r1
    1250:	2c f4       	brge	.+10     	; 0x125c <DIO_vidWritePortValue+0x38>
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	9c 81       	ldd	r25, Y+4	; 0x04
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	61 f0       	breq	.+24     	; 0x1272 <DIO_vidWritePortValue+0x4e>
    125a:	1e c0       	rjmp	.+60     	; 0x1298 <DIO_vidWritePortValue+0x74>
    125c:	2b 81       	ldd	r18, Y+3	; 0x03
    125e:	3c 81       	ldd	r19, Y+4	; 0x04
    1260:	22 30       	cpi	r18, 0x02	; 2
    1262:	31 05       	cpc	r19, r1
    1264:	81 f0       	breq	.+32     	; 0x1286 <DIO_vidWritePortValue+0x62>
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9c 81       	ldd	r25, Y+4	; 0x04
    126a:	83 30       	cpi	r24, 0x03	; 3
    126c:	91 05       	cpc	r25, r1
    126e:	81 f0       	breq	.+32     	; 0x1290 <DIO_vidWritePortValue+0x6c>
    1270:	13 c0       	rjmp	.+38     	; 0x1298 <DIO_vidWritePortValue+0x74>
				{
				case a:
					PORTA=Value;
    1272:	eb e3       	ldi	r30, 0x3B	; 59
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	80 83       	st	Z, r24
    127a:	0e c0       	rjmp	.+28     	; 0x1298 <DIO_vidWritePortValue+0x74>
					break;
				case b:
					PORTB=Value;
    127c:	e8 e3       	ldi	r30, 0x38	; 56
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	80 83       	st	Z, r24
    1284:	09 c0       	rjmp	.+18     	; 0x1298 <DIO_vidWritePortValue+0x74>
					break;
				case c:
					PORTC=Value;
    1286:	e5 e3       	ldi	r30, 0x35	; 53
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	80 83       	st	Z, r24
    128e:	04 c0       	rjmp	.+8      	; 0x1298 <DIO_vidWritePortValue+0x74>
					break;
				case d:
					PORTD=Value;
    1290:	e2 e3       	ldi	r30, 0x32	; 50
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	80 83       	st	Z, r24
					break;

				}


			}
    1298:	0f 90       	pop	r0
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <lcd_vidWriteCommand>:
#include "lcd.h"
#define F_CPU 8000000


void lcd_vidWriteCommand(u8 command)
{
    12a6:	df 93       	push	r29
    12a8:	cf 93       	push	r28
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	2f 97       	sbiw	r28, 0x0f	; 15
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	8f 87       	std	Y+15, r24	; 0x0f
	//RW=0
  DIO_vidWritePinValue(controlport,rw_pin,low);
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	62 e0       	ldi	r22, 0x02	; 2
    12c0:	40 e0       	ldi	r20, 0x00	; 0
    12c2:	0e 94 35 07 	call	0xe6a	; 0xe6a <DIO_vidWritePinValue>
  //RS=0
  DIO_vidWritePinValue(controlport,rs_pin,low);
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	61 e0       	ldi	r22, 0x01	; 1
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	0e 94 35 07 	call	0xe6a	; 0xe6a <DIO_vidWritePinValue>
//dataport
  DIO_vidWritePortValue(dataport,command);
    12d0:	82 e0       	ldi	r24, 0x02	; 2
    12d2:	6f 85       	ldd	r22, Y+15	; 0x0f
    12d4:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_vidWritePortValue>
  //E=1
  DIO_vidWritePinValue(controlport,EN_pin,high);
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	41 e0       	ldi	r20, 0x01	; 1
    12de:	0e 94 35 07 	call	0xe6a	; 0xe6a <DIO_vidWritePinValue>
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	a0 e0       	ldi	r26, 0x00	; 0
    12e8:	b0 e4       	ldi	r27, 0x40	; 64
    12ea:	8b 87       	std	Y+11, r24	; 0x0b
    12ec:	9c 87       	std	Y+12, r25	; 0x0c
    12ee:	ad 87       	std	Y+13, r26	; 0x0d
    12f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	4a ef       	ldi	r20, 0xFA	; 250
    1300:	54 e4       	ldi	r21, 0x44	; 68
    1302:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	8f 83       	std	Y+7, r24	; 0x07
    130c:	98 87       	std	Y+8, r25	; 0x08
    130e:	a9 87       	std	Y+9, r26	; 0x09
    1310:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1312:	6f 81       	ldd	r22, Y+7	; 0x07
    1314:	78 85       	ldd	r23, Y+8	; 0x08
    1316:	89 85       	ldd	r24, Y+9	; 0x09
    1318:	9a 85       	ldd	r25, Y+10	; 0x0a
    131a:	20 e0       	ldi	r18, 0x00	; 0
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	40 e8       	ldi	r20, 0x80	; 128
    1320:	5f e3       	ldi	r21, 0x3F	; 63
    1322:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1326:	88 23       	and	r24, r24
    1328:	2c f4       	brge	.+10     	; 0x1334 <lcd_vidWriteCommand+0x8e>
		__ticks = 1;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	9e 83       	std	Y+6, r25	; 0x06
    1330:	8d 83       	std	Y+5, r24	; 0x05
    1332:	3f c0       	rjmp	.+126    	; 0x13b2 <lcd_vidWriteCommand+0x10c>
	else if (__tmp > 65535)
    1334:	6f 81       	ldd	r22, Y+7	; 0x07
    1336:	78 85       	ldd	r23, Y+8	; 0x08
    1338:	89 85       	ldd	r24, Y+9	; 0x09
    133a:	9a 85       	ldd	r25, Y+10	; 0x0a
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	3f ef       	ldi	r19, 0xFF	; 255
    1340:	4f e7       	ldi	r20, 0x7F	; 127
    1342:	57 e4       	ldi	r21, 0x47	; 71
    1344:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1348:	18 16       	cp	r1, r24
    134a:	4c f5       	brge	.+82     	; 0x139e <lcd_vidWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    134c:	6b 85       	ldd	r22, Y+11	; 0x0b
    134e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1350:	8d 85       	ldd	r24, Y+13	; 0x0d
    1352:	9e 85       	ldd	r25, Y+14	; 0x0e
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	40 e2       	ldi	r20, 0x20	; 32
    135a:	51 e4       	ldi	r21, 0x41	; 65
    135c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	bc 01       	movw	r22, r24
    1366:	cd 01       	movw	r24, r26
    1368:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	9e 83       	std	Y+6, r25	; 0x06
    1372:	8d 83       	std	Y+5, r24	; 0x05
    1374:	0f c0       	rjmp	.+30     	; 0x1394 <lcd_vidWriteCommand+0xee>
    1376:	88 ec       	ldi	r24, 0xC8	; 200
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	9c 83       	std	Y+4, r25	; 0x04
    137c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	9c 81       	ldd	r25, Y+4	; 0x04
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	f1 f7       	brne	.-4      	; 0x1382 <lcd_vidWriteCommand+0xdc>
    1386:	9c 83       	std	Y+4, r25	; 0x04
    1388:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    138a:	8d 81       	ldd	r24, Y+5	; 0x05
    138c:	9e 81       	ldd	r25, Y+6	; 0x06
    138e:	01 97       	sbiw	r24, 0x01	; 1
    1390:	9e 83       	std	Y+6, r25	; 0x06
    1392:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1394:	8d 81       	ldd	r24, Y+5	; 0x05
    1396:	9e 81       	ldd	r25, Y+6	; 0x06
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	69 f7       	brne	.-38     	; 0x1376 <lcd_vidWriteCommand+0xd0>
    139c:	14 c0       	rjmp	.+40     	; 0x13c6 <lcd_vidWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    139e:	6f 81       	ldd	r22, Y+7	; 0x07
    13a0:	78 85       	ldd	r23, Y+8	; 0x08
    13a2:	89 85       	ldd	r24, Y+9	; 0x09
    13a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	9e 83       	std	Y+6, r25	; 0x06
    13b0:	8d 83       	std	Y+5, r24	; 0x05
    13b2:	8d 81       	ldd	r24, Y+5	; 0x05
    13b4:	9e 81       	ldd	r25, Y+6	; 0x06
    13b6:	9a 83       	std	Y+2, r25	; 0x02
    13b8:	89 83       	std	Y+1, r24	; 0x01
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	9a 81       	ldd	r25, Y+2	; 0x02
    13be:	01 97       	sbiw	r24, 0x01	; 1
    13c0:	f1 f7       	brne	.-4      	; 0x13be <lcd_vidWriteCommand+0x118>
    13c2:	9a 83       	std	Y+2, r25	; 0x02
    13c4:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(2);
  DIO_vidWritePinValue(controlport,EN_pin,low);
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	0e 94 35 07 	call	0xe6a	; 0xe6a <DIO_vidWritePinValue>
 }
    13d0:	2f 96       	adiw	r28, 0x0f	; 15
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	cf 91       	pop	r28
    13de:	df 91       	pop	r29
    13e0:	08 95       	ret

000013e2 <lcd_vidInit>:

void lcd_vidInit(void)
{
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	e8 97       	sbiw	r28, 0x38	; 56
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	f8 94       	cli
    13f0:	de bf       	out	0x3e, r29	; 62
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	cd bf       	out	0x3d, r28	; 61
  DIO_vidSetPinDir(controlport,rs_pin,output);
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	61 e0       	ldi	r22, 0x01	; 1
    13fa:	41 e0       	ldi	r20, 0x01	; 1
    13fc:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_vidSetPinDir>
  DIO_vidSetPinDir(controlport,rw_pin,output);
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	62 e0       	ldi	r22, 0x02	; 2
    1404:	41 e0       	ldi	r20, 0x01	; 1
    1406:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_vidSetPinDir>
  DIO_vidSetPinDir(controlport,EN_pin,output);
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	41 e0       	ldi	r20, 0x01	; 1
    1410:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_vidSetPinDir>
  DIO_vidSetPortDir(dataport,0xff);
    1414:	82 e0       	ldi	r24, 0x02	; 2
    1416:	6f ef       	ldi	r22, 0xFF	; 255
    1418:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <DIO_vidSetPortDir>
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	a8 e4       	ldi	r26, 0x48	; 72
    1422:	b2 e4       	ldi	r27, 0x42	; 66
    1424:	8d ab       	std	Y+53, r24	; 0x35
    1426:	9e ab       	std	Y+54, r25	; 0x36
    1428:	af ab       	std	Y+55, r26	; 0x37
    142a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    142c:	6d a9       	ldd	r22, Y+53	; 0x35
    142e:	7e a9       	ldd	r23, Y+54	; 0x36
    1430:	8f a9       	ldd	r24, Y+55	; 0x37
    1432:	98 ad       	ldd	r25, Y+56	; 0x38
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	4a ef       	ldi	r20, 0xFA	; 250
    143a:	54 e4       	ldi	r21, 0x44	; 68
    143c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	89 ab       	std	Y+49, r24	; 0x31
    1446:	9a ab       	std	Y+50, r25	; 0x32
    1448:	ab ab       	std	Y+51, r26	; 0x33
    144a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    144c:	69 a9       	ldd	r22, Y+49	; 0x31
    144e:	7a a9       	ldd	r23, Y+50	; 0x32
    1450:	8b a9       	ldd	r24, Y+51	; 0x33
    1452:	9c a9       	ldd	r25, Y+52	; 0x34
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 e8       	ldi	r20, 0x80	; 128
    145a:	5f e3       	ldi	r21, 0x3F	; 63
    145c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1460:	88 23       	and	r24, r24
    1462:	2c f4       	brge	.+10     	; 0x146e <lcd_vidInit+0x8c>
		__ticks = 1;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	98 ab       	std	Y+48, r25	; 0x30
    146a:	8f a7       	std	Y+47, r24	; 0x2f
    146c:	3f c0       	rjmp	.+126    	; 0x14ec <lcd_vidInit+0x10a>
	else if (__tmp > 65535)
    146e:	69 a9       	ldd	r22, Y+49	; 0x31
    1470:	7a a9       	ldd	r23, Y+50	; 0x32
    1472:	8b a9       	ldd	r24, Y+51	; 0x33
    1474:	9c a9       	ldd	r25, Y+52	; 0x34
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	3f ef       	ldi	r19, 0xFF	; 255
    147a:	4f e7       	ldi	r20, 0x7F	; 127
    147c:	57 e4       	ldi	r21, 0x47	; 71
    147e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1482:	18 16       	cp	r1, r24
    1484:	4c f5       	brge	.+82     	; 0x14d8 <lcd_vidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1486:	6d a9       	ldd	r22, Y+53	; 0x35
    1488:	7e a9       	ldd	r23, Y+54	; 0x36
    148a:	8f a9       	ldd	r24, Y+55	; 0x37
    148c:	98 ad       	ldd	r25, Y+56	; 0x38
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	40 e2       	ldi	r20, 0x20	; 32
    1494:	51 e4       	ldi	r21, 0x41	; 65
    1496:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	bc 01       	movw	r22, r24
    14a0:	cd 01       	movw	r24, r26
    14a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	98 ab       	std	Y+48, r25	; 0x30
    14ac:	8f a7       	std	Y+47, r24	; 0x2f
    14ae:	0f c0       	rjmp	.+30     	; 0x14ce <lcd_vidInit+0xec>
    14b0:	88 ec       	ldi	r24, 0xC8	; 200
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	9e a7       	std	Y+46, r25	; 0x2e
    14b6:	8d a7       	std	Y+45, r24	; 0x2d
    14b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    14ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <lcd_vidInit+0xda>
    14c0:	9e a7       	std	Y+46, r25	; 0x2e
    14c2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    14c6:	98 a9       	ldd	r25, Y+48	; 0x30
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	98 ab       	std	Y+48, r25	; 0x30
    14cc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    14d0:	98 a9       	ldd	r25, Y+48	; 0x30
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	69 f7       	brne	.-38     	; 0x14b0 <lcd_vidInit+0xce>
    14d6:	14 c0       	rjmp	.+40     	; 0x1500 <lcd_vidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d8:	69 a9       	ldd	r22, Y+49	; 0x31
    14da:	7a a9       	ldd	r23, Y+50	; 0x32
    14dc:	8b a9       	ldd	r24, Y+51	; 0x33
    14de:	9c a9       	ldd	r25, Y+52	; 0x34
    14e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	98 ab       	std	Y+48, r25	; 0x30
    14ea:	8f a7       	std	Y+47, r24	; 0x2f
    14ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    14ee:	98 a9       	ldd	r25, Y+48	; 0x30
    14f0:	9c a7       	std	Y+44, r25	; 0x2c
    14f2:	8b a7       	std	Y+43, r24	; 0x2b
    14f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    14f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	f1 f7       	brne	.-4      	; 0x14f8 <lcd_vidInit+0x116>
    14fc:	9c a7       	std	Y+44, r25	; 0x2c
    14fe:	8b a7       	std	Y+43, r24	; 0x2b

   _delay_ms(50);
   lcd_vidWriteCommand(0b00111100);
    1500:	8c e3       	ldi	r24, 0x3C	; 60
    1502:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_vidWriteCommand>
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	a0 e8       	ldi	r26, 0x80	; 128
    150c:	bf e3       	ldi	r27, 0x3F	; 63
    150e:	8f a3       	std	Y+39, r24	; 0x27
    1510:	98 a7       	std	Y+40, r25	; 0x28
    1512:	a9 a7       	std	Y+41, r26	; 0x29
    1514:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1516:	6f a1       	ldd	r22, Y+39	; 0x27
    1518:	78 a5       	ldd	r23, Y+40	; 0x28
    151a:	89 a5       	ldd	r24, Y+41	; 0x29
    151c:	9a a5       	ldd	r25, Y+42	; 0x2a
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	4a ef       	ldi	r20, 0xFA	; 250
    1524:	54 e4       	ldi	r21, 0x44	; 68
    1526:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	8b a3       	std	Y+35, r24	; 0x23
    1530:	9c a3       	std	Y+36, r25	; 0x24
    1532:	ad a3       	std	Y+37, r26	; 0x25
    1534:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1536:	6b a1       	ldd	r22, Y+35	; 0x23
    1538:	7c a1       	ldd	r23, Y+36	; 0x24
    153a:	8d a1       	ldd	r24, Y+37	; 0x25
    153c:	9e a1       	ldd	r25, Y+38	; 0x26
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e8       	ldi	r20, 0x80	; 128
    1544:	5f e3       	ldi	r21, 0x3F	; 63
    1546:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    154a:	88 23       	and	r24, r24
    154c:	2c f4       	brge	.+10     	; 0x1558 <lcd_vidInit+0x176>
		__ticks = 1;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9a a3       	std	Y+34, r25	; 0x22
    1554:	89 a3       	std	Y+33, r24	; 0x21
    1556:	3f c0       	rjmp	.+126    	; 0x15d6 <lcd_vidInit+0x1f4>
	else if (__tmp > 65535)
    1558:	6b a1       	ldd	r22, Y+35	; 0x23
    155a:	7c a1       	ldd	r23, Y+36	; 0x24
    155c:	8d a1       	ldd	r24, Y+37	; 0x25
    155e:	9e a1       	ldd	r25, Y+38	; 0x26
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	3f ef       	ldi	r19, 0xFF	; 255
    1564:	4f e7       	ldi	r20, 0x7F	; 127
    1566:	57 e4       	ldi	r21, 0x47	; 71
    1568:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    156c:	18 16       	cp	r1, r24
    156e:	4c f5       	brge	.+82     	; 0x15c2 <lcd_vidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1570:	6f a1       	ldd	r22, Y+39	; 0x27
    1572:	78 a5       	ldd	r23, Y+40	; 0x28
    1574:	89 a5       	ldd	r24, Y+41	; 0x29
    1576:	9a a5       	ldd	r25, Y+42	; 0x2a
    1578:	20 e0       	ldi	r18, 0x00	; 0
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	40 e2       	ldi	r20, 0x20	; 32
    157e:	51 e4       	ldi	r21, 0x41	; 65
    1580:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	bc 01       	movw	r22, r24
    158a:	cd 01       	movw	r24, r26
    158c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1590:	dc 01       	movw	r26, r24
    1592:	cb 01       	movw	r24, r22
    1594:	9a a3       	std	Y+34, r25	; 0x22
    1596:	89 a3       	std	Y+33, r24	; 0x21
    1598:	0f c0       	rjmp	.+30     	; 0x15b8 <lcd_vidInit+0x1d6>
    159a:	88 ec       	ldi	r24, 0xC8	; 200
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	98 a3       	std	Y+32, r25	; 0x20
    15a0:	8f 8f       	std	Y+31, r24	; 0x1f
    15a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15a4:	98 a1       	ldd	r25, Y+32	; 0x20
    15a6:	01 97       	sbiw	r24, 0x01	; 1
    15a8:	f1 f7       	brne	.-4      	; 0x15a6 <lcd_vidInit+0x1c4>
    15aa:	98 a3       	std	Y+32, r25	; 0x20
    15ac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ae:	89 a1       	ldd	r24, Y+33	; 0x21
    15b0:	9a a1       	ldd	r25, Y+34	; 0x22
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	9a a3       	std	Y+34, r25	; 0x22
    15b6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b8:	89 a1       	ldd	r24, Y+33	; 0x21
    15ba:	9a a1       	ldd	r25, Y+34	; 0x22
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	69 f7       	brne	.-38     	; 0x159a <lcd_vidInit+0x1b8>
    15c0:	14 c0       	rjmp	.+40     	; 0x15ea <lcd_vidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c2:	6b a1       	ldd	r22, Y+35	; 0x23
    15c4:	7c a1       	ldd	r23, Y+36	; 0x24
    15c6:	8d a1       	ldd	r24, Y+37	; 0x25
    15c8:	9e a1       	ldd	r25, Y+38	; 0x26
    15ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	9a a3       	std	Y+34, r25	; 0x22
    15d4:	89 a3       	std	Y+33, r24	; 0x21
    15d6:	89 a1       	ldd	r24, Y+33	; 0x21
    15d8:	9a a1       	ldd	r25, Y+34	; 0x22
    15da:	9e 8f       	std	Y+30, r25	; 0x1e
    15dc:	8d 8f       	std	Y+29, r24	; 0x1d
    15de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	f1 f7       	brne	.-4      	; 0x15e2 <lcd_vidInit+0x200>
    15e6:	9e 8f       	std	Y+30, r25	; 0x1e
    15e8:	8d 8f       	std	Y+29, r24	; 0x1d
   _delay_ms(1);
   lcd_vidWriteCommand(0b00001111);
    15ea:	8f e0       	ldi	r24, 0x0F	; 15
    15ec:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_vidWriteCommand>
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	a0 e8       	ldi	r26, 0x80	; 128
    15f6:	bf e3       	ldi	r27, 0x3F	; 63
    15f8:	89 8f       	std	Y+25, r24	; 0x19
    15fa:	9a 8f       	std	Y+26, r25	; 0x1a
    15fc:	ab 8f       	std	Y+27, r26	; 0x1b
    15fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1600:	69 8d       	ldd	r22, Y+25	; 0x19
    1602:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1604:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1606:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	4a ef       	ldi	r20, 0xFA	; 250
    160e:	54 e4       	ldi	r21, 0x44	; 68
    1610:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	8d 8b       	std	Y+21, r24	; 0x15
    161a:	9e 8b       	std	Y+22, r25	; 0x16
    161c:	af 8b       	std	Y+23, r26	; 0x17
    161e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1620:	6d 89       	ldd	r22, Y+21	; 0x15
    1622:	7e 89       	ldd	r23, Y+22	; 0x16
    1624:	8f 89       	ldd	r24, Y+23	; 0x17
    1626:	98 8d       	ldd	r25, Y+24	; 0x18
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e8       	ldi	r20, 0x80	; 128
    162e:	5f e3       	ldi	r21, 0x3F	; 63
    1630:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1634:	88 23       	and	r24, r24
    1636:	2c f4       	brge	.+10     	; 0x1642 <lcd_vidInit+0x260>
		__ticks = 1;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	9c 8b       	std	Y+20, r25	; 0x14
    163e:	8b 8b       	std	Y+19, r24	; 0x13
    1640:	3f c0       	rjmp	.+126    	; 0x16c0 <lcd_vidInit+0x2de>
	else if (__tmp > 65535)
    1642:	6d 89       	ldd	r22, Y+21	; 0x15
    1644:	7e 89       	ldd	r23, Y+22	; 0x16
    1646:	8f 89       	ldd	r24, Y+23	; 0x17
    1648:	98 8d       	ldd	r25, Y+24	; 0x18
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	3f ef       	ldi	r19, 0xFF	; 255
    164e:	4f e7       	ldi	r20, 0x7F	; 127
    1650:	57 e4       	ldi	r21, 0x47	; 71
    1652:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1656:	18 16       	cp	r1, r24
    1658:	4c f5       	brge	.+82     	; 0x16ac <lcd_vidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    165a:	69 8d       	ldd	r22, Y+25	; 0x19
    165c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    165e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1660:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	40 e2       	ldi	r20, 0x20	; 32
    1668:	51 e4       	ldi	r21, 0x41	; 65
    166a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	bc 01       	movw	r22, r24
    1674:	cd 01       	movw	r24, r26
    1676:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    167a:	dc 01       	movw	r26, r24
    167c:	cb 01       	movw	r24, r22
    167e:	9c 8b       	std	Y+20, r25	; 0x14
    1680:	8b 8b       	std	Y+19, r24	; 0x13
    1682:	0f c0       	rjmp	.+30     	; 0x16a2 <lcd_vidInit+0x2c0>
    1684:	88 ec       	ldi	r24, 0xC8	; 200
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	9a 8b       	std	Y+18, r25	; 0x12
    168a:	89 8b       	std	Y+17, r24	; 0x11
    168c:	89 89       	ldd	r24, Y+17	; 0x11
    168e:	9a 89       	ldd	r25, Y+18	; 0x12
    1690:	01 97       	sbiw	r24, 0x01	; 1
    1692:	f1 f7       	brne	.-4      	; 0x1690 <lcd_vidInit+0x2ae>
    1694:	9a 8b       	std	Y+18, r25	; 0x12
    1696:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1698:	8b 89       	ldd	r24, Y+19	; 0x13
    169a:	9c 89       	ldd	r25, Y+20	; 0x14
    169c:	01 97       	sbiw	r24, 0x01	; 1
    169e:	9c 8b       	std	Y+20, r25	; 0x14
    16a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a2:	8b 89       	ldd	r24, Y+19	; 0x13
    16a4:	9c 89       	ldd	r25, Y+20	; 0x14
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	69 f7       	brne	.-38     	; 0x1684 <lcd_vidInit+0x2a2>
    16aa:	14 c0       	rjmp	.+40     	; 0x16d4 <lcd_vidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ac:	6d 89       	ldd	r22, Y+21	; 0x15
    16ae:	7e 89       	ldd	r23, Y+22	; 0x16
    16b0:	8f 89       	ldd	r24, Y+23	; 0x17
    16b2:	98 8d       	ldd	r25, Y+24	; 0x18
    16b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	9c 8b       	std	Y+20, r25	; 0x14
    16be:	8b 8b       	std	Y+19, r24	; 0x13
    16c0:	8b 89       	ldd	r24, Y+19	; 0x13
    16c2:	9c 89       	ldd	r25, Y+20	; 0x14
    16c4:	98 8b       	std	Y+16, r25	; 0x10
    16c6:	8f 87       	std	Y+15, r24	; 0x0f
    16c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ca:	98 89       	ldd	r25, Y+16	; 0x10
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <lcd_vidInit+0x2ea>
    16d0:	98 8b       	std	Y+16, r25	; 0x10
    16d2:	8f 87       	std	Y+15, r24	; 0x0f
   _delay_ms(1);
   lcd_vidWriteCommand(0b00000001);
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_vidWriteCommand>
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	a0 e8       	ldi	r26, 0x80	; 128
    16e0:	bf e3       	ldi	r27, 0x3F	; 63
    16e2:	8b 87       	std	Y+11, r24	; 0x0b
    16e4:	9c 87       	std	Y+12, r25	; 0x0c
    16e6:	ad 87       	std	Y+13, r26	; 0x0d
    16e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	4a ef       	ldi	r20, 0xFA	; 250
    16f8:	54 e4       	ldi	r21, 0x44	; 68
    16fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	8f 83       	std	Y+7, r24	; 0x07
    1704:	98 87       	std	Y+8, r25	; 0x08
    1706:	a9 87       	std	Y+9, r26	; 0x09
    1708:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    170a:	6f 81       	ldd	r22, Y+7	; 0x07
    170c:	78 85       	ldd	r23, Y+8	; 0x08
    170e:	89 85       	ldd	r24, Y+9	; 0x09
    1710:	9a 85       	ldd	r25, Y+10	; 0x0a
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e8       	ldi	r20, 0x80	; 128
    1718:	5f e3       	ldi	r21, 0x3F	; 63
    171a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    171e:	88 23       	and	r24, r24
    1720:	2c f4       	brge	.+10     	; 0x172c <lcd_vidInit+0x34a>
		__ticks = 1;
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	9e 83       	std	Y+6, r25	; 0x06
    1728:	8d 83       	std	Y+5, r24	; 0x05
    172a:	3f c0       	rjmp	.+126    	; 0x17aa <lcd_vidInit+0x3c8>
	else if (__tmp > 65535)
    172c:	6f 81       	ldd	r22, Y+7	; 0x07
    172e:	78 85       	ldd	r23, Y+8	; 0x08
    1730:	89 85       	ldd	r24, Y+9	; 0x09
    1732:	9a 85       	ldd	r25, Y+10	; 0x0a
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	3f ef       	ldi	r19, 0xFF	; 255
    1738:	4f e7       	ldi	r20, 0x7F	; 127
    173a:	57 e4       	ldi	r21, 0x47	; 71
    173c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1740:	18 16       	cp	r1, r24
    1742:	4c f5       	brge	.+82     	; 0x1796 <lcd_vidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1744:	6b 85       	ldd	r22, Y+11	; 0x0b
    1746:	7c 85       	ldd	r23, Y+12	; 0x0c
    1748:	8d 85       	ldd	r24, Y+13	; 0x0d
    174a:	9e 85       	ldd	r25, Y+14	; 0x0e
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	40 e2       	ldi	r20, 0x20	; 32
    1752:	51 e4       	ldi	r21, 0x41	; 65
    1754:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	bc 01       	movw	r22, r24
    175e:	cd 01       	movw	r24, r26
    1760:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	9e 83       	std	Y+6, r25	; 0x06
    176a:	8d 83       	std	Y+5, r24	; 0x05
    176c:	0f c0       	rjmp	.+30     	; 0x178c <lcd_vidInit+0x3aa>
    176e:	88 ec       	ldi	r24, 0xC8	; 200
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	9c 83       	std	Y+4, r25	; 0x04
    1774:	8b 83       	std	Y+3, r24	; 0x03
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	9c 81       	ldd	r25, Y+4	; 0x04
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <lcd_vidInit+0x398>
    177e:	9c 83       	std	Y+4, r25	; 0x04
    1780:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1782:	8d 81       	ldd	r24, Y+5	; 0x05
    1784:	9e 81       	ldd	r25, Y+6	; 0x06
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	9e 83       	std	Y+6, r25	; 0x06
    178a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178c:	8d 81       	ldd	r24, Y+5	; 0x05
    178e:	9e 81       	ldd	r25, Y+6	; 0x06
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	69 f7       	brne	.-38     	; 0x176e <lcd_vidInit+0x38c>
    1794:	14 c0       	rjmp	.+40     	; 0x17be <lcd_vidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1796:	6f 81       	ldd	r22, Y+7	; 0x07
    1798:	78 85       	ldd	r23, Y+8	; 0x08
    179a:	89 85       	ldd	r24, Y+9	; 0x09
    179c:	9a 85       	ldd	r25, Y+10	; 0x0a
    179e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	9e 83       	std	Y+6, r25	; 0x06
    17a8:	8d 83       	std	Y+5, r24	; 0x05
    17aa:	8d 81       	ldd	r24, Y+5	; 0x05
    17ac:	9e 81       	ldd	r25, Y+6	; 0x06
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	9a 81       	ldd	r25, Y+2	; 0x02
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	f1 f7       	brne	.-4      	; 0x17b6 <lcd_vidInit+0x3d4>
    17ba:	9a 83       	std	Y+2, r25	; 0x02
    17bc:	89 83       	std	Y+1, r24	; 0x01
   _delay_ms(1);
}
    17be:	e8 96       	adiw	r28, 0x38	; 56
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	f8 94       	cli
    17c4:	de bf       	out	0x3e, r29	; 62
    17c6:	0f be       	out	0x3f, r0	; 63
    17c8:	cd bf       	out	0x3d, r28	; 61
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <LCD_vidInit>:

void LCD_vidInit(void)
{
    17d0:	0f 93       	push	r16
    17d2:	1f 93       	push	r17
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	c4 55       	subi	r28, 0x54	; 84
    17de:	d0 40       	sbci	r29, 0x00	; 0
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	fe 01       	movw	r30, r28
    17ec:	ef 5a       	subi	r30, 0xAF	; 175
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	a0 ef       	ldi	r26, 0xF0	; 240
    17f6:	b1 e4       	ldi	r27, 0x41	; 65
    17f8:	80 83       	st	Z, r24
    17fa:	91 83       	std	Z+1, r25	; 0x01
    17fc:	a2 83       	std	Z+2, r26	; 0x02
    17fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1800:	8e 01       	movw	r16, r28
    1802:	03 5b       	subi	r16, 0xB3	; 179
    1804:	1f 4f       	sbci	r17, 0xFF	; 255
    1806:	fe 01       	movw	r30, r28
    1808:	ef 5a       	subi	r30, 0xAF	; 175
    180a:	ff 4f       	sbci	r31, 0xFF	; 255
    180c:	60 81       	ld	r22, Z
    180e:	71 81       	ldd	r23, Z+1	; 0x01
    1810:	82 81       	ldd	r24, Z+2	; 0x02
    1812:	93 81       	ldd	r25, Z+3	; 0x03
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	4a ef       	ldi	r20, 0xFA	; 250
    181a:	54 e4       	ldi	r21, 0x44	; 68
    181c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	f8 01       	movw	r30, r16
    1826:	80 83       	st	Z, r24
    1828:	91 83       	std	Z+1, r25	; 0x01
    182a:	a2 83       	std	Z+2, r26	; 0x02
    182c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    182e:	fe 01       	movw	r30, r28
    1830:	e3 5b       	subi	r30, 0xB3	; 179
    1832:	ff 4f       	sbci	r31, 0xFF	; 255
    1834:	60 81       	ld	r22, Z
    1836:	71 81       	ldd	r23, Z+1	; 0x01
    1838:	82 81       	ldd	r24, Z+2	; 0x02
    183a:	93 81       	ldd	r25, Z+3	; 0x03
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e8       	ldi	r20, 0x80	; 128
    1842:	5f e3       	ldi	r21, 0x3F	; 63
    1844:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1848:	88 23       	and	r24, r24
    184a:	44 f4       	brge	.+16     	; 0x185c <LCD_vidInit+0x8c>
		__ticks = 1;
    184c:	fe 01       	movw	r30, r28
    184e:	e5 5b       	subi	r30, 0xB5	; 181
    1850:	ff 4f       	sbci	r31, 0xFF	; 255
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	91 83       	std	Z+1, r25	; 0x01
    1858:	80 83       	st	Z, r24
    185a:	64 c0       	rjmp	.+200    	; 0x1924 <LCD_vidInit+0x154>
	else if (__tmp > 65535)
    185c:	fe 01       	movw	r30, r28
    185e:	e3 5b       	subi	r30, 0xB3	; 179
    1860:	ff 4f       	sbci	r31, 0xFF	; 255
    1862:	60 81       	ld	r22, Z
    1864:	71 81       	ldd	r23, Z+1	; 0x01
    1866:	82 81       	ldd	r24, Z+2	; 0x02
    1868:	93 81       	ldd	r25, Z+3	; 0x03
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	3f ef       	ldi	r19, 0xFF	; 255
    186e:	4f e7       	ldi	r20, 0x7F	; 127
    1870:	57 e4       	ldi	r21, 0x47	; 71
    1872:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1876:	18 16       	cp	r1, r24
    1878:	0c f0       	brlt	.+2      	; 0x187c <LCD_vidInit+0xac>
    187a:	43 c0       	rjmp	.+134    	; 0x1902 <LCD_vidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    187c:	fe 01       	movw	r30, r28
    187e:	ef 5a       	subi	r30, 0xAF	; 175
    1880:	ff 4f       	sbci	r31, 0xFF	; 255
    1882:	60 81       	ld	r22, Z
    1884:	71 81       	ldd	r23, Z+1	; 0x01
    1886:	82 81       	ldd	r24, Z+2	; 0x02
    1888:	93 81       	ldd	r25, Z+3	; 0x03
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	40 e2       	ldi	r20, 0x20	; 32
    1890:	51 e4       	ldi	r21, 0x41	; 65
    1892:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	8e 01       	movw	r16, r28
    189c:	05 5b       	subi	r16, 0xB5	; 181
    189e:	1f 4f       	sbci	r17, 0xFF	; 255
    18a0:	bc 01       	movw	r22, r24
    18a2:	cd 01       	movw	r24, r26
    18a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	f8 01       	movw	r30, r16
    18ae:	91 83       	std	Z+1, r25	; 0x01
    18b0:	80 83       	st	Z, r24
    18b2:	1f c0       	rjmp	.+62     	; 0x18f2 <LCD_vidInit+0x122>
    18b4:	fe 01       	movw	r30, r28
    18b6:	e7 5b       	subi	r30, 0xB7	; 183
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	88 ec       	ldi	r24, 0xC8	; 200
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	91 83       	std	Z+1, r25	; 0x01
    18c0:	80 83       	st	Z, r24
    18c2:	fe 01       	movw	r30, r28
    18c4:	e7 5b       	subi	r30, 0xB7	; 183
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	80 81       	ld	r24, Z
    18ca:	91 81       	ldd	r25, Z+1	; 0x01
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	f1 f7       	brne	.-4      	; 0x18cc <LCD_vidInit+0xfc>
    18d0:	fe 01       	movw	r30, r28
    18d2:	e7 5b       	subi	r30, 0xB7	; 183
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	91 83       	std	Z+1, r25	; 0x01
    18d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18da:	de 01       	movw	r26, r28
    18dc:	a5 5b       	subi	r26, 0xB5	; 181
    18de:	bf 4f       	sbci	r27, 0xFF	; 255
    18e0:	fe 01       	movw	r30, r28
    18e2:	e5 5b       	subi	r30, 0xB5	; 181
    18e4:	ff 4f       	sbci	r31, 0xFF	; 255
    18e6:	80 81       	ld	r24, Z
    18e8:	91 81       	ldd	r25, Z+1	; 0x01
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	11 96       	adiw	r26, 0x01	; 1
    18ee:	9c 93       	st	X, r25
    18f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f2:	fe 01       	movw	r30, r28
    18f4:	e5 5b       	subi	r30, 0xB5	; 181
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	80 81       	ld	r24, Z
    18fa:	91 81       	ldd	r25, Z+1	; 0x01
    18fc:	00 97       	sbiw	r24, 0x00	; 0
    18fe:	d1 f6       	brne	.-76     	; 0x18b4 <LCD_vidInit+0xe4>
    1900:	27 c0       	rjmp	.+78     	; 0x1950 <LCD_vidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1902:	8e 01       	movw	r16, r28
    1904:	05 5b       	subi	r16, 0xB5	; 181
    1906:	1f 4f       	sbci	r17, 0xFF	; 255
    1908:	fe 01       	movw	r30, r28
    190a:	e3 5b       	subi	r30, 0xB3	; 179
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	60 81       	ld	r22, Z
    1910:	71 81       	ldd	r23, Z+1	; 0x01
    1912:	82 81       	ldd	r24, Z+2	; 0x02
    1914:	93 81       	ldd	r25, Z+3	; 0x03
    1916:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	f8 01       	movw	r30, r16
    1920:	91 83       	std	Z+1, r25	; 0x01
    1922:	80 83       	st	Z, r24
    1924:	de 01       	movw	r26, r28
    1926:	a9 5b       	subi	r26, 0xB9	; 185
    1928:	bf 4f       	sbci	r27, 0xFF	; 255
    192a:	fe 01       	movw	r30, r28
    192c:	e5 5b       	subi	r30, 0xB5	; 181
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	80 81       	ld	r24, Z
    1932:	91 81       	ldd	r25, Z+1	; 0x01
    1934:	8d 93       	st	X+, r24
    1936:	9c 93       	st	X, r25
    1938:	fe 01       	movw	r30, r28
    193a:	e9 5b       	subi	r30, 0xB9	; 185
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	80 81       	ld	r24, Z
    1940:	91 81       	ldd	r25, Z+1	; 0x01
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	f1 f7       	brne	.-4      	; 0x1942 <LCD_vidInit+0x172>
    1946:	fe 01       	movw	r30, r28
    1948:	e9 5b       	subi	r30, 0xB9	; 185
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	91 83       	std	Z+1, r25	; 0x01
    194e:	80 83       	st	Z, r24
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Return Home  */
	lcd_vidWriteCommand(lcd_Home);
    1950:	82 e0       	ldi	r24, 0x02	; 2
    1952:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_vidWriteCommand>
    1956:	fe 01       	movw	r30, r28
    1958:	ed 5b       	subi	r30, 0xBD	; 189
    195a:	ff 4f       	sbci	r31, 0xFF	; 255
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	a0 e7       	ldi	r26, 0x70	; 112
    1962:	b1 e4       	ldi	r27, 0x41	; 65
    1964:	80 83       	st	Z, r24
    1966:	91 83       	std	Z+1, r25	; 0x01
    1968:	a2 83       	std	Z+2, r26	; 0x02
    196a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196c:	8e 01       	movw	r16, r28
    196e:	01 5c       	subi	r16, 0xC1	; 193
    1970:	1f 4f       	sbci	r17, 0xFF	; 255
    1972:	fe 01       	movw	r30, r28
    1974:	ed 5b       	subi	r30, 0xBD	; 189
    1976:	ff 4f       	sbci	r31, 0xFF	; 255
    1978:	60 81       	ld	r22, Z
    197a:	71 81       	ldd	r23, Z+1	; 0x01
    197c:	82 81       	ldd	r24, Z+2	; 0x02
    197e:	93 81       	ldd	r25, Z+3	; 0x03
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	4a ef       	ldi	r20, 0xFA	; 250
    1986:	54 e4       	ldi	r21, 0x44	; 68
    1988:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	f8 01       	movw	r30, r16
    1992:	80 83       	st	Z, r24
    1994:	91 83       	std	Z+1, r25	; 0x01
    1996:	a2 83       	std	Z+2, r26	; 0x02
    1998:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    199a:	fe 01       	movw	r30, r28
    199c:	ff 96       	adiw	r30, 0x3f	; 63
    199e:	60 81       	ld	r22, Z
    19a0:	71 81       	ldd	r23, Z+1	; 0x01
    19a2:	82 81       	ldd	r24, Z+2	; 0x02
    19a4:	93 81       	ldd	r25, Z+3	; 0x03
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e8       	ldi	r20, 0x80	; 128
    19ac:	5f e3       	ldi	r21, 0x3F	; 63
    19ae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19b2:	88 23       	and	r24, r24
    19b4:	2c f4       	brge	.+10     	; 0x19c0 <LCD_vidInit+0x1f0>
		__ticks = 1;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	9e af       	std	Y+62, r25	; 0x3e
    19bc:	8d af       	std	Y+61, r24	; 0x3d
    19be:	46 c0       	rjmp	.+140    	; 0x1a4c <LCD_vidInit+0x27c>
	else if (__tmp > 65535)
    19c0:	fe 01       	movw	r30, r28
    19c2:	ff 96       	adiw	r30, 0x3f	; 63
    19c4:	60 81       	ld	r22, Z
    19c6:	71 81       	ldd	r23, Z+1	; 0x01
    19c8:	82 81       	ldd	r24, Z+2	; 0x02
    19ca:	93 81       	ldd	r25, Z+3	; 0x03
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	3f ef       	ldi	r19, 0xFF	; 255
    19d0:	4f e7       	ldi	r20, 0x7F	; 127
    19d2:	57 e4       	ldi	r21, 0x47	; 71
    19d4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19d8:	18 16       	cp	r1, r24
    19da:	64 f5       	brge	.+88     	; 0x1a34 <LCD_vidInit+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19dc:	fe 01       	movw	r30, r28
    19de:	ed 5b       	subi	r30, 0xBD	; 189
    19e0:	ff 4f       	sbci	r31, 0xFF	; 255
    19e2:	60 81       	ld	r22, Z
    19e4:	71 81       	ldd	r23, Z+1	; 0x01
    19e6:	82 81       	ldd	r24, Z+2	; 0x02
    19e8:	93 81       	ldd	r25, Z+3	; 0x03
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e2       	ldi	r20, 0x20	; 32
    19f0:	51 e4       	ldi	r21, 0x41	; 65
    19f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	bc 01       	movw	r22, r24
    19fc:	cd 01       	movw	r24, r26
    19fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	9e af       	std	Y+62, r25	; 0x3e
    1a08:	8d af       	std	Y+61, r24	; 0x3d
    1a0a:	0f c0       	rjmp	.+30     	; 0x1a2a <LCD_vidInit+0x25a>
    1a0c:	88 ec       	ldi	r24, 0xC8	; 200
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	9c af       	std	Y+60, r25	; 0x3c
    1a12:	8b af       	std	Y+59, r24	; 0x3b
    1a14:	8b ad       	ldd	r24, Y+59	; 0x3b
    1a16:	9c ad       	ldd	r25, Y+60	; 0x3c
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <LCD_vidInit+0x248>
    1a1c:	9c af       	std	Y+60, r25	; 0x3c
    1a1e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a20:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a22:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	9e af       	std	Y+62, r25	; 0x3e
    1a28:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	69 f7       	brne	.-38     	; 0x1a0c <LCD_vidInit+0x23c>
    1a32:	16 c0       	rjmp	.+44     	; 0x1a60 <LCD_vidInit+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a34:	fe 01       	movw	r30, r28
    1a36:	ff 96       	adiw	r30, 0x3f	; 63
    1a38:	60 81       	ld	r22, Z
    1a3a:	71 81       	ldd	r23, Z+1	; 0x01
    1a3c:	82 81       	ldd	r24, Z+2	; 0x02
    1a3e:	93 81       	ldd	r25, Z+3	; 0x03
    1a40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	9e af       	std	Y+62, r25	; 0x3e
    1a4a:	8d af       	std	Y+61, r24	; 0x3d
    1a4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a50:	9a af       	std	Y+58, r25	; 0x3a
    1a52:	89 af       	std	Y+57, r24	; 0x39
    1a54:	89 ad       	ldd	r24, Y+57	; 0x39
    1a56:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <LCD_vidInit+0x288>
    1a5c:	9a af       	std	Y+58, r25	; 0x3a
    1a5e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(15);

	/* Function Set  */
	lcd_vidWriteCommand(lcd_FunctionSet8bit);
    1a60:	88 e3       	ldi	r24, 0x38	; 56
    1a62:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_vidWriteCommand>
    1a66:	80 e0       	ldi	r24, 0x00	; 0
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	a0 e8       	ldi	r26, 0x80	; 128
    1a6c:	bf e3       	ldi	r27, 0x3F	; 63
    1a6e:	8d ab       	std	Y+53, r24	; 0x35
    1a70:	9e ab       	std	Y+54, r25	; 0x36
    1a72:	af ab       	std	Y+55, r26	; 0x37
    1a74:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a76:	6d a9       	ldd	r22, Y+53	; 0x35
    1a78:	7e a9       	ldd	r23, Y+54	; 0x36
    1a7a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a7c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	4a ef       	ldi	r20, 0xFA	; 250
    1a84:	54 e4       	ldi	r21, 0x44	; 68
    1a86:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	89 ab       	std	Y+49, r24	; 0x31
    1a90:	9a ab       	std	Y+50, r25	; 0x32
    1a92:	ab ab       	std	Y+51, r26	; 0x33
    1a94:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a96:	69 a9       	ldd	r22, Y+49	; 0x31
    1a98:	7a a9       	ldd	r23, Y+50	; 0x32
    1a9a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a9c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e8       	ldi	r20, 0x80	; 128
    1aa4:	5f e3       	ldi	r21, 0x3F	; 63
    1aa6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1aaa:	88 23       	and	r24, r24
    1aac:	2c f4       	brge	.+10     	; 0x1ab8 <LCD_vidInit+0x2e8>
		__ticks = 1;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	98 ab       	std	Y+48, r25	; 0x30
    1ab4:	8f a7       	std	Y+47, r24	; 0x2f
    1ab6:	3f c0       	rjmp	.+126    	; 0x1b36 <LCD_vidInit+0x366>
	else if (__tmp > 65535)
    1ab8:	69 a9       	ldd	r22, Y+49	; 0x31
    1aba:	7a a9       	ldd	r23, Y+50	; 0x32
    1abc:	8b a9       	ldd	r24, Y+51	; 0x33
    1abe:	9c a9       	ldd	r25, Y+52	; 0x34
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	3f ef       	ldi	r19, 0xFF	; 255
    1ac4:	4f e7       	ldi	r20, 0x7F	; 127
    1ac6:	57 e4       	ldi	r21, 0x47	; 71
    1ac8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1acc:	18 16       	cp	r1, r24
    1ace:	4c f5       	brge	.+82     	; 0x1b22 <LCD_vidInit+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ad2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ad4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ad6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e2       	ldi	r20, 0x20	; 32
    1ade:	51 e4       	ldi	r21, 0x41	; 65
    1ae0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	bc 01       	movw	r22, r24
    1aea:	cd 01       	movw	r24, r26
    1aec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	98 ab       	std	Y+48, r25	; 0x30
    1af6:	8f a7       	std	Y+47, r24	; 0x2f
    1af8:	0f c0       	rjmp	.+30     	; 0x1b18 <LCD_vidInit+0x348>
    1afa:	88 ec       	ldi	r24, 0xC8	; 200
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	9e a7       	std	Y+46, r25	; 0x2e
    1b00:	8d a7       	std	Y+45, r24	; 0x2d
    1b02:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b04:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <LCD_vidInit+0x336>
    1b0a:	9e a7       	std	Y+46, r25	; 0x2e
    1b0c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b10:	98 a9       	ldd	r25, Y+48	; 0x30
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	98 ab       	std	Y+48, r25	; 0x30
    1b16:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	69 f7       	brne	.-38     	; 0x1afa <LCD_vidInit+0x32a>
    1b20:	14 c0       	rjmp	.+40     	; 0x1b4a <LCD_vidInit+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b22:	69 a9       	ldd	r22, Y+49	; 0x31
    1b24:	7a a9       	ldd	r23, Y+50	; 0x32
    1b26:	8b a9       	ldd	r24, Y+51	; 0x33
    1b28:	9c a9       	ldd	r25, Y+52	; 0x34
    1b2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	98 ab       	std	Y+48, r25	; 0x30
    1b34:	8f a7       	std	Y+47, r24	; 0x2f
    1b36:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b38:	98 a9       	ldd	r25, Y+48	; 0x30
    1b3a:	9c a7       	std	Y+44, r25	; 0x2c
    1b3c:	8b a7       	std	Y+43, r24	; 0x2b
    1b3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b40:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <LCD_vidInit+0x372>
    1b46:	9c a7       	std	Y+44, r25	; 0x2c
    1b48:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/* Display ON OFF Control */
	lcd_vidWriteCommand(lcd_DisplayOn);
    1b4a:	8c e0       	ldi	r24, 0x0C	; 12
    1b4c:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_vidWriteCommand>
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	a0 e8       	ldi	r26, 0x80	; 128
    1b56:	bf e3       	ldi	r27, 0x3F	; 63
    1b58:	8f a3       	std	Y+39, r24	; 0x27
    1b5a:	98 a7       	std	Y+40, r25	; 0x28
    1b5c:	a9 a7       	std	Y+41, r26	; 0x29
    1b5e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b60:	6f a1       	ldd	r22, Y+39	; 0x27
    1b62:	78 a5       	ldd	r23, Y+40	; 0x28
    1b64:	89 a5       	ldd	r24, Y+41	; 0x29
    1b66:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	4a ef       	ldi	r20, 0xFA	; 250
    1b6e:	54 e4       	ldi	r21, 0x44	; 68
    1b70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	8b a3       	std	Y+35, r24	; 0x23
    1b7a:	9c a3       	std	Y+36, r25	; 0x24
    1b7c:	ad a3       	std	Y+37, r26	; 0x25
    1b7e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b80:	6b a1       	ldd	r22, Y+35	; 0x23
    1b82:	7c a1       	ldd	r23, Y+36	; 0x24
    1b84:	8d a1       	ldd	r24, Y+37	; 0x25
    1b86:	9e a1       	ldd	r25, Y+38	; 0x26
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e8       	ldi	r20, 0x80	; 128
    1b8e:	5f e3       	ldi	r21, 0x3F	; 63
    1b90:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b94:	88 23       	and	r24, r24
    1b96:	2c f4       	brge	.+10     	; 0x1ba2 <LCD_vidInit+0x3d2>
		__ticks = 1;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9a a3       	std	Y+34, r25	; 0x22
    1b9e:	89 a3       	std	Y+33, r24	; 0x21
    1ba0:	3f c0       	rjmp	.+126    	; 0x1c20 <LCD_vidInit+0x450>
	else if (__tmp > 65535)
    1ba2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ba4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ba6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ba8:	9e a1       	ldd	r25, Y+38	; 0x26
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	3f ef       	ldi	r19, 0xFF	; 255
    1bae:	4f e7       	ldi	r20, 0x7F	; 127
    1bb0:	57 e4       	ldi	r21, 0x47	; 71
    1bb2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bb6:	18 16       	cp	r1, r24
    1bb8:	4c f5       	brge	.+82     	; 0x1c0c <LCD_vidInit+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bba:	6f a1       	ldd	r22, Y+39	; 0x27
    1bbc:	78 a5       	ldd	r23, Y+40	; 0x28
    1bbe:	89 a5       	ldd	r24, Y+41	; 0x29
    1bc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	40 e2       	ldi	r20, 0x20	; 32
    1bc8:	51 e4       	ldi	r21, 0x41	; 65
    1bca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	bc 01       	movw	r22, r24
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	9a a3       	std	Y+34, r25	; 0x22
    1be0:	89 a3       	std	Y+33, r24	; 0x21
    1be2:	0f c0       	rjmp	.+30     	; 0x1c02 <LCD_vidInit+0x432>
    1be4:	88 ec       	ldi	r24, 0xC8	; 200
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	98 a3       	std	Y+32, r25	; 0x20
    1bea:	8f 8f       	std	Y+31, r24	; 0x1f
    1bec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bee:	98 a1       	ldd	r25, Y+32	; 0x20
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <LCD_vidInit+0x420>
    1bf4:	98 a3       	std	Y+32, r25	; 0x20
    1bf6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf8:	89 a1       	ldd	r24, Y+33	; 0x21
    1bfa:	9a a1       	ldd	r25, Y+34	; 0x22
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	9a a3       	std	Y+34, r25	; 0x22
    1c00:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c02:	89 a1       	ldd	r24, Y+33	; 0x21
    1c04:	9a a1       	ldd	r25, Y+34	; 0x22
    1c06:	00 97       	sbiw	r24, 0x00	; 0
    1c08:	69 f7       	brne	.-38     	; 0x1be4 <LCD_vidInit+0x414>
    1c0a:	14 c0       	rjmp	.+40     	; 0x1c34 <LCD_vidInit+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c0e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c10:	8d a1       	ldd	r24, Y+37	; 0x25
    1c12:	9e a1       	ldd	r25, Y+38	; 0x26
    1c14:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	cb 01       	movw	r24, r22
    1c1c:	9a a3       	std	Y+34, r25	; 0x22
    1c1e:	89 a3       	std	Y+33, r24	; 0x21
    1c20:	89 a1       	ldd	r24, Y+33	; 0x21
    1c22:	9a a1       	ldd	r25, Y+34	; 0x22
    1c24:	9e 8f       	std	Y+30, r25	; 0x1e
    1c26:	8d 8f       	std	Y+29, r24	; 0x1d
    1c28:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c2a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <LCD_vidInit+0x45c>
    1c30:	9e 8f       	std	Y+30, r25	; 0x1e
    1c32:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Clear Display */
	lcd_vidWriteCommand(lcd_Clear);
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_vidWriteCommand>
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	a0 e7       	ldi	r26, 0x70	; 112
    1c40:	b1 e4       	ldi	r27, 0x41	; 65
    1c42:	89 8f       	std	Y+25, r24	; 0x19
    1c44:	9a 8f       	std	Y+26, r25	; 0x1a
    1c46:	ab 8f       	std	Y+27, r26	; 0x1b
    1c48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	4a ef       	ldi	r20, 0xFA	; 250
    1c58:	54 e4       	ldi	r21, 0x44	; 68
    1c5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	8d 8b       	std	Y+21, r24	; 0x15
    1c64:	9e 8b       	std	Y+22, r25	; 0x16
    1c66:	af 8b       	std	Y+23, r26	; 0x17
    1c68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c70:	98 8d       	ldd	r25, Y+24	; 0x18
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	5f e3       	ldi	r21, 0x3F	; 63
    1c7a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c7e:	88 23       	and	r24, r24
    1c80:	2c f4       	brge	.+10     	; 0x1c8c <LCD_vidInit+0x4bc>
		__ticks = 1;
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9c 8b       	std	Y+20, r25	; 0x14
    1c88:	8b 8b       	std	Y+19, r24	; 0x13
    1c8a:	3f c0       	rjmp	.+126    	; 0x1d0a <LCD_vidInit+0x53a>
	else if (__tmp > 65535)
    1c8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c90:	8f 89       	ldd	r24, Y+23	; 0x17
    1c92:	98 8d       	ldd	r25, Y+24	; 0x18
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	3f ef       	ldi	r19, 0xFF	; 255
    1c98:	4f e7       	ldi	r20, 0x7F	; 127
    1c9a:	57 e4       	ldi	r21, 0x47	; 71
    1c9c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ca0:	18 16       	cp	r1, r24
    1ca2:	4c f5       	brge	.+82     	; 0x1cf6 <LCD_vidInit+0x526>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ca6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ca8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1caa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e2       	ldi	r20, 0x20	; 32
    1cb2:	51 e4       	ldi	r21, 0x41	; 65
    1cb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	9c 8b       	std	Y+20, r25	; 0x14
    1cca:	8b 8b       	std	Y+19, r24	; 0x13
    1ccc:	0f c0       	rjmp	.+30     	; 0x1cec <LCD_vidInit+0x51c>
    1cce:	88 ec       	ldi	r24, 0xC8	; 200
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	9a 8b       	std	Y+18, r25	; 0x12
    1cd4:	89 8b       	std	Y+17, r24	; 0x11
    1cd6:	89 89       	ldd	r24, Y+17	; 0x11
    1cd8:	9a 89       	ldd	r25, Y+18	; 0x12
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <LCD_vidInit+0x50a>
    1cde:	9a 8b       	std	Y+18, r25	; 0x12
    1ce0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	9c 8b       	std	Y+20, r25	; 0x14
    1cea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cec:	8b 89       	ldd	r24, Y+19	; 0x13
    1cee:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	69 f7       	brne	.-38     	; 0x1cce <LCD_vidInit+0x4fe>
    1cf4:	14 c0       	rjmp	.+40     	; 0x1d1e <LCD_vidInit+0x54e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf6:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cfa:	8f 89       	ldd	r24, Y+23	; 0x17
    1cfc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9c 8b       	std	Y+20, r25	; 0x14
    1d08:	8b 8b       	std	Y+19, r24	; 0x13
    1d0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d0e:	98 8b       	std	Y+16, r25	; 0x10
    1d10:	8f 87       	std	Y+15, r24	; 0x0f
    1d12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d14:	98 89       	ldd	r25, Y+16	; 0x10
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <LCD_vidInit+0x546>
    1d1a:	98 8b       	std	Y+16, r25	; 0x10
    1d1c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15);

	/* Entry Mode Set  */
	lcd_vidWriteCommand(lcd_EntryMode);
    1d1e:	86 e0       	ldi	r24, 0x06	; 6
    1d20:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_vidWriteCommand>
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	a0 e0       	ldi	r26, 0x00	; 0
    1d2a:	b0 e4       	ldi	r27, 0x40	; 64
    1d2c:	8b 87       	std	Y+11, r24	; 0x0b
    1d2e:	9c 87       	std	Y+12, r25	; 0x0c
    1d30:	ad 87       	std	Y+13, r26	; 0x0d
    1d32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	4a ef       	ldi	r20, 0xFA	; 250
    1d42:	54 e4       	ldi	r21, 0x44	; 68
    1d44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	8f 83       	std	Y+7, r24	; 0x07
    1d4e:	98 87       	std	Y+8, r25	; 0x08
    1d50:	a9 87       	std	Y+9, r26	; 0x09
    1d52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d54:	6f 81       	ldd	r22, Y+7	; 0x07
    1d56:	78 85       	ldd	r23, Y+8	; 0x08
    1d58:	89 85       	ldd	r24, Y+9	; 0x09
    1d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e8       	ldi	r20, 0x80	; 128
    1d62:	5f e3       	ldi	r21, 0x3F	; 63
    1d64:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d68:	88 23       	and	r24, r24
    1d6a:	2c f4       	brge	.+10     	; 0x1d76 <LCD_vidInit+0x5a6>
		__ticks = 1;
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	9e 83       	std	Y+6, r25	; 0x06
    1d72:	8d 83       	std	Y+5, r24	; 0x05
    1d74:	3f c0       	rjmp	.+126    	; 0x1df4 <LCD_vidInit+0x624>
	else if (__tmp > 65535)
    1d76:	6f 81       	ldd	r22, Y+7	; 0x07
    1d78:	78 85       	ldd	r23, Y+8	; 0x08
    1d7a:	89 85       	ldd	r24, Y+9	; 0x09
    1d7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	3f ef       	ldi	r19, 0xFF	; 255
    1d82:	4f e7       	ldi	r20, 0x7F	; 127
    1d84:	57 e4       	ldi	r21, 0x47	; 71
    1d86:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d8a:	18 16       	cp	r1, r24
    1d8c:	4c f5       	brge	.+82     	; 0x1de0 <LCD_vidInit+0x610>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	40 e2       	ldi	r20, 0x20	; 32
    1d9c:	51 e4       	ldi	r21, 0x41	; 65
    1d9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1da2:	dc 01       	movw	r26, r24
    1da4:	cb 01       	movw	r24, r22
    1da6:	bc 01       	movw	r22, r24
    1da8:	cd 01       	movw	r24, r26
    1daa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	9e 83       	std	Y+6, r25	; 0x06
    1db4:	8d 83       	std	Y+5, r24	; 0x05
    1db6:	0f c0       	rjmp	.+30     	; 0x1dd6 <LCD_vidInit+0x606>
    1db8:	88 ec       	ldi	r24, 0xC8	; 200
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	9c 83       	std	Y+4, r25	; 0x04
    1dbe:	8b 83       	std	Y+3, r24	; 0x03
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <LCD_vidInit+0x5f4>
    1dc8:	9c 83       	std	Y+4, r25	; 0x04
    1dca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dce:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	9e 83       	std	Y+6, r25	; 0x06
    1dd4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dda:	00 97       	sbiw	r24, 0x00	; 0
    1ddc:	69 f7       	brne	.-38     	; 0x1db8 <LCD_vidInit+0x5e8>
    1dde:	14 c0       	rjmp	.+40     	; 0x1e08 <LCD_vidInit+0x638>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de0:	6f 81       	ldd	r22, Y+7	; 0x07
    1de2:	78 85       	ldd	r23, Y+8	; 0x08
    1de4:	89 85       	ldd	r24, Y+9	; 0x09
    1de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	9e 83       	std	Y+6, r25	; 0x06
    1df2:	8d 83       	std	Y+5, r24	; 0x05
    1df4:	8d 81       	ldd	r24, Y+5	; 0x05
    1df6:	9e 81       	ldd	r25, Y+6	; 0x06
    1df8:	9a 83       	std	Y+2, r25	; 0x02
    1dfa:	89 83       	std	Y+1, r24	; 0x01
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1e00:	01 97       	sbiw	r24, 0x01	; 1
    1e02:	f1 f7       	brne	.-4      	; 0x1e00 <LCD_vidInit+0x630>
    1e04:	9a 83       	std	Y+2, r25	; 0x02
    1e06:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    1e08:	cc 5a       	subi	r28, 0xAC	; 172
    1e0a:	df 4f       	sbci	r29, 0xFF	; 255
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	de bf       	out	0x3e, r29	; 62
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	cd bf       	out	0x3d, r28	; 61
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	1f 91       	pop	r17
    1e1c:	0f 91       	pop	r16
    1e1e:	08 95       	ret

00001e20 <lcd_vidWriteData>:


void lcd_vidWriteData(u8 data)
{
    1e20:	df 93       	push	r29
    1e22:	cf 93       	push	r28
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	2f 97       	sbiw	r28, 0x0f	; 15
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	f8 94       	cli
    1e2e:	de bf       	out	0x3e, r29	; 62
    1e30:	0f be       	out	0x3f, r0	; 63
    1e32:	cd bf       	out	0x3d, r28	; 61
    1e34:	8f 87       	std	Y+15, r24	; 0x0f
	//RW=0
 DIO_vidWritePinValue(controlport,rw_pin,low);
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	62 e0       	ldi	r22, 0x02	; 2
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	0e 94 35 07 	call	0xe6a	; 0xe6a <DIO_vidWritePinValue>

	//RS=1  display
 DIO_vidWritePinValue(controlport,rs_pin,high);
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	61 e0       	ldi	r22, 0x01	; 1
    1e44:	41 e0       	ldi	r20, 0x01	; 1
    1e46:	0e 94 35 07 	call	0xe6a	; 0xe6a <DIO_vidWritePinValue>

//DATA PORT
 DIO_vidWritePortValue(dataport, data);
    1e4a:	82 e0       	ldi	r24, 0x02	; 2
    1e4c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e4e:	0e 94 12 09 	call	0x1224	; 0x1224 <DIO_vidWritePortValue>

 //E=1

 DIO_vidWritePinValue(controlport,EN_pin,high);
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	60 e0       	ldi	r22, 0x00	; 0
    1e56:	41 e0       	ldi	r20, 0x01	; 1
    1e58:	0e 94 35 07 	call	0xe6a	; 0xe6a <DIO_vidWritePinValue>
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	a0 e0       	ldi	r26, 0x00	; 0
    1e62:	b0 e4       	ldi	r27, 0x40	; 64
    1e64:	8b 87       	std	Y+11, r24	; 0x0b
    1e66:	9c 87       	std	Y+12, r25	; 0x0c
    1e68:	ad 87       	std	Y+13, r26	; 0x0d
    1e6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	4a ef       	ldi	r20, 0xFA	; 250
    1e7a:	54 e4       	ldi	r21, 0x44	; 68
    1e7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e80:	dc 01       	movw	r26, r24
    1e82:	cb 01       	movw	r24, r22
    1e84:	8f 83       	std	Y+7, r24	; 0x07
    1e86:	98 87       	std	Y+8, r25	; 0x08
    1e88:	a9 87       	std	Y+9, r26	; 0x09
    1e8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8e:	78 85       	ldd	r23, Y+8	; 0x08
    1e90:	89 85       	ldd	r24, Y+9	; 0x09
    1e92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	30 e0       	ldi	r19, 0x00	; 0
    1e98:	40 e8       	ldi	r20, 0x80	; 128
    1e9a:	5f e3       	ldi	r21, 0x3F	; 63
    1e9c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ea0:	88 23       	and	r24, r24
    1ea2:	2c f4       	brge	.+10     	; 0x1eae <lcd_vidWriteData+0x8e>
		__ticks = 1;
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9e 83       	std	Y+6, r25	; 0x06
    1eaa:	8d 83       	std	Y+5, r24	; 0x05
    1eac:	3f c0       	rjmp	.+126    	; 0x1f2c <lcd_vidWriteData+0x10c>
	else if (__tmp > 65535)
    1eae:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb0:	78 85       	ldd	r23, Y+8	; 0x08
    1eb2:	89 85       	ldd	r24, Y+9	; 0x09
    1eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	3f ef       	ldi	r19, 0xFF	; 255
    1eba:	4f e7       	ldi	r20, 0x7F	; 127
    1ebc:	57 e4       	ldi	r21, 0x47	; 71
    1ebe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ec2:	18 16       	cp	r1, r24
    1ec4:	4c f5       	brge	.+82     	; 0x1f18 <lcd_vidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ecc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	40 e2       	ldi	r20, 0x20	; 32
    1ed4:	51 e4       	ldi	r21, 0x41	; 65
    1ed6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	bc 01       	movw	r22, r24
    1ee0:	cd 01       	movw	r24, r26
    1ee2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	9e 83       	std	Y+6, r25	; 0x06
    1eec:	8d 83       	std	Y+5, r24	; 0x05
    1eee:	0f c0       	rjmp	.+30     	; 0x1f0e <lcd_vidWriteData+0xee>
    1ef0:	88 ec       	ldi	r24, 0xC8	; 200
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	9c 83       	std	Y+4, r25	; 0x04
    1ef6:	8b 83       	std	Y+3, r24	; 0x03
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	9c 81       	ldd	r25, Y+4	; 0x04
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <lcd_vidWriteData+0xdc>
    1f00:	9c 83       	std	Y+4, r25	; 0x04
    1f02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f04:	8d 81       	ldd	r24, Y+5	; 0x05
    1f06:	9e 81       	ldd	r25, Y+6	; 0x06
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	9e 83       	std	Y+6, r25	; 0x06
    1f0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f10:	9e 81       	ldd	r25, Y+6	; 0x06
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	69 f7       	brne	.-38     	; 0x1ef0 <lcd_vidWriteData+0xd0>
    1f16:	14 c0       	rjmp	.+40     	; 0x1f40 <lcd_vidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f18:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1a:	78 85       	ldd	r23, Y+8	; 0x08
    1f1c:	89 85       	ldd	r24, Y+9	; 0x09
    1f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	9e 83       	std	Y+6, r25	; 0x06
    1f2a:	8d 83       	std	Y+5, r24	; 0x05
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	9a 83       	std	Y+2, r25	; 0x02
    1f32:	89 83       	std	Y+1, r24	; 0x01
    1f34:	89 81       	ldd	r24, Y+1	; 0x01
    1f36:	9a 81       	ldd	r25, Y+2	; 0x02
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <lcd_vidWriteData+0x118>
    1f3c:	9a 83       	std	Y+2, r25	; 0x02
    1f3e:	89 83       	std	Y+1, r24	; 0x01
 _delay_ms(2);
 DIO_vidWritePinValue(controlport,EN_pin,low);
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	40 e0       	ldi	r20, 0x00	; 0
    1f46:	0e 94 35 07 	call	0xe6a	; 0xe6a <DIO_vidWritePinValue>

 }
    1f4a:	2f 96       	adiw	r28, 0x0f	; 15
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	de bf       	out	0x3e, r29	; 62
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	cd bf       	out	0x3d, r28	; 61
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <lcd_write_string>:



void lcd_write_string(char *string)
	{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	6b 97       	sbiw	r28, 0x1b	; 27
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	9b 8f       	std	Y+27, r25	; 0x1b
    1f72:	8a 8f       	std	Y+26, r24	; 0x1a
		char i = 0;									  // character counter*/
    1f74:	19 8e       	std	Y+25, r1	; 0x19
    1f76:	cc c0       	rjmp	.+408    	; 0x2110 <lcd_write_string+0x1b4>
	    while (string[i] != '\0')
	    {
	        lcd_vidWriteData(string[i]);
    1f78:	89 8d       	ldd	r24, Y+25	; 0x19
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f80:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f82:	fc 01       	movw	r30, r24
    1f84:	e2 0f       	add	r30, r18
    1f86:	f3 1f       	adc	r31, r19
    1f88:	80 81       	ld	r24, Z
    1f8a:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <lcd_vidWriteData>
	        i++;
    1f8e:	89 8d       	ldd	r24, Y+25	; 0x19
    1f90:	8f 5f       	subi	r24, 0xFF	; 255
    1f92:	89 8f       	std	Y+25, r24	; 0x19
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	a8 ec       	ldi	r26, 0xC8	; 200
    1f9a:	b2 e4       	ldi	r27, 0x42	; 66
    1f9c:	8d 8b       	std	Y+21, r24	; 0x15
    1f9e:	9e 8b       	std	Y+22, r25	; 0x16
    1fa0:	af 8b       	std	Y+23, r26	; 0x17
    1fa2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fa4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa8:	8f 89       	ldd	r24, Y+23	; 0x17
    1faa:	98 8d       	ldd	r25, Y+24	; 0x18
    1fac:	2b ea       	ldi	r18, 0xAB	; 171
    1fae:	3a ea       	ldi	r19, 0xAA	; 170
    1fb0:	4a e2       	ldi	r20, 0x2A	; 42
    1fb2:	50 e4       	ldi	r21, 0x40	; 64
    1fb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	89 8b       	std	Y+17, r24	; 0x11
    1fbe:	9a 8b       	std	Y+18, r25	; 0x12
    1fc0:	ab 8b       	std	Y+19, r26	; 0x13
    1fc2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1fc4:	69 89       	ldd	r22, Y+17	; 0x11
    1fc6:	7a 89       	ldd	r23, Y+18	; 0x12
    1fc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fca:	9c 89       	ldd	r25, Y+20	; 0x14
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	40 e8       	ldi	r20, 0x80	; 128
    1fd2:	5f e3       	ldi	r21, 0x3F	; 63
    1fd4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fd8:	88 23       	and	r24, r24
    1fda:	1c f4       	brge	.+6      	; 0x1fe2 <lcd_write_string+0x86>
		__ticks = 1;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	88 8b       	std	Y+16, r24	; 0x10
    1fe0:	91 c0       	rjmp	.+290    	; 0x2104 <lcd_write_string+0x1a8>
	else if (__tmp > 255)
    1fe2:	69 89       	ldd	r22, Y+17	; 0x11
    1fe4:	7a 89       	ldd	r23, Y+18	; 0x12
    1fe6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	4f e7       	ldi	r20, 0x7F	; 127
    1ff0:	53 e4       	ldi	r21, 0x43	; 67
    1ff2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ff6:	18 16       	cp	r1, r24
    1ff8:	0c f0       	brlt	.+2      	; 0x1ffc <lcd_write_string+0xa0>
    1ffa:	7b c0       	rjmp	.+246    	; 0x20f2 <lcd_write_string+0x196>
	{
		_delay_ms(__us / 1000.0);
    1ffc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    2000:	8f 89       	ldd	r24, Y+23	; 0x17
    2002:	98 8d       	ldd	r25, Y+24	; 0x18
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	4a e7       	ldi	r20, 0x7A	; 122
    200a:	54 e4       	ldi	r21, 0x44	; 68
    200c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	8c 87       	std	Y+12, r24	; 0x0c
    2016:	9d 87       	std	Y+13, r25	; 0x0d
    2018:	ae 87       	std	Y+14, r26	; 0x0e
    201a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201c:	6c 85       	ldd	r22, Y+12	; 0x0c
    201e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2020:	8e 85       	ldd	r24, Y+14	; 0x0e
    2022:	9f 85       	ldd	r25, Y+15	; 0x0f
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	4a ef       	ldi	r20, 0xFA	; 250
    202a:	54 e4       	ldi	r21, 0x44	; 68
    202c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	88 87       	std	Y+8, r24	; 0x08
    2036:	99 87       	std	Y+9, r25	; 0x09
    2038:	aa 87       	std	Y+10, r26	; 0x0a
    203a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    203c:	68 85       	ldd	r22, Y+8	; 0x08
    203e:	79 85       	ldd	r23, Y+9	; 0x09
    2040:	8a 85       	ldd	r24, Y+10	; 0x0a
    2042:	9b 85       	ldd	r25, Y+11	; 0x0b
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	40 e8       	ldi	r20, 0x80	; 128
    204a:	5f e3       	ldi	r21, 0x3F	; 63
    204c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2050:	88 23       	and	r24, r24
    2052:	2c f4       	brge	.+10     	; 0x205e <lcd_write_string+0x102>
		__ticks = 1;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	9f 83       	std	Y+7, r25	; 0x07
    205a:	8e 83       	std	Y+6, r24	; 0x06
    205c:	3f c0       	rjmp	.+126    	; 0x20dc <lcd_write_string+0x180>
	else if (__tmp > 65535)
    205e:	68 85       	ldd	r22, Y+8	; 0x08
    2060:	79 85       	ldd	r23, Y+9	; 0x09
    2062:	8a 85       	ldd	r24, Y+10	; 0x0a
    2064:	9b 85       	ldd	r25, Y+11	; 0x0b
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	3f ef       	ldi	r19, 0xFF	; 255
    206a:	4f e7       	ldi	r20, 0x7F	; 127
    206c:	57 e4       	ldi	r21, 0x47	; 71
    206e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2072:	18 16       	cp	r1, r24
    2074:	4c f5       	brge	.+82     	; 0x20c8 <lcd_write_string+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2076:	6c 85       	ldd	r22, Y+12	; 0x0c
    2078:	7d 85       	ldd	r23, Y+13	; 0x0d
    207a:	8e 85       	ldd	r24, Y+14	; 0x0e
    207c:	9f 85       	ldd	r25, Y+15	; 0x0f
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e2       	ldi	r20, 0x20	; 32
    2084:	51 e4       	ldi	r21, 0x41	; 65
    2086:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	bc 01       	movw	r22, r24
    2090:	cd 01       	movw	r24, r26
    2092:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	9f 83       	std	Y+7, r25	; 0x07
    209c:	8e 83       	std	Y+6, r24	; 0x06
    209e:	0f c0       	rjmp	.+30     	; 0x20be <lcd_write_string+0x162>
    20a0:	88 ec       	ldi	r24, 0xC8	; 200
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9d 83       	std	Y+5, r25	; 0x05
    20a6:	8c 83       	std	Y+4, r24	; 0x04
    20a8:	8c 81       	ldd	r24, Y+4	; 0x04
    20aa:	9d 81       	ldd	r25, Y+5	; 0x05
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <lcd_write_string+0x150>
    20b0:	9d 83       	std	Y+5, r25	; 0x05
    20b2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b4:	8e 81       	ldd	r24, Y+6	; 0x06
    20b6:	9f 81       	ldd	r25, Y+7	; 0x07
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	9f 83       	std	Y+7, r25	; 0x07
    20bc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20be:	8e 81       	ldd	r24, Y+6	; 0x06
    20c0:	9f 81       	ldd	r25, Y+7	; 0x07
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	69 f7       	brne	.-38     	; 0x20a0 <lcd_write_string+0x144>
    20c6:	24 c0       	rjmp	.+72     	; 0x2110 <lcd_write_string+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c8:	68 85       	ldd	r22, Y+8	; 0x08
    20ca:	79 85       	ldd	r23, Y+9	; 0x09
    20cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    20d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9f 83       	std	Y+7, r25	; 0x07
    20da:	8e 83       	std	Y+6, r24	; 0x06
    20dc:	8e 81       	ldd	r24, Y+6	; 0x06
    20de:	9f 81       	ldd	r25, Y+7	; 0x07
    20e0:	9b 83       	std	Y+3, r25	; 0x03
    20e2:	8a 83       	std	Y+2, r24	; 0x02
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
    20e6:	9b 81       	ldd	r25, Y+3	; 0x03
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	f1 f7       	brne	.-4      	; 0x20e8 <lcd_write_string+0x18c>
    20ec:	9b 83       	std	Y+3, r25	; 0x03
    20ee:	8a 83       	std	Y+2, r24	; 0x02
    20f0:	0f c0       	rjmp	.+30     	; 0x2110 <lcd_write_string+0x1b4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20f2:	69 89       	ldd	r22, Y+17	; 0x11
    20f4:	7a 89       	ldd	r23, Y+18	; 0x12
    20f6:	8b 89       	ldd	r24, Y+19	; 0x13
    20f8:	9c 89       	ldd	r25, Y+20	; 0x14
    20fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	88 8b       	std	Y+16, r24	; 0x10
    2104:	88 89       	ldd	r24, Y+16	; 0x10
    2106:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	8a 95       	dec	r24
    210c:	f1 f7       	brne	.-4      	; 0x210a <lcd_write_string+0x1ae>
    210e:	89 83       	std	Y+1, r24	; 0x01


void lcd_write_string(char *string)
	{
		char i = 0;									  // character counter*/
	    while (string[i] != '\0')
    2110:	89 8d       	ldd	r24, Y+25	; 0x19
    2112:	28 2f       	mov	r18, r24
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2118:	9b 8d       	ldd	r25, Y+27	; 0x1b
    211a:	fc 01       	movw	r30, r24
    211c:	e2 0f       	add	r30, r18
    211e:	f3 1f       	adc	r31, r19
    2120:	80 81       	ld	r24, Z
    2122:	88 23       	and	r24, r24
    2124:	09 f0       	breq	.+2      	; 0x2128 <lcd_write_string+0x1cc>
    2126:	28 cf       	rjmp	.-432    	; 0x1f78 <lcd_write_string+0x1c>
	    {
	        lcd_vidWriteData(string[i]);
	        i++;
	        _delay_us(100);							  // 40 uS delay (min)
	    }
	}
    2128:	6b 96       	adiw	r28, 0x1b	; 27
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <return_ASCII>:


u8 return_ASCII(u8 number)
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	00 d0       	rcall	.+0      	; 0x2140 <return_ASCII+0x6>
    2140:	0f 92       	push	r0
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	89 83       	std	Y+1, r24	; 0x01
	if(number==0)
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	88 23       	and	r24, r24
    214c:	19 f4       	brne	.+6      	; 0x2154 <return_ASCII+0x1a>
	{
	return 0b00110000;
    214e:	80 e3       	ldi	r24, 0x30	; 48
    2150:	8a 83       	std	Y+2, r24	; 0x02
    2152:	37 c0       	rjmp	.+110    	; 0x21c2 <return_ASCII+0x88>
	}
	else if(number==1)
    2154:	89 81       	ldd	r24, Y+1	; 0x01
    2156:	81 30       	cpi	r24, 0x01	; 1
    2158:	19 f4       	brne	.+6      	; 0x2160 <return_ASCII+0x26>
	{
		return 0b00110001;
    215a:	81 e3       	ldi	r24, 0x31	; 49
    215c:	8a 83       	std	Y+2, r24	; 0x02
    215e:	31 c0       	rjmp	.+98     	; 0x21c2 <return_ASCII+0x88>
	}
	else if(number==2)
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	82 30       	cpi	r24, 0x02	; 2
    2164:	19 f4       	brne	.+6      	; 0x216c <return_ASCII+0x32>
	{
		return 0b00110010;}
    2166:	82 e3       	ldi	r24, 0x32	; 50
    2168:	8a 83       	std	Y+2, r24	; 0x02
    216a:	2b c0       	rjmp	.+86     	; 0x21c2 <return_ASCII+0x88>
	else if(number==3)
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	83 30       	cpi	r24, 0x03	; 3
    2170:	19 f4       	brne	.+6      	; 0x2178 <return_ASCII+0x3e>
	{
		return 0b00110011;}
    2172:	83 e3       	ldi	r24, 0x33	; 51
    2174:	8a 83       	std	Y+2, r24	; 0x02
    2176:	25 c0       	rjmp	.+74     	; 0x21c2 <return_ASCII+0x88>
	else if(number==4)
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	84 30       	cpi	r24, 0x04	; 4
    217c:	19 f4       	brne	.+6      	; 0x2184 <return_ASCII+0x4a>
	{
		return 0b00110100;
    217e:	84 e3       	ldi	r24, 0x34	; 52
    2180:	8a 83       	std	Y+2, r24	; 0x02
    2182:	1f c0       	rjmp	.+62     	; 0x21c2 <return_ASCII+0x88>
	}
	else if(number==5)
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	85 30       	cpi	r24, 0x05	; 5
    2188:	19 f4       	brne	.+6      	; 0x2190 <return_ASCII+0x56>
	{
		return 0b00110101;
    218a:	85 e3       	ldi	r24, 0x35	; 53
    218c:	8a 83       	std	Y+2, r24	; 0x02
    218e:	19 c0       	rjmp	.+50     	; 0x21c2 <return_ASCII+0x88>
	}
	else if(number==6)
    2190:	89 81       	ldd	r24, Y+1	; 0x01
    2192:	86 30       	cpi	r24, 0x06	; 6
    2194:	19 f4       	brne	.+6      	; 0x219c <return_ASCII+0x62>
	{
		return 0b00110110;
    2196:	86 e3       	ldi	r24, 0x36	; 54
    2198:	8a 83       	std	Y+2, r24	; 0x02
    219a:	13 c0       	rjmp	.+38     	; 0x21c2 <return_ASCII+0x88>
	}
	else if(number==7)
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	87 30       	cpi	r24, 0x07	; 7
    21a0:	19 f4       	brne	.+6      	; 0x21a8 <return_ASCII+0x6e>
	{
		return 0b00110111;
    21a2:	87 e3       	ldi	r24, 0x37	; 55
    21a4:	8a 83       	std	Y+2, r24	; 0x02
    21a6:	0d c0       	rjmp	.+26     	; 0x21c2 <return_ASCII+0x88>
	}
	else if(number==8)
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	88 30       	cpi	r24, 0x08	; 8
    21ac:	19 f4       	brne	.+6      	; 0x21b4 <return_ASCII+0x7a>
	{
		return 0b00111000;
    21ae:	88 e3       	ldi	r24, 0x38	; 56
    21b0:	8a 83       	std	Y+2, r24	; 0x02
    21b2:	07 c0       	rjmp	.+14     	; 0x21c2 <return_ASCII+0x88>
	}
	else if(number==9)
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	89 30       	cpi	r24, 0x09	; 9
    21b8:	19 f4       	brne	.+6      	; 0x21c0 <return_ASCII+0x86>
	{
		return 0b00111001;}
    21ba:	89 e3       	ldi	r24, 0x39	; 57
    21bc:	8a 83       	std	Y+2, r24	; 0x02
    21be:	01 c0       	rjmp	.+2      	; 0x21c2 <return_ASCII+0x88>
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <return_ASCII+0x8c>

}
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	8b 83       	std	Y+3, r24	; 0x03
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	0f 90       	pop	r0
    21ce:	cf 91       	pop	r28
    21d0:	df 91       	pop	r29
    21d2:	08 95       	ret

000021d4 <LCD_vidWriteString>:
void LCD_vidWriteString (u8* pu8StringCpy, u8 u8Index)
{
    21d4:	df 93       	push	r29
    21d6:	cf 93       	push	r28
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	62 97       	sbiw	r28, 0x12	; 18
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	f8 94       	cli
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	cd bf       	out	0x3d, r28	; 61
    21e8:	99 8b       	std	Y+17, r25	; 0x11
    21ea:	88 8b       	std	Y+16, r24	; 0x10
    21ec:	6a 8b       	std	Y+18, r22	; 0x12

//	/* Local loop index */
//	u8 u8Index = 0;
	u8 iteration=0;
    21ee:	1f 86       	std	Y+15, r1	; 0x0f
//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration=0; iteration<u8Index ; iteration++)
    21f0:	1f 86       	std	Y+15, r1	; 0x0f
    21f2:	80 c0       	rjmp	.+256    	; 0x22f4 <LCD_vidWriteString+0x120>
	{

		/* Write Character on LCD */
	lcd_vidWriteData(pu8StringCpy[iteration]);
    21f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	88 89       	ldd	r24, Y+16	; 0x10
    21fc:	99 89       	ldd	r25, Y+17	; 0x11
    21fe:	fc 01       	movw	r30, r24
    2200:	e2 0f       	add	r30, r18
    2202:	f3 1f       	adc	r31, r19
    2204:	80 81       	ld	r24, Z
    2206:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <lcd_vidWriteData>
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	a0 e0       	ldi	r26, 0x00	; 0
    2210:	b0 e4       	ldi	r27, 0x40	; 64
    2212:	8b 87       	std	Y+11, r24	; 0x0b
    2214:	9c 87       	std	Y+12, r25	; 0x0c
    2216:	ad 87       	std	Y+13, r26	; 0x0d
    2218:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    221a:	6b 85       	ldd	r22, Y+11	; 0x0b
    221c:	7c 85       	ldd	r23, Y+12	; 0x0c
    221e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2220:	9e 85       	ldd	r25, Y+14	; 0x0e
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	4a ef       	ldi	r20, 0xFA	; 250
    2228:	54 e4       	ldi	r21, 0x44	; 68
    222a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	8f 83       	std	Y+7, r24	; 0x07
    2234:	98 87       	std	Y+8, r25	; 0x08
    2236:	a9 87       	std	Y+9, r26	; 0x09
    2238:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    223a:	6f 81       	ldd	r22, Y+7	; 0x07
    223c:	78 85       	ldd	r23, Y+8	; 0x08
    223e:	89 85       	ldd	r24, Y+9	; 0x09
    2240:	9a 85       	ldd	r25, Y+10	; 0x0a
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e8       	ldi	r20, 0x80	; 128
    2248:	5f e3       	ldi	r21, 0x3F	; 63
    224a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    224e:	88 23       	and	r24, r24
    2250:	2c f4       	brge	.+10     	; 0x225c <LCD_vidWriteString+0x88>
		__ticks = 1;
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	9e 83       	std	Y+6, r25	; 0x06
    2258:	8d 83       	std	Y+5, r24	; 0x05
    225a:	3f c0       	rjmp	.+126    	; 0x22da <LCD_vidWriteString+0x106>
	else if (__tmp > 65535)
    225c:	6f 81       	ldd	r22, Y+7	; 0x07
    225e:	78 85       	ldd	r23, Y+8	; 0x08
    2260:	89 85       	ldd	r24, Y+9	; 0x09
    2262:	9a 85       	ldd	r25, Y+10	; 0x0a
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	3f ef       	ldi	r19, 0xFF	; 255
    2268:	4f e7       	ldi	r20, 0x7F	; 127
    226a:	57 e4       	ldi	r21, 0x47	; 71
    226c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2270:	18 16       	cp	r1, r24
    2272:	4c f5       	brge	.+82     	; 0x22c6 <LCD_vidWriteString+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2274:	6b 85       	ldd	r22, Y+11	; 0x0b
    2276:	7c 85       	ldd	r23, Y+12	; 0x0c
    2278:	8d 85       	ldd	r24, Y+13	; 0x0d
    227a:	9e 85       	ldd	r25, Y+14	; 0x0e
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e2       	ldi	r20, 0x20	; 32
    2282:	51 e4       	ldi	r21, 0x41	; 65
    2284:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	bc 01       	movw	r22, r24
    228e:	cd 01       	movw	r24, r26
    2290:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	9e 83       	std	Y+6, r25	; 0x06
    229a:	8d 83       	std	Y+5, r24	; 0x05
    229c:	0f c0       	rjmp	.+30     	; 0x22bc <LCD_vidWriteString+0xe8>
    229e:	88 ec       	ldi	r24, 0xC8	; 200
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9c 83       	std	Y+4, r25	; 0x04
    22a4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	9c 81       	ldd	r25, Y+4	; 0x04
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	f1 f7       	brne	.-4      	; 0x22aa <LCD_vidWriteString+0xd6>
    22ae:	9c 83       	std	Y+4, r25	; 0x04
    22b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b2:	8d 81       	ldd	r24, Y+5	; 0x05
    22b4:	9e 81       	ldd	r25, Y+6	; 0x06
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	9e 83       	std	Y+6, r25	; 0x06
    22ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22bc:	8d 81       	ldd	r24, Y+5	; 0x05
    22be:	9e 81       	ldd	r25, Y+6	; 0x06
    22c0:	00 97       	sbiw	r24, 0x00	; 0
    22c2:	69 f7       	brne	.-38     	; 0x229e <LCD_vidWriteString+0xca>
    22c4:	14 c0       	rjmp	.+40     	; 0x22ee <LCD_vidWriteString+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c6:	6f 81       	ldd	r22, Y+7	; 0x07
    22c8:	78 85       	ldd	r23, Y+8	; 0x08
    22ca:	89 85       	ldd	r24, Y+9	; 0x09
    22cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	9e 83       	std	Y+6, r25	; 0x06
    22d8:	8d 83       	std	Y+5, r24	; 0x05
    22da:	8d 81       	ldd	r24, Y+5	; 0x05
    22dc:	9e 81       	ldd	r25, Y+6	; 0x06
    22de:	9a 83       	std	Y+2, r25	; 0x02
    22e0:	89 83       	std	Y+1, r24	; 0x01
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	9a 81       	ldd	r25, Y+2	; 0x02
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	f1 f7       	brne	.-4      	; 0x22e6 <LCD_vidWriteString+0x112>
    22ea:	9a 83       	std	Y+2, r25	; 0x02
    22ec:	89 83       	std	Y+1, r24	; 0x01

//	/* Local loop index */
//	u8 u8Index = 0;
	u8 iteration=0;
//	while (pu8StringCpy[u8Index] != '\0')
	for (iteration=0; iteration<u8Index ; iteration++)
    22ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    22f0:	8f 5f       	subi	r24, 0xFF	; 255
    22f2:	8f 87       	std	Y+15, r24	; 0x0f
    22f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    22f6:	8a 89       	ldd	r24, Y+18	; 0x12
    22f8:	98 17       	cp	r25, r24
    22fa:	08 f4       	brcc	.+2      	; 0x22fe <LCD_vidWriteString+0x12a>
    22fc:	7b cf       	rjmp	.-266    	; 0x21f4 <LCD_vidWriteString+0x20>

		/* Delay to let the LCD show the character */
		_delay_ms(2);
	}

}
    22fe:	62 96       	adiw	r28, 0x12	; 18
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	f8 94       	cli
    2304:	de bf       	out	0x3e, r29	; 62
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	cd bf       	out	0x3d, r28	; 61
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	08 95       	ret

00002310 <Gotoxy>:


void Gotoxy (u8 Y,u8 X)
{
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	00 d0       	rcall	.+0      	; 0x2316 <Gotoxy+0x6>
    2316:	00 d0       	rcall	.+0      	; 0x2318 <Gotoxy+0x8>
    2318:	cd b7       	in	r28, 0x3d	; 61
    231a:	de b7       	in	r29, 0x3e	; 62
    231c:	89 83       	std	Y+1, r24	; 0x01
    231e:	6a 83       	std	Y+2, r22	; 0x02
	if (X>0 && X<=16)
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	88 23       	and	r24, r24
    2324:	e1 f0       	breq	.+56     	; 0x235e <Gotoxy+0x4e>
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	81 31       	cpi	r24, 0x11	; 17
    232a:	c8 f4       	brcc	.+50     	; 0x235e <Gotoxy+0x4e>
	{
	    switch(Y)
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	28 2f       	mov	r18, r24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	3c 83       	std	Y+4, r19	; 0x04
    2334:	2b 83       	std	Y+3, r18	; 0x03
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	9c 81       	ldd	r25, Y+4	; 0x04
    233a:	81 30       	cpi	r24, 0x01	; 1
    233c:	91 05       	cpc	r25, r1
    233e:	31 f0       	breq	.+12     	; 0x234c <Gotoxy+0x3c>
    2340:	2b 81       	ldd	r18, Y+3	; 0x03
    2342:	3c 81       	ldd	r19, Y+4	; 0x04
    2344:	22 30       	cpi	r18, 0x02	; 2
    2346:	31 05       	cpc	r19, r1
    2348:	31 f0       	breq	.+12     	; 0x2356 <Gotoxy+0x46>
    234a:	09 c0       	rjmp	.+18     	; 0x235e <Gotoxy+0x4e>
	    {
		    case 1:
		    	lcd_vidWriteCommand(X+127);
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	81 58       	subi	r24, 0x81	; 129
    2350:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_vidWriteCommand>
    2354:	04 c0       	rjmp	.+8      	; 0x235e <Gotoxy+0x4e>
		    break;
		    case 2:
		    	lcd_vidWriteCommand(X+191);
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	81 54       	subi	r24, 0x41	; 65
    235a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <lcd_vidWriteCommand>
		    break;
		    default:
		    break;
	    }
	}
}
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	08 95       	ret

0000236c <LCD_vidPrintINT>:

void LCD_vidPrintINT(u16 INT ,u8 digit)
{ u16 RES;
    236c:	0f 93       	push	r16
    236e:	1f 93       	push	r17
    2370:	df 93       	push	r29
    2372:	cf 93       	push	r28
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	c7 59       	subi	r28, 0x97	; 151
    237a:	d0 40       	sbci	r29, 0x00	; 0
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	fe 01       	movw	r30, r28
    2388:	ed 56       	subi	r30, 0x6D	; 109
    238a:	ff 4f       	sbci	r31, 0xFF	; 255
    238c:	91 83       	std	Z+1, r25	; 0x01
    238e:	80 83       	st	Z, r24
    2390:	fe 01       	movw	r30, r28
    2392:	eb 56       	subi	r30, 0x6B	; 107
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	60 83       	st	Z, r22
	switch(digit)
    2398:	fe 01       	movw	r30, r28
    239a:	eb 56       	subi	r30, 0x6B	; 107
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	80 81       	ld	r24, Z
    23a0:	28 2f       	mov	r18, r24
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	ca 56       	subi	r28, 0x6A	; 106
    23a6:	df 4f       	sbci	r29, 0xFF	; 255
    23a8:	39 83       	std	Y+1, r19	; 0x01
    23aa:	28 83       	st	Y, r18
    23ac:	c6 59       	subi	r28, 0x96	; 150
    23ae:	d0 40       	sbci	r29, 0x00	; 0
    23b0:	ca 56       	subi	r28, 0x6A	; 106
    23b2:	df 4f       	sbci	r29, 0xFF	; 255
    23b4:	88 81       	ld	r24, Y
    23b6:	99 81       	ldd	r25, Y+1	; 0x01
    23b8:	c6 59       	subi	r28, 0x96	; 150
    23ba:	d0 40       	sbci	r29, 0x00	; 0
    23bc:	82 30       	cpi	r24, 0x02	; 2
    23be:	91 05       	cpc	r25, r1
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <LCD_vidPrintINT+0x58>
    23c2:	46 c1       	rjmp	.+652    	; 0x2650 <LCD_vidPrintINT+0x2e4>
    23c4:	ca 56       	subi	r28, 0x6A	; 106
    23c6:	df 4f       	sbci	r29, 0xFF	; 255
    23c8:	e8 81       	ld	r30, Y
    23ca:	f9 81       	ldd	r31, Y+1	; 0x01
    23cc:	c6 59       	subi	r28, 0x96	; 150
    23ce:	d0 40       	sbci	r29, 0x00	; 0
    23d0:	e3 30       	cpi	r30, 0x03	; 3
    23d2:	f1 05       	cpc	r31, r1
    23d4:	09 f4       	brne	.+2      	; 0x23d8 <LCD_vidPrintINT+0x6c>
    23d6:	c4 c3       	rjmp	.+1928   	; 0x2b60 <LCD_vidPrintINT+0x7f4>
    23d8:	ca 56       	subi	r28, 0x6A	; 106
    23da:	df 4f       	sbci	r29, 0xFF	; 255
    23dc:	28 81       	ld	r18, Y
    23de:	39 81       	ldd	r19, Y+1	; 0x01
    23e0:	c6 59       	subi	r28, 0x96	; 150
    23e2:	d0 40       	sbci	r29, 0x00	; 0
    23e4:	21 30       	cpi	r18, 0x01	; 1
    23e6:	31 05       	cpc	r19, r1
    23e8:	09 f0       	breq	.+2      	; 0x23ec <LCD_vidPrintINT+0x80>
    23ea:	65 c6       	rjmp	.+3274   	; 0x30b6 <LCD_vidPrintINT+0xd4a>
    23ec:	fe 01       	movw	r30, r28
    23ee:	e3 57       	subi	r30, 0x73	; 115
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	80 e0       	ldi	r24, 0x00	; 0
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	a8 e4       	ldi	r26, 0x48	; 72
    23f8:	b3 e4       	ldi	r27, 0x43	; 67
    23fa:	80 83       	st	Z, r24
    23fc:	91 83       	std	Z+1, r25	; 0x01
    23fe:	a2 83       	std	Z+2, r26	; 0x02
    2400:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2402:	8e 01       	movw	r16, r28
    2404:	07 57       	subi	r16, 0x77	; 119
    2406:	1f 4f       	sbci	r17, 0xFF	; 255
    2408:	fe 01       	movw	r30, r28
    240a:	e3 57       	subi	r30, 0x73	; 115
    240c:	ff 4f       	sbci	r31, 0xFF	; 255
    240e:	60 81       	ld	r22, Z
    2410:	71 81       	ldd	r23, Z+1	; 0x01
    2412:	82 81       	ldd	r24, Z+2	; 0x02
    2414:	93 81       	ldd	r25, Z+3	; 0x03
    2416:	2b ea       	ldi	r18, 0xAB	; 171
    2418:	3a ea       	ldi	r19, 0xAA	; 170
    241a:	4a e2       	ldi	r20, 0x2A	; 42
    241c:	50 e4       	ldi	r21, 0x40	; 64
    241e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	f8 01       	movw	r30, r16
    2428:	80 83       	st	Z, r24
    242a:	91 83       	std	Z+1, r25	; 0x01
    242c:	a2 83       	std	Z+2, r26	; 0x02
    242e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2430:	fe 01       	movw	r30, r28
    2432:	e7 57       	subi	r30, 0x77	; 119
    2434:	ff 4f       	sbci	r31, 0xFF	; 255
    2436:	60 81       	ld	r22, Z
    2438:	71 81       	ldd	r23, Z+1	; 0x01
    243a:	82 81       	ldd	r24, Z+2	; 0x02
    243c:	93 81       	ldd	r25, Z+3	; 0x03
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	40 e8       	ldi	r20, 0x80	; 128
    2444:	5f e3       	ldi	r21, 0x3F	; 63
    2446:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    244a:	88 23       	and	r24, r24
    244c:	34 f4       	brge	.+12     	; 0x245a <LCD_vidPrintINT+0xee>
		__ticks = 1;
    244e:	fe 01       	movw	r30, r28
    2450:	e8 57       	subi	r30, 0x78	; 120
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	80 83       	st	Z, r24
    2458:	e0 c0       	rjmp	.+448    	; 0x261a <LCD_vidPrintINT+0x2ae>
	else if (__tmp > 255)
    245a:	fe 01       	movw	r30, r28
    245c:	e7 57       	subi	r30, 0x77	; 119
    245e:	ff 4f       	sbci	r31, 0xFF	; 255
    2460:	60 81       	ld	r22, Z
    2462:	71 81       	ldd	r23, Z+1	; 0x01
    2464:	82 81       	ldd	r24, Z+2	; 0x02
    2466:	93 81       	ldd	r25, Z+3	; 0x03
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	4f e7       	ldi	r20, 0x7F	; 127
    246e:	53 e4       	ldi	r21, 0x43	; 67
    2470:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2474:	18 16       	cp	r1, r24
    2476:	0c f0       	brlt	.+2      	; 0x247a <LCD_vidPrintINT+0x10e>
    2478:	c0 c0       	rjmp	.+384    	; 0x25fa <LCD_vidPrintINT+0x28e>
	{
		_delay_ms(__us / 1000.0);
    247a:	fe 01       	movw	r30, r28
    247c:	e3 57       	subi	r30, 0x73	; 115
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	60 81       	ld	r22, Z
    2482:	71 81       	ldd	r23, Z+1	; 0x01
    2484:	82 81       	ldd	r24, Z+2	; 0x02
    2486:	93 81       	ldd	r25, Z+3	; 0x03
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	4a e7       	ldi	r20, 0x7A	; 122
    248e:	54 e4       	ldi	r21, 0x44	; 68
    2490:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	fe 01       	movw	r30, r28
    249a:	ec 57       	subi	r30, 0x7C	; 124
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	80 83       	st	Z, r24
    24a0:	91 83       	std	Z+1, r25	; 0x01
    24a2:	a2 83       	std	Z+2, r26	; 0x02
    24a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a6:	8e 01       	movw	r16, r28
    24a8:	00 58       	subi	r16, 0x80	; 128
    24aa:	1f 4f       	sbci	r17, 0xFF	; 255
    24ac:	fe 01       	movw	r30, r28
    24ae:	ec 57       	subi	r30, 0x7C	; 124
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	60 81       	ld	r22, Z
    24b4:	71 81       	ldd	r23, Z+1	; 0x01
    24b6:	82 81       	ldd	r24, Z+2	; 0x02
    24b8:	93 81       	ldd	r25, Z+3	; 0x03
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	4a ef       	ldi	r20, 0xFA	; 250
    24c0:	54 e4       	ldi	r21, 0x44	; 68
    24c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	f8 01       	movw	r30, r16
    24cc:	80 83       	st	Z, r24
    24ce:	91 83       	std	Z+1, r25	; 0x01
    24d0:	a2 83       	std	Z+2, r26	; 0x02
    24d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24d4:	fe 01       	movw	r30, r28
    24d6:	e0 58       	subi	r30, 0x80	; 128
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	60 81       	ld	r22, Z
    24dc:	71 81       	ldd	r23, Z+1	; 0x01
    24de:	82 81       	ldd	r24, Z+2	; 0x02
    24e0:	93 81       	ldd	r25, Z+3	; 0x03
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e8       	ldi	r20, 0x80	; 128
    24e8:	5f e3       	ldi	r21, 0x3F	; 63
    24ea:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24ee:	88 23       	and	r24, r24
    24f0:	44 f4       	brge	.+16     	; 0x2502 <LCD_vidPrintINT+0x196>
		__ticks = 1;
    24f2:	fe 01       	movw	r30, r28
    24f4:	e2 58       	subi	r30, 0x82	; 130
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	91 83       	std	Z+1, r25	; 0x01
    24fe:	80 83       	st	Z, r24
    2500:	64 c0       	rjmp	.+200    	; 0x25ca <LCD_vidPrintINT+0x25e>
	else if (__tmp > 65535)
    2502:	fe 01       	movw	r30, r28
    2504:	e0 58       	subi	r30, 0x80	; 128
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	60 81       	ld	r22, Z
    250a:	71 81       	ldd	r23, Z+1	; 0x01
    250c:	82 81       	ldd	r24, Z+2	; 0x02
    250e:	93 81       	ldd	r25, Z+3	; 0x03
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	3f ef       	ldi	r19, 0xFF	; 255
    2514:	4f e7       	ldi	r20, 0x7F	; 127
    2516:	57 e4       	ldi	r21, 0x47	; 71
    2518:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    251c:	18 16       	cp	r1, r24
    251e:	0c f0       	brlt	.+2      	; 0x2522 <LCD_vidPrintINT+0x1b6>
    2520:	43 c0       	rjmp	.+134    	; 0x25a8 <LCD_vidPrintINT+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2522:	fe 01       	movw	r30, r28
    2524:	ec 57       	subi	r30, 0x7C	; 124
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	60 81       	ld	r22, Z
    252a:	71 81       	ldd	r23, Z+1	; 0x01
    252c:	82 81       	ldd	r24, Z+2	; 0x02
    252e:	93 81       	ldd	r25, Z+3	; 0x03
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e2       	ldi	r20, 0x20	; 32
    2536:	51 e4       	ldi	r21, 0x41	; 65
    2538:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    253c:	dc 01       	movw	r26, r24
    253e:	cb 01       	movw	r24, r22
    2540:	8e 01       	movw	r16, r28
    2542:	02 58       	subi	r16, 0x82	; 130
    2544:	1f 4f       	sbci	r17, 0xFF	; 255
    2546:	bc 01       	movw	r22, r24
    2548:	cd 01       	movw	r24, r26
    254a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	f8 01       	movw	r30, r16
    2554:	91 83       	std	Z+1, r25	; 0x01
    2556:	80 83       	st	Z, r24
    2558:	1f c0       	rjmp	.+62     	; 0x2598 <LCD_vidPrintINT+0x22c>
    255a:	fe 01       	movw	r30, r28
    255c:	e4 58       	subi	r30, 0x84	; 132
    255e:	ff 4f       	sbci	r31, 0xFF	; 255
    2560:	88 ec       	ldi	r24, 0xC8	; 200
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	91 83       	std	Z+1, r25	; 0x01
    2566:	80 83       	st	Z, r24
    2568:	fe 01       	movw	r30, r28
    256a:	e4 58       	subi	r30, 0x84	; 132
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	80 81       	ld	r24, Z
    2570:	91 81       	ldd	r25, Z+1	; 0x01
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <LCD_vidPrintINT+0x206>
    2576:	fe 01       	movw	r30, r28
    2578:	e4 58       	subi	r30, 0x84	; 132
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	91 83       	std	Z+1, r25	; 0x01
    257e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2580:	de 01       	movw	r26, r28
    2582:	a2 58       	subi	r26, 0x82	; 130
    2584:	bf 4f       	sbci	r27, 0xFF	; 255
    2586:	fe 01       	movw	r30, r28
    2588:	e2 58       	subi	r30, 0x82	; 130
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	80 81       	ld	r24, Z
    258e:	91 81       	ldd	r25, Z+1	; 0x01
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	11 96       	adiw	r26, 0x01	; 1
    2594:	9c 93       	st	X, r25
    2596:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2598:	fe 01       	movw	r30, r28
    259a:	e2 58       	subi	r30, 0x82	; 130
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	80 81       	ld	r24, Z
    25a0:	91 81       	ldd	r25, Z+1	; 0x01
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	d1 f6       	brne	.-76     	; 0x255a <LCD_vidPrintINT+0x1ee>
    25a6:	4b c0       	rjmp	.+150    	; 0x263e <LCD_vidPrintINT+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a8:	8e 01       	movw	r16, r28
    25aa:	02 58       	subi	r16, 0x82	; 130
    25ac:	1f 4f       	sbci	r17, 0xFF	; 255
    25ae:	fe 01       	movw	r30, r28
    25b0:	e0 58       	subi	r30, 0x80	; 128
    25b2:	ff 4f       	sbci	r31, 0xFF	; 255
    25b4:	60 81       	ld	r22, Z
    25b6:	71 81       	ldd	r23, Z+1	; 0x01
    25b8:	82 81       	ldd	r24, Z+2	; 0x02
    25ba:	93 81       	ldd	r25, Z+3	; 0x03
    25bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	f8 01       	movw	r30, r16
    25c6:	91 83       	std	Z+1, r25	; 0x01
    25c8:	80 83       	st	Z, r24
    25ca:	de 01       	movw	r26, r28
    25cc:	a6 58       	subi	r26, 0x86	; 134
    25ce:	bf 4f       	sbci	r27, 0xFF	; 255
    25d0:	fe 01       	movw	r30, r28
    25d2:	e2 58       	subi	r30, 0x82	; 130
    25d4:	ff 4f       	sbci	r31, 0xFF	; 255
    25d6:	80 81       	ld	r24, Z
    25d8:	91 81       	ldd	r25, Z+1	; 0x01
    25da:	11 96       	adiw	r26, 0x01	; 1
    25dc:	9c 93       	st	X, r25
    25de:	8e 93       	st	-X, r24
    25e0:	fe 01       	movw	r30, r28
    25e2:	e6 58       	subi	r30, 0x86	; 134
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	80 81       	ld	r24, Z
    25e8:	91 81       	ldd	r25, Z+1	; 0x01
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <LCD_vidPrintINT+0x27e>
    25ee:	fe 01       	movw	r30, r28
    25f0:	e6 58       	subi	r30, 0x86	; 134
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	91 83       	std	Z+1, r25	; 0x01
    25f6:	80 83       	st	Z, r24
    25f8:	22 c0       	rjmp	.+68     	; 0x263e <LCD_vidPrintINT+0x2d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25fa:	8e 01       	movw	r16, r28
    25fc:	08 57       	subi	r16, 0x78	; 120
    25fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2600:	fe 01       	movw	r30, r28
    2602:	e7 57       	subi	r30, 0x77	; 119
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	60 81       	ld	r22, Z
    2608:	71 81       	ldd	r23, Z+1	; 0x01
    260a:	82 81       	ldd	r24, Z+2	; 0x02
    260c:	93 81       	ldd	r25, Z+3	; 0x03
    260e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	f8 01       	movw	r30, r16
    2618:	80 83       	st	Z, r24
    261a:	de 01       	movw	r26, r28
    261c:	a7 58       	subi	r26, 0x87	; 135
    261e:	bf 4f       	sbci	r27, 0xFF	; 255
    2620:	fe 01       	movw	r30, r28
    2622:	e8 57       	subi	r30, 0x78	; 120
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	80 81       	ld	r24, Z
    2628:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    262a:	fe 01       	movw	r30, r28
    262c:	e7 58       	subi	r30, 0x87	; 135
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	80 81       	ld	r24, Z
    2632:	8a 95       	dec	r24
    2634:	f1 f7       	brne	.-4      	; 0x2632 <LCD_vidPrintINT+0x2c6>
    2636:	fe 01       	movw	r30, r28
    2638:	e7 58       	subi	r30, 0x87	; 135
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	80 83       	st	Z, r24
	{
	case 1 :
		_delay_us(200);
		lcd_vidWriteData(return_ASCII(INT));
    263e:	fe 01       	movw	r30, r28
    2640:	ed 56       	subi	r30, 0x6D	; 109
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	80 81       	ld	r24, Z
    2646:	0e 94 9d 10 	call	0x213a	; 0x213a <return_ASCII>
    264a:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <lcd_vidWriteData>
    264e:	33 c5       	rjmp	.+2662   	; 0x30b6 <LCD_vidPrintINT+0xd4a>
		break;
	case 2 :
		RES=(INT/10)%10;
    2650:	fe 01       	movw	r30, r28
    2652:	ed 56       	subi	r30, 0x6D	; 109
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	80 81       	ld	r24, Z
    2658:	91 81       	ldd	r25, Z+1	; 0x01
    265a:	2a e0       	ldi	r18, 0x0A	; 10
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	b9 01       	movw	r22, r18
    2660:	0e 94 76 18 	call	0x30ec	; 0x30ec <__udivmodhi4>
    2664:	cb 01       	movw	r24, r22
    2666:	fe 01       	movw	r30, r28
    2668:	ef 56       	subi	r30, 0x6F	; 111
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	2a e0       	ldi	r18, 0x0A	; 10
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	b9 01       	movw	r22, r18
    2672:	0e 94 76 18 	call	0x30ec	; 0x30ec <__udivmodhi4>
    2676:	91 83       	std	Z+1, r25	; 0x01
    2678:	80 83       	st	Z, r24
    267a:	fe 01       	movw	r30, r28
    267c:	eb 58       	subi	r30, 0x8B	; 139
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	a8 e4       	ldi	r26, 0x48	; 72
    2686:	b3 e4       	ldi	r27, 0x43	; 67
    2688:	80 83       	st	Z, r24
    268a:	91 83       	std	Z+1, r25	; 0x01
    268c:	a2 83       	std	Z+2, r26	; 0x02
    268e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2690:	8e 01       	movw	r16, r28
    2692:	0f 58       	subi	r16, 0x8F	; 143
    2694:	1f 4f       	sbci	r17, 0xFF	; 255
    2696:	fe 01       	movw	r30, r28
    2698:	eb 58       	subi	r30, 0x8B	; 139
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	60 81       	ld	r22, Z
    269e:	71 81       	ldd	r23, Z+1	; 0x01
    26a0:	82 81       	ldd	r24, Z+2	; 0x02
    26a2:	93 81       	ldd	r25, Z+3	; 0x03
    26a4:	2b ea       	ldi	r18, 0xAB	; 171
    26a6:	3a ea       	ldi	r19, 0xAA	; 170
    26a8:	4a e2       	ldi	r20, 0x2A	; 42
    26aa:	50 e4       	ldi	r21, 0x40	; 64
    26ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	f8 01       	movw	r30, r16
    26b6:	80 83       	st	Z, r24
    26b8:	91 83       	std	Z+1, r25	; 0x01
    26ba:	a2 83       	std	Z+2, r26	; 0x02
    26bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26be:	fe 01       	movw	r30, r28
    26c0:	ef 58       	subi	r30, 0x8F	; 143
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	60 81       	ld	r22, Z
    26c6:	71 81       	ldd	r23, Z+1	; 0x01
    26c8:	82 81       	ldd	r24, Z+2	; 0x02
    26ca:	93 81       	ldd	r25, Z+3	; 0x03
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e8       	ldi	r20, 0x80	; 128
    26d2:	5f e3       	ldi	r21, 0x3F	; 63
    26d4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26d8:	88 23       	and	r24, r24
    26da:	34 f4       	brge	.+12     	; 0x26e8 <LCD_vidPrintINT+0x37c>
		__ticks = 1;
    26dc:	fe 01       	movw	r30, r28
    26de:	e0 59       	subi	r30, 0x90	; 144
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	80 83       	st	Z, r24
    26e6:	e0 c0       	rjmp	.+448    	; 0x28a8 <LCD_vidPrintINT+0x53c>
	else if (__tmp > 255)
    26e8:	fe 01       	movw	r30, r28
    26ea:	ef 58       	subi	r30, 0x8F	; 143
    26ec:	ff 4f       	sbci	r31, 0xFF	; 255
    26ee:	60 81       	ld	r22, Z
    26f0:	71 81       	ldd	r23, Z+1	; 0x01
    26f2:	82 81       	ldd	r24, Z+2	; 0x02
    26f4:	93 81       	ldd	r25, Z+3	; 0x03
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	4f e7       	ldi	r20, 0x7F	; 127
    26fc:	53 e4       	ldi	r21, 0x43	; 67
    26fe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2702:	18 16       	cp	r1, r24
    2704:	0c f0       	brlt	.+2      	; 0x2708 <LCD_vidPrintINT+0x39c>
    2706:	c0 c0       	rjmp	.+384    	; 0x2888 <LCD_vidPrintINT+0x51c>
	{
		_delay_ms(__us / 1000.0);
    2708:	fe 01       	movw	r30, r28
    270a:	eb 58       	subi	r30, 0x8B	; 139
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	60 81       	ld	r22, Z
    2710:	71 81       	ldd	r23, Z+1	; 0x01
    2712:	82 81       	ldd	r24, Z+2	; 0x02
    2714:	93 81       	ldd	r25, Z+3	; 0x03
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	4a e7       	ldi	r20, 0x7A	; 122
    271c:	54 e4       	ldi	r21, 0x44	; 68
    271e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	fe 01       	movw	r30, r28
    2728:	e4 59       	subi	r30, 0x94	; 148
    272a:	ff 4f       	sbci	r31, 0xFF	; 255
    272c:	80 83       	st	Z, r24
    272e:	91 83       	std	Z+1, r25	; 0x01
    2730:	a2 83       	std	Z+2, r26	; 0x02
    2732:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2734:	8e 01       	movw	r16, r28
    2736:	08 59       	subi	r16, 0x98	; 152
    2738:	1f 4f       	sbci	r17, 0xFF	; 255
    273a:	fe 01       	movw	r30, r28
    273c:	e4 59       	subi	r30, 0x94	; 148
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	60 81       	ld	r22, Z
    2742:	71 81       	ldd	r23, Z+1	; 0x01
    2744:	82 81       	ldd	r24, Z+2	; 0x02
    2746:	93 81       	ldd	r25, Z+3	; 0x03
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	4a ef       	ldi	r20, 0xFA	; 250
    274e:	54 e4       	ldi	r21, 0x44	; 68
    2750:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	f8 01       	movw	r30, r16
    275a:	80 83       	st	Z, r24
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	a2 83       	std	Z+2, r26	; 0x02
    2760:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2762:	fe 01       	movw	r30, r28
    2764:	e8 59       	subi	r30, 0x98	; 152
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	60 81       	ld	r22, Z
    276a:	71 81       	ldd	r23, Z+1	; 0x01
    276c:	82 81       	ldd	r24, Z+2	; 0x02
    276e:	93 81       	ldd	r25, Z+3	; 0x03
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	40 e8       	ldi	r20, 0x80	; 128
    2776:	5f e3       	ldi	r21, 0x3F	; 63
    2778:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    277c:	88 23       	and	r24, r24
    277e:	44 f4       	brge	.+16     	; 0x2790 <LCD_vidPrintINT+0x424>
		__ticks = 1;
    2780:	fe 01       	movw	r30, r28
    2782:	ea 59       	subi	r30, 0x9A	; 154
    2784:	ff 4f       	sbci	r31, 0xFF	; 255
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	80 83       	st	Z, r24
    278e:	64 c0       	rjmp	.+200    	; 0x2858 <LCD_vidPrintINT+0x4ec>
	else if (__tmp > 65535)
    2790:	fe 01       	movw	r30, r28
    2792:	e8 59       	subi	r30, 0x98	; 152
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	60 81       	ld	r22, Z
    2798:	71 81       	ldd	r23, Z+1	; 0x01
    279a:	82 81       	ldd	r24, Z+2	; 0x02
    279c:	93 81       	ldd	r25, Z+3	; 0x03
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	3f ef       	ldi	r19, 0xFF	; 255
    27a2:	4f e7       	ldi	r20, 0x7F	; 127
    27a4:	57 e4       	ldi	r21, 0x47	; 71
    27a6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27aa:	18 16       	cp	r1, r24
    27ac:	0c f0       	brlt	.+2      	; 0x27b0 <LCD_vidPrintINT+0x444>
    27ae:	43 c0       	rjmp	.+134    	; 0x2836 <LCD_vidPrintINT+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b0:	fe 01       	movw	r30, r28
    27b2:	e4 59       	subi	r30, 0x94	; 148
    27b4:	ff 4f       	sbci	r31, 0xFF	; 255
    27b6:	60 81       	ld	r22, Z
    27b8:	71 81       	ldd	r23, Z+1	; 0x01
    27ba:	82 81       	ldd	r24, Z+2	; 0x02
    27bc:	93 81       	ldd	r25, Z+3	; 0x03
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	40 e2       	ldi	r20, 0x20	; 32
    27c4:	51 e4       	ldi	r21, 0x41	; 65
    27c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	8e 01       	movw	r16, r28
    27d0:	0a 59       	subi	r16, 0x9A	; 154
    27d2:	1f 4f       	sbci	r17, 0xFF	; 255
    27d4:	bc 01       	movw	r22, r24
    27d6:	cd 01       	movw	r24, r26
    27d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	f8 01       	movw	r30, r16
    27e2:	91 83       	std	Z+1, r25	; 0x01
    27e4:	80 83       	st	Z, r24
    27e6:	1f c0       	rjmp	.+62     	; 0x2826 <LCD_vidPrintINT+0x4ba>
    27e8:	fe 01       	movw	r30, r28
    27ea:	ec 59       	subi	r30, 0x9C	; 156
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	88 ec       	ldi	r24, 0xC8	; 200
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	91 83       	std	Z+1, r25	; 0x01
    27f4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27f6:	fe 01       	movw	r30, r28
    27f8:	ec 59       	subi	r30, 0x9C	; 156
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	80 81       	ld	r24, Z
    27fe:	91 81       	ldd	r25, Z+1	; 0x01
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <LCD_vidPrintINT+0x494>
    2804:	fe 01       	movw	r30, r28
    2806:	ec 59       	subi	r30, 0x9C	; 156
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	91 83       	std	Z+1, r25	; 0x01
    280c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280e:	de 01       	movw	r26, r28
    2810:	aa 59       	subi	r26, 0x9A	; 154
    2812:	bf 4f       	sbci	r27, 0xFF	; 255
    2814:	fe 01       	movw	r30, r28
    2816:	ea 59       	subi	r30, 0x9A	; 154
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	80 81       	ld	r24, Z
    281c:	91 81       	ldd	r25, Z+1	; 0x01
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	11 96       	adiw	r26, 0x01	; 1
    2822:	9c 93       	st	X, r25
    2824:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2826:	fe 01       	movw	r30, r28
    2828:	ea 59       	subi	r30, 0x9A	; 154
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	80 81       	ld	r24, Z
    282e:	91 81       	ldd	r25, Z+1	; 0x01
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	d1 f6       	brne	.-76     	; 0x27e8 <LCD_vidPrintINT+0x47c>
    2834:	4b c0       	rjmp	.+150    	; 0x28cc <LCD_vidPrintINT+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2836:	8e 01       	movw	r16, r28
    2838:	0a 59       	subi	r16, 0x9A	; 154
    283a:	1f 4f       	sbci	r17, 0xFF	; 255
    283c:	fe 01       	movw	r30, r28
    283e:	e8 59       	subi	r30, 0x98	; 152
    2840:	ff 4f       	sbci	r31, 0xFF	; 255
    2842:	60 81       	ld	r22, Z
    2844:	71 81       	ldd	r23, Z+1	; 0x01
    2846:	82 81       	ldd	r24, Z+2	; 0x02
    2848:	93 81       	ldd	r25, Z+3	; 0x03
    284a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	f8 01       	movw	r30, r16
    2854:	91 83       	std	Z+1, r25	; 0x01
    2856:	80 83       	st	Z, r24
    2858:	de 01       	movw	r26, r28
    285a:	ae 59       	subi	r26, 0x9E	; 158
    285c:	bf 4f       	sbci	r27, 0xFF	; 255
    285e:	fe 01       	movw	r30, r28
    2860:	ea 59       	subi	r30, 0x9A	; 154
    2862:	ff 4f       	sbci	r31, 0xFF	; 255
    2864:	80 81       	ld	r24, Z
    2866:	91 81       	ldd	r25, Z+1	; 0x01
    2868:	11 96       	adiw	r26, 0x01	; 1
    286a:	9c 93       	st	X, r25
    286c:	8e 93       	st	-X, r24
    286e:	fe 01       	movw	r30, r28
    2870:	ee 59       	subi	r30, 0x9E	; 158
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	80 81       	ld	r24, Z
    2876:	91 81       	ldd	r25, Z+1	; 0x01
    2878:	01 97       	sbiw	r24, 0x01	; 1
    287a:	f1 f7       	brne	.-4      	; 0x2878 <LCD_vidPrintINT+0x50c>
    287c:	fe 01       	movw	r30, r28
    287e:	ee 59       	subi	r30, 0x9E	; 158
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	91 83       	std	Z+1, r25	; 0x01
    2884:	80 83       	st	Z, r24
    2886:	22 c0       	rjmp	.+68     	; 0x28cc <LCD_vidPrintINT+0x560>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2888:	8e 01       	movw	r16, r28
    288a:	00 59       	subi	r16, 0x90	; 144
    288c:	1f 4f       	sbci	r17, 0xFF	; 255
    288e:	fe 01       	movw	r30, r28
    2890:	ef 58       	subi	r30, 0x8F	; 143
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	60 81       	ld	r22, Z
    2896:	71 81       	ldd	r23, Z+1	; 0x01
    2898:	82 81       	ldd	r24, Z+2	; 0x02
    289a:	93 81       	ldd	r25, Z+3	; 0x03
    289c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22
    28a4:	f8 01       	movw	r30, r16
    28a6:	80 83       	st	Z, r24
    28a8:	de 01       	movw	r26, r28
    28aa:	af 59       	subi	r26, 0x9F	; 159
    28ac:	bf 4f       	sbci	r27, 0xFF	; 255
    28ae:	fe 01       	movw	r30, r28
    28b0:	e0 59       	subi	r30, 0x90	; 144
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	80 81       	ld	r24, Z
    28b6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28b8:	fe 01       	movw	r30, r28
    28ba:	ef 59       	subi	r30, 0x9F	; 159
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	80 81       	ld	r24, Z
    28c0:	8a 95       	dec	r24
    28c2:	f1 f7       	brne	.-4      	; 0x28c0 <LCD_vidPrintINT+0x554>
    28c4:	fe 01       	movw	r30, r28
    28c6:	ef 59       	subi	r30, 0x9F	; 159
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	80 83       	st	Z, r24
		_delay_us(200);
		lcd_vidWriteData(return_ASCII(RES));
    28cc:	fe 01       	movw	r30, r28
    28ce:	ef 56       	subi	r30, 0x6F	; 111
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	80 81       	ld	r24, Z
    28d4:	0e 94 9d 10 	call	0x213a	; 0x213a <return_ASCII>
    28d8:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <lcd_vidWriteData>
	   	RES=INT%10;
    28dc:	8e 01       	movw	r16, r28
    28de:	0f 56       	subi	r16, 0x6F	; 111
    28e0:	1f 4f       	sbci	r17, 0xFF	; 255
    28e2:	fe 01       	movw	r30, r28
    28e4:	ed 56       	subi	r30, 0x6D	; 109
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	80 81       	ld	r24, Z
    28ea:	91 81       	ldd	r25, Z+1	; 0x01
    28ec:	2a e0       	ldi	r18, 0x0A	; 10
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	b9 01       	movw	r22, r18
    28f2:	0e 94 76 18 	call	0x30ec	; 0x30ec <__udivmodhi4>
    28f6:	f8 01       	movw	r30, r16
    28f8:	91 83       	std	Z+1, r25	; 0x01
    28fa:	80 83       	st	Z, r24
    28fc:	fe 01       	movw	r30, r28
    28fe:	e3 5a       	subi	r30, 0xA3	; 163
    2900:	ff 4f       	sbci	r31, 0xFF	; 255
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	a8 e4       	ldi	r26, 0x48	; 72
    2908:	b3 e4       	ldi	r27, 0x43	; 67
    290a:	80 83       	st	Z, r24
    290c:	91 83       	std	Z+1, r25	; 0x01
    290e:	a2 83       	std	Z+2, r26	; 0x02
    2910:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2912:	8e 01       	movw	r16, r28
    2914:	07 5a       	subi	r16, 0xA7	; 167
    2916:	1f 4f       	sbci	r17, 0xFF	; 255
    2918:	fe 01       	movw	r30, r28
    291a:	e3 5a       	subi	r30, 0xA3	; 163
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	60 81       	ld	r22, Z
    2920:	71 81       	ldd	r23, Z+1	; 0x01
    2922:	82 81       	ldd	r24, Z+2	; 0x02
    2924:	93 81       	ldd	r25, Z+3	; 0x03
    2926:	2b ea       	ldi	r18, 0xAB	; 171
    2928:	3a ea       	ldi	r19, 0xAA	; 170
    292a:	4a e2       	ldi	r20, 0x2A	; 42
    292c:	50 e4       	ldi	r21, 0x40	; 64
    292e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	f8 01       	movw	r30, r16
    2938:	80 83       	st	Z, r24
    293a:	91 83       	std	Z+1, r25	; 0x01
    293c:	a2 83       	std	Z+2, r26	; 0x02
    293e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2940:	fe 01       	movw	r30, r28
    2942:	e7 5a       	subi	r30, 0xA7	; 167
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	60 81       	ld	r22, Z
    2948:	71 81       	ldd	r23, Z+1	; 0x01
    294a:	82 81       	ldd	r24, Z+2	; 0x02
    294c:	93 81       	ldd	r25, Z+3	; 0x03
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	40 e8       	ldi	r20, 0x80	; 128
    2954:	5f e3       	ldi	r21, 0x3F	; 63
    2956:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    295a:	88 23       	and	r24, r24
    295c:	34 f4       	brge	.+12     	; 0x296a <LCD_vidPrintINT+0x5fe>
		__ticks = 1;
    295e:	fe 01       	movw	r30, r28
    2960:	e8 5a       	subi	r30, 0xA8	; 168
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	80 83       	st	Z, r24
    2968:	e0 c0       	rjmp	.+448    	; 0x2b2a <LCD_vidPrintINT+0x7be>
	else if (__tmp > 255)
    296a:	fe 01       	movw	r30, r28
    296c:	e7 5a       	subi	r30, 0xA7	; 167
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	60 81       	ld	r22, Z
    2972:	71 81       	ldd	r23, Z+1	; 0x01
    2974:	82 81       	ldd	r24, Z+2	; 0x02
    2976:	93 81       	ldd	r25, Z+3	; 0x03
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	30 e0       	ldi	r19, 0x00	; 0
    297c:	4f e7       	ldi	r20, 0x7F	; 127
    297e:	53 e4       	ldi	r21, 0x43	; 67
    2980:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2984:	18 16       	cp	r1, r24
    2986:	0c f0       	brlt	.+2      	; 0x298a <LCD_vidPrintINT+0x61e>
    2988:	c0 c0       	rjmp	.+384    	; 0x2b0a <LCD_vidPrintINT+0x79e>
	{
		_delay_ms(__us / 1000.0);
    298a:	fe 01       	movw	r30, r28
    298c:	e3 5a       	subi	r30, 0xA3	; 163
    298e:	ff 4f       	sbci	r31, 0xFF	; 255
    2990:	60 81       	ld	r22, Z
    2992:	71 81       	ldd	r23, Z+1	; 0x01
    2994:	82 81       	ldd	r24, Z+2	; 0x02
    2996:	93 81       	ldd	r25, Z+3	; 0x03
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	4a e7       	ldi	r20, 0x7A	; 122
    299e:	54 e4       	ldi	r21, 0x44	; 68
    29a0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    29a4:	dc 01       	movw	r26, r24
    29a6:	cb 01       	movw	r24, r22
    29a8:	fe 01       	movw	r30, r28
    29aa:	ec 5a       	subi	r30, 0xAC	; 172
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	80 83       	st	Z, r24
    29b0:	91 83       	std	Z+1, r25	; 0x01
    29b2:	a2 83       	std	Z+2, r26	; 0x02
    29b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b6:	8e 01       	movw	r16, r28
    29b8:	00 5b       	subi	r16, 0xB0	; 176
    29ba:	1f 4f       	sbci	r17, 0xFF	; 255
    29bc:	fe 01       	movw	r30, r28
    29be:	ec 5a       	subi	r30, 0xAC	; 172
    29c0:	ff 4f       	sbci	r31, 0xFF	; 255
    29c2:	60 81       	ld	r22, Z
    29c4:	71 81       	ldd	r23, Z+1	; 0x01
    29c6:	82 81       	ldd	r24, Z+2	; 0x02
    29c8:	93 81       	ldd	r25, Z+3	; 0x03
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	4a ef       	ldi	r20, 0xFA	; 250
    29d0:	54 e4       	ldi	r21, 0x44	; 68
    29d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	f8 01       	movw	r30, r16
    29dc:	80 83       	st	Z, r24
    29de:	91 83       	std	Z+1, r25	; 0x01
    29e0:	a2 83       	std	Z+2, r26	; 0x02
    29e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29e4:	fe 01       	movw	r30, r28
    29e6:	e0 5b       	subi	r30, 0xB0	; 176
    29e8:	ff 4f       	sbci	r31, 0xFF	; 255
    29ea:	60 81       	ld	r22, Z
    29ec:	71 81       	ldd	r23, Z+1	; 0x01
    29ee:	82 81       	ldd	r24, Z+2	; 0x02
    29f0:	93 81       	ldd	r25, Z+3	; 0x03
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	40 e8       	ldi	r20, 0x80	; 128
    29f8:	5f e3       	ldi	r21, 0x3F	; 63
    29fa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    29fe:	88 23       	and	r24, r24
    2a00:	44 f4       	brge	.+16     	; 0x2a12 <LCD_vidPrintINT+0x6a6>
		__ticks = 1;
    2a02:	fe 01       	movw	r30, r28
    2a04:	e2 5b       	subi	r30, 0xB2	; 178
    2a06:	ff 4f       	sbci	r31, 0xFF	; 255
    2a08:	81 e0       	ldi	r24, 0x01	; 1
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	91 83       	std	Z+1, r25	; 0x01
    2a0e:	80 83       	st	Z, r24
    2a10:	64 c0       	rjmp	.+200    	; 0x2ada <LCD_vidPrintINT+0x76e>
	else if (__tmp > 65535)
    2a12:	fe 01       	movw	r30, r28
    2a14:	e0 5b       	subi	r30, 0xB0	; 176
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	60 81       	ld	r22, Z
    2a1a:	71 81       	ldd	r23, Z+1	; 0x01
    2a1c:	82 81       	ldd	r24, Z+2	; 0x02
    2a1e:	93 81       	ldd	r25, Z+3	; 0x03
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	3f ef       	ldi	r19, 0xFF	; 255
    2a24:	4f e7       	ldi	r20, 0x7F	; 127
    2a26:	57 e4       	ldi	r21, 0x47	; 71
    2a28:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a2c:	18 16       	cp	r1, r24
    2a2e:	0c f0       	brlt	.+2      	; 0x2a32 <LCD_vidPrintINT+0x6c6>
    2a30:	43 c0       	rjmp	.+134    	; 0x2ab8 <LCD_vidPrintINT+0x74c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a32:	fe 01       	movw	r30, r28
    2a34:	ec 5a       	subi	r30, 0xAC	; 172
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	60 81       	ld	r22, Z
    2a3a:	71 81       	ldd	r23, Z+1	; 0x01
    2a3c:	82 81       	ldd	r24, Z+2	; 0x02
    2a3e:	93 81       	ldd	r25, Z+3	; 0x03
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	40 e2       	ldi	r20, 0x20	; 32
    2a46:	51 e4       	ldi	r21, 0x41	; 65
    2a48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	cb 01       	movw	r24, r22
    2a50:	8e 01       	movw	r16, r28
    2a52:	02 5b       	subi	r16, 0xB2	; 178
    2a54:	1f 4f       	sbci	r17, 0xFF	; 255
    2a56:	bc 01       	movw	r22, r24
    2a58:	cd 01       	movw	r24, r26
    2a5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	f8 01       	movw	r30, r16
    2a64:	91 83       	std	Z+1, r25	; 0x01
    2a66:	80 83       	st	Z, r24
    2a68:	1f c0       	rjmp	.+62     	; 0x2aa8 <LCD_vidPrintINT+0x73c>
    2a6a:	fe 01       	movw	r30, r28
    2a6c:	e4 5b       	subi	r30, 0xB4	; 180
    2a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a70:	88 ec       	ldi	r24, 0xC8	; 200
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	91 83       	std	Z+1, r25	; 0x01
    2a76:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a78:	fe 01       	movw	r30, r28
    2a7a:	e4 5b       	subi	r30, 0xB4	; 180
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	80 81       	ld	r24, Z
    2a80:	91 81       	ldd	r25, Z+1	; 0x01
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	f1 f7       	brne	.-4      	; 0x2a82 <LCD_vidPrintINT+0x716>
    2a86:	fe 01       	movw	r30, r28
    2a88:	e4 5b       	subi	r30, 0xB4	; 180
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	91 83       	std	Z+1, r25	; 0x01
    2a8e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a90:	de 01       	movw	r26, r28
    2a92:	a2 5b       	subi	r26, 0xB2	; 178
    2a94:	bf 4f       	sbci	r27, 0xFF	; 255
    2a96:	fe 01       	movw	r30, r28
    2a98:	e2 5b       	subi	r30, 0xB2	; 178
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	80 81       	ld	r24, Z
    2a9e:	91 81       	ldd	r25, Z+1	; 0x01
    2aa0:	01 97       	sbiw	r24, 0x01	; 1
    2aa2:	11 96       	adiw	r26, 0x01	; 1
    2aa4:	9c 93       	st	X, r25
    2aa6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	e2 5b       	subi	r30, 0xB2	; 178
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	80 81       	ld	r24, Z
    2ab0:	91 81       	ldd	r25, Z+1	; 0x01
    2ab2:	00 97       	sbiw	r24, 0x00	; 0
    2ab4:	d1 f6       	brne	.-76     	; 0x2a6a <LCD_vidPrintINT+0x6fe>
    2ab6:	4b c0       	rjmp	.+150    	; 0x2b4e <LCD_vidPrintINT+0x7e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab8:	8e 01       	movw	r16, r28
    2aba:	02 5b       	subi	r16, 0xB2	; 178
    2abc:	1f 4f       	sbci	r17, 0xFF	; 255
    2abe:	fe 01       	movw	r30, r28
    2ac0:	e0 5b       	subi	r30, 0xB0	; 176
    2ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac4:	60 81       	ld	r22, Z
    2ac6:	71 81       	ldd	r23, Z+1	; 0x01
    2ac8:	82 81       	ldd	r24, Z+2	; 0x02
    2aca:	93 81       	ldd	r25, Z+3	; 0x03
    2acc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	f8 01       	movw	r30, r16
    2ad6:	91 83       	std	Z+1, r25	; 0x01
    2ad8:	80 83       	st	Z, r24
    2ada:	de 01       	movw	r26, r28
    2adc:	a6 5b       	subi	r26, 0xB6	; 182
    2ade:	bf 4f       	sbci	r27, 0xFF	; 255
    2ae0:	fe 01       	movw	r30, r28
    2ae2:	e2 5b       	subi	r30, 0xB2	; 178
    2ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae6:	80 81       	ld	r24, Z
    2ae8:	91 81       	ldd	r25, Z+1	; 0x01
    2aea:	11 96       	adiw	r26, 0x01	; 1
    2aec:	9c 93       	st	X, r25
    2aee:	8e 93       	st	-X, r24
    2af0:	fe 01       	movw	r30, r28
    2af2:	e6 5b       	subi	r30, 0xB6	; 182
    2af4:	ff 4f       	sbci	r31, 0xFF	; 255
    2af6:	80 81       	ld	r24, Z
    2af8:	91 81       	ldd	r25, Z+1	; 0x01
    2afa:	01 97       	sbiw	r24, 0x01	; 1
    2afc:	f1 f7       	brne	.-4      	; 0x2afa <LCD_vidPrintINT+0x78e>
    2afe:	fe 01       	movw	r30, r28
    2b00:	e6 5b       	subi	r30, 0xB6	; 182
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	91 83       	std	Z+1, r25	; 0x01
    2b06:	80 83       	st	Z, r24
    2b08:	22 c0       	rjmp	.+68     	; 0x2b4e <LCD_vidPrintINT+0x7e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b0a:	8e 01       	movw	r16, r28
    2b0c:	08 5a       	subi	r16, 0xA8	; 168
    2b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b10:	fe 01       	movw	r30, r28
    2b12:	e7 5a       	subi	r30, 0xA7	; 167
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	60 81       	ld	r22, Z
    2b18:	71 81       	ldd	r23, Z+1	; 0x01
    2b1a:	82 81       	ldd	r24, Z+2	; 0x02
    2b1c:	93 81       	ldd	r25, Z+3	; 0x03
    2b1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	f8 01       	movw	r30, r16
    2b28:	80 83       	st	Z, r24
    2b2a:	de 01       	movw	r26, r28
    2b2c:	a7 5b       	subi	r26, 0xB7	; 183
    2b2e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b30:	fe 01       	movw	r30, r28
    2b32:	e8 5a       	subi	r30, 0xA8	; 168
    2b34:	ff 4f       	sbci	r31, 0xFF	; 255
    2b36:	80 81       	ld	r24, Z
    2b38:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	e7 5b       	subi	r30, 0xB7	; 183
    2b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b40:	80 81       	ld	r24, Z
    2b42:	8a 95       	dec	r24
    2b44:	f1 f7       	brne	.-4      	; 0x2b42 <LCD_vidPrintINT+0x7d6>
    2b46:	fe 01       	movw	r30, r28
    2b48:	e7 5b       	subi	r30, 0xB7	; 183
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	80 83       	st	Z, r24
		_delay_us(200);
		lcd_vidWriteData(return_ASCII(RES));
    2b4e:	fe 01       	movw	r30, r28
    2b50:	ef 56       	subi	r30, 0x6F	; 111
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	80 81       	ld	r24, Z
    2b56:	0e 94 9d 10 	call	0x213a	; 0x213a <return_ASCII>
    2b5a:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <lcd_vidWriteData>
    2b5e:	ab c2       	rjmp	.+1366   	; 0x30b6 <LCD_vidPrintINT+0xd4a>
		break;
	case 3 :
		RES=(INT/100)%10;
    2b60:	fe 01       	movw	r30, r28
    2b62:	ed 56       	subi	r30, 0x6D	; 109
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	80 81       	ld	r24, Z
    2b68:	91 81       	ldd	r25, Z+1	; 0x01
    2b6a:	24 e6       	ldi	r18, 0x64	; 100
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	b9 01       	movw	r22, r18
    2b70:	0e 94 76 18 	call	0x30ec	; 0x30ec <__udivmodhi4>
    2b74:	cb 01       	movw	r24, r22
    2b76:	fe 01       	movw	r30, r28
    2b78:	ef 56       	subi	r30, 0x6F	; 111
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	2a e0       	ldi	r18, 0x0A	; 10
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	b9 01       	movw	r22, r18
    2b82:	0e 94 76 18 	call	0x30ec	; 0x30ec <__udivmodhi4>
    2b86:	91 83       	std	Z+1, r25	; 0x01
    2b88:	80 83       	st	Z, r24
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	eb 5b       	subi	r30, 0xBB	; 187
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	a8 e4       	ldi	r26, 0x48	; 72
    2b96:	b3 e4       	ldi	r27, 0x43	; 67
    2b98:	80 83       	st	Z, r24
    2b9a:	91 83       	std	Z+1, r25	; 0x01
    2b9c:	a2 83       	std	Z+2, r26	; 0x02
    2b9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ba0:	8e 01       	movw	r16, r28
    2ba2:	0f 5b       	subi	r16, 0xBF	; 191
    2ba4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	eb 5b       	subi	r30, 0xBB	; 187
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	60 81       	ld	r22, Z
    2bae:	71 81       	ldd	r23, Z+1	; 0x01
    2bb0:	82 81       	ldd	r24, Z+2	; 0x02
    2bb2:	93 81       	ldd	r25, Z+3	; 0x03
    2bb4:	2b ea       	ldi	r18, 0xAB	; 171
    2bb6:	3a ea       	ldi	r19, 0xAA	; 170
    2bb8:	4a e2       	ldi	r20, 0x2A	; 42
    2bba:	50 e4       	ldi	r21, 0x40	; 64
    2bbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	f8 01       	movw	r30, r16
    2bc6:	80 83       	st	Z, r24
    2bc8:	91 83       	std	Z+1, r25	; 0x01
    2bca:	a2 83       	std	Z+2, r26	; 0x02
    2bcc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bce:	fe 01       	movw	r30, r28
    2bd0:	ef 5b       	subi	r30, 0xBF	; 191
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	60 81       	ld	r22, Z
    2bd6:	71 81       	ldd	r23, Z+1	; 0x01
    2bd8:	82 81       	ldd	r24, Z+2	; 0x02
    2bda:	93 81       	ldd	r25, Z+3	; 0x03
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	40 e8       	ldi	r20, 0x80	; 128
    2be2:	5f e3       	ldi	r21, 0x3F	; 63
    2be4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2be8:	88 23       	and	r24, r24
    2bea:	34 f4       	brge	.+12     	; 0x2bf8 <LCD_vidPrintINT+0x88c>
		__ticks = 1;
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	fe 01       	movw	r30, r28
    2bf0:	e0 5c       	subi	r30, 0xC0	; 192
    2bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf4:	80 83       	st	Z, r24
    2bf6:	9d c0       	rjmp	.+314    	; 0x2d32 <LCD_vidPrintINT+0x9c6>
	else if (__tmp > 255)
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	ef 5b       	subi	r30, 0xBF	; 191
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	60 81       	ld	r22, Z
    2c00:	71 81       	ldd	r23, Z+1	; 0x01
    2c02:	82 81       	ldd	r24, Z+2	; 0x02
    2c04:	93 81       	ldd	r25, Z+3	; 0x03
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	4f e7       	ldi	r20, 0x7F	; 127
    2c0c:	53 e4       	ldi	r21, 0x43	; 67
    2c0e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c12:	18 16       	cp	r1, r24
    2c14:	0c f0       	brlt	.+2      	; 0x2c18 <LCD_vidPrintINT+0x8ac>
    2c16:	7e c0       	rjmp	.+252    	; 0x2d14 <LCD_vidPrintINT+0x9a8>
	{
		_delay_ms(__us / 1000.0);
    2c18:	fe 01       	movw	r30, r28
    2c1a:	eb 5b       	subi	r30, 0xBB	; 187
    2c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1e:	60 81       	ld	r22, Z
    2c20:	71 81       	ldd	r23, Z+1	; 0x01
    2c22:	82 81       	ldd	r24, Z+2	; 0x02
    2c24:	93 81       	ldd	r25, Z+3	; 0x03
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	4a e7       	ldi	r20, 0x7A	; 122
    2c2c:	54 e4       	ldi	r21, 0x44	; 68
    2c2e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	8c af       	std	Y+60, r24	; 0x3c
    2c38:	9d af       	std	Y+61, r25	; 0x3d
    2c3a:	ae af       	std	Y+62, r26	; 0x3e
    2c3c:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c3e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2c40:	7d ad       	ldd	r23, Y+61	; 0x3d
    2c42:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c44:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	4a ef       	ldi	r20, 0xFA	; 250
    2c4c:	54 e4       	ldi	r21, 0x44	; 68
    2c4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	88 af       	std	Y+56, r24	; 0x38
    2c58:	99 af       	std	Y+57, r25	; 0x39
    2c5a:	aa af       	std	Y+58, r26	; 0x3a
    2c5c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2c5e:	68 ad       	ldd	r22, Y+56	; 0x38
    2c60:	79 ad       	ldd	r23, Y+57	; 0x39
    2c62:	8a ad       	ldd	r24, Y+58	; 0x3a
    2c64:	9b ad       	ldd	r25, Y+59	; 0x3b
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	40 e8       	ldi	r20, 0x80	; 128
    2c6c:	5f e3       	ldi	r21, 0x3F	; 63
    2c6e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2c72:	88 23       	and	r24, r24
    2c74:	2c f4       	brge	.+10     	; 0x2c80 <LCD_vidPrintINT+0x914>
		__ticks = 1;
    2c76:	81 e0       	ldi	r24, 0x01	; 1
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	9f ab       	std	Y+55, r25	; 0x37
    2c7c:	8e ab       	std	Y+54, r24	; 0x36
    2c7e:	3f c0       	rjmp	.+126    	; 0x2cfe <LCD_vidPrintINT+0x992>
	else if (__tmp > 65535)
    2c80:	68 ad       	ldd	r22, Y+56	; 0x38
    2c82:	79 ad       	ldd	r23, Y+57	; 0x39
    2c84:	8a ad       	ldd	r24, Y+58	; 0x3a
    2c86:	9b ad       	ldd	r25, Y+59	; 0x3b
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	3f ef       	ldi	r19, 0xFF	; 255
    2c8c:	4f e7       	ldi	r20, 0x7F	; 127
    2c8e:	57 e4       	ldi	r21, 0x47	; 71
    2c90:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2c94:	18 16       	cp	r1, r24
    2c96:	4c f5       	brge	.+82     	; 0x2cea <LCD_vidPrintINT+0x97e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c98:	6c ad       	ldd	r22, Y+60	; 0x3c
    2c9a:	7d ad       	ldd	r23, Y+61	; 0x3d
    2c9c:	8e ad       	ldd	r24, Y+62	; 0x3e
    2c9e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e2       	ldi	r20, 0x20	; 32
    2ca6:	51 e4       	ldi	r21, 0x41	; 65
    2ca8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22
    2cb0:	bc 01       	movw	r22, r24
    2cb2:	cd 01       	movw	r24, r26
    2cb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	9f ab       	std	Y+55, r25	; 0x37
    2cbe:	8e ab       	std	Y+54, r24	; 0x36
    2cc0:	0f c0       	rjmp	.+30     	; 0x2ce0 <LCD_vidPrintINT+0x974>
    2cc2:	88 ec       	ldi	r24, 0xC8	; 200
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	9d ab       	std	Y+53, r25	; 0x35
    2cc8:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cca:	8c a9       	ldd	r24, Y+52	; 0x34
    2ccc:	9d a9       	ldd	r25, Y+53	; 0x35
    2cce:	01 97       	sbiw	r24, 0x01	; 1
    2cd0:	f1 f7       	brne	.-4      	; 0x2cce <LCD_vidPrintINT+0x962>
    2cd2:	9d ab       	std	Y+53, r25	; 0x35
    2cd4:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd6:	8e a9       	ldd	r24, Y+54	; 0x36
    2cd8:	9f a9       	ldd	r25, Y+55	; 0x37
    2cda:	01 97       	sbiw	r24, 0x01	; 1
    2cdc:	9f ab       	std	Y+55, r25	; 0x37
    2cde:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce0:	8e a9       	ldd	r24, Y+54	; 0x36
    2ce2:	9f a9       	ldd	r25, Y+55	; 0x37
    2ce4:	00 97       	sbiw	r24, 0x00	; 0
    2ce6:	69 f7       	brne	.-38     	; 0x2cc2 <LCD_vidPrintINT+0x956>
    2ce8:	2d c0       	rjmp	.+90     	; 0x2d44 <LCD_vidPrintINT+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cea:	68 ad       	ldd	r22, Y+56	; 0x38
    2cec:	79 ad       	ldd	r23, Y+57	; 0x39
    2cee:	8a ad       	ldd	r24, Y+58	; 0x3a
    2cf0:	9b ad       	ldd	r25, Y+59	; 0x3b
    2cf2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	9f ab       	std	Y+55, r25	; 0x37
    2cfc:	8e ab       	std	Y+54, r24	; 0x36
    2cfe:	8e a9       	ldd	r24, Y+54	; 0x36
    2d00:	9f a9       	ldd	r25, Y+55	; 0x37
    2d02:	9b ab       	std	Y+51, r25	; 0x33
    2d04:	8a ab       	std	Y+50, r24	; 0x32
    2d06:	8a a9       	ldd	r24, Y+50	; 0x32
    2d08:	9b a9       	ldd	r25, Y+51	; 0x33
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	f1 f7       	brne	.-4      	; 0x2d0a <LCD_vidPrintINT+0x99e>
    2d0e:	9b ab       	std	Y+51, r25	; 0x33
    2d10:	8a ab       	std	Y+50, r24	; 0x32
    2d12:	18 c0       	rjmp	.+48     	; 0x2d44 <LCD_vidPrintINT+0x9d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d14:	fe 01       	movw	r30, r28
    2d16:	ef 5b       	subi	r30, 0xBF	; 191
    2d18:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1a:	60 81       	ld	r22, Z
    2d1c:	71 81       	ldd	r23, Z+1	; 0x01
    2d1e:	82 81       	ldd	r24, Z+2	; 0x02
    2d20:	93 81       	ldd	r25, Z+3	; 0x03
    2d22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	e0 5c       	subi	r30, 0xC0	; 192
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	80 83       	st	Z, r24
    2d32:	fe 01       	movw	r30, r28
    2d34:	e0 5c       	subi	r30, 0xC0	; 192
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	80 81       	ld	r24, Z
    2d3a:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d3c:	89 a9       	ldd	r24, Y+49	; 0x31
    2d3e:	8a 95       	dec	r24
    2d40:	f1 f7       	brne	.-4      	; 0x2d3e <LCD_vidPrintINT+0x9d2>
    2d42:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(200);
	    lcd_vidWriteData(return_ASCII(RES));
    2d44:	fe 01       	movw	r30, r28
    2d46:	ef 56       	subi	r30, 0x6F	; 111
    2d48:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4a:	80 81       	ld	r24, Z
    2d4c:	0e 94 9d 10 	call	0x213a	; 0x213a <return_ASCII>
    2d50:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <lcd_vidWriteData>
		RES=(INT/10)%10;
    2d54:	fe 01       	movw	r30, r28
    2d56:	ed 56       	subi	r30, 0x6D	; 109
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	80 81       	ld	r24, Z
    2d5c:	91 81       	ldd	r25, Z+1	; 0x01
    2d5e:	2a e0       	ldi	r18, 0x0A	; 10
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	b9 01       	movw	r22, r18
    2d64:	0e 94 76 18 	call	0x30ec	; 0x30ec <__udivmodhi4>
    2d68:	cb 01       	movw	r24, r22
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	ef 56       	subi	r30, 0x6F	; 111
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	2a e0       	ldi	r18, 0x0A	; 10
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	b9 01       	movw	r22, r18
    2d76:	0e 94 76 18 	call	0x30ec	; 0x30ec <__udivmodhi4>
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	80 83       	st	Z, r24
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	a8 e4       	ldi	r26, 0x48	; 72
    2d84:	b3 e4       	ldi	r27, 0x43	; 67
    2d86:	8d a7       	std	Y+45, r24	; 0x2d
    2d88:	9e a7       	std	Y+46, r25	; 0x2e
    2d8a:	af a7       	std	Y+47, r26	; 0x2f
    2d8c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d8e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2d90:	7e a5       	ldd	r23, Y+46	; 0x2e
    2d92:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d94:	98 a9       	ldd	r25, Y+48	; 0x30
    2d96:	2b ea       	ldi	r18, 0xAB	; 171
    2d98:	3a ea       	ldi	r19, 0xAA	; 170
    2d9a:	4a e2       	ldi	r20, 0x2A	; 42
    2d9c:	50 e4       	ldi	r21, 0x40	; 64
    2d9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2da2:	dc 01       	movw	r26, r24
    2da4:	cb 01       	movw	r24, r22
    2da6:	89 a7       	std	Y+41, r24	; 0x29
    2da8:	9a a7       	std	Y+42, r25	; 0x2a
    2daa:	ab a7       	std	Y+43, r26	; 0x2b
    2dac:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2dae:	69 a5       	ldd	r22, Y+41	; 0x29
    2db0:	7a a5       	ldd	r23, Y+42	; 0x2a
    2db2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2db4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	40 e8       	ldi	r20, 0x80	; 128
    2dbc:	5f e3       	ldi	r21, 0x3F	; 63
    2dbe:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2dc2:	88 23       	and	r24, r24
    2dc4:	1c f4       	brge	.+6      	; 0x2dcc <LCD_vidPrintINT+0xa60>
		__ticks = 1;
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	88 a7       	std	Y+40, r24	; 0x28
    2dca:	91 c0       	rjmp	.+290    	; 0x2eee <LCD_vidPrintINT+0xb82>
	else if (__tmp > 255)
    2dcc:	69 a5       	ldd	r22, Y+41	; 0x29
    2dce:	7a a5       	ldd	r23, Y+42	; 0x2a
    2dd0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2dd2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	4f e7       	ldi	r20, 0x7F	; 127
    2dda:	53 e4       	ldi	r21, 0x43	; 67
    2ddc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2de0:	18 16       	cp	r1, r24
    2de2:	0c f0       	brlt	.+2      	; 0x2de6 <LCD_vidPrintINT+0xa7a>
    2de4:	7b c0       	rjmp	.+246    	; 0x2edc <LCD_vidPrintINT+0xb70>
	{
		_delay_ms(__us / 1000.0);
    2de6:	6d a5       	ldd	r22, Y+45	; 0x2d
    2de8:	7e a5       	ldd	r23, Y+46	; 0x2e
    2dea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dec:	98 a9       	ldd	r25, Y+48	; 0x30
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	4a e7       	ldi	r20, 0x7A	; 122
    2df4:	54 e4       	ldi	r21, 0x44	; 68
    2df6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	8c a3       	std	Y+36, r24	; 0x24
    2e00:	9d a3       	std	Y+37, r25	; 0x25
    2e02:	ae a3       	std	Y+38, r26	; 0x26
    2e04:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e06:	6c a1       	ldd	r22, Y+36	; 0x24
    2e08:	7d a1       	ldd	r23, Y+37	; 0x25
    2e0a:	8e a1       	ldd	r24, Y+38	; 0x26
    2e0c:	9f a1       	ldd	r25, Y+39	; 0x27
    2e0e:	20 e0       	ldi	r18, 0x00	; 0
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	4a ef       	ldi	r20, 0xFA	; 250
    2e14:	54 e4       	ldi	r21, 0x44	; 68
    2e16:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	88 a3       	std	Y+32, r24	; 0x20
    2e20:	99 a3       	std	Y+33, r25	; 0x21
    2e22:	aa a3       	std	Y+34, r26	; 0x22
    2e24:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2e26:	68 a1       	ldd	r22, Y+32	; 0x20
    2e28:	79 a1       	ldd	r23, Y+33	; 0x21
    2e2a:	8a a1       	ldd	r24, Y+34	; 0x22
    2e2c:	9b a1       	ldd	r25, Y+35	; 0x23
    2e2e:	20 e0       	ldi	r18, 0x00	; 0
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	40 e8       	ldi	r20, 0x80	; 128
    2e34:	5f e3       	ldi	r21, 0x3F	; 63
    2e36:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2e3a:	88 23       	and	r24, r24
    2e3c:	2c f4       	brge	.+10     	; 0x2e48 <LCD_vidPrintINT+0xadc>
		__ticks = 1;
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	9f 8f       	std	Y+31, r25	; 0x1f
    2e44:	8e 8f       	std	Y+30, r24	; 0x1e
    2e46:	3f c0       	rjmp	.+126    	; 0x2ec6 <LCD_vidPrintINT+0xb5a>
	else if (__tmp > 65535)
    2e48:	68 a1       	ldd	r22, Y+32	; 0x20
    2e4a:	79 a1       	ldd	r23, Y+33	; 0x21
    2e4c:	8a a1       	ldd	r24, Y+34	; 0x22
    2e4e:	9b a1       	ldd	r25, Y+35	; 0x23
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	3f ef       	ldi	r19, 0xFF	; 255
    2e54:	4f e7       	ldi	r20, 0x7F	; 127
    2e56:	57 e4       	ldi	r21, 0x47	; 71
    2e58:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2e5c:	18 16       	cp	r1, r24
    2e5e:	4c f5       	brge	.+82     	; 0x2eb2 <LCD_vidPrintINT+0xb46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e60:	6c a1       	ldd	r22, Y+36	; 0x24
    2e62:	7d a1       	ldd	r23, Y+37	; 0x25
    2e64:	8e a1       	ldd	r24, Y+38	; 0x26
    2e66:	9f a1       	ldd	r25, Y+39	; 0x27
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	40 e2       	ldi	r20, 0x20	; 32
    2e6e:	51 e4       	ldi	r21, 0x41	; 65
    2e70:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	bc 01       	movw	r22, r24
    2e7a:	cd 01       	movw	r24, r26
    2e7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2e80:	dc 01       	movw	r26, r24
    2e82:	cb 01       	movw	r24, r22
    2e84:	9f 8f       	std	Y+31, r25	; 0x1f
    2e86:	8e 8f       	std	Y+30, r24	; 0x1e
    2e88:	0f c0       	rjmp	.+30     	; 0x2ea8 <LCD_vidPrintINT+0xb3c>
    2e8a:	88 ec       	ldi	r24, 0xC8	; 200
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	9d 8f       	std	Y+29, r25	; 0x1d
    2e90:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2e92:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e94:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	f1 f7       	brne	.-4      	; 0x2e96 <LCD_vidPrintINT+0xb2a>
    2e9a:	9d 8f       	std	Y+29, r25	; 0x1d
    2e9c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e9e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ea0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ea2:	01 97       	sbiw	r24, 0x01	; 1
    2ea4:	9f 8f       	std	Y+31, r25	; 0x1f
    2ea6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2eaa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2eac:	00 97       	sbiw	r24, 0x00	; 0
    2eae:	69 f7       	brne	.-38     	; 0x2e8a <LCD_vidPrintINT+0xb1e>
    2eb0:	24 c0       	rjmp	.+72     	; 0x2efa <LCD_vidPrintINT+0xb8e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb2:	68 a1       	ldd	r22, Y+32	; 0x20
    2eb4:	79 a1       	ldd	r23, Y+33	; 0x21
    2eb6:	8a a1       	ldd	r24, Y+34	; 0x22
    2eb8:	9b a1       	ldd	r25, Y+35	; 0x23
    2eba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	9f 8f       	std	Y+31, r25	; 0x1f
    2ec4:	8e 8f       	std	Y+30, r24	; 0x1e
    2ec6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ec8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2eca:	9b 8f       	std	Y+27, r25	; 0x1b
    2ecc:	8a 8f       	std	Y+26, r24	; 0x1a
    2ece:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ed0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2ed2:	01 97       	sbiw	r24, 0x01	; 1
    2ed4:	f1 f7       	brne	.-4      	; 0x2ed2 <LCD_vidPrintINT+0xb66>
    2ed6:	9b 8f       	std	Y+27, r25	; 0x1b
    2ed8:	8a 8f       	std	Y+26, r24	; 0x1a
    2eda:	0f c0       	rjmp	.+30     	; 0x2efa <LCD_vidPrintINT+0xb8e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2edc:	69 a5       	ldd	r22, Y+41	; 0x29
    2ede:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ee0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ee2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ee4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	88 a7       	std	Y+40, r24	; 0x28
    2eee:	88 a5       	ldd	r24, Y+40	; 0x28
    2ef0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ef2:	89 8d       	ldd	r24, Y+25	; 0x19
    2ef4:	8a 95       	dec	r24
    2ef6:	f1 f7       	brne	.-4      	; 0x2ef4 <LCD_vidPrintINT+0xb88>
    2ef8:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(200);
		lcd_vidWriteData(return_ASCII(RES));
    2efa:	fe 01       	movw	r30, r28
    2efc:	ef 56       	subi	r30, 0x6F	; 111
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	80 81       	ld	r24, Z
    2f02:	0e 94 9d 10 	call	0x213a	; 0x213a <return_ASCII>
    2f06:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <lcd_vidWriteData>
		RES=INT%10;
    2f0a:	8e 01       	movw	r16, r28
    2f0c:	0f 56       	subi	r16, 0x6F	; 111
    2f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f10:	fe 01       	movw	r30, r28
    2f12:	ed 56       	subi	r30, 0x6D	; 109
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	80 81       	ld	r24, Z
    2f18:	91 81       	ldd	r25, Z+1	; 0x01
    2f1a:	2a e0       	ldi	r18, 0x0A	; 10
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	b9 01       	movw	r22, r18
    2f20:	0e 94 76 18 	call	0x30ec	; 0x30ec <__udivmodhi4>
    2f24:	f8 01       	movw	r30, r16
    2f26:	91 83       	std	Z+1, r25	; 0x01
    2f28:	80 83       	st	Z, r24
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	a8 e4       	ldi	r26, 0x48	; 72
    2f30:	b3 e4       	ldi	r27, 0x43	; 67
    2f32:	8d 8b       	std	Y+21, r24	; 0x15
    2f34:	9e 8b       	std	Y+22, r25	; 0x16
    2f36:	af 8b       	std	Y+23, r26	; 0x17
    2f38:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f3a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f3c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f40:	98 8d       	ldd	r25, Y+24	; 0x18
    2f42:	2b ea       	ldi	r18, 0xAB	; 171
    2f44:	3a ea       	ldi	r19, 0xAA	; 170
    2f46:	4a e2       	ldi	r20, 0x2A	; 42
    2f48:	50 e4       	ldi	r21, 0x40	; 64
    2f4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	89 8b       	std	Y+17, r24	; 0x11
    2f54:	9a 8b       	std	Y+18, r25	; 0x12
    2f56:	ab 8b       	std	Y+19, r26	; 0x13
    2f58:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2f5a:	69 89       	ldd	r22, Y+17	; 0x11
    2f5c:	7a 89       	ldd	r23, Y+18	; 0x12
    2f5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f60:	9c 89       	ldd	r25, Y+20	; 0x14
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	40 e8       	ldi	r20, 0x80	; 128
    2f68:	5f e3       	ldi	r21, 0x3F	; 63
    2f6a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2f6e:	88 23       	and	r24, r24
    2f70:	1c f4       	brge	.+6      	; 0x2f78 <LCD_vidPrintINT+0xc0c>
		__ticks = 1;
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	88 8b       	std	Y+16, r24	; 0x10
    2f76:	91 c0       	rjmp	.+290    	; 0x309a <LCD_vidPrintINT+0xd2e>
	else if (__tmp > 255)
    2f78:	69 89       	ldd	r22, Y+17	; 0x11
    2f7a:	7a 89       	ldd	r23, Y+18	; 0x12
    2f7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	4f e7       	ldi	r20, 0x7F	; 127
    2f86:	53 e4       	ldi	r21, 0x43	; 67
    2f88:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2f8c:	18 16       	cp	r1, r24
    2f8e:	0c f0       	brlt	.+2      	; 0x2f92 <LCD_vidPrintINT+0xc26>
    2f90:	7b c0       	rjmp	.+246    	; 0x3088 <LCD_vidPrintINT+0xd1c>
	{
		_delay_ms(__us / 1000.0);
    2f92:	6d 89       	ldd	r22, Y+21	; 0x15
    2f94:	7e 89       	ldd	r23, Y+22	; 0x16
    2f96:	8f 89       	ldd	r24, Y+23	; 0x17
    2f98:	98 8d       	ldd	r25, Y+24	; 0x18
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	4a e7       	ldi	r20, 0x7A	; 122
    2fa0:	54 e4       	ldi	r21, 0x44	; 68
    2fa2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2fa6:	dc 01       	movw	r26, r24
    2fa8:	cb 01       	movw	r24, r22
    2faa:	8c 87       	std	Y+12, r24	; 0x0c
    2fac:	9d 87       	std	Y+13, r25	; 0x0d
    2fae:	ae 87       	std	Y+14, r26	; 0x0e
    2fb0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb2:	6c 85       	ldd	r22, Y+12	; 0x0c
    2fb4:	7d 85       	ldd	r23, Y+13	; 0x0d
    2fb6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fb8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	4a ef       	ldi	r20, 0xFA	; 250
    2fc0:	54 e4       	ldi	r21, 0x44	; 68
    2fc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	88 87       	std	Y+8, r24	; 0x08
    2fcc:	99 87       	std	Y+9, r25	; 0x09
    2fce:	aa 87       	std	Y+10, r26	; 0x0a
    2fd0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2fd2:	68 85       	ldd	r22, Y+8	; 0x08
    2fd4:	79 85       	ldd	r23, Y+9	; 0x09
    2fd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	40 e8       	ldi	r20, 0x80	; 128
    2fe0:	5f e3       	ldi	r21, 0x3F	; 63
    2fe2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2fe6:	88 23       	and	r24, r24
    2fe8:	2c f4       	brge	.+10     	; 0x2ff4 <LCD_vidPrintINT+0xc88>
		__ticks = 1;
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	9f 83       	std	Y+7, r25	; 0x07
    2ff0:	8e 83       	std	Y+6, r24	; 0x06
    2ff2:	3f c0       	rjmp	.+126    	; 0x3072 <LCD_vidPrintINT+0xd06>
	else if (__tmp > 65535)
    2ff4:	68 85       	ldd	r22, Y+8	; 0x08
    2ff6:	79 85       	ldd	r23, Y+9	; 0x09
    2ff8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ffa:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	3f ef       	ldi	r19, 0xFF	; 255
    3000:	4f e7       	ldi	r20, 0x7F	; 127
    3002:	57 e4       	ldi	r21, 0x47	; 71
    3004:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    3008:	18 16       	cp	r1, r24
    300a:	4c f5       	brge	.+82     	; 0x305e <LCD_vidPrintINT+0xcf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    300c:	6c 85       	ldd	r22, Y+12	; 0x0c
    300e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3010:	8e 85       	ldd	r24, Y+14	; 0x0e
    3012:	9f 85       	ldd	r25, Y+15	; 0x0f
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	40 e2       	ldi	r20, 0x20	; 32
    301a:	51 e4       	ldi	r21, 0x41	; 65
    301c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	bc 01       	movw	r22, r24
    3026:	cd 01       	movw	r24, r26
    3028:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	9f 83       	std	Y+7, r25	; 0x07
    3032:	8e 83       	std	Y+6, r24	; 0x06
    3034:	0f c0       	rjmp	.+30     	; 0x3054 <LCD_vidPrintINT+0xce8>
    3036:	88 ec       	ldi	r24, 0xC8	; 200
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	9d 83       	std	Y+5, r25	; 0x05
    303c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    303e:	8c 81       	ldd	r24, Y+4	; 0x04
    3040:	9d 81       	ldd	r25, Y+5	; 0x05
    3042:	01 97       	sbiw	r24, 0x01	; 1
    3044:	f1 f7       	brne	.-4      	; 0x3042 <LCD_vidPrintINT+0xcd6>
    3046:	9d 83       	std	Y+5, r25	; 0x05
    3048:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    304a:	8e 81       	ldd	r24, Y+6	; 0x06
    304c:	9f 81       	ldd	r25, Y+7	; 0x07
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	9f 83       	std	Y+7, r25	; 0x07
    3052:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3054:	8e 81       	ldd	r24, Y+6	; 0x06
    3056:	9f 81       	ldd	r25, Y+7	; 0x07
    3058:	00 97       	sbiw	r24, 0x00	; 0
    305a:	69 f7       	brne	.-38     	; 0x3036 <LCD_vidPrintINT+0xcca>
    305c:	24 c0       	rjmp	.+72     	; 0x30a6 <LCD_vidPrintINT+0xd3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    305e:	68 85       	ldd	r22, Y+8	; 0x08
    3060:	79 85       	ldd	r23, Y+9	; 0x09
    3062:	8a 85       	ldd	r24, Y+10	; 0x0a
    3064:	9b 85       	ldd	r25, Y+11	; 0x0b
    3066:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	9f 83       	std	Y+7, r25	; 0x07
    3070:	8e 83       	std	Y+6, r24	; 0x06
    3072:	8e 81       	ldd	r24, Y+6	; 0x06
    3074:	9f 81       	ldd	r25, Y+7	; 0x07
    3076:	9b 83       	std	Y+3, r25	; 0x03
    3078:	8a 83       	std	Y+2, r24	; 0x02
    307a:	8a 81       	ldd	r24, Y+2	; 0x02
    307c:	9b 81       	ldd	r25, Y+3	; 0x03
    307e:	01 97       	sbiw	r24, 0x01	; 1
    3080:	f1 f7       	brne	.-4      	; 0x307e <LCD_vidPrintINT+0xd12>
    3082:	9b 83       	std	Y+3, r25	; 0x03
    3084:	8a 83       	std	Y+2, r24	; 0x02
    3086:	0f c0       	rjmp	.+30     	; 0x30a6 <LCD_vidPrintINT+0xd3a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3088:	69 89       	ldd	r22, Y+17	; 0x11
    308a:	7a 89       	ldd	r23, Y+18	; 0x12
    308c:	8b 89       	ldd	r24, Y+19	; 0x13
    308e:	9c 89       	ldd	r25, Y+20	; 0x14
    3090:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3094:	dc 01       	movw	r26, r24
    3096:	cb 01       	movw	r24, r22
    3098:	88 8b       	std	Y+16, r24	; 0x10
    309a:	88 89       	ldd	r24, Y+16	; 0x10
    309c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    309e:	89 81       	ldd	r24, Y+1	; 0x01
    30a0:	8a 95       	dec	r24
    30a2:	f1 f7       	brne	.-4      	; 0x30a0 <LCD_vidPrintINT+0xd34>
    30a4:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(200);
		lcd_vidWriteData(return_ASCII(RES));
    30a6:	fe 01       	movw	r30, r28
    30a8:	ef 56       	subi	r30, 0x6F	; 111
    30aa:	ff 4f       	sbci	r31, 0xFF	; 255
    30ac:	80 81       	ld	r24, Z
    30ae:	0e 94 9d 10 	call	0x213a	; 0x213a <return_ASCII>
    30b2:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <lcd_vidWriteData>
//		_delay_us(200);
//		lcd_vidWriteData(return_ASCII(RES));
//		break;

	}
}
    30b6:	c9 56       	subi	r28, 0x69	; 105
    30b8:	df 4f       	sbci	r29, 0xFF	; 255
    30ba:	0f b6       	in	r0, 0x3f	; 63
    30bc:	f8 94       	cli
    30be:	de bf       	out	0x3e, r29	; 62
    30c0:	0f be       	out	0x3f, r0	; 63
    30c2:	cd bf       	out	0x3d, r28	; 61
    30c4:	cf 91       	pop	r28
    30c6:	df 91       	pop	r29
    30c8:	1f 91       	pop	r17
    30ca:	0f 91       	pop	r16
    30cc:	08 95       	ret

000030ce <main>:
#include "lcd.h"


void main (void)

{
    30ce:	df 93       	push	r29
    30d0:	cf 93       	push	r28
    30d2:	cd b7       	in	r28, 0x3d	; 61
    30d4:	de b7       	in	r29, 0x3e	; 62

lcd_vidInit();
    30d6:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <lcd_vidInit>

//lcd_write_string("WAEL");
//LCD_vidPrintINT(765,3);
while(1)
{
Gotoxy(2,1);
    30da:	82 e0       	ldi	r24, 0x02	; 2
    30dc:	61 e0       	ldi	r22, 0x01	; 1
    30de:	0e 94 88 11 	call	0x2310	; 0x2310 <Gotoxy>
lcd_write_string("WAEL");
    30e2:	80 e6       	ldi	r24, 0x60	; 96
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <lcd_write_string>
    30ea:	f7 cf       	rjmp	.-18     	; 0x30da <main+0xc>

000030ec <__udivmodhi4>:
    30ec:	aa 1b       	sub	r26, r26
    30ee:	bb 1b       	sub	r27, r27
    30f0:	51 e1       	ldi	r21, 0x11	; 17
    30f2:	07 c0       	rjmp	.+14     	; 0x3102 <__udivmodhi4_ep>

000030f4 <__udivmodhi4_loop>:
    30f4:	aa 1f       	adc	r26, r26
    30f6:	bb 1f       	adc	r27, r27
    30f8:	a6 17       	cp	r26, r22
    30fa:	b7 07       	cpc	r27, r23
    30fc:	10 f0       	brcs	.+4      	; 0x3102 <__udivmodhi4_ep>
    30fe:	a6 1b       	sub	r26, r22
    3100:	b7 0b       	sbc	r27, r23

00003102 <__udivmodhi4_ep>:
    3102:	88 1f       	adc	r24, r24
    3104:	99 1f       	adc	r25, r25
    3106:	5a 95       	dec	r21
    3108:	a9 f7       	brne	.-22     	; 0x30f4 <__udivmodhi4_loop>
    310a:	80 95       	com	r24
    310c:	90 95       	com	r25
    310e:	bc 01       	movw	r22, r24
    3110:	cd 01       	movw	r24, r26
    3112:	08 95       	ret

00003114 <__prologue_saves__>:
    3114:	2f 92       	push	r2
    3116:	3f 92       	push	r3
    3118:	4f 92       	push	r4
    311a:	5f 92       	push	r5
    311c:	6f 92       	push	r6
    311e:	7f 92       	push	r7
    3120:	8f 92       	push	r8
    3122:	9f 92       	push	r9
    3124:	af 92       	push	r10
    3126:	bf 92       	push	r11
    3128:	cf 92       	push	r12
    312a:	df 92       	push	r13
    312c:	ef 92       	push	r14
    312e:	ff 92       	push	r15
    3130:	0f 93       	push	r16
    3132:	1f 93       	push	r17
    3134:	cf 93       	push	r28
    3136:	df 93       	push	r29
    3138:	cd b7       	in	r28, 0x3d	; 61
    313a:	de b7       	in	r29, 0x3e	; 62
    313c:	ca 1b       	sub	r28, r26
    313e:	db 0b       	sbc	r29, r27
    3140:	0f b6       	in	r0, 0x3f	; 63
    3142:	f8 94       	cli
    3144:	de bf       	out	0x3e, r29	; 62
    3146:	0f be       	out	0x3f, r0	; 63
    3148:	cd bf       	out	0x3d, r28	; 61
    314a:	09 94       	ijmp

0000314c <__epilogue_restores__>:
    314c:	2a 88       	ldd	r2, Y+18	; 0x12
    314e:	39 88       	ldd	r3, Y+17	; 0x11
    3150:	48 88       	ldd	r4, Y+16	; 0x10
    3152:	5f 84       	ldd	r5, Y+15	; 0x0f
    3154:	6e 84       	ldd	r6, Y+14	; 0x0e
    3156:	7d 84       	ldd	r7, Y+13	; 0x0d
    3158:	8c 84       	ldd	r8, Y+12	; 0x0c
    315a:	9b 84       	ldd	r9, Y+11	; 0x0b
    315c:	aa 84       	ldd	r10, Y+10	; 0x0a
    315e:	b9 84       	ldd	r11, Y+9	; 0x09
    3160:	c8 84       	ldd	r12, Y+8	; 0x08
    3162:	df 80       	ldd	r13, Y+7	; 0x07
    3164:	ee 80       	ldd	r14, Y+6	; 0x06
    3166:	fd 80       	ldd	r15, Y+5	; 0x05
    3168:	0c 81       	ldd	r16, Y+4	; 0x04
    316a:	1b 81       	ldd	r17, Y+3	; 0x03
    316c:	aa 81       	ldd	r26, Y+2	; 0x02
    316e:	b9 81       	ldd	r27, Y+1	; 0x01
    3170:	ce 0f       	add	r28, r30
    3172:	d1 1d       	adc	r29, r1
    3174:	0f b6       	in	r0, 0x3f	; 63
    3176:	f8 94       	cli
    3178:	de bf       	out	0x3e, r29	; 62
    317a:	0f be       	out	0x3f, r0	; 63
    317c:	cd bf       	out	0x3d, r28	; 61
    317e:	ed 01       	movw	r28, r26
    3180:	08 95       	ret

00003182 <_exit>:
    3182:	f8 94       	cli

00003184 <__stop_program>:
    3184:	ff cf       	rjmp	.-2      	; 0x3184 <__stop_program>
