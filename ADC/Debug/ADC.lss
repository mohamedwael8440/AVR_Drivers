
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002986  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00002986  00002a1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080007e  0080007e  00002a38  2**0
                  ALLOC
  3 .stab         00001ac4  00000000  00000000  00002a38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a58  00000000  00000000  000044fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000050b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005243  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007288  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008389  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000930c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000948c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000974e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009fdc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 83 13 	call	0x2706	; 0x2706 <main>
      8a:	0c 94 c1 14 	jmp	0x2982	; 0x2982 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e7       	ldi	r26, 0x75	; 117
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 96 14 	jmp	0x292c	; 0x292c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 96 14 	jmp	0x292c	; 0x292c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8a 14 	jmp	0x2914	; 0x2914 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e7       	ldi	r24, 0x75	; 117
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 92 14 	jmp	0x2924	; 0x2924 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e7       	ldi	r22, 0x75	; 117
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 96 14 	jmp	0x292c	; 0x292c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 96 14 	jmp	0x292c	; 0x292c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 96 14 	jmp	0x292c	; 0x292c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_init>:
#include "utils.h"
#include "DIO.h"


void ADC_init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
  //we need to clear unused bits
	Set_Bit(ADMUX,6); // SELECT VRE=VCC
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	8c 93       	st	X, r24
    Set_Bit(ADCSRA,7); // ENABLE adc circuit
     cb4:	a6 e2       	ldi	r26, 0x26	; 38
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e6 e2       	ldi	r30, 0x26	; 38
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 68       	ori	r24, 0x80	; 128
     cc0:	8c 93       	st	X, r24
    Set_Bit(ADCSRA,2);
     cc2:	a6 e2       	ldi	r26, 0x26	; 38
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e6 e2       	ldi	r30, 0x26	; 38
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	84 60       	ori	r24, 0x04	; 4
     cce:	8c 93       	st	X, r24
    Set_Bit(ADCSRA,0);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	81 60       	ori	r24, 0x01	; 1
     cdc:	8c 93       	st	X, r24
	//SELECT prescaller=32
}
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <ADC_u16Read>:
u16 ADC_u16Read(u8 channel)
{
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	0f 92       	push	r0
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	89 83       	std	Y+1, r24	; 0x01
  ADMUX &=0b11100000; // init
     cf0:	a7 e2       	ldi	r26, 0x27	; 39
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e7 e2       	ldi	r30, 0x27	; 39
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	80 7e       	andi	r24, 0xE0	; 224
     cfc:	8c 93       	st	X, r24
  ADMUX|=channel; //select channel
     cfe:	a7 e2       	ldi	r26, 0x27	; 39
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e7 e2       	ldi	r30, 0x27	; 39
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	90 81       	ld	r25, Z
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	89 2b       	or	r24, r25
     d0c:	8c 93       	st	X, r24
  Set_Bit(ADCSRA,6); //start converstion
     d0e:	a6 e2       	ldi	r26, 0x26	; 38
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e6 e2       	ldi	r30, 0x26	; 38
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	80 64       	ori	r24, 0x40	; 64
     d1a:	8c 93       	st	X, r24
  while(!(Get_Bit(ADCSRA,4))); // ==0 wait till flag =1 and quit W B3D KDA E3MEL RESET BEL SOFTWARE
     d1c:	e6 e2       	ldi	r30, 0x26	; 38
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	88 2f       	mov	r24, r24
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	80 71       	andi	r24, 0x10	; 16
     d28:	90 70       	andi	r25, 0x00	; 0
     d2a:	95 95       	asr	r25
     d2c:	87 95       	ror	r24
     d2e:	95 95       	asr	r25
     d30:	87 95       	ror	r24
     d32:	95 95       	asr	r25
     d34:	87 95       	ror	r24
     d36:	95 95       	asr	r25
     d38:	87 95       	ror	r24
     d3a:	00 97       	sbiw	r24, 0x00	; 0
     d3c:	79 f3       	breq	.-34     	; 0xd1c <ADC_u16Read+0x38>
  Set_Bit(ADCSRA,4);
     d3e:	a6 e2       	ldi	r26, 0x26	; 38
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e6 e2       	ldi	r30, 0x26	; 38
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	80 61       	ori	r24, 0x10	; 16
     d4a:	8c 93       	st	X, r24
  // RESET ADIF
  return(ADC); // return digital value
     d4c:	e4 e2       	ldi	r30, 0x24	; 36
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	91 81       	ldd	r25, Z+1	; 0x01
}
     d54:	0f 90       	pop	r0
     d56:	cf 91       	pop	r28
     d58:	df 91       	pop	r29
     d5a:	08 95       	ret

00000d5c <DIO_vidSetPinDir>:
#include "DIO.h"



void DIO_vidSetPinDir (u8 port,u8 pin,u8 dir)
{
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	00 d0       	rcall	.+0      	; 0xd62 <DIO_vidSetPinDir+0x6>
     d62:	00 d0       	rcall	.+0      	; 0xd64 <DIO_vidSetPinDir+0x8>
     d64:	0f 92       	push	r0
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	89 83       	std	Y+1, r24	; 0x01
     d6c:	6a 83       	std	Y+2, r22	; 0x02
     d6e:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	3d 83       	std	Y+5, r19	; 0x05
     d78:	2c 83       	std	Y+4, r18	; 0x04
     d7a:	8c 81       	ldd	r24, Y+4	; 0x04
     d7c:	9d 81       	ldd	r25, Y+5	; 0x05
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	91 05       	cpc	r25, r1
     d82:	09 f4       	brne	.+2      	; 0xd86 <DIO_vidSetPinDir+0x2a>
     d84:	46 c0       	rjmp	.+140    	; 0xe12 <DIO_vidSetPinDir+0xb6>
     d86:	2c 81       	ldd	r18, Y+4	; 0x04
     d88:	3d 81       	ldd	r19, Y+5	; 0x05
     d8a:	22 30       	cpi	r18, 0x02	; 2
     d8c:	31 05       	cpc	r19, r1
     d8e:	2c f4       	brge	.+10     	; 0xd9a <DIO_vidSetPinDir+0x3e>
     d90:	8c 81       	ldd	r24, Y+4	; 0x04
     d92:	9d 81       	ldd	r25, Y+5	; 0x05
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	71 f0       	breq	.+28     	; 0xdb4 <DIO_vidSetPinDir+0x58>
     d98:	c7 c0       	rjmp	.+398    	; 0xf28 <DIO_vidSetPinDir+0x1cc>
     d9a:	2c 81       	ldd	r18, Y+4	; 0x04
     d9c:	3d 81       	ldd	r19, Y+5	; 0x05
     d9e:	22 30       	cpi	r18, 0x02	; 2
     da0:	31 05       	cpc	r19, r1
     da2:	09 f4       	brne	.+2      	; 0xda6 <DIO_vidSetPinDir+0x4a>
     da4:	65 c0       	rjmp	.+202    	; 0xe70 <DIO_vidSetPinDir+0x114>
     da6:	8c 81       	ldd	r24, Y+4	; 0x04
     da8:	9d 81       	ldd	r25, Y+5	; 0x05
     daa:	83 30       	cpi	r24, 0x03	; 3
     dac:	91 05       	cpc	r25, r1
     dae:	09 f4       	brne	.+2      	; 0xdb2 <DIO_vidSetPinDir+0x56>
     db0:	8e c0       	rjmp	.+284    	; 0xece <DIO_vidSetPinDir+0x172>
     db2:	ba c0       	rjmp	.+372    	; 0xf28 <DIO_vidSetPinDir+0x1cc>
	{
	case 0:
		if(dir==input)
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	88 23       	and	r24, r24
     db8:	a1 f4       	brne	.+40     	; 0xde2 <DIO_vidSetPinDir+0x86>
			Clr_Bit(DDRA,pin);
     dba:	aa e3       	ldi	r26, 0x3A	; 58
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	ea e3       	ldi	r30, 0x3A	; 58
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 2e       	mov	r0, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <DIO_vidSetPinDir+0x7c>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <DIO_vidSetPinDir+0x78>
     ddc:	80 95       	com	r24
     dde:	84 23       	and	r24, r20
     de0:	8c 93       	st	X, r24
		if(dir==output)
     de2:	8b 81       	ldd	r24, Y+3	; 0x03
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	09 f0       	breq	.+2      	; 0xdea <DIO_vidSetPinDir+0x8e>
     de8:	9f c0       	rjmp	.+318    	; 0xf28 <DIO_vidSetPinDir+0x1cc>
			Set_Bit(DDRA,pin);
     dea:	aa e3       	ldi	r26, 0x3A	; 58
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	ea e3       	ldi	r30, 0x3A	; 58
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_vidSetPinDir+0xac>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_vidSetPinDir+0xa8>
     e0c:	84 2b       	or	r24, r20
     e0e:	8c 93       	st	X, r24
     e10:	8b c0       	rjmp	.+278    	; 0xf28 <DIO_vidSetPinDir+0x1cc>
		break;

	case 1:
			if(dir==input)
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	88 23       	and	r24, r24
     e16:	a1 f4       	brne	.+40     	; 0xe40 <DIO_vidSetPinDir+0xe4>
				Clr_Bit(DDRB,pin);
     e18:	a7 e3       	ldi	r26, 0x37	; 55
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e7 e3       	ldi	r30, 0x37	; 55
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 2e       	mov	r0, r18
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <DIO_vidSetPinDir+0xda>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	0a 94       	dec	r0
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <DIO_vidSetPinDir+0xd6>
     e3a:	80 95       	com	r24
     e3c:	84 23       	and	r24, r20
     e3e:	8c 93       	st	X, r24
			if(dir==output)
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	81 30       	cpi	r24, 0x01	; 1
     e44:	09 f0       	breq	.+2      	; 0xe48 <DIO_vidSetPinDir+0xec>
     e46:	70 c0       	rjmp	.+224    	; 0xf28 <DIO_vidSetPinDir+0x1cc>
				Set_Bit(DDRB,pin);
     e48:	a7 e3       	ldi	r26, 0x37	; 55
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e7 e3       	ldi	r30, 0x37	; 55
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	48 2f       	mov	r20, r24
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 2e       	mov	r0, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <DIO_vidSetPinDir+0x10a>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <DIO_vidSetPinDir+0x106>
     e6a:	84 2b       	or	r24, r20
     e6c:	8c 93       	st	X, r24
     e6e:	5c c0       	rjmp	.+184    	; 0xf28 <DIO_vidSetPinDir+0x1cc>
			break;

	case 2:
			if(dir==input)
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	88 23       	and	r24, r24
     e74:	a1 f4       	brne	.+40     	; 0xe9e <DIO_vidSetPinDir+0x142>
				Clr_Bit(DDRC,pin);
     e76:	a4 e3       	ldi	r26, 0x34	; 52
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e4 e3       	ldi	r30, 0x34	; 52
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	48 2f       	mov	r20, r24
     e82:	8a 81       	ldd	r24, Y+2	; 0x02
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	02 2e       	mov	r0, r18
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <DIO_vidSetPinDir+0x138>
     e90:	88 0f       	add	r24, r24
     e92:	99 1f       	adc	r25, r25
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <DIO_vidSetPinDir+0x134>
     e98:	80 95       	com	r24
     e9a:	84 23       	and	r24, r20
     e9c:	8c 93       	st	X, r24
			if(dir==output)
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	81 30       	cpi	r24, 0x01	; 1
     ea2:	09 f0       	breq	.+2      	; 0xea6 <DIO_vidSetPinDir+0x14a>
     ea4:	41 c0       	rjmp	.+130    	; 0xf28 <DIO_vidSetPinDir+0x1cc>
				Set_Bit(DDRC,pin);
     ea6:	a4 e3       	ldi	r26, 0x34	; 52
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e4 e3       	ldi	r30, 0x34	; 52
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	48 2f       	mov	r20, r24
     eb2:	8a 81       	ldd	r24, Y+2	; 0x02
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	02 2e       	mov	r0, r18
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <DIO_vidSetPinDir+0x168>
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	0a 94       	dec	r0
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <DIO_vidSetPinDir+0x164>
     ec8:	84 2b       	or	r24, r20
     eca:	8c 93       	st	X, r24
     ecc:	2d c0       	rjmp	.+90     	; 0xf28 <DIO_vidSetPinDir+0x1cc>
			break;

	case 3:
			if(dir==input)
     ece:	8b 81       	ldd	r24, Y+3	; 0x03
     ed0:	88 23       	and	r24, r24
     ed2:	a1 f4       	brne	.+40     	; 0xefc <DIO_vidSetPinDir+0x1a0>
				Clr_Bit(DDRD,pin);
     ed4:	a1 e3       	ldi	r26, 0x31	; 49
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e1 e3       	ldi	r30, 0x31	; 49
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8a 81       	ldd	r24, Y+2	; 0x02
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <DIO_vidSetPinDir+0x196>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <DIO_vidSetPinDir+0x192>
     ef6:	80 95       	com	r24
     ef8:	84 23       	and	r24, r20
     efa:	8c 93       	st	X, r24
			if(dir==output)
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	99 f4       	brne	.+38     	; 0xf28 <DIO_vidSetPinDir+0x1cc>
				Set_Bit(DDRD,pin);
     f02:	a1 e3       	ldi	r26, 0x31	; 49
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e1 e3       	ldi	r30, 0x31	; 49
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <DIO_vidSetPinDir+0x1c4>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <DIO_vidSetPinDir+0x1c0>
     f24:	84 2b       	or	r24, r20
     f26:	8c 93       	st	X, r24
			break;
	}
}
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <DIO_vidWritePinValue>:

	void DIO_vidWritePinValue (u8 port,u8 pin,u8 value)
	{
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	00 d0       	rcall	.+0      	; 0xf3e <DIO_vidWritePinValue+0x6>
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <DIO_vidWritePinValue+0x8>
     f40:	0f 92       	push	r0
     f42:	cd b7       	in	r28, 0x3d	; 61
     f44:	de b7       	in	r29, 0x3e	; 62
     f46:	89 83       	std	Y+1, r24	; 0x01
     f48:	6a 83       	std	Y+2, r22	; 0x02
     f4a:	4b 83       	std	Y+3, r20	; 0x03
		switch(port)
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	3d 83       	std	Y+5, r19	; 0x05
     f54:	2c 83       	std	Y+4, r18	; 0x04
     f56:	8c 81       	ldd	r24, Y+4	; 0x04
     f58:	9d 81       	ldd	r25, Y+5	; 0x05
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	91 05       	cpc	r25, r1
     f5e:	09 f4       	brne	.+2      	; 0xf62 <DIO_vidWritePinValue+0x2a>
     f60:	46 c0       	rjmp	.+140    	; 0xfee <DIO_vidWritePinValue+0xb6>
     f62:	2c 81       	ldd	r18, Y+4	; 0x04
     f64:	3d 81       	ldd	r19, Y+5	; 0x05
     f66:	22 30       	cpi	r18, 0x02	; 2
     f68:	31 05       	cpc	r19, r1
     f6a:	2c f4       	brge	.+10     	; 0xf76 <DIO_vidWritePinValue+0x3e>
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	9d 81       	ldd	r25, Y+5	; 0x05
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	71 f0       	breq	.+28     	; 0xf90 <DIO_vidWritePinValue+0x58>
     f74:	c7 c0       	rjmp	.+398    	; 0x1104 <DIO_vidWritePinValue+0x1cc>
     f76:	2c 81       	ldd	r18, Y+4	; 0x04
     f78:	3d 81       	ldd	r19, Y+5	; 0x05
     f7a:	22 30       	cpi	r18, 0x02	; 2
     f7c:	31 05       	cpc	r19, r1
     f7e:	09 f4       	brne	.+2      	; 0xf82 <DIO_vidWritePinValue+0x4a>
     f80:	65 c0       	rjmp	.+202    	; 0x104c <DIO_vidWritePinValue+0x114>
     f82:	8c 81       	ldd	r24, Y+4	; 0x04
     f84:	9d 81       	ldd	r25, Y+5	; 0x05
     f86:	83 30       	cpi	r24, 0x03	; 3
     f88:	91 05       	cpc	r25, r1
     f8a:	09 f4       	brne	.+2      	; 0xf8e <DIO_vidWritePinValue+0x56>
     f8c:	8e c0       	rjmp	.+284    	; 0x10aa <DIO_vidWritePinValue+0x172>
     f8e:	ba c0       	rjmp	.+372    	; 0x1104 <DIO_vidWritePinValue+0x1cc>
		{
		case 0:
			if(value==low)
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	88 23       	and	r24, r24
     f94:	a1 f4       	brne	.+40     	; 0xfbe <DIO_vidWritePinValue+0x86>
				Clr_Bit(PORTA,pin);
     f96:	ab e3       	ldi	r26, 0x3B	; 59
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	eb e3       	ldi	r30, 0x3B	; 59
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <DIO_vidWritePinValue+0x7c>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <DIO_vidWritePinValue+0x78>
     fb8:	80 95       	com	r24
     fba:	84 23       	and	r24, r20
     fbc:	8c 93       	st	X, r24
			if(value==high)
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <DIO_vidWritePinValue+0x8e>
     fc4:	9f c0       	rjmp	.+318    	; 0x1104 <DIO_vidWritePinValue+0x1cc>
				Set_Bit(PORTA,pin);
     fc6:	ab e3       	ldi	r26, 0x3B	; 59
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	eb e3       	ldi	r30, 0x3B	; 59
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	48 2f       	mov	r20, r24
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <DIO_vidWritePinValue+0xac>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <DIO_vidWritePinValue+0xa8>
     fe8:	84 2b       	or	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	8b c0       	rjmp	.+278    	; 0x1104 <DIO_vidWritePinValue+0x1cc>
			break;

		case 1:
				if(value==low)
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	88 23       	and	r24, r24
     ff2:	a1 f4       	brne	.+40     	; 0x101c <DIO_vidWritePinValue+0xe4>
					Clr_Bit(PORTB,pin);
     ff4:	a8 e3       	ldi	r26, 0x38	; 56
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e8 e3       	ldi	r30, 0x38	; 56
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_vidWritePinValue+0xda>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_vidWritePinValue+0xd6>
    1016:	80 95       	com	r24
    1018:	84 23       	and	r24, r20
    101a:	8c 93       	st	X, r24
				if(value==high)
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	09 f0       	breq	.+2      	; 0x1024 <DIO_vidWritePinValue+0xec>
    1022:	70 c0       	rjmp	.+224    	; 0x1104 <DIO_vidWritePinValue+0x1cc>
					Set_Bit(PORTB,pin);
    1024:	a8 e3       	ldi	r26, 0x38	; 56
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e8 e3       	ldi	r30, 0x38	; 56
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <DIO_vidWritePinValue+0x10a>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <DIO_vidWritePinValue+0x106>
    1046:	84 2b       	or	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	5c c0       	rjmp	.+184    	; 0x1104 <DIO_vidWritePinValue+0x1cc>
				break;

		case 2:
				if(value==low)
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	88 23       	and	r24, r24
    1050:	a1 f4       	brne	.+40     	; 0x107a <DIO_vidWritePinValue+0x142>
					Clr_Bit(PORTC,pin);
    1052:	a5 e3       	ldi	r26, 0x35	; 53
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e5 e3       	ldi	r30, 0x35	; 53
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	02 2e       	mov	r0, r18
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <DIO_vidWritePinValue+0x138>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	0a 94       	dec	r0
    1072:	e2 f7       	brpl	.-8      	; 0x106c <DIO_vidWritePinValue+0x134>
    1074:	80 95       	com	r24
    1076:	84 23       	and	r24, r20
    1078:	8c 93       	st	X, r24
				if(value==high)
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	09 f0       	breq	.+2      	; 0x1082 <DIO_vidWritePinValue+0x14a>
    1080:	41 c0       	rjmp	.+130    	; 0x1104 <DIO_vidWritePinValue+0x1cc>
					Set_Bit(PORTC,pin);
    1082:	a5 e3       	ldi	r26, 0x35	; 53
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e5 e3       	ldi	r30, 0x35	; 53
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_vidWritePinValue+0x168>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_vidWritePinValue+0x164>
    10a4:	84 2b       	or	r24, r20
    10a6:	8c 93       	st	X, r24
    10a8:	2d c0       	rjmp	.+90     	; 0x1104 <DIO_vidWritePinValue+0x1cc>
				break;

		case 3:
				if(value==low)
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	88 23       	and	r24, r24
    10ae:	a1 f4       	brne	.+40     	; 0x10d8 <DIO_vidWritePinValue+0x1a0>
					Clr_Bit(PORTD,pin);
    10b0:	a2 e3       	ldi	r26, 0x32	; 50
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e2 e3       	ldi	r30, 0x32	; 50
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	48 2f       	mov	r20, r24
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	02 2e       	mov	r0, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_vidWritePinValue+0x196>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	0a 94       	dec	r0
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_vidWritePinValue+0x192>
    10d2:	80 95       	com	r24
    10d4:	84 23       	and	r24, r20
    10d6:	8c 93       	st	X, r24
				if(value==high)
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	99 f4       	brne	.+38     	; 0x1104 <DIO_vidWritePinValue+0x1cc>
					Set_Bit(PORTD,pin);
    10de:	a2 e3       	ldi	r26, 0x32	; 50
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e2 e3       	ldi	r30, 0x32	; 50
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	48 2f       	mov	r20, r24
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	02 2e       	mov	r0, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <DIO_vidWritePinValue+0x1c4>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <DIO_vidWritePinValue+0x1c0>
    1100:	84 2b       	or	r24, r20
    1102:	8c 93       	st	X, r24
				break;
		}
	}
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <DIO_u8ReadPinValue>:

	u8 DIO_u8ReadPinValue(u8 port, u8 pin)
	{
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	00 d0       	rcall	.+0      	; 0x111a <DIO_u8ReadPinValue+0x6>
    111a:	00 d0       	rcall	.+0      	; 0x111c <DIO_u8ReadPinValue+0x8>
    111c:	0f 92       	push	r0
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	89 83       	std	Y+1, r24	; 0x01
    1124:	6a 83       	std	Y+2, r22	; 0x02
		switch(port)
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	3d 83       	std	Y+5, r19	; 0x05
    112e:	2c 83       	std	Y+4, r18	; 0x04
    1130:	4c 81       	ldd	r20, Y+4	; 0x04
    1132:	5d 81       	ldd	r21, Y+5	; 0x05
    1134:	41 30       	cpi	r20, 0x01	; 1
    1136:	51 05       	cpc	r21, r1
    1138:	b1 f1       	breq	.+108    	; 0x11a6 <DIO_u8ReadPinValue+0x92>
    113a:	8c 81       	ldd	r24, Y+4	; 0x04
    113c:	9d 81       	ldd	r25, Y+5	; 0x05
    113e:	82 30       	cpi	r24, 0x02	; 2
    1140:	91 05       	cpc	r25, r1
    1142:	34 f4       	brge	.+12     	; 0x1150 <DIO_u8ReadPinValue+0x3c>
    1144:	2c 81       	ldd	r18, Y+4	; 0x04
    1146:	3d 81       	ldd	r19, Y+5	; 0x05
    1148:	21 15       	cp	r18, r1
    114a:	31 05       	cpc	r19, r1
    114c:	71 f0       	breq	.+28     	; 0x116a <DIO_u8ReadPinValue+0x56>
    114e:	85 c0       	rjmp	.+266    	; 0x125a <DIO_u8ReadPinValue+0x146>
    1150:	4c 81       	ldd	r20, Y+4	; 0x04
    1152:	5d 81       	ldd	r21, Y+5	; 0x05
    1154:	42 30       	cpi	r20, 0x02	; 2
    1156:	51 05       	cpc	r21, r1
    1158:	09 f4       	brne	.+2      	; 0x115c <DIO_u8ReadPinValue+0x48>
    115a:	43 c0       	rjmp	.+134    	; 0x11e2 <DIO_u8ReadPinValue+0xce>
    115c:	8c 81       	ldd	r24, Y+4	; 0x04
    115e:	9d 81       	ldd	r25, Y+5	; 0x05
    1160:	83 30       	cpi	r24, 0x03	; 3
    1162:	91 05       	cpc	r25, r1
    1164:	09 f4       	brne	.+2      	; 0x1168 <DIO_u8ReadPinValue+0x54>
    1166:	5b c0       	rjmp	.+182    	; 0x121e <DIO_u8ReadPinValue+0x10a>
    1168:	78 c0       	rjmp	.+240    	; 0x125a <DIO_u8ReadPinValue+0x146>
		{
		case a:
			return Get_Bit(PINA,pin);
    116a:	e9 e3       	ldi	r30, 0x39	; 57
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	48 2f       	mov	r20, r24
    1172:	50 e0       	ldi	r21, 0x00	; 0
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <DIO_u8ReadPinValue+0x70>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	2a 95       	dec	r18
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <DIO_u8ReadPinValue+0x6c>
    1188:	9a 01       	movw	r18, r20
    118a:	28 23       	and	r18, r24
    118c:	39 23       	and	r19, r25
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	88 2f       	mov	r24, r24
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	a9 01       	movw	r20, r18
    1196:	02 c0       	rjmp	.+4      	; 0x119c <DIO_u8ReadPinValue+0x88>
    1198:	55 95       	asr	r21
    119a:	47 95       	ror	r20
    119c:	8a 95       	dec	r24
    119e:	e2 f7       	brpl	.-8      	; 0x1198 <DIO_u8ReadPinValue+0x84>
    11a0:	ca 01       	movw	r24, r20
    11a2:	8b 83       	std	Y+3, r24	; 0x03
    11a4:	5c c0       	rjmp	.+184    	; 0x125e <DIO_u8ReadPinValue+0x14a>
			break;
		case b:
			return Get_Bit(PINB,pin);
    11a6:	e6 e3       	ldi	r30, 0x36	; 54
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <DIO_u8ReadPinValue+0xac>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	2a 95       	dec	r18
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <DIO_u8ReadPinValue+0xa8>
    11c4:	9a 01       	movw	r18, r20
    11c6:	28 23       	and	r18, r24
    11c8:	39 23       	and	r19, r25
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	a9 01       	movw	r20, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <DIO_u8ReadPinValue+0xc4>
    11d4:	55 95       	asr	r21
    11d6:	47 95       	ror	r20
    11d8:	8a 95       	dec	r24
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <DIO_u8ReadPinValue+0xc0>
    11dc:	ca 01       	movw	r24, r20
    11de:	8b 83       	std	Y+3, r24	; 0x03
    11e0:	3e c0       	rjmp	.+124    	; 0x125e <DIO_u8ReadPinValue+0x14a>
			break;
		case c:
			return Get_Bit(PINC,pin);
    11e2:	e3 e3       	ldi	r30, 0x33	; 51
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	48 2f       	mov	r20, r24
    11ea:	50 e0       	ldi	r21, 0x00	; 0
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <DIO_u8ReadPinValue+0xe8>
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	2a 95       	dec	r18
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <DIO_u8ReadPinValue+0xe4>
    1200:	9a 01       	movw	r18, r20
    1202:	28 23       	and	r18, r24
    1204:	39 23       	and	r19, r25
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	88 2f       	mov	r24, r24
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	a9 01       	movw	r20, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <DIO_u8ReadPinValue+0x100>
    1210:	55 95       	asr	r21
    1212:	47 95       	ror	r20
    1214:	8a 95       	dec	r24
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <DIO_u8ReadPinValue+0xfc>
    1218:	ca 01       	movw	r24, r20
    121a:	8b 83       	std	Y+3, r24	; 0x03
    121c:	20 c0       	rjmp	.+64     	; 0x125e <DIO_u8ReadPinValue+0x14a>
			break;
		case d:
			return Get_Bit(PIND,pin);
    121e:	e0 e3       	ldi	r30, 0x30	; 48
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <DIO_u8ReadPinValue+0x124>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	2a 95       	dec	r18
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <DIO_u8ReadPinValue+0x120>
    123c:	9a 01       	movw	r18, r20
    123e:	28 23       	and	r18, r24
    1240:	39 23       	and	r19, r25
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	88 2f       	mov	r24, r24
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	a9 01       	movw	r20, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_u8ReadPinValue+0x13c>
    124c:	55 95       	asr	r21
    124e:	47 95       	ror	r20
    1250:	8a 95       	dec	r24
    1252:	e2 f7       	brpl	.-8      	; 0x124c <DIO_u8ReadPinValue+0x138>
    1254:	ca 01       	movw	r24, r20
    1256:	8b 83       	std	Y+3, r24	; 0x03
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_u8ReadPinValue+0x14a>
			break;
		default :
			return port;
    125a:	59 81       	ldd	r21, Y+1	; 0x01
    125c:	5b 83       	std	Y+3, r21	; 0x03
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
			break;
		}


	}
    1260:	0f 90       	pop	r0
    1262:	0f 90       	pop	r0
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <DIO_vidSetPortDir>:

	void DIO_vidSetPortDir(u8 port, u8 Dir)
		{
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	00 d0       	rcall	.+0      	; 0x1276 <DIO_vidSetPortDir+0x6>
    1276:	00 d0       	rcall	.+0      	; 0x1278 <DIO_vidSetPortDir+0x8>
    1278:	cd b7       	in	r28, 0x3d	; 61
    127a:	de b7       	in	r29, 0x3e	; 62
    127c:	89 83       	std	Y+1, r24	; 0x01
    127e:	6a 83       	std	Y+2, r22	; 0x02
			switch(port)
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	3c 83       	std	Y+4, r19	; 0x04
    1288:	2b 83       	std	Y+3, r18	; 0x03
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	9c 81       	ldd	r25, Y+4	; 0x04
    128e:	81 30       	cpi	r24, 0x01	; 1
    1290:	91 05       	cpc	r25, r1
    1292:	d1 f0       	breq	.+52     	; 0x12c8 <DIO_vidSetPortDir+0x58>
    1294:	2b 81       	ldd	r18, Y+3	; 0x03
    1296:	3c 81       	ldd	r19, Y+4	; 0x04
    1298:	22 30       	cpi	r18, 0x02	; 2
    129a:	31 05       	cpc	r19, r1
    129c:	2c f4       	brge	.+10     	; 0x12a8 <DIO_vidSetPortDir+0x38>
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	9c 81       	ldd	r25, Y+4	; 0x04
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	61 f0       	breq	.+24     	; 0x12be <DIO_vidSetPortDir+0x4e>
    12a6:	1e c0       	rjmp	.+60     	; 0x12e4 <DIO_vidSetPortDir+0x74>
    12a8:	2b 81       	ldd	r18, Y+3	; 0x03
    12aa:	3c 81       	ldd	r19, Y+4	; 0x04
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 05       	cpc	r19, r1
    12b0:	81 f0       	breq	.+32     	; 0x12d2 <DIO_vidSetPortDir+0x62>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	83 30       	cpi	r24, 0x03	; 3
    12b8:	91 05       	cpc	r25, r1
    12ba:	81 f0       	breq	.+32     	; 0x12dc <DIO_vidSetPortDir+0x6c>
    12bc:	13 c0       	rjmp	.+38     	; 0x12e4 <DIO_vidSetPortDir+0x74>
			{
			case a:
				DDRA=Dir;
    12be:	ea e3       	ldi	r30, 0x3A	; 58
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	80 83       	st	Z, r24
    12c6:	0e c0       	rjmp	.+28     	; 0x12e4 <DIO_vidSetPortDir+0x74>
				break;
			case b:
				DDRB=Dir;
    12c8:	e7 e3       	ldi	r30, 0x37	; 55
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	80 83       	st	Z, r24
    12d0:	09 c0       	rjmp	.+18     	; 0x12e4 <DIO_vidSetPortDir+0x74>
				break;
			case c:
				DDRC=Dir;
    12d2:	e4 e3       	ldi	r30, 0x34	; 52
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	80 83       	st	Z, r24
    12da:	04 c0       	rjmp	.+8      	; 0x12e4 <DIO_vidSetPortDir+0x74>
				break;
			case d:
				DDRD=Dir;
    12dc:	e1 e3       	ldi	r30, 0x31	; 49
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	80 83       	st	Z, r24
				break;

			}


		}
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <DIO_vidWritePortValue>:

	void DIO_vidWritePortValue(u8 port, u8 Value)
			{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <DIO_vidWritePortValue+0x6>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <DIO_vidWritePortValue+0x8>
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	6a 83       	std	Y+2, r22	; 0x02
				switch(port)
    1302:	89 81       	ldd	r24, Y+1	; 0x01
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	3c 83       	std	Y+4, r19	; 0x04
    130a:	2b 83       	std	Y+3, r18	; 0x03
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9c 81       	ldd	r25, Y+4	; 0x04
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	91 05       	cpc	r25, r1
    1314:	d1 f0       	breq	.+52     	; 0x134a <DIO_vidWritePortValue+0x58>
    1316:	2b 81       	ldd	r18, Y+3	; 0x03
    1318:	3c 81       	ldd	r19, Y+4	; 0x04
    131a:	22 30       	cpi	r18, 0x02	; 2
    131c:	31 05       	cpc	r19, r1
    131e:	2c f4       	brge	.+10     	; 0x132a <DIO_vidWritePortValue+0x38>
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	61 f0       	breq	.+24     	; 0x1340 <DIO_vidWritePortValue+0x4e>
    1328:	1e c0       	rjmp	.+60     	; 0x1366 <DIO_vidWritePortValue+0x74>
    132a:	2b 81       	ldd	r18, Y+3	; 0x03
    132c:	3c 81       	ldd	r19, Y+4	; 0x04
    132e:	22 30       	cpi	r18, 0x02	; 2
    1330:	31 05       	cpc	r19, r1
    1332:	81 f0       	breq	.+32     	; 0x1354 <DIO_vidWritePortValue+0x62>
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	83 30       	cpi	r24, 0x03	; 3
    133a:	91 05       	cpc	r25, r1
    133c:	81 f0       	breq	.+32     	; 0x135e <DIO_vidWritePortValue+0x6c>
    133e:	13 c0       	rjmp	.+38     	; 0x1366 <DIO_vidWritePortValue+0x74>
				{
				case a:
					PORTA=Value;
    1340:	eb e3       	ldi	r30, 0x3B	; 59
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	80 83       	st	Z, r24
    1348:	0e c0       	rjmp	.+28     	; 0x1366 <DIO_vidWritePortValue+0x74>
					break;
				case b:
					PORTB=Value;
    134a:	e8 e3       	ldi	r30, 0x38	; 56
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	80 83       	st	Z, r24
    1352:	09 c0       	rjmp	.+18     	; 0x1366 <DIO_vidWritePortValue+0x74>
					break;
				case c:
					PORTC=Value;
    1354:	e5 e3       	ldi	r30, 0x35	; 53
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	80 83       	st	Z, r24
    135c:	04 c0       	rjmp	.+8      	; 0x1366 <DIO_vidWritePortValue+0x74>
					break;
				case d:
					PORTD=Value;
    135e:	e2 e3       	ldi	r30, 0x32	; 50
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	80 83       	st	Z, r24
					break;

				}


			}
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <LCD_Command>:
#include "lcd.h"



void LCD_Command( unsigned char cmnd )
{
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	df 93       	push	r29
    137a:	cf 93       	push	r28
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	c7 55       	subi	r28, 0x57	; 87
    1382:	d0 40       	sbci	r29, 0x00	; 0
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	fe 01       	movw	r30, r28
    1390:	e9 5a       	subi	r30, 0xA9	; 169
    1392:	ff 4f       	sbci	r31, 0xFF	; 255
    1394:	80 83       	st	Z, r24
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
    1396:	a8 e3       	ldi	r26, 0x38	; 56
    1398:	b0 e0       	ldi	r27, 0x00	; 0
    139a:	e8 e3       	ldi	r30, 0x38	; 56
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	98 2f       	mov	r25, r24
    13a2:	9f 70       	andi	r25, 0x0F	; 15
    13a4:	fe 01       	movw	r30, r28
    13a6:	e9 5a       	subi	r30, 0xA9	; 169
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	80 81       	ld	r24, Z
    13ac:	80 7f       	andi	r24, 0xF0	; 240
    13ae:	89 2b       	or	r24, r25
    13b0:	8c 93       	st	X, r24
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
    13b2:	a8 e3       	ldi	r26, 0x38	; 56
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	e8 e3       	ldi	r30, 0x38	; 56
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	8e 7f       	andi	r24, 0xFE	; 254
    13be:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);		/* Enable pulse */
    13c0:	a8 e3       	ldi	r26, 0x38	; 56
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e8 e3       	ldi	r30, 0x38	; 56
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	82 60       	ori	r24, 0x02	; 2
    13cc:	8c 93       	st	X, r24
    13ce:	fe 01       	movw	r30, r28
    13d0:	ed 5a       	subi	r30, 0xAD	; 173
    13d2:	ff 4f       	sbci	r31, 0xFF	; 255
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	a0 e8       	ldi	r26, 0x80	; 128
    13da:	bf e3       	ldi	r27, 0x3F	; 63
    13dc:	80 83       	st	Z, r24
    13de:	91 83       	std	Z+1, r25	; 0x01
    13e0:	a2 83       	std	Z+2, r26	; 0x02
    13e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    13e4:	8e 01       	movw	r16, r28
    13e6:	01 5b       	subi	r16, 0xB1	; 177
    13e8:	1f 4f       	sbci	r17, 0xFF	; 255
    13ea:	fe 01       	movw	r30, r28
    13ec:	ed 5a       	subi	r30, 0xAD	; 173
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	60 81       	ld	r22, Z
    13f2:	71 81       	ldd	r23, Z+1	; 0x01
    13f4:	82 81       	ldd	r24, Z+2	; 0x02
    13f6:	93 81       	ldd	r25, Z+3	; 0x03
    13f8:	2b ea       	ldi	r18, 0xAB	; 171
    13fa:	3a ea       	ldi	r19, 0xAA	; 170
    13fc:	4a e2       	ldi	r20, 0x2A	; 42
    13fe:	50 e4       	ldi	r21, 0x40	; 64
    1400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	f8 01       	movw	r30, r16
    140a:	80 83       	st	Z, r24
    140c:	91 83       	std	Z+1, r25	; 0x01
    140e:	a2 83       	std	Z+2, r26	; 0x02
    1410:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1412:	fe 01       	movw	r30, r28
    1414:	e1 5b       	subi	r30, 0xB1	; 177
    1416:	ff 4f       	sbci	r31, 0xFF	; 255
    1418:	60 81       	ld	r22, Z
    141a:	71 81       	ldd	r23, Z+1	; 0x01
    141c:	82 81       	ldd	r24, Z+2	; 0x02
    141e:	93 81       	ldd	r25, Z+3	; 0x03
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	40 e8       	ldi	r20, 0x80	; 128
    1426:	5f e3       	ldi	r21, 0x3F	; 63
    1428:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    142c:	88 23       	and	r24, r24
    142e:	34 f4       	brge	.+12     	; 0x143c <LCD_Command+0xc8>
		__ticks = 1;
    1430:	fe 01       	movw	r30, r28
    1432:	e2 5b       	subi	r30, 0xB2	; 178
    1434:	ff 4f       	sbci	r31, 0xFF	; 255
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	80 83       	st	Z, r24
    143a:	e0 c0       	rjmp	.+448    	; 0x15fc <LCD_Command+0x288>
	else if (__tmp > 255)
    143c:	fe 01       	movw	r30, r28
    143e:	e1 5b       	subi	r30, 0xB1	; 177
    1440:	ff 4f       	sbci	r31, 0xFF	; 255
    1442:	60 81       	ld	r22, Z
    1444:	71 81       	ldd	r23, Z+1	; 0x01
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	93 81       	ldd	r25, Z+3	; 0x03
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	4f e7       	ldi	r20, 0x7F	; 127
    1450:	53 e4       	ldi	r21, 0x43	; 67
    1452:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1456:	18 16       	cp	r1, r24
    1458:	0c f0       	brlt	.+2      	; 0x145c <LCD_Command+0xe8>
    145a:	c0 c0       	rjmp	.+384    	; 0x15dc <LCD_Command+0x268>
	{
		_delay_ms(__us / 1000.0);
    145c:	fe 01       	movw	r30, r28
    145e:	ed 5a       	subi	r30, 0xAD	; 173
    1460:	ff 4f       	sbci	r31, 0xFF	; 255
    1462:	60 81       	ld	r22, Z
    1464:	71 81       	ldd	r23, Z+1	; 0x01
    1466:	82 81       	ldd	r24, Z+2	; 0x02
    1468:	93 81       	ldd	r25, Z+3	; 0x03
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	4a e7       	ldi	r20, 0x7A	; 122
    1470:	54 e4       	ldi	r21, 0x44	; 68
    1472:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	fe 01       	movw	r30, r28
    147c:	e6 5b       	subi	r30, 0xB6	; 182
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	80 83       	st	Z, r24
    1482:	91 83       	std	Z+1, r25	; 0x01
    1484:	a2 83       	std	Z+2, r26	; 0x02
    1486:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1488:	8e 01       	movw	r16, r28
    148a:	0a 5b       	subi	r16, 0xBA	; 186
    148c:	1f 4f       	sbci	r17, 0xFF	; 255
    148e:	fe 01       	movw	r30, r28
    1490:	e6 5b       	subi	r30, 0xB6	; 182
    1492:	ff 4f       	sbci	r31, 0xFF	; 255
    1494:	60 81       	ld	r22, Z
    1496:	71 81       	ldd	r23, Z+1	; 0x01
    1498:	82 81       	ldd	r24, Z+2	; 0x02
    149a:	93 81       	ldd	r25, Z+3	; 0x03
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	4a ef       	ldi	r20, 0xFA	; 250
    14a2:	54 e4       	ldi	r21, 0x44	; 68
    14a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	f8 01       	movw	r30, r16
    14ae:	80 83       	st	Z, r24
    14b0:	91 83       	std	Z+1, r25	; 0x01
    14b2:	a2 83       	std	Z+2, r26	; 0x02
    14b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14b6:	fe 01       	movw	r30, r28
    14b8:	ea 5b       	subi	r30, 0xBA	; 186
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	60 81       	ld	r22, Z
    14be:	71 81       	ldd	r23, Z+1	; 0x01
    14c0:	82 81       	ldd	r24, Z+2	; 0x02
    14c2:	93 81       	ldd	r25, Z+3	; 0x03
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	40 e8       	ldi	r20, 0x80	; 128
    14ca:	5f e3       	ldi	r21, 0x3F	; 63
    14cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14d0:	88 23       	and	r24, r24
    14d2:	44 f4       	brge	.+16     	; 0x14e4 <LCD_Command+0x170>
		__ticks = 1;
    14d4:	fe 01       	movw	r30, r28
    14d6:	ec 5b       	subi	r30, 0xBC	; 188
    14d8:	ff 4f       	sbci	r31, 0xFF	; 255
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	91 83       	std	Z+1, r25	; 0x01
    14e0:	80 83       	st	Z, r24
    14e2:	64 c0       	rjmp	.+200    	; 0x15ac <LCD_Command+0x238>
	else if (__tmp > 65535)
    14e4:	fe 01       	movw	r30, r28
    14e6:	ea 5b       	subi	r30, 0xBA	; 186
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	60 81       	ld	r22, Z
    14ec:	71 81       	ldd	r23, Z+1	; 0x01
    14ee:	82 81       	ldd	r24, Z+2	; 0x02
    14f0:	93 81       	ldd	r25, Z+3	; 0x03
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	3f ef       	ldi	r19, 0xFF	; 255
    14f6:	4f e7       	ldi	r20, 0x7F	; 127
    14f8:	57 e4       	ldi	r21, 0x47	; 71
    14fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14fe:	18 16       	cp	r1, r24
    1500:	0c f0       	brlt	.+2      	; 0x1504 <LCD_Command+0x190>
    1502:	43 c0       	rjmp	.+134    	; 0x158a <LCD_Command+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1504:	fe 01       	movw	r30, r28
    1506:	e6 5b       	subi	r30, 0xB6	; 182
    1508:	ff 4f       	sbci	r31, 0xFF	; 255
    150a:	60 81       	ld	r22, Z
    150c:	71 81       	ldd	r23, Z+1	; 0x01
    150e:	82 81       	ldd	r24, Z+2	; 0x02
    1510:	93 81       	ldd	r25, Z+3	; 0x03
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e2       	ldi	r20, 0x20	; 32
    1518:	51 e4       	ldi	r21, 0x41	; 65
    151a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	8e 01       	movw	r16, r28
    1524:	0c 5b       	subi	r16, 0xBC	; 188
    1526:	1f 4f       	sbci	r17, 0xFF	; 255
    1528:	bc 01       	movw	r22, r24
    152a:	cd 01       	movw	r24, r26
    152c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	f8 01       	movw	r30, r16
    1536:	91 83       	std	Z+1, r25	; 0x01
    1538:	80 83       	st	Z, r24
    153a:	1f c0       	rjmp	.+62     	; 0x157a <LCD_Command+0x206>
    153c:	fe 01       	movw	r30, r28
    153e:	ee 5b       	subi	r30, 0xBE	; 190
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	88 ec       	ldi	r24, 0xC8	; 200
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    154a:	fe 01       	movw	r30, r28
    154c:	ee 5b       	subi	r30, 0xBE	; 190
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	80 81       	ld	r24, Z
    1552:	91 81       	ldd	r25, Z+1	; 0x01
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	f1 f7       	brne	.-4      	; 0x1554 <LCD_Command+0x1e0>
    1558:	fe 01       	movw	r30, r28
    155a:	ee 5b       	subi	r30, 0xBE	; 190
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
    155e:	91 83       	std	Z+1, r25	; 0x01
    1560:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1562:	de 01       	movw	r26, r28
    1564:	ac 5b       	subi	r26, 0xBC	; 188
    1566:	bf 4f       	sbci	r27, 0xFF	; 255
    1568:	fe 01       	movw	r30, r28
    156a:	ec 5b       	subi	r30, 0xBC	; 188
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	80 81       	ld	r24, Z
    1570:	91 81       	ldd	r25, Z+1	; 0x01
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	11 96       	adiw	r26, 0x01	; 1
    1576:	9c 93       	st	X, r25
    1578:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157a:	fe 01       	movw	r30, r28
    157c:	ec 5b       	subi	r30, 0xBC	; 188
    157e:	ff 4f       	sbci	r31, 0xFF	; 255
    1580:	80 81       	ld	r24, Z
    1582:	91 81       	ldd	r25, Z+1	; 0x01
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	d1 f6       	brne	.-76     	; 0x153c <LCD_Command+0x1c8>
    1588:	42 c0       	rjmp	.+132    	; 0x160e <LCD_Command+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158a:	8e 01       	movw	r16, r28
    158c:	0c 5b       	subi	r16, 0xBC	; 188
    158e:	1f 4f       	sbci	r17, 0xFF	; 255
    1590:	fe 01       	movw	r30, r28
    1592:	ea 5b       	subi	r30, 0xBA	; 186
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	60 81       	ld	r22, Z
    1598:	71 81       	ldd	r23, Z+1	; 0x01
    159a:	82 81       	ldd	r24, Z+2	; 0x02
    159c:	93 81       	ldd	r25, Z+3	; 0x03
    159e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	f8 01       	movw	r30, r16
    15a8:	91 83       	std	Z+1, r25	; 0x01
    15aa:	80 83       	st	Z, r24
    15ac:	de 01       	movw	r26, r28
    15ae:	a0 5c       	subi	r26, 0xC0	; 192
    15b0:	bf 4f       	sbci	r27, 0xFF	; 255
    15b2:	fe 01       	movw	r30, r28
    15b4:	ec 5b       	subi	r30, 0xBC	; 188
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	80 81       	ld	r24, Z
    15ba:	91 81       	ldd	r25, Z+1	; 0x01
    15bc:	11 96       	adiw	r26, 0x01	; 1
    15be:	9c 93       	st	X, r25
    15c0:	8e 93       	st	-X, r24
    15c2:	fe 01       	movw	r30, r28
    15c4:	e0 5c       	subi	r30, 0xC0	; 192
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	80 81       	ld	r24, Z
    15ca:	91 81       	ldd	r25, Z+1	; 0x01
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	f1 f7       	brne	.-4      	; 0x15cc <LCD_Command+0x258>
    15d0:	fe 01       	movw	r30, r28
    15d2:	e0 5c       	subi	r30, 0xC0	; 192
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	91 83       	std	Z+1, r25	; 0x01
    15d8:	80 83       	st	Z, r24
    15da:	19 c0       	rjmp	.+50     	; 0x160e <LCD_Command+0x29a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15dc:	8e 01       	movw	r16, r28
    15de:	02 5b       	subi	r16, 0xB2	; 178
    15e0:	1f 4f       	sbci	r17, 0xFF	; 255
    15e2:	fe 01       	movw	r30, r28
    15e4:	e1 5b       	subi	r30, 0xB1	; 177
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	60 81       	ld	r22, Z
    15ea:	71 81       	ldd	r23, Z+1	; 0x01
    15ec:	82 81       	ldd	r24, Z+2	; 0x02
    15ee:	93 81       	ldd	r25, Z+3	; 0x03
    15f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	f8 01       	movw	r30, r16
    15fa:	80 83       	st	Z, r24
    15fc:	fe 01       	movw	r30, r28
    15fe:	e2 5b       	subi	r30, 0xB2	; 178
    1600:	ff 4f       	sbci	r31, 0xFF	; 255
    1602:	80 81       	ld	r24, Z
    1604:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1606:	8f ad       	ldd	r24, Y+63	; 0x3f
    1608:	8a 95       	dec	r24
    160a:	f1 f7       	brne	.-4      	; 0x1608 <LCD_Command+0x294>
    160c:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    160e:	a8 e3       	ldi	r26, 0x38	; 56
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e8 e3       	ldi	r30, 0x38	; 56
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	8d 7f       	andi	r24, 0xFD	; 253
    161a:	8c 93       	st	X, r24
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	a8 e4       	ldi	r26, 0x48	; 72
    1622:	b3 e4       	ldi	r27, 0x43	; 67
    1624:	8b af       	std	Y+59, r24	; 0x3b
    1626:	9c af       	std	Y+60, r25	; 0x3c
    1628:	ad af       	std	Y+61, r26	; 0x3d
    162a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    162c:	6b ad       	ldd	r22, Y+59	; 0x3b
    162e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1630:	8d ad       	ldd	r24, Y+61	; 0x3d
    1632:	9e ad       	ldd	r25, Y+62	; 0x3e
    1634:	2b ea       	ldi	r18, 0xAB	; 171
    1636:	3a ea       	ldi	r19, 0xAA	; 170
    1638:	4a e2       	ldi	r20, 0x2A	; 42
    163a:	50 e4       	ldi	r21, 0x40	; 64
    163c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	8f ab       	std	Y+55, r24	; 0x37
    1646:	98 af       	std	Y+56, r25	; 0x38
    1648:	a9 af       	std	Y+57, r26	; 0x39
    164a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    164c:	6f a9       	ldd	r22, Y+55	; 0x37
    164e:	78 ad       	ldd	r23, Y+56	; 0x38
    1650:	89 ad       	ldd	r24, Y+57	; 0x39
    1652:	9a ad       	ldd	r25, Y+58	; 0x3a
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	40 e8       	ldi	r20, 0x80	; 128
    165a:	5f e3       	ldi	r21, 0x3F	; 63
    165c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1660:	88 23       	and	r24, r24
    1662:	1c f4       	brge	.+6      	; 0x166a <LCD_Command+0x2f6>
		__ticks = 1;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	8e ab       	std	Y+54, r24	; 0x36
    1668:	91 c0       	rjmp	.+290    	; 0x178c <LCD_Command+0x418>
	else if (__tmp > 255)
    166a:	6f a9       	ldd	r22, Y+55	; 0x37
    166c:	78 ad       	ldd	r23, Y+56	; 0x38
    166e:	89 ad       	ldd	r24, Y+57	; 0x39
    1670:	9a ad       	ldd	r25, Y+58	; 0x3a
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	4f e7       	ldi	r20, 0x7F	; 127
    1678:	53 e4       	ldi	r21, 0x43	; 67
    167a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    167e:	18 16       	cp	r1, r24
    1680:	0c f0       	brlt	.+2      	; 0x1684 <LCD_Command+0x310>
    1682:	7b c0       	rjmp	.+246    	; 0x177a <LCD_Command+0x406>
	{
		_delay_ms(__us / 1000.0);
    1684:	6b ad       	ldd	r22, Y+59	; 0x3b
    1686:	7c ad       	ldd	r23, Y+60	; 0x3c
    1688:	8d ad       	ldd	r24, Y+61	; 0x3d
    168a:	9e ad       	ldd	r25, Y+62	; 0x3e
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	4a e7       	ldi	r20, 0x7A	; 122
    1692:	54 e4       	ldi	r21, 0x44	; 68
    1694:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	8a ab       	std	Y+50, r24	; 0x32
    169e:	9b ab       	std	Y+51, r25	; 0x33
    16a0:	ac ab       	std	Y+52, r26	; 0x34
    16a2:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a4:	6a a9       	ldd	r22, Y+50	; 0x32
    16a6:	7b a9       	ldd	r23, Y+51	; 0x33
    16a8:	8c a9       	ldd	r24, Y+52	; 0x34
    16aa:	9d a9       	ldd	r25, Y+53	; 0x35
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	4a ef       	ldi	r20, 0xFA	; 250
    16b2:	54 e4       	ldi	r21, 0x44	; 68
    16b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	8e a7       	std	Y+46, r24	; 0x2e
    16be:	9f a7       	std	Y+47, r25	; 0x2f
    16c0:	a8 ab       	std	Y+48, r26	; 0x30
    16c2:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    16c4:	6e a5       	ldd	r22, Y+46	; 0x2e
    16c6:	7f a5       	ldd	r23, Y+47	; 0x2f
    16c8:	88 a9       	ldd	r24, Y+48	; 0x30
    16ca:	99 a9       	ldd	r25, Y+49	; 0x31
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e8       	ldi	r20, 0x80	; 128
    16d2:	5f e3       	ldi	r21, 0x3F	; 63
    16d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16d8:	88 23       	and	r24, r24
    16da:	2c f4       	brge	.+10     	; 0x16e6 <LCD_Command+0x372>
		__ticks = 1;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	9d a7       	std	Y+45, r25	; 0x2d
    16e2:	8c a7       	std	Y+44, r24	; 0x2c
    16e4:	3f c0       	rjmp	.+126    	; 0x1764 <LCD_Command+0x3f0>
	else if (__tmp > 65535)
    16e6:	6e a5       	ldd	r22, Y+46	; 0x2e
    16e8:	7f a5       	ldd	r23, Y+47	; 0x2f
    16ea:	88 a9       	ldd	r24, Y+48	; 0x30
    16ec:	99 a9       	ldd	r25, Y+49	; 0x31
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	3f ef       	ldi	r19, 0xFF	; 255
    16f2:	4f e7       	ldi	r20, 0x7F	; 127
    16f4:	57 e4       	ldi	r21, 0x47	; 71
    16f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16fa:	18 16       	cp	r1, r24
    16fc:	4c f5       	brge	.+82     	; 0x1750 <LCD_Command+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fe:	6a a9       	ldd	r22, Y+50	; 0x32
    1700:	7b a9       	ldd	r23, Y+51	; 0x33
    1702:	8c a9       	ldd	r24, Y+52	; 0x34
    1704:	9d a9       	ldd	r25, Y+53	; 0x35
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 e2       	ldi	r20, 0x20	; 32
    170c:	51 e4       	ldi	r21, 0x41	; 65
    170e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	bc 01       	movw	r22, r24
    1718:	cd 01       	movw	r24, r26
    171a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	9d a7       	std	Y+45, r25	; 0x2d
    1724:	8c a7       	std	Y+44, r24	; 0x2c
    1726:	0f c0       	rjmp	.+30     	; 0x1746 <LCD_Command+0x3d2>
    1728:	88 ec       	ldi	r24, 0xC8	; 200
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9b a7       	std	Y+43, r25	; 0x2b
    172e:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1730:	8a a5       	ldd	r24, Y+42	; 0x2a
    1732:	9b a5       	ldd	r25, Y+43	; 0x2b
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <LCD_Command+0x3c0>
    1738:	9b a7       	std	Y+43, r25	; 0x2b
    173a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173c:	8c a5       	ldd	r24, Y+44	; 0x2c
    173e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	9d a7       	std	Y+45, r25	; 0x2d
    1744:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1746:	8c a5       	ldd	r24, Y+44	; 0x2c
    1748:	9d a5       	ldd	r25, Y+45	; 0x2d
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	69 f7       	brne	.-38     	; 0x1728 <LCD_Command+0x3b4>
    174e:	24 c0       	rjmp	.+72     	; 0x1798 <LCD_Command+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1750:	6e a5       	ldd	r22, Y+46	; 0x2e
    1752:	7f a5       	ldd	r23, Y+47	; 0x2f
    1754:	88 a9       	ldd	r24, Y+48	; 0x30
    1756:	99 a9       	ldd	r25, Y+49	; 0x31
    1758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	9d a7       	std	Y+45, r25	; 0x2d
    1762:	8c a7       	std	Y+44, r24	; 0x2c
    1764:	8c a5       	ldd	r24, Y+44	; 0x2c
    1766:	9d a5       	ldd	r25, Y+45	; 0x2d
    1768:	99 a7       	std	Y+41, r25	; 0x29
    176a:	88 a7       	std	Y+40, r24	; 0x28
    176c:	88 a5       	ldd	r24, Y+40	; 0x28
    176e:	99 a5       	ldd	r25, Y+41	; 0x29
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <LCD_Command+0x3fc>
    1774:	99 a7       	std	Y+41, r25	; 0x29
    1776:	88 a7       	std	Y+40, r24	; 0x28
    1778:	0f c0       	rjmp	.+30     	; 0x1798 <LCD_Command+0x424>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    177a:	6f a9       	ldd	r22, Y+55	; 0x37
    177c:	78 ad       	ldd	r23, Y+56	; 0x38
    177e:	89 ad       	ldd	r24, Y+57	; 0x39
    1780:	9a ad       	ldd	r25, Y+58	; 0x3a
    1782:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	8e ab       	std	Y+54, r24	; 0x36
    178c:	8e a9       	ldd	r24, Y+54	; 0x36
    178e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1790:	8f a1       	ldd	r24, Y+39	; 0x27
    1792:	8a 95       	dec	r24
    1794:	f1 f7       	brne	.-4      	; 0x1792 <LCD_Command+0x41e>
    1796:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
    1798:	a8 e3       	ldi	r26, 0x38	; 56
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e8 e3       	ldi	r30, 0x38	; 56
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	28 2f       	mov	r18, r24
    17a4:	2f 70       	andi	r18, 0x0F	; 15
    17a6:	fe 01       	movw	r30, r28
    17a8:	e9 5a       	subi	r30, 0xA9	; 169
    17aa:	ff 4f       	sbci	r31, 0xFF	; 255
    17ac:	80 81       	ld	r24, Z
    17ae:	88 2f       	mov	r24, r24
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	82 95       	swap	r24
    17b4:	92 95       	swap	r25
    17b6:	90 7f       	andi	r25, 0xF0	; 240
    17b8:	98 27       	eor	r25, r24
    17ba:	80 7f       	andi	r24, 0xF0	; 240
    17bc:	98 27       	eor	r25, r24
    17be:	82 2b       	or	r24, r18
    17c0:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);
    17c2:	a8 e3       	ldi	r26, 0x38	; 56
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e8 e3       	ldi	r30, 0x38	; 56
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	82 60       	ori	r24, 0x02	; 2
    17ce:	8c 93       	st	X, r24
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	a0 e8       	ldi	r26, 0x80	; 128
    17d6:	bf e3       	ldi	r27, 0x3F	; 63
    17d8:	8b a3       	std	Y+35, r24	; 0x23
    17da:	9c a3       	std	Y+36, r25	; 0x24
    17dc:	ad a3       	std	Y+37, r26	; 0x25
    17de:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    17e0:	6b a1       	ldd	r22, Y+35	; 0x23
    17e2:	7c a1       	ldd	r23, Y+36	; 0x24
    17e4:	8d a1       	ldd	r24, Y+37	; 0x25
    17e6:	9e a1       	ldd	r25, Y+38	; 0x26
    17e8:	2b ea       	ldi	r18, 0xAB	; 171
    17ea:	3a ea       	ldi	r19, 0xAA	; 170
    17ec:	4a e2       	ldi	r20, 0x2A	; 42
    17ee:	50 e4       	ldi	r21, 0x40	; 64
    17f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	8f 8f       	std	Y+31, r24	; 0x1f
    17fa:	98 a3       	std	Y+32, r25	; 0x20
    17fc:	a9 a3       	std	Y+33, r26	; 0x21
    17fe:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1800:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1802:	78 a1       	ldd	r23, Y+32	; 0x20
    1804:	89 a1       	ldd	r24, Y+33	; 0x21
    1806:	9a a1       	ldd	r25, Y+34	; 0x22
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	40 e8       	ldi	r20, 0x80	; 128
    180e:	5f e3       	ldi	r21, 0x3F	; 63
    1810:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1814:	88 23       	and	r24, r24
    1816:	1c f4       	brge	.+6      	; 0x181e <LCD_Command+0x4aa>
		__ticks = 1;
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	8e 8f       	std	Y+30, r24	; 0x1e
    181c:	91 c0       	rjmp	.+290    	; 0x1940 <LCD_Command+0x5cc>
	else if (__tmp > 255)
    181e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1820:	78 a1       	ldd	r23, Y+32	; 0x20
    1822:	89 a1       	ldd	r24, Y+33	; 0x21
    1824:	9a a1       	ldd	r25, Y+34	; 0x22
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	4f e7       	ldi	r20, 0x7F	; 127
    182c:	53 e4       	ldi	r21, 0x43	; 67
    182e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1832:	18 16       	cp	r1, r24
    1834:	0c f0       	brlt	.+2      	; 0x1838 <LCD_Command+0x4c4>
    1836:	7b c0       	rjmp	.+246    	; 0x192e <LCD_Command+0x5ba>
	{
		_delay_ms(__us / 1000.0);
    1838:	6b a1       	ldd	r22, Y+35	; 0x23
    183a:	7c a1       	ldd	r23, Y+36	; 0x24
    183c:	8d a1       	ldd	r24, Y+37	; 0x25
    183e:	9e a1       	ldd	r25, Y+38	; 0x26
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	4a e7       	ldi	r20, 0x7A	; 122
    1846:	54 e4       	ldi	r21, 0x44	; 68
    1848:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	8a 8f       	std	Y+26, r24	; 0x1a
    1852:	9b 8f       	std	Y+27, r25	; 0x1b
    1854:	ac 8f       	std	Y+28, r26	; 0x1c
    1856:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1858:	6a 8d       	ldd	r22, Y+26	; 0x1a
    185a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    185c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    185e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	4a ef       	ldi	r20, 0xFA	; 250
    1866:	54 e4       	ldi	r21, 0x44	; 68
    1868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	8e 8b       	std	Y+22, r24	; 0x16
    1872:	9f 8b       	std	Y+23, r25	; 0x17
    1874:	a8 8f       	std	Y+24, r26	; 0x18
    1876:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1878:	6e 89       	ldd	r22, Y+22	; 0x16
    187a:	7f 89       	ldd	r23, Y+23	; 0x17
    187c:	88 8d       	ldd	r24, Y+24	; 0x18
    187e:	99 8d       	ldd	r25, Y+25	; 0x19
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e8       	ldi	r20, 0x80	; 128
    1886:	5f e3       	ldi	r21, 0x3F	; 63
    1888:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    188c:	88 23       	and	r24, r24
    188e:	2c f4       	brge	.+10     	; 0x189a <LCD_Command+0x526>
		__ticks = 1;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	9d 8b       	std	Y+21, r25	; 0x15
    1896:	8c 8b       	std	Y+20, r24	; 0x14
    1898:	3f c0       	rjmp	.+126    	; 0x1918 <LCD_Command+0x5a4>
	else if (__tmp > 65535)
    189a:	6e 89       	ldd	r22, Y+22	; 0x16
    189c:	7f 89       	ldd	r23, Y+23	; 0x17
    189e:	88 8d       	ldd	r24, Y+24	; 0x18
    18a0:	99 8d       	ldd	r25, Y+25	; 0x19
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	3f ef       	ldi	r19, 0xFF	; 255
    18a6:	4f e7       	ldi	r20, 0x7F	; 127
    18a8:	57 e4       	ldi	r21, 0x47	; 71
    18aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18ae:	18 16       	cp	r1, r24
    18b0:	4c f5       	brge	.+82     	; 0x1904 <LCD_Command+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    18b4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    18b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    18b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e2       	ldi	r20, 0x20	; 32
    18c0:	51 e4       	ldi	r21, 0x41	; 65
    18c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	bc 01       	movw	r22, r24
    18cc:	cd 01       	movw	r24, r26
    18ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	9d 8b       	std	Y+21, r25	; 0x15
    18d8:	8c 8b       	std	Y+20, r24	; 0x14
    18da:	0f c0       	rjmp	.+30     	; 0x18fa <LCD_Command+0x586>
    18dc:	88 ec       	ldi	r24, 0xC8	; 200
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	9b 8b       	std	Y+19, r25	; 0x13
    18e2:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18e4:	8a 89       	ldd	r24, Y+18	; 0x12
    18e6:	9b 89       	ldd	r25, Y+19	; 0x13
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <LCD_Command+0x574>
    18ec:	9b 8b       	std	Y+19, r25	; 0x13
    18ee:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f0:	8c 89       	ldd	r24, Y+20	; 0x14
    18f2:	9d 89       	ldd	r25, Y+21	; 0x15
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	9d 8b       	std	Y+21, r25	; 0x15
    18f8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fa:	8c 89       	ldd	r24, Y+20	; 0x14
    18fc:	9d 89       	ldd	r25, Y+21	; 0x15
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	69 f7       	brne	.-38     	; 0x18dc <LCD_Command+0x568>
    1902:	24 c0       	rjmp	.+72     	; 0x194c <LCD_Command+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1904:	6e 89       	ldd	r22, Y+22	; 0x16
    1906:	7f 89       	ldd	r23, Y+23	; 0x17
    1908:	88 8d       	ldd	r24, Y+24	; 0x18
    190a:	99 8d       	ldd	r25, Y+25	; 0x19
    190c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9d 8b       	std	Y+21, r25	; 0x15
    1916:	8c 8b       	std	Y+20, r24	; 0x14
    1918:	8c 89       	ldd	r24, Y+20	; 0x14
    191a:	9d 89       	ldd	r25, Y+21	; 0x15
    191c:	99 8b       	std	Y+17, r25	; 0x11
    191e:	88 8b       	std	Y+16, r24	; 0x10
    1920:	88 89       	ldd	r24, Y+16	; 0x10
    1922:	99 89       	ldd	r25, Y+17	; 0x11
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	f1 f7       	brne	.-4      	; 0x1924 <LCD_Command+0x5b0>
    1928:	99 8b       	std	Y+17, r25	; 0x11
    192a:	88 8b       	std	Y+16, r24	; 0x10
    192c:	0f c0       	rjmp	.+30     	; 0x194c <LCD_Command+0x5d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    192e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1930:	78 a1       	ldd	r23, Y+32	; 0x20
    1932:	89 a1       	ldd	r24, Y+33	; 0x21
    1934:	9a a1       	ldd	r25, Y+34	; 0x22
    1936:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	8e 8f       	std	Y+30, r24	; 0x1e
    1940:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1942:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1944:	8f 85       	ldd	r24, Y+15	; 0x0f
    1946:	8a 95       	dec	r24
    1948:	f1 f7       	brne	.-4      	; 0x1946 <LCD_Command+0x5d2>
    194a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    194c:	a8 e3       	ldi	r26, 0x38	; 56
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e8 e3       	ldi	r30, 0x38	; 56
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	8d 7f       	andi	r24, 0xFD	; 253
    1958:	8c 93       	st	X, r24
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	a0 e0       	ldi	r26, 0x00	; 0
    1960:	b0 e4       	ldi	r27, 0x40	; 64
    1962:	8b 87       	std	Y+11, r24	; 0x0b
    1964:	9c 87       	std	Y+12, r25	; 0x0c
    1966:	ad 87       	std	Y+13, r26	; 0x0d
    1968:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    196a:	6b 85       	ldd	r22, Y+11	; 0x0b
    196c:	7c 85       	ldd	r23, Y+12	; 0x0c
    196e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1970:	9e 85       	ldd	r25, Y+14	; 0x0e
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	4a ef       	ldi	r20, 0xFA	; 250
    1978:	54 e4       	ldi	r21, 0x44	; 68
    197a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	8f 83       	std	Y+7, r24	; 0x07
    1984:	98 87       	std	Y+8, r25	; 0x08
    1986:	a9 87       	std	Y+9, r26	; 0x09
    1988:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    198a:	6f 81       	ldd	r22, Y+7	; 0x07
    198c:	78 85       	ldd	r23, Y+8	; 0x08
    198e:	89 85       	ldd	r24, Y+9	; 0x09
    1990:	9a 85       	ldd	r25, Y+10	; 0x0a
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	40 e8       	ldi	r20, 0x80	; 128
    1998:	5f e3       	ldi	r21, 0x3F	; 63
    199a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    199e:	88 23       	and	r24, r24
    19a0:	2c f4       	brge	.+10     	; 0x19ac <LCD_Command+0x638>
		__ticks = 1;
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	9e 83       	std	Y+6, r25	; 0x06
    19a8:	8d 83       	std	Y+5, r24	; 0x05
    19aa:	3f c0       	rjmp	.+126    	; 0x1a2a <LCD_Command+0x6b6>
	else if (__tmp > 65535)
    19ac:	6f 81       	ldd	r22, Y+7	; 0x07
    19ae:	78 85       	ldd	r23, Y+8	; 0x08
    19b0:	89 85       	ldd	r24, Y+9	; 0x09
    19b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	3f ef       	ldi	r19, 0xFF	; 255
    19b8:	4f e7       	ldi	r20, 0x7F	; 127
    19ba:	57 e4       	ldi	r21, 0x47	; 71
    19bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19c0:	18 16       	cp	r1, r24
    19c2:	4c f5       	brge	.+82     	; 0x1a16 <LCD_Command+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	40 e2       	ldi	r20, 0x20	; 32
    19d2:	51 e4       	ldi	r21, 0x41	; 65
    19d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	bc 01       	movw	r22, r24
    19de:	cd 01       	movw	r24, r26
    19e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	9e 83       	std	Y+6, r25	; 0x06
    19ea:	8d 83       	std	Y+5, r24	; 0x05
    19ec:	0f c0       	rjmp	.+30     	; 0x1a0c <LCD_Command+0x698>
    19ee:	88 ec       	ldi	r24, 0xC8	; 200
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	9c 83       	std	Y+4, r25	; 0x04
    19f4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19f6:	8b 81       	ldd	r24, Y+3	; 0x03
    19f8:	9c 81       	ldd	r25, Y+4	; 0x04
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	f1 f7       	brne	.-4      	; 0x19fa <LCD_Command+0x686>
    19fe:	9c 83       	std	Y+4, r25	; 0x04
    1a00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a02:	8d 81       	ldd	r24, Y+5	; 0x05
    1a04:	9e 81       	ldd	r25, Y+6	; 0x06
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	9e 83       	std	Y+6, r25	; 0x06
    1a0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a10:	00 97       	sbiw	r24, 0x00	; 0
    1a12:	69 f7       	brne	.-38     	; 0x19ee <LCD_Command+0x67a>
    1a14:	14 c0       	rjmp	.+40     	; 0x1a3e <LCD_Command+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a16:	6f 81       	ldd	r22, Y+7	; 0x07
    1a18:	78 85       	ldd	r23, Y+8	; 0x08
    1a1a:	89 85       	ldd	r24, Y+9	; 0x09
    1a1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	9e 83       	std	Y+6, r25	; 0x06
    1a28:	8d 83       	std	Y+5, r24	; 0x05
    1a2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2e:	9a 83       	std	Y+2, r25	; 0x02
    1a30:	89 83       	std	Y+1, r24	; 0x01
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	9a 81       	ldd	r25, Y+2	; 0x02
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	f1 f7       	brne	.-4      	; 0x1a36 <LCD_Command+0x6c2>
    1a3a:	9a 83       	std	Y+2, r25	; 0x02
    1a3c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1a3e:	c9 5a       	subi	r28, 0xA9	; 169
    1a40:	df 4f       	sbci	r29, 0xFF	; 255
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	1f 91       	pop	r17
    1a52:	0f 91       	pop	r16
    1a54:	08 95       	ret

00001a56 <LCD_Char>:


void LCD_Char( unsigned char data )
{
    1a56:	0f 93       	push	r16
    1a58:	1f 93       	push	r17
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	c7 55       	subi	r28, 0x57	; 87
    1a64:	d0 40       	sbci	r29, 0x00	; 0
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	fe 01       	movw	r30, r28
    1a72:	e9 5a       	subi	r30, 0xA9	; 169
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	80 83       	st	Z, r24
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
    1a78:	a8 e3       	ldi	r26, 0x38	; 56
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	e8 e3       	ldi	r30, 0x38	; 56
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	98 2f       	mov	r25, r24
    1a84:	9f 70       	andi	r25, 0x0F	; 15
    1a86:	fe 01       	movw	r30, r28
    1a88:	e9 5a       	subi	r30, 0xA9	; 169
    1a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8c:	80 81       	ld	r24, Z
    1a8e:	80 7f       	andi	r24, 0xF0	; 240
    1a90:	89 2b       	or	r24, r25
    1a92:	8c 93       	st	X, r24
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
    1a94:	a8 e3       	ldi	r26, 0x38	; 56
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e8 e3       	ldi	r30, 0x38	; 56
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	80 81       	ld	r24, Z
    1a9e:	81 60       	ori	r24, 0x01	; 1
    1aa0:	8c 93       	st	X, r24
	LCD_Port|= (1<<EN);
    1aa2:	a8 e3       	ldi	r26, 0x38	; 56
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e8 e3       	ldi	r30, 0x38	; 56
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	82 60       	ori	r24, 0x02	; 2
    1aae:	8c 93       	st	X, r24
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	ed 5a       	subi	r30, 0xAD	; 173
    1ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	a0 e8       	ldi	r26, 0x80	; 128
    1abc:	bf e3       	ldi	r27, 0x3F	; 63
    1abe:	80 83       	st	Z, r24
    1ac0:	91 83       	std	Z+1, r25	; 0x01
    1ac2:	a2 83       	std	Z+2, r26	; 0x02
    1ac4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ac6:	8e 01       	movw	r16, r28
    1ac8:	01 5b       	subi	r16, 0xB1	; 177
    1aca:	1f 4f       	sbci	r17, 0xFF	; 255
    1acc:	fe 01       	movw	r30, r28
    1ace:	ed 5a       	subi	r30, 0xAD	; 173
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	60 81       	ld	r22, Z
    1ad4:	71 81       	ldd	r23, Z+1	; 0x01
    1ad6:	82 81       	ldd	r24, Z+2	; 0x02
    1ad8:	93 81       	ldd	r25, Z+3	; 0x03
    1ada:	2b ea       	ldi	r18, 0xAB	; 171
    1adc:	3a ea       	ldi	r19, 0xAA	; 170
    1ade:	4a e2       	ldi	r20, 0x2A	; 42
    1ae0:	50 e4       	ldi	r21, 0x40	; 64
    1ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	f8 01       	movw	r30, r16
    1aec:	80 83       	st	Z, r24
    1aee:	91 83       	std	Z+1, r25	; 0x01
    1af0:	a2 83       	std	Z+2, r26	; 0x02
    1af2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1af4:	fe 01       	movw	r30, r28
    1af6:	e1 5b       	subi	r30, 0xB1	; 177
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	60 81       	ld	r22, Z
    1afc:	71 81       	ldd	r23, Z+1	; 0x01
    1afe:	82 81       	ldd	r24, Z+2	; 0x02
    1b00:	93 81       	ldd	r25, Z+3	; 0x03
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e8       	ldi	r20, 0x80	; 128
    1b08:	5f e3       	ldi	r21, 0x3F	; 63
    1b0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b0e:	88 23       	and	r24, r24
    1b10:	34 f4       	brge	.+12     	; 0x1b1e <LCD_Char+0xc8>
		__ticks = 1;
    1b12:	fe 01       	movw	r30, r28
    1b14:	e2 5b       	subi	r30, 0xB2	; 178
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	80 83       	st	Z, r24
    1b1c:	e0 c0       	rjmp	.+448    	; 0x1cde <LCD_Char+0x288>
	else if (__tmp > 255)
    1b1e:	fe 01       	movw	r30, r28
    1b20:	e1 5b       	subi	r30, 0xB1	; 177
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	60 81       	ld	r22, Z
    1b26:	71 81       	ldd	r23, Z+1	; 0x01
    1b28:	82 81       	ldd	r24, Z+2	; 0x02
    1b2a:	93 81       	ldd	r25, Z+3	; 0x03
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	4f e7       	ldi	r20, 0x7F	; 127
    1b32:	53 e4       	ldi	r21, 0x43	; 67
    1b34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b38:	18 16       	cp	r1, r24
    1b3a:	0c f0       	brlt	.+2      	; 0x1b3e <LCD_Char+0xe8>
    1b3c:	c0 c0       	rjmp	.+384    	; 0x1cbe <LCD_Char+0x268>
	{
		_delay_ms(__us / 1000.0);
    1b3e:	fe 01       	movw	r30, r28
    1b40:	ed 5a       	subi	r30, 0xAD	; 173
    1b42:	ff 4f       	sbci	r31, 0xFF	; 255
    1b44:	60 81       	ld	r22, Z
    1b46:	71 81       	ldd	r23, Z+1	; 0x01
    1b48:	82 81       	ldd	r24, Z+2	; 0x02
    1b4a:	93 81       	ldd	r25, Z+3	; 0x03
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	4a e7       	ldi	r20, 0x7A	; 122
    1b52:	54 e4       	ldi	r21, 0x44	; 68
    1b54:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	e6 5b       	subi	r30, 0xB6	; 182
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	80 83       	st	Z, r24
    1b64:	91 83       	std	Z+1, r25	; 0x01
    1b66:	a2 83       	std	Z+2, r26	; 0x02
    1b68:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6a:	8e 01       	movw	r16, r28
    1b6c:	0a 5b       	subi	r16, 0xBA	; 186
    1b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b70:	fe 01       	movw	r30, r28
    1b72:	e6 5b       	subi	r30, 0xB6	; 182
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	60 81       	ld	r22, Z
    1b78:	71 81       	ldd	r23, Z+1	; 0x01
    1b7a:	82 81       	ldd	r24, Z+2	; 0x02
    1b7c:	93 81       	ldd	r25, Z+3	; 0x03
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	4a ef       	ldi	r20, 0xFA	; 250
    1b84:	54 e4       	ldi	r21, 0x44	; 68
    1b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	f8 01       	movw	r30, r16
    1b90:	80 83       	st	Z, r24
    1b92:	91 83       	std	Z+1, r25	; 0x01
    1b94:	a2 83       	std	Z+2, r26	; 0x02
    1b96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b98:	fe 01       	movw	r30, r28
    1b9a:	ea 5b       	subi	r30, 0xBA	; 186
    1b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9e:	60 81       	ld	r22, Z
    1ba0:	71 81       	ldd	r23, Z+1	; 0x01
    1ba2:	82 81       	ldd	r24, Z+2	; 0x02
    1ba4:	93 81       	ldd	r25, Z+3	; 0x03
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e8       	ldi	r20, 0x80	; 128
    1bac:	5f e3       	ldi	r21, 0x3F	; 63
    1bae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bb2:	88 23       	and	r24, r24
    1bb4:	44 f4       	brge	.+16     	; 0x1bc6 <LCD_Char+0x170>
		__ticks = 1;
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	ec 5b       	subi	r30, 0xBC	; 188
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	91 83       	std	Z+1, r25	; 0x01
    1bc2:	80 83       	st	Z, r24
    1bc4:	64 c0       	rjmp	.+200    	; 0x1c8e <LCD_Char+0x238>
	else if (__tmp > 65535)
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	ea 5b       	subi	r30, 0xBA	; 186
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	60 81       	ld	r22, Z
    1bce:	71 81       	ldd	r23, Z+1	; 0x01
    1bd0:	82 81       	ldd	r24, Z+2	; 0x02
    1bd2:	93 81       	ldd	r25, Z+3	; 0x03
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	3f ef       	ldi	r19, 0xFF	; 255
    1bd8:	4f e7       	ldi	r20, 0x7F	; 127
    1bda:	57 e4       	ldi	r21, 0x47	; 71
    1bdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1be0:	18 16       	cp	r1, r24
    1be2:	0c f0       	brlt	.+2      	; 0x1be6 <LCD_Char+0x190>
    1be4:	43 c0       	rjmp	.+134    	; 0x1c6c <LCD_Char+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be6:	fe 01       	movw	r30, r28
    1be8:	e6 5b       	subi	r30, 0xB6	; 182
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	60 81       	ld	r22, Z
    1bee:	71 81       	ldd	r23, Z+1	; 0x01
    1bf0:	82 81       	ldd	r24, Z+2	; 0x02
    1bf2:	93 81       	ldd	r25, Z+3	; 0x03
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e2       	ldi	r20, 0x20	; 32
    1bfa:	51 e4       	ldi	r21, 0x41	; 65
    1bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	8e 01       	movw	r16, r28
    1c06:	0c 5b       	subi	r16, 0xBC	; 188
    1c08:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0a:	bc 01       	movw	r22, r24
    1c0c:	cd 01       	movw	r24, r26
    1c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c12:	dc 01       	movw	r26, r24
    1c14:	cb 01       	movw	r24, r22
    1c16:	f8 01       	movw	r30, r16
    1c18:	91 83       	std	Z+1, r25	; 0x01
    1c1a:	80 83       	st	Z, r24
    1c1c:	1f c0       	rjmp	.+62     	; 0x1c5c <LCD_Char+0x206>
    1c1e:	fe 01       	movw	r30, r28
    1c20:	ee 5b       	subi	r30, 0xBE	; 190
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	88 ec       	ldi	r24, 0xC8	; 200
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	91 83       	std	Z+1, r25	; 0x01
    1c2a:	80 83       	st	Z, r24
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	ee 5b       	subi	r30, 0xBE	; 190
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	80 81       	ld	r24, Z
    1c34:	91 81       	ldd	r25, Z+1	; 0x01
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <LCD_Char+0x1e0>
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	ee 5b       	subi	r30, 0xBE	; 190
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	91 83       	std	Z+1, r25	; 0x01
    1c42:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c44:	de 01       	movw	r26, r28
    1c46:	ac 5b       	subi	r26, 0xBC	; 188
    1c48:	bf 4f       	sbci	r27, 0xFF	; 255
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	ec 5b       	subi	r30, 0xBC	; 188
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	80 81       	ld	r24, Z
    1c52:	91 81       	ldd	r25, Z+1	; 0x01
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	11 96       	adiw	r26, 0x01	; 1
    1c58:	9c 93       	st	X, r25
    1c5a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	ec 5b       	subi	r30, 0xBC	; 188
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	80 81       	ld	r24, Z
    1c64:	91 81       	ldd	r25, Z+1	; 0x01
    1c66:	00 97       	sbiw	r24, 0x00	; 0
    1c68:	d1 f6       	brne	.-76     	; 0x1c1e <LCD_Char+0x1c8>
    1c6a:	42 c0       	rjmp	.+132    	; 0x1cf0 <LCD_Char+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6c:	8e 01       	movw	r16, r28
    1c6e:	0c 5b       	subi	r16, 0xBC	; 188
    1c70:	1f 4f       	sbci	r17, 0xFF	; 255
    1c72:	fe 01       	movw	r30, r28
    1c74:	ea 5b       	subi	r30, 0xBA	; 186
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	60 81       	ld	r22, Z
    1c7a:	71 81       	ldd	r23, Z+1	; 0x01
    1c7c:	82 81       	ldd	r24, Z+2	; 0x02
    1c7e:	93 81       	ldd	r25, Z+3	; 0x03
    1c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	f8 01       	movw	r30, r16
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	80 83       	st	Z, r24
    1c8e:	de 01       	movw	r26, r28
    1c90:	a0 5c       	subi	r26, 0xC0	; 192
    1c92:	bf 4f       	sbci	r27, 0xFF	; 255
    1c94:	fe 01       	movw	r30, r28
    1c96:	ec 5b       	subi	r30, 0xBC	; 188
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	80 81       	ld	r24, Z
    1c9c:	91 81       	ldd	r25, Z+1	; 0x01
    1c9e:	11 96       	adiw	r26, 0x01	; 1
    1ca0:	9c 93       	st	X, r25
    1ca2:	8e 93       	st	-X, r24
    1ca4:	fe 01       	movw	r30, r28
    1ca6:	e0 5c       	subi	r30, 0xC0	; 192
    1ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    1caa:	80 81       	ld	r24, Z
    1cac:	91 81       	ldd	r25, Z+1	; 0x01
    1cae:	01 97       	sbiw	r24, 0x01	; 1
    1cb0:	f1 f7       	brne	.-4      	; 0x1cae <LCD_Char+0x258>
    1cb2:	fe 01       	movw	r30, r28
    1cb4:	e0 5c       	subi	r30, 0xC0	; 192
    1cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb8:	91 83       	std	Z+1, r25	; 0x01
    1cba:	80 83       	st	Z, r24
    1cbc:	19 c0       	rjmp	.+50     	; 0x1cf0 <LCD_Char+0x29a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cbe:	8e 01       	movw	r16, r28
    1cc0:	02 5b       	subi	r16, 0xB2	; 178
    1cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	e1 5b       	subi	r30, 0xB1	; 177
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	60 81       	ld	r22, Z
    1ccc:	71 81       	ldd	r23, Z+1	; 0x01
    1cce:	82 81       	ldd	r24, Z+2	; 0x02
    1cd0:	93 81       	ldd	r25, Z+3	; 0x03
    1cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	f8 01       	movw	r30, r16
    1cdc:	80 83       	st	Z, r24
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e2 5b       	subi	r30, 0xB2	; 178
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	80 81       	ld	r24, Z
    1ce6:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ce8:	8f ad       	ldd	r24, Y+63	; 0x3f
    1cea:	8a 95       	dec	r24
    1cec:	f1 f7       	brne	.-4      	; 0x1cea <LCD_Char+0x294>
    1cee:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    1cf0:	a8 e3       	ldi	r26, 0x38	; 56
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e8 e3       	ldi	r30, 0x38	; 56
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	8d 7f       	andi	r24, 0xFD	; 253
    1cfc:	8c 93       	st	X, r24
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	a8 e4       	ldi	r26, 0x48	; 72
    1d04:	b3 e4       	ldi	r27, 0x43	; 67
    1d06:	8b af       	std	Y+59, r24	; 0x3b
    1d08:	9c af       	std	Y+60, r25	; 0x3c
    1d0a:	ad af       	std	Y+61, r26	; 0x3d
    1d0c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d0e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1d10:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d12:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d14:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d16:	2b ea       	ldi	r18, 0xAB	; 171
    1d18:	3a ea       	ldi	r19, 0xAA	; 170
    1d1a:	4a e2       	ldi	r20, 0x2A	; 42
    1d1c:	50 e4       	ldi	r21, 0x40	; 64
    1d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	8f ab       	std	Y+55, r24	; 0x37
    1d28:	98 af       	std	Y+56, r25	; 0x38
    1d2a:	a9 af       	std	Y+57, r26	; 0x39
    1d2c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1d2e:	6f a9       	ldd	r22, Y+55	; 0x37
    1d30:	78 ad       	ldd	r23, Y+56	; 0x38
    1d32:	89 ad       	ldd	r24, Y+57	; 0x39
    1d34:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e8       	ldi	r20, 0x80	; 128
    1d3c:	5f e3       	ldi	r21, 0x3F	; 63
    1d3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d42:	88 23       	and	r24, r24
    1d44:	1c f4       	brge	.+6      	; 0x1d4c <LCD_Char+0x2f6>
		__ticks = 1;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	8e ab       	std	Y+54, r24	; 0x36
    1d4a:	91 c0       	rjmp	.+290    	; 0x1e6e <LCD_Char+0x418>
	else if (__tmp > 255)
    1d4c:	6f a9       	ldd	r22, Y+55	; 0x37
    1d4e:	78 ad       	ldd	r23, Y+56	; 0x38
    1d50:	89 ad       	ldd	r24, Y+57	; 0x39
    1d52:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	4f e7       	ldi	r20, 0x7F	; 127
    1d5a:	53 e4       	ldi	r21, 0x43	; 67
    1d5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d60:	18 16       	cp	r1, r24
    1d62:	0c f0       	brlt	.+2      	; 0x1d66 <LCD_Char+0x310>
    1d64:	7b c0       	rjmp	.+246    	; 0x1e5c <LCD_Char+0x406>
	{
		_delay_ms(__us / 1000.0);
    1d66:	6b ad       	ldd	r22, Y+59	; 0x3b
    1d68:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d6a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d6c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d6e:	20 e0       	ldi	r18, 0x00	; 0
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	4a e7       	ldi	r20, 0x7A	; 122
    1d74:	54 e4       	ldi	r21, 0x44	; 68
    1d76:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	8a ab       	std	Y+50, r24	; 0x32
    1d80:	9b ab       	std	Y+51, r25	; 0x33
    1d82:	ac ab       	std	Y+52, r26	; 0x34
    1d84:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d86:	6a a9       	ldd	r22, Y+50	; 0x32
    1d88:	7b a9       	ldd	r23, Y+51	; 0x33
    1d8a:	8c a9       	ldd	r24, Y+52	; 0x34
    1d8c:	9d a9       	ldd	r25, Y+53	; 0x35
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	4a ef       	ldi	r20, 0xFA	; 250
    1d94:	54 e4       	ldi	r21, 0x44	; 68
    1d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	8e a7       	std	Y+46, r24	; 0x2e
    1da0:	9f a7       	std	Y+47, r25	; 0x2f
    1da2:	a8 ab       	std	Y+48, r26	; 0x30
    1da4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1da6:	6e a5       	ldd	r22, Y+46	; 0x2e
    1da8:	7f a5       	ldd	r23, Y+47	; 0x2f
    1daa:	88 a9       	ldd	r24, Y+48	; 0x30
    1dac:	99 a9       	ldd	r25, Y+49	; 0x31
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e8       	ldi	r20, 0x80	; 128
    1db4:	5f e3       	ldi	r21, 0x3F	; 63
    1db6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dba:	88 23       	and	r24, r24
    1dbc:	2c f4       	brge	.+10     	; 0x1dc8 <LCD_Char+0x372>
		__ticks = 1;
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	9d a7       	std	Y+45, r25	; 0x2d
    1dc4:	8c a7       	std	Y+44, r24	; 0x2c
    1dc6:	3f c0       	rjmp	.+126    	; 0x1e46 <LCD_Char+0x3f0>
	else if (__tmp > 65535)
    1dc8:	6e a5       	ldd	r22, Y+46	; 0x2e
    1dca:	7f a5       	ldd	r23, Y+47	; 0x2f
    1dcc:	88 a9       	ldd	r24, Y+48	; 0x30
    1dce:	99 a9       	ldd	r25, Y+49	; 0x31
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	3f ef       	ldi	r19, 0xFF	; 255
    1dd4:	4f e7       	ldi	r20, 0x7F	; 127
    1dd6:	57 e4       	ldi	r21, 0x47	; 71
    1dd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ddc:	18 16       	cp	r1, r24
    1dde:	4c f5       	brge	.+82     	; 0x1e32 <LCD_Char+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de0:	6a a9       	ldd	r22, Y+50	; 0x32
    1de2:	7b a9       	ldd	r23, Y+51	; 0x33
    1de4:	8c a9       	ldd	r24, Y+52	; 0x34
    1de6:	9d a9       	ldd	r25, Y+53	; 0x35
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e2       	ldi	r20, 0x20	; 32
    1dee:	51 e4       	ldi	r21, 0x41	; 65
    1df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	bc 01       	movw	r22, r24
    1dfa:	cd 01       	movw	r24, r26
    1dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	9d a7       	std	Y+45, r25	; 0x2d
    1e06:	8c a7       	std	Y+44, r24	; 0x2c
    1e08:	0f c0       	rjmp	.+30     	; 0x1e28 <LCD_Char+0x3d2>
    1e0a:	88 ec       	ldi	r24, 0xC8	; 200
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	9b a7       	std	Y+43, r25	; 0x2b
    1e10:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e12:	8a a5       	ldd	r24, Y+42	; 0x2a
    1e14:	9b a5       	ldd	r25, Y+43	; 0x2b
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <LCD_Char+0x3c0>
    1e1a:	9b a7       	std	Y+43, r25	; 0x2b
    1e1c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e20:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	9d a7       	std	Y+45, r25	; 0x2d
    1e26:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e28:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e2a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	69 f7       	brne	.-38     	; 0x1e0a <LCD_Char+0x3b4>
    1e30:	24 c0       	rjmp	.+72     	; 0x1e7a <LCD_Char+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e32:	6e a5       	ldd	r22, Y+46	; 0x2e
    1e34:	7f a5       	ldd	r23, Y+47	; 0x2f
    1e36:	88 a9       	ldd	r24, Y+48	; 0x30
    1e38:	99 a9       	ldd	r25, Y+49	; 0x31
    1e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	9d a7       	std	Y+45, r25	; 0x2d
    1e44:	8c a7       	std	Y+44, r24	; 0x2c
    1e46:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e48:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e4a:	99 a7       	std	Y+41, r25	; 0x29
    1e4c:	88 a7       	std	Y+40, r24	; 0x28
    1e4e:	88 a5       	ldd	r24, Y+40	; 0x28
    1e50:	99 a5       	ldd	r25, Y+41	; 0x29
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <LCD_Char+0x3fc>
    1e56:	99 a7       	std	Y+41, r25	; 0x29
    1e58:	88 a7       	std	Y+40, r24	; 0x28
    1e5a:	0f c0       	rjmp	.+30     	; 0x1e7a <LCD_Char+0x424>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e5c:	6f a9       	ldd	r22, Y+55	; 0x37
    1e5e:	78 ad       	ldd	r23, Y+56	; 0x38
    1e60:	89 ad       	ldd	r24, Y+57	; 0x39
    1e62:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e68:	dc 01       	movw	r26, r24
    1e6a:	cb 01       	movw	r24, r22
    1e6c:	8e ab       	std	Y+54, r24	; 0x36
    1e6e:	8e a9       	ldd	r24, Y+54	; 0x36
    1e70:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e72:	8f a1       	ldd	r24, Y+39	; 0x27
    1e74:	8a 95       	dec	r24
    1e76:	f1 f7       	brne	.-4      	; 0x1e74 <LCD_Char+0x41e>
    1e78:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
    1e7a:	a8 e3       	ldi	r26, 0x38	; 56
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	e8 e3       	ldi	r30, 0x38	; 56
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	28 2f       	mov	r18, r24
    1e86:	2f 70       	andi	r18, 0x0F	; 15
    1e88:	fe 01       	movw	r30, r28
    1e8a:	e9 5a       	subi	r30, 0xA9	; 169
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	80 81       	ld	r24, Z
    1e90:	88 2f       	mov	r24, r24
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	82 95       	swap	r24
    1e96:	92 95       	swap	r25
    1e98:	90 7f       	andi	r25, 0xF0	; 240
    1e9a:	98 27       	eor	r25, r24
    1e9c:	80 7f       	andi	r24, 0xF0	; 240
    1e9e:	98 27       	eor	r25, r24
    1ea0:	82 2b       	or	r24, r18
    1ea2:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);
    1ea4:	a8 e3       	ldi	r26, 0x38	; 56
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e8 e3       	ldi	r30, 0x38	; 56
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	82 60       	ori	r24, 0x02	; 2
    1eb0:	8c 93       	st	X, r24
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	a0 e8       	ldi	r26, 0x80	; 128
    1eb8:	bf e3       	ldi	r27, 0x3F	; 63
    1eba:	8b a3       	std	Y+35, r24	; 0x23
    1ebc:	9c a3       	std	Y+36, r25	; 0x24
    1ebe:	ad a3       	std	Y+37, r26	; 0x25
    1ec0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ec2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ec4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ec6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ec8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eca:	2b ea       	ldi	r18, 0xAB	; 171
    1ecc:	3a ea       	ldi	r19, 0xAA	; 170
    1ece:	4a e2       	ldi	r20, 0x2A	; 42
    1ed0:	50 e4       	ldi	r21, 0x40	; 64
    1ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	8f 8f       	std	Y+31, r24	; 0x1f
    1edc:	98 a3       	std	Y+32, r25	; 0x20
    1ede:	a9 a3       	std	Y+33, r26	; 0x21
    1ee0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1ee2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ee4:	78 a1       	ldd	r23, Y+32	; 0x20
    1ee6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ee8:	9a a1       	ldd	r25, Y+34	; 0x22
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e8       	ldi	r20, 0x80	; 128
    1ef0:	5f e3       	ldi	r21, 0x3F	; 63
    1ef2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ef6:	88 23       	and	r24, r24
    1ef8:	1c f4       	brge	.+6      	; 0x1f00 <LCD_Char+0x4aa>
		__ticks = 1;
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	8e 8f       	std	Y+30, r24	; 0x1e
    1efe:	91 c0       	rjmp	.+290    	; 0x2022 <LCD_Char+0x5cc>
	else if (__tmp > 255)
    1f00:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f02:	78 a1       	ldd	r23, Y+32	; 0x20
    1f04:	89 a1       	ldd	r24, Y+33	; 0x21
    1f06:	9a a1       	ldd	r25, Y+34	; 0x22
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	4f e7       	ldi	r20, 0x7F	; 127
    1f0e:	53 e4       	ldi	r21, 0x43	; 67
    1f10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f14:	18 16       	cp	r1, r24
    1f16:	0c f0       	brlt	.+2      	; 0x1f1a <LCD_Char+0x4c4>
    1f18:	7b c0       	rjmp	.+246    	; 0x2010 <LCD_Char+0x5ba>
	{
		_delay_ms(__us / 1000.0);
    1f1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f20:	9e a1       	ldd	r25, Y+38	; 0x26
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	4a e7       	ldi	r20, 0x7A	; 122
    1f28:	54 e4       	ldi	r21, 0x44	; 68
    1f2a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	8a 8f       	std	Y+26, r24	; 0x1a
    1f34:	9b 8f       	std	Y+27, r25	; 0x1b
    1f36:	ac 8f       	std	Y+28, r26	; 0x1c
    1f38:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f3a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f3c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f3e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f40:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	4a ef       	ldi	r20, 0xFA	; 250
    1f48:	54 e4       	ldi	r21, 0x44	; 68
    1f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	8e 8b       	std	Y+22, r24	; 0x16
    1f54:	9f 8b       	std	Y+23, r25	; 0x17
    1f56:	a8 8f       	std	Y+24, r26	; 0x18
    1f58:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1f5a:	6e 89       	ldd	r22, Y+22	; 0x16
    1f5c:	7f 89       	ldd	r23, Y+23	; 0x17
    1f5e:	88 8d       	ldd	r24, Y+24	; 0x18
    1f60:	99 8d       	ldd	r25, Y+25	; 0x19
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	40 e8       	ldi	r20, 0x80	; 128
    1f68:	5f e3       	ldi	r21, 0x3F	; 63
    1f6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f6e:	88 23       	and	r24, r24
    1f70:	2c f4       	brge	.+10     	; 0x1f7c <LCD_Char+0x526>
		__ticks = 1;
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	9d 8b       	std	Y+21, r25	; 0x15
    1f78:	8c 8b       	std	Y+20, r24	; 0x14
    1f7a:	3f c0       	rjmp	.+126    	; 0x1ffa <LCD_Char+0x5a4>
	else if (__tmp > 65535)
    1f7c:	6e 89       	ldd	r22, Y+22	; 0x16
    1f7e:	7f 89       	ldd	r23, Y+23	; 0x17
    1f80:	88 8d       	ldd	r24, Y+24	; 0x18
    1f82:	99 8d       	ldd	r25, Y+25	; 0x19
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	3f ef       	ldi	r19, 0xFF	; 255
    1f88:	4f e7       	ldi	r20, 0x7F	; 127
    1f8a:	57 e4       	ldi	r21, 0x47	; 71
    1f8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f90:	18 16       	cp	r1, r24
    1f92:	4c f5       	brge	.+82     	; 0x1fe6 <LCD_Char+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f94:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f96:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f98:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f9a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 e2       	ldi	r20, 0x20	; 32
    1fa2:	51 e4       	ldi	r21, 0x41	; 65
    1fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	bc 01       	movw	r22, r24
    1fae:	cd 01       	movw	r24, r26
    1fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	9d 8b       	std	Y+21, r25	; 0x15
    1fba:	8c 8b       	std	Y+20, r24	; 0x14
    1fbc:	0f c0       	rjmp	.+30     	; 0x1fdc <LCD_Char+0x586>
    1fbe:	88 ec       	ldi	r24, 0xC8	; 200
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	9b 8b       	std	Y+19, r25	; 0x13
    1fc4:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fc6:	8a 89       	ldd	r24, Y+18	; 0x12
    1fc8:	9b 89       	ldd	r25, Y+19	; 0x13
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	f1 f7       	brne	.-4      	; 0x1fca <LCD_Char+0x574>
    1fce:	9b 8b       	std	Y+19, r25	; 0x13
    1fd0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd2:	8c 89       	ldd	r24, Y+20	; 0x14
    1fd4:	9d 89       	ldd	r25, Y+21	; 0x15
    1fd6:	01 97       	sbiw	r24, 0x01	; 1
    1fd8:	9d 8b       	std	Y+21, r25	; 0x15
    1fda:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fdc:	8c 89       	ldd	r24, Y+20	; 0x14
    1fde:	9d 89       	ldd	r25, Y+21	; 0x15
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	69 f7       	brne	.-38     	; 0x1fbe <LCD_Char+0x568>
    1fe4:	24 c0       	rjmp	.+72     	; 0x202e <LCD_Char+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe6:	6e 89       	ldd	r22, Y+22	; 0x16
    1fe8:	7f 89       	ldd	r23, Y+23	; 0x17
    1fea:	88 8d       	ldd	r24, Y+24	; 0x18
    1fec:	99 8d       	ldd	r25, Y+25	; 0x19
    1fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	9d 8b       	std	Y+21, r25	; 0x15
    1ff8:	8c 8b       	std	Y+20, r24	; 0x14
    1ffa:	8c 89       	ldd	r24, Y+20	; 0x14
    1ffc:	9d 89       	ldd	r25, Y+21	; 0x15
    1ffe:	99 8b       	std	Y+17, r25	; 0x11
    2000:	88 8b       	std	Y+16, r24	; 0x10
    2002:	88 89       	ldd	r24, Y+16	; 0x10
    2004:	99 89       	ldd	r25, Y+17	; 0x11
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	f1 f7       	brne	.-4      	; 0x2006 <LCD_Char+0x5b0>
    200a:	99 8b       	std	Y+17, r25	; 0x11
    200c:	88 8b       	std	Y+16, r24	; 0x10
    200e:	0f c0       	rjmp	.+30     	; 0x202e <LCD_Char+0x5d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2010:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2012:	78 a1       	ldd	r23, Y+32	; 0x20
    2014:	89 a1       	ldd	r24, Y+33	; 0x21
    2016:	9a a1       	ldd	r25, Y+34	; 0x22
    2018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	8e 8f       	std	Y+30, r24	; 0x1e
    2022:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2024:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2026:	8f 85       	ldd	r24, Y+15	; 0x0f
    2028:	8a 95       	dec	r24
    202a:	f1 f7       	brne	.-4      	; 0x2028 <LCD_Char+0x5d2>
    202c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    202e:	a8 e3       	ldi	r26, 0x38	; 56
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	e8 e3       	ldi	r30, 0x38	; 56
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	8d 7f       	andi	r24, 0xFD	; 253
    203a:	8c 93       	st	X, r24
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	a0 e0       	ldi	r26, 0x00	; 0
    2042:	b0 e4       	ldi	r27, 0x40	; 64
    2044:	8b 87       	std	Y+11, r24	; 0x0b
    2046:	9c 87       	std	Y+12, r25	; 0x0c
    2048:	ad 87       	std	Y+13, r26	; 0x0d
    204a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    204c:	6b 85       	ldd	r22, Y+11	; 0x0b
    204e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2050:	8d 85       	ldd	r24, Y+13	; 0x0d
    2052:	9e 85       	ldd	r25, Y+14	; 0x0e
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	4a ef       	ldi	r20, 0xFA	; 250
    205a:	54 e4       	ldi	r21, 0x44	; 68
    205c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	8f 83       	std	Y+7, r24	; 0x07
    2066:	98 87       	std	Y+8, r25	; 0x08
    2068:	a9 87       	std	Y+9, r26	; 0x09
    206a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    206c:	6f 81       	ldd	r22, Y+7	; 0x07
    206e:	78 85       	ldd	r23, Y+8	; 0x08
    2070:	89 85       	ldd	r24, Y+9	; 0x09
    2072:	9a 85       	ldd	r25, Y+10	; 0x0a
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	40 e8       	ldi	r20, 0x80	; 128
    207a:	5f e3       	ldi	r21, 0x3F	; 63
    207c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2080:	88 23       	and	r24, r24
    2082:	2c f4       	brge	.+10     	; 0x208e <LCD_Char+0x638>
		__ticks = 1;
    2084:	81 e0       	ldi	r24, 0x01	; 1
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	9e 83       	std	Y+6, r25	; 0x06
    208a:	8d 83       	std	Y+5, r24	; 0x05
    208c:	3f c0       	rjmp	.+126    	; 0x210c <LCD_Char+0x6b6>
	else if (__tmp > 65535)
    208e:	6f 81       	ldd	r22, Y+7	; 0x07
    2090:	78 85       	ldd	r23, Y+8	; 0x08
    2092:	89 85       	ldd	r24, Y+9	; 0x09
    2094:	9a 85       	ldd	r25, Y+10	; 0x0a
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	3f ef       	ldi	r19, 0xFF	; 255
    209a:	4f e7       	ldi	r20, 0x7F	; 127
    209c:	57 e4       	ldi	r21, 0x47	; 71
    209e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20a2:	18 16       	cp	r1, r24
    20a4:	4c f5       	brge	.+82     	; 0x20f8 <LCD_Char+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	40 e2       	ldi	r20, 0x20	; 32
    20b4:	51 e4       	ldi	r21, 0x41	; 65
    20b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	bc 01       	movw	r22, r24
    20c0:	cd 01       	movw	r24, r26
    20c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	9e 83       	std	Y+6, r25	; 0x06
    20cc:	8d 83       	std	Y+5, r24	; 0x05
    20ce:	0f c0       	rjmp	.+30     	; 0x20ee <LCD_Char+0x698>
    20d0:	88 ec       	ldi	r24, 0xC8	; 200
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	9c 83       	std	Y+4, r25	; 0x04
    20d6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	9c 81       	ldd	r25, Y+4	; 0x04
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	f1 f7       	brne	.-4      	; 0x20dc <LCD_Char+0x686>
    20e0:	9c 83       	std	Y+4, r25	; 0x04
    20e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e4:	8d 81       	ldd	r24, Y+5	; 0x05
    20e6:	9e 81       	ldd	r25, Y+6	; 0x06
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	9e 83       	std	Y+6, r25	; 0x06
    20ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ee:	8d 81       	ldd	r24, Y+5	; 0x05
    20f0:	9e 81       	ldd	r25, Y+6	; 0x06
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	69 f7       	brne	.-38     	; 0x20d0 <LCD_Char+0x67a>
    20f6:	14 c0       	rjmp	.+40     	; 0x2120 <LCD_Char+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f8:	6f 81       	ldd	r22, Y+7	; 0x07
    20fa:	78 85       	ldd	r23, Y+8	; 0x08
    20fc:	89 85       	ldd	r24, Y+9	; 0x09
    20fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	9e 83       	std	Y+6, r25	; 0x06
    210a:	8d 83       	std	Y+5, r24	; 0x05
    210c:	8d 81       	ldd	r24, Y+5	; 0x05
    210e:	9e 81       	ldd	r25, Y+6	; 0x06
    2110:	9a 83       	std	Y+2, r25	; 0x02
    2112:	89 83       	std	Y+1, r24	; 0x01
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	9a 81       	ldd	r25, Y+2	; 0x02
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	f1 f7       	brne	.-4      	; 0x2118 <LCD_Char+0x6c2>
    211c:	9a 83       	std	Y+2, r25	; 0x02
    211e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2120:	c9 5a       	subi	r28, 0xA9	; 169
    2122:	df 4f       	sbci	r29, 0xFF	; 255
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	cd bf       	out	0x3d, r28	; 61
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	1f 91       	pop	r17
    2134:	0f 91       	pop	r16
    2136:	08 95       	ret

00002138 <LCD_Init>:

void LCD_Init (void)			/* LCD Initialize function */
{
    2138:	df 93       	push	r29
    213a:	cf 93       	push	r28
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	6c 97       	sbiw	r28, 0x1c	; 28
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	de bf       	out	0x3e, r29	; 62
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	cd bf       	out	0x3d, r28	; 61
	LCD_Dir = 0xFF;			/* Make LCD port direction as o/p */
    214c:	e7 e3       	ldi	r30, 0x37	; 55
    214e:	f0 e0       	ldi	r31, 0x00	; 0
    2150:	8f ef       	ldi	r24, 0xFF	; 255
    2152:	80 83       	st	Z, r24
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	a0 ea       	ldi	r26, 0xA0	; 160
    215a:	b1 e4       	ldi	r27, 0x41	; 65
    215c:	89 8f       	std	Y+25, r24	; 0x19
    215e:	9a 8f       	std	Y+26, r25	; 0x1a
    2160:	ab 8f       	std	Y+27, r26	; 0x1b
    2162:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2164:	69 8d       	ldd	r22, Y+25	; 0x19
    2166:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2168:	8b 8d       	ldd	r24, Y+27	; 0x1b
    216a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	4a ef       	ldi	r20, 0xFA	; 250
    2172:	54 e4       	ldi	r21, 0x44	; 68
    2174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	8d 8b       	std	Y+21, r24	; 0x15
    217e:	9e 8b       	std	Y+22, r25	; 0x16
    2180:	af 8b       	std	Y+23, r26	; 0x17
    2182:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2184:	6d 89       	ldd	r22, Y+21	; 0x15
    2186:	7e 89       	ldd	r23, Y+22	; 0x16
    2188:	8f 89       	ldd	r24, Y+23	; 0x17
    218a:	98 8d       	ldd	r25, Y+24	; 0x18
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	40 e8       	ldi	r20, 0x80	; 128
    2192:	5f e3       	ldi	r21, 0x3F	; 63
    2194:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2198:	88 23       	and	r24, r24
    219a:	2c f4       	brge	.+10     	; 0x21a6 <LCD_Init+0x6e>
		__ticks = 1;
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	9c 8b       	std	Y+20, r25	; 0x14
    21a2:	8b 8b       	std	Y+19, r24	; 0x13
    21a4:	3f c0       	rjmp	.+126    	; 0x2224 <LCD_Init+0xec>
	else if (__tmp > 65535)
    21a6:	6d 89       	ldd	r22, Y+21	; 0x15
    21a8:	7e 89       	ldd	r23, Y+22	; 0x16
    21aa:	8f 89       	ldd	r24, Y+23	; 0x17
    21ac:	98 8d       	ldd	r25, Y+24	; 0x18
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	3f ef       	ldi	r19, 0xFF	; 255
    21b2:	4f e7       	ldi	r20, 0x7F	; 127
    21b4:	57 e4       	ldi	r21, 0x47	; 71
    21b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ba:	18 16       	cp	r1, r24
    21bc:	4c f5       	brge	.+82     	; 0x2210 <LCD_Init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21be:	69 8d       	ldd	r22, Y+25	; 0x19
    21c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e2       	ldi	r20, 0x20	; 32
    21cc:	51 e4       	ldi	r21, 0x41	; 65
    21ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	bc 01       	movw	r22, r24
    21d8:	cd 01       	movw	r24, r26
    21da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	9c 8b       	std	Y+20, r25	; 0x14
    21e4:	8b 8b       	std	Y+19, r24	; 0x13
    21e6:	0f c0       	rjmp	.+30     	; 0x2206 <LCD_Init+0xce>
    21e8:	88 ec       	ldi	r24, 0xC8	; 200
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	9a 8b       	std	Y+18, r25	; 0x12
    21ee:	89 8b       	std	Y+17, r24	; 0x11
    21f0:	89 89       	ldd	r24, Y+17	; 0x11
    21f2:	9a 89       	ldd	r25, Y+18	; 0x12
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <LCD_Init+0xbc>
    21f8:	9a 8b       	std	Y+18, r25	; 0x12
    21fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fc:	8b 89       	ldd	r24, Y+19	; 0x13
    21fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	9c 8b       	std	Y+20, r25	; 0x14
    2204:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2206:	8b 89       	ldd	r24, Y+19	; 0x13
    2208:	9c 89       	ldd	r25, Y+20	; 0x14
    220a:	00 97       	sbiw	r24, 0x00	; 0
    220c:	69 f7       	brne	.-38     	; 0x21e8 <LCD_Init+0xb0>
    220e:	14 c0       	rjmp	.+40     	; 0x2238 <LCD_Init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2210:	6d 89       	ldd	r22, Y+21	; 0x15
    2212:	7e 89       	ldd	r23, Y+22	; 0x16
    2214:	8f 89       	ldd	r24, Y+23	; 0x17
    2216:	98 8d       	ldd	r25, Y+24	; 0x18
    2218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	9c 8b       	std	Y+20, r25	; 0x14
    2222:	8b 8b       	std	Y+19, r24	; 0x13
    2224:	8b 89       	ldd	r24, Y+19	; 0x13
    2226:	9c 89       	ldd	r25, Y+20	; 0x14
    2228:	98 8b       	std	Y+16, r25	; 0x10
    222a:	8f 87       	std	Y+15, r24	; 0x0f
    222c:	8f 85       	ldd	r24, Y+15	; 0x0f
    222e:	98 89       	ldd	r25, Y+16	; 0x10
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	f1 f7       	brne	.-4      	; 0x2230 <LCD_Init+0xf8>
    2234:	98 8b       	std	Y+16, r25	; 0x10
    2236:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);			/* LCD Power ON delay always >15ms */

	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
    2238:	82 e0       	ldi	r24, 0x02	; 2
    223a:	0e 94 ba 09 	call	0x1374	; 0x1374 <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
    223e:	88 e2       	ldi	r24, 0x28	; 40
    2240:	0e 94 ba 09 	call	0x1374	; 0x1374 <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
    2244:	8c e0       	ldi	r24, 0x0C	; 12
    2246:	0e 94 ba 09 	call	0x1374	; 0x1374 <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
    224a:	86 e0       	ldi	r24, 0x06	; 6
    224c:	0e 94 ba 09 	call	0x1374	; 0x1374 <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	0e 94 ba 09 	call	0x1374	; 0x1374 <LCD_Command>
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	a0 e0       	ldi	r26, 0x00	; 0
    225c:	b0 e4       	ldi	r27, 0x40	; 64
    225e:	8b 87       	std	Y+11, r24	; 0x0b
    2260:	9c 87       	std	Y+12, r25	; 0x0c
    2262:	ad 87       	std	Y+13, r26	; 0x0d
    2264:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2266:	6b 85       	ldd	r22, Y+11	; 0x0b
    2268:	7c 85       	ldd	r23, Y+12	; 0x0c
    226a:	8d 85       	ldd	r24, Y+13	; 0x0d
    226c:	9e 85       	ldd	r25, Y+14	; 0x0e
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	4a ef       	ldi	r20, 0xFA	; 250
    2274:	54 e4       	ldi	r21, 0x44	; 68
    2276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	8f 83       	std	Y+7, r24	; 0x07
    2280:	98 87       	std	Y+8, r25	; 0x08
    2282:	a9 87       	std	Y+9, r26	; 0x09
    2284:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2286:	6f 81       	ldd	r22, Y+7	; 0x07
    2288:	78 85       	ldd	r23, Y+8	; 0x08
    228a:	89 85       	ldd	r24, Y+9	; 0x09
    228c:	9a 85       	ldd	r25, Y+10	; 0x0a
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e8       	ldi	r20, 0x80	; 128
    2294:	5f e3       	ldi	r21, 0x3F	; 63
    2296:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    229a:	88 23       	and	r24, r24
    229c:	2c f4       	brge	.+10     	; 0x22a8 <LCD_Init+0x170>
		__ticks = 1;
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	9e 83       	std	Y+6, r25	; 0x06
    22a4:	8d 83       	std	Y+5, r24	; 0x05
    22a6:	3f c0       	rjmp	.+126    	; 0x2326 <LCD_Init+0x1ee>
	else if (__tmp > 65535)
    22a8:	6f 81       	ldd	r22, Y+7	; 0x07
    22aa:	78 85       	ldd	r23, Y+8	; 0x08
    22ac:	89 85       	ldd	r24, Y+9	; 0x09
    22ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	3f ef       	ldi	r19, 0xFF	; 255
    22b4:	4f e7       	ldi	r20, 0x7F	; 127
    22b6:	57 e4       	ldi	r21, 0x47	; 71
    22b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22bc:	18 16       	cp	r1, r24
    22be:	4c f5       	brge	.+82     	; 0x2312 <LCD_Init+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e2       	ldi	r20, 0x20	; 32
    22ce:	51 e4       	ldi	r21, 0x41	; 65
    22d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	bc 01       	movw	r22, r24
    22da:	cd 01       	movw	r24, r26
    22dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e0:	dc 01       	movw	r26, r24
    22e2:	cb 01       	movw	r24, r22
    22e4:	9e 83       	std	Y+6, r25	; 0x06
    22e6:	8d 83       	std	Y+5, r24	; 0x05
    22e8:	0f c0       	rjmp	.+30     	; 0x2308 <LCD_Init+0x1d0>
    22ea:	88 ec       	ldi	r24, 0xC8	; 200
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	9c 83       	std	Y+4, r25	; 0x04
    22f0:	8b 83       	std	Y+3, r24	; 0x03
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	9c 81       	ldd	r25, Y+4	; 0x04
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <LCD_Init+0x1be>
    22fa:	9c 83       	std	Y+4, r25	; 0x04
    22fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2300:	9e 81       	ldd	r25, Y+6	; 0x06
    2302:	01 97       	sbiw	r24, 0x01	; 1
    2304:	9e 83       	std	Y+6, r25	; 0x06
    2306:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2308:	8d 81       	ldd	r24, Y+5	; 0x05
    230a:	9e 81       	ldd	r25, Y+6	; 0x06
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	69 f7       	brne	.-38     	; 0x22ea <LCD_Init+0x1b2>
    2310:	14 c0       	rjmp	.+40     	; 0x233a <LCD_Init+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2312:	6f 81       	ldd	r22, Y+7	; 0x07
    2314:	78 85       	ldd	r23, Y+8	; 0x08
    2316:	89 85       	ldd	r24, Y+9	; 0x09
    2318:	9a 85       	ldd	r25, Y+10	; 0x0a
    231a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	9e 83       	std	Y+6, r25	; 0x06
    2324:	8d 83       	std	Y+5, r24	; 0x05
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	9e 81       	ldd	r25, Y+6	; 0x06
    232a:	9a 83       	std	Y+2, r25	; 0x02
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	9a 81       	ldd	r25, Y+2	; 0x02
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	f1 f7       	brne	.-4      	; 0x2332 <LCD_Init+0x1fa>
    2336:	9a 83       	std	Y+2, r25	; 0x02
    2338:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    233a:	6c 96       	adiw	r28, 0x1c	; 28
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	f8 94       	cli
    2340:	de bf       	out	0x3e, r29	; 62
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	cd bf       	out	0x3d, r28	; 61
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <LCD_String>:


void LCD_String (char *str)		/* Send string to LCD function */
{
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	00 d0       	rcall	.+0      	; 0x2352 <LCD_String+0x6>
    2352:	00 d0       	rcall	.+0      	; 0x2354 <LCD_String+0x8>
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	9c 83       	std	Y+4, r25	; 0x04
    235a:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    235c:	1a 82       	std	Y+2, r1	; 0x02
    235e:	19 82       	std	Y+1, r1	; 0x01
    2360:	0f c0       	rjmp	.+30     	; 0x2380 <LCD_String+0x34>
	{
		LCD_Char (str[i]);
    2362:	29 81       	ldd	r18, Y+1	; 0x01
    2364:	3a 81       	ldd	r19, Y+2	; 0x02
    2366:	8b 81       	ldd	r24, Y+3	; 0x03
    2368:	9c 81       	ldd	r25, Y+4	; 0x04
    236a:	fc 01       	movw	r30, r24
    236c:	e2 0f       	add	r30, r18
    236e:	f3 1f       	adc	r31, r19
    2370:	80 81       	ld	r24, Z
    2372:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <LCD_Char>


void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	9a 81       	ldd	r25, Y+2	; 0x02
    237a:	01 96       	adiw	r24, 0x01	; 1
    237c:	9a 83       	std	Y+2, r25	; 0x02
    237e:	89 83       	std	Y+1, r24	; 0x01
    2380:	29 81       	ldd	r18, Y+1	; 0x01
    2382:	3a 81       	ldd	r19, Y+2	; 0x02
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	9c 81       	ldd	r25, Y+4	; 0x04
    2388:	fc 01       	movw	r30, r24
    238a:	e2 0f       	add	r30, r18
    238c:	f3 1f       	adc	r31, r19
    238e:	80 81       	ld	r24, Z
    2390:	88 23       	and	r24, r24
    2392:	39 f7       	brne	.-50     	; 0x2362 <LCD_String+0x16>
	{
		LCD_Char (str[i]);
	}
}
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	cf 91       	pop	r28
    239e:	df 91       	pop	r29
    23a0:	08 95       	ret

000023a2 <Gotoxy>:

void Gotoxy (char Y,char X)
{
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <Gotoxy+0x6>
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <Gotoxy+0x8>
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	6a 83       	std	Y+2, r22	; 0x02
	if (X>0 && X<=16)
    23b2:	8a 81       	ldd	r24, Y+2	; 0x02
    23b4:	88 23       	and	r24, r24
    23b6:	e1 f0       	breq	.+56     	; 0x23f0 <Gotoxy+0x4e>
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	81 31       	cpi	r24, 0x11	; 17
    23bc:	c8 f4       	brcc	.+50     	; 0x23f0 <Gotoxy+0x4e>
	{
	    switch(Y)
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	28 2f       	mov	r18, r24
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	3c 83       	std	Y+4, r19	; 0x04
    23c6:	2b 83       	std	Y+3, r18	; 0x03
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	9c 81       	ldd	r25, Y+4	; 0x04
    23cc:	81 30       	cpi	r24, 0x01	; 1
    23ce:	91 05       	cpc	r25, r1
    23d0:	31 f0       	breq	.+12     	; 0x23de <Gotoxy+0x3c>
    23d2:	2b 81       	ldd	r18, Y+3	; 0x03
    23d4:	3c 81       	ldd	r19, Y+4	; 0x04
    23d6:	22 30       	cpi	r18, 0x02	; 2
    23d8:	31 05       	cpc	r19, r1
    23da:	31 f0       	breq	.+12     	; 0x23e8 <Gotoxy+0x46>
    23dc:	09 c0       	rjmp	.+18     	; 0x23f0 <Gotoxy+0x4e>
	    {
		    case 1:
		    	LCD_Command(X+127);
    23de:	8a 81       	ldd	r24, Y+2	; 0x02
    23e0:	81 58       	subi	r24, 0x81	; 129
    23e2:	0e 94 ba 09 	call	0x1374	; 0x1374 <LCD_Command>
    23e6:	04 c0       	rjmp	.+8      	; 0x23f0 <Gotoxy+0x4e>
		    break;
		    case 2:
		    	LCD_Command(X+191);
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	81 54       	subi	r24, 0x41	; 65
    23ec:	0e 94 ba 09 	call	0x1374	; 0x1374 <LCD_Command>
		    break;
		    default:
		    break;
	    }
	}
}
    23f0:	0f 90       	pop	r0
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	00 d0       	rcall	.+0      	; 0x2404 <LCD_String_xy+0x6>
    2404:	00 d0       	rcall	.+0      	; 0x2406 <LCD_String_xy+0x8>
    2406:	cd b7       	in	r28, 0x3d	; 61
    2408:	de b7       	in	r29, 0x3e	; 62
    240a:	89 83       	std	Y+1, r24	; 0x01
    240c:	6a 83       	std	Y+2, r22	; 0x02
    240e:	5c 83       	std	Y+4, r21	; 0x04
    2410:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 0 && pos<16)
    2412:	89 81       	ldd	r24, Y+1	; 0x01
    2414:	88 23       	and	r24, r24
    2416:	49 f4       	brne	.+18     	; 0x242a <LCD_String_xy+0x2c>
    2418:	8a 81       	ldd	r24, Y+2	; 0x02
    241a:	80 31       	cpi	r24, 0x10	; 16
    241c:	30 f4       	brcc	.+12     	; 0x242a <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    241e:	8a 81       	ldd	r24, Y+2	; 0x02
    2420:	8f 70       	andi	r24, 0x0F	; 15
    2422:	80 68       	ori	r24, 0x80	; 128
    2424:	0e 94 ba 09 	call	0x1374	; 0x1374 <LCD_Command>
    2428:	0b c0       	rjmp	.+22     	; 0x2440 <LCD_String_xy+0x42>
	else if (row == 1 && pos<16)
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	81 30       	cpi	r24, 0x01	; 1
    242e:	41 f4       	brne	.+16     	; 0x2440 <LCD_String_xy+0x42>
    2430:	8a 81       	ldd	r24, Y+2	; 0x02
    2432:	80 31       	cpi	r24, 0x10	; 16
    2434:	28 f4       	brcc	.+10     	; 0x2440 <LCD_String_xy+0x42>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    2436:	8a 81       	ldd	r24, Y+2	; 0x02
    2438:	8f 70       	andi	r24, 0x0F	; 15
    243a:	80 6c       	ori	r24, 0xC0	; 192
    243c:	0e 94 ba 09 	call	0x1374	; 0x1374 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	9c 81       	ldd	r25, Y+4	; 0x04
    2444:	0e 94 a6 11 	call	0x234c	; 0x234c <LCD_String>
}
    2448:	0f 90       	pop	r0
    244a:	0f 90       	pop	r0
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <LCD_Clear>:

void LCD_Clear()
{
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
    245e:	2e 97       	sbiw	r28, 0x0e	; 14
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
	LCD_Command (0x01);		/* Clear display */
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	0e 94 ba 09 	call	0x1374	; 0x1374 <LCD_Command>
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	a0 e0       	ldi	r26, 0x00	; 0
    2476:	b0 e4       	ldi	r27, 0x40	; 64
    2478:	8b 87       	std	Y+11, r24	; 0x0b
    247a:	9c 87       	std	Y+12, r25	; 0x0c
    247c:	ad 87       	std	Y+13, r26	; 0x0d
    247e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2480:	6b 85       	ldd	r22, Y+11	; 0x0b
    2482:	7c 85       	ldd	r23, Y+12	; 0x0c
    2484:	8d 85       	ldd	r24, Y+13	; 0x0d
    2486:	9e 85       	ldd	r25, Y+14	; 0x0e
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	4a ef       	ldi	r20, 0xFA	; 250
    248e:	54 e4       	ldi	r21, 0x44	; 68
    2490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	8f 83       	std	Y+7, r24	; 0x07
    249a:	98 87       	std	Y+8, r25	; 0x08
    249c:	a9 87       	std	Y+9, r26	; 0x09
    249e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24a0:	6f 81       	ldd	r22, Y+7	; 0x07
    24a2:	78 85       	ldd	r23, Y+8	; 0x08
    24a4:	89 85       	ldd	r24, Y+9	; 0x09
    24a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e8       	ldi	r20, 0x80	; 128
    24ae:	5f e3       	ldi	r21, 0x3F	; 63
    24b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24b4:	88 23       	and	r24, r24
    24b6:	2c f4       	brge	.+10     	; 0x24c2 <LCD_Clear+0x6c>
		__ticks = 1;
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	9e 83       	std	Y+6, r25	; 0x06
    24be:	8d 83       	std	Y+5, r24	; 0x05
    24c0:	3f c0       	rjmp	.+126    	; 0x2540 <LCD_Clear+0xea>
	else if (__tmp > 65535)
    24c2:	6f 81       	ldd	r22, Y+7	; 0x07
    24c4:	78 85       	ldd	r23, Y+8	; 0x08
    24c6:	89 85       	ldd	r24, Y+9	; 0x09
    24c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	3f ef       	ldi	r19, 0xFF	; 255
    24ce:	4f e7       	ldi	r20, 0x7F	; 127
    24d0:	57 e4       	ldi	r21, 0x47	; 71
    24d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24d6:	18 16       	cp	r1, r24
    24d8:	4c f5       	brge	.+82     	; 0x252c <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24da:	6b 85       	ldd	r22, Y+11	; 0x0b
    24dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24de:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e2       	ldi	r20, 0x20	; 32
    24e8:	51 e4       	ldi	r21, 0x41	; 65
    24ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	bc 01       	movw	r22, r24
    24f4:	cd 01       	movw	r24, r26
    24f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	9e 83       	std	Y+6, r25	; 0x06
    2500:	8d 83       	std	Y+5, r24	; 0x05
    2502:	0f c0       	rjmp	.+30     	; 0x2522 <LCD_Clear+0xcc>
    2504:	88 ec       	ldi	r24, 0xC8	; 200
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	9c 83       	std	Y+4, r25	; 0x04
    250a:	8b 83       	std	Y+3, r24	; 0x03
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	9c 81       	ldd	r25, Y+4	; 0x04
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	f1 f7       	brne	.-4      	; 0x2510 <LCD_Clear+0xba>
    2514:	9c 83       	std	Y+4, r25	; 0x04
    2516:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2518:	8d 81       	ldd	r24, Y+5	; 0x05
    251a:	9e 81       	ldd	r25, Y+6	; 0x06
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	9e 83       	std	Y+6, r25	; 0x06
    2520:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2522:	8d 81       	ldd	r24, Y+5	; 0x05
    2524:	9e 81       	ldd	r25, Y+6	; 0x06
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	69 f7       	brne	.-38     	; 0x2504 <LCD_Clear+0xae>
    252a:	14 c0       	rjmp	.+40     	; 0x2554 <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    252c:	6f 81       	ldd	r22, Y+7	; 0x07
    252e:	78 85       	ldd	r23, Y+8	; 0x08
    2530:	89 85       	ldd	r24, Y+9	; 0x09
    2532:	9a 85       	ldd	r25, Y+10	; 0x0a
    2534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	9e 83       	std	Y+6, r25	; 0x06
    253e:	8d 83       	std	Y+5, r24	; 0x05
    2540:	8d 81       	ldd	r24, Y+5	; 0x05
    2542:	9e 81       	ldd	r25, Y+6	; 0x06
    2544:	9a 83       	std	Y+2, r25	; 0x02
    2546:	89 83       	std	Y+1, r24	; 0x01
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	9a 81       	ldd	r25, Y+2	; 0x02
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <LCD_Clear+0xf6>
    2550:	9a 83       	std	Y+2, r25	; 0x02
    2552:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
    2554:	80 e8       	ldi	r24, 0x80	; 128
    2556:	0e 94 ba 09 	call	0x1374	; 0x1374 <LCD_Command>
}
    255a:	2e 96       	adiw	r28, 0x0e	; 14
    255c:	0f b6       	in	r0, 0x3f	; 63
    255e:	f8 94       	cli
    2560:	de bf       	out	0x3e, r29	; 62
    2562:	0f be       	out	0x3f, r0	; 63
    2564:	cd bf       	out	0x3d, r28	; 61
    2566:	cf 91       	pop	r28
    2568:	df 91       	pop	r29
    256a:	08 95       	ret

0000256c <LCD_vidWriteInteger>:


void LCD_vidWriteInteger(u32 m){
    256c:	df 93       	push	r29
    256e:	cf 93       	push	r28
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	64 97       	sbiw	r28, 0x14	; 20
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	69 8b       	std	Y+17, r22	; 0x11
    2582:	7a 8b       	std	Y+18, r23	; 0x12
    2584:	8b 8b       	std	Y+19, r24	; 0x13
    2586:	9c 8b       	std	Y+20, r25	; 0x14
u32 t,t1,t2,t3;
if(m<10)
    2588:	89 89       	ldd	r24, Y+17	; 0x11
    258a:	9a 89       	ldd	r25, Y+18	; 0x12
    258c:	ab 89       	ldd	r26, Y+19	; 0x13
    258e:	bc 89       	ldd	r27, Y+20	; 0x14
    2590:	8a 30       	cpi	r24, 0x0A	; 10
    2592:	91 05       	cpc	r25, r1
    2594:	a1 05       	cpc	r26, r1
    2596:	b1 05       	cpc	r27, r1
    2598:	20 f4       	brcc	.+8      	; 0x25a2 <LCD_vidWriteInteger+0x36>
{
	LCD_Char(m+48);
    259a:	89 89       	ldd	r24, Y+17	; 0x11
    259c:	80 5d       	subi	r24, 0xD0	; 208
    259e:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <LCD_Char>

}
	if(m>9&&m<100){
    25a2:	89 89       	ldd	r24, Y+17	; 0x11
    25a4:	9a 89       	ldd	r25, Y+18	; 0x12
    25a6:	ab 89       	ldd	r26, Y+19	; 0x13
    25a8:	bc 89       	ldd	r27, Y+20	; 0x14
    25aa:	8a 30       	cpi	r24, 0x0A	; 10
    25ac:	91 05       	cpc	r25, r1
    25ae:	a1 05       	cpc	r26, r1
    25b0:	b1 05       	cpc	r27, r1
    25b2:	a8 f1       	brcs	.+106    	; 0x261e <LCD_vidWriteInteger+0xb2>
    25b4:	89 89       	ldd	r24, Y+17	; 0x11
    25b6:	9a 89       	ldd	r25, Y+18	; 0x12
    25b8:	ab 89       	ldd	r26, Y+19	; 0x13
    25ba:	bc 89       	ldd	r27, Y+20	; 0x14
    25bc:	84 36       	cpi	r24, 0x64	; 100
    25be:	91 05       	cpc	r25, r1
    25c0:	a1 05       	cpc	r26, r1
    25c2:	b1 05       	cpc	r27, r1
    25c4:	60 f5       	brcc	.+88     	; 0x261e <LCD_vidWriteInteger+0xb2>

		t = m/10;
    25c6:	89 89       	ldd	r24, Y+17	; 0x11
    25c8:	9a 89       	ldd	r25, Y+18	; 0x12
    25ca:	ab 89       	ldd	r26, Y+19	; 0x13
    25cc:	bc 89       	ldd	r27, Y+20	; 0x14
    25ce:	2a e0       	ldi	r18, 0x0A	; 10
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	40 e0       	ldi	r20, 0x00	; 0
    25d4:	50 e0       	ldi	r21, 0x00	; 0
    25d6:	bc 01       	movw	r22, r24
    25d8:	cd 01       	movw	r24, r26
    25da:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__udivmodsi4>
    25de:	da 01       	movw	r26, r20
    25e0:	c9 01       	movw	r24, r18
    25e2:	8d 87       	std	Y+13, r24	; 0x0d
    25e4:	9e 87       	std	Y+14, r25	; 0x0e
    25e6:	af 87       	std	Y+15, r26	; 0x0f
    25e8:	b8 8b       	std	Y+16, r27	; 0x10
		t1 = m%10;
    25ea:	89 89       	ldd	r24, Y+17	; 0x11
    25ec:	9a 89       	ldd	r25, Y+18	; 0x12
    25ee:	ab 89       	ldd	r26, Y+19	; 0x13
    25f0:	bc 89       	ldd	r27, Y+20	; 0x14
    25f2:	2a e0       	ldi	r18, 0x0A	; 10
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e0       	ldi	r20, 0x00	; 0
    25f8:	50 e0       	ldi	r21, 0x00	; 0
    25fa:	bc 01       	movw	r22, r24
    25fc:	cd 01       	movw	r24, r26
    25fe:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__udivmodsi4>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	89 87       	std	Y+9, r24	; 0x09
    2608:	9a 87       	std	Y+10, r25	; 0x0a
    260a:	ab 87       	std	Y+11, r26	; 0x0b
    260c:	bc 87       	std	Y+12, r27	; 0x0c
		LCD_Char((t+48));
    260e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2610:	80 5d       	subi	r24, 0xD0	; 208
    2612:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <LCD_Char>
		LCD_Char((t1+48));
    2616:	89 85       	ldd	r24, Y+9	; 0x09
    2618:	80 5d       	subi	r24, 0xD0	; 208
    261a:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <LCD_Char>
	}
	if(m>=100&&m<=999){
    261e:	89 89       	ldd	r24, Y+17	; 0x11
    2620:	9a 89       	ldd	r25, Y+18	; 0x12
    2622:	ab 89       	ldd	r26, Y+19	; 0x13
    2624:	bc 89       	ldd	r27, Y+20	; 0x14
    2626:	84 36       	cpi	r24, 0x64	; 100
    2628:	91 05       	cpc	r25, r1
    262a:	a1 05       	cpc	r26, r1
    262c:	b1 05       	cpc	r27, r1
    262e:	08 f4       	brcc	.+2      	; 0x2632 <LCD_vidWriteInteger+0xc6>
    2630:	61 c0       	rjmp	.+194    	; 0x26f4 <LCD_vidWriteInteger+0x188>
    2632:	89 89       	ldd	r24, Y+17	; 0x11
    2634:	9a 89       	ldd	r25, Y+18	; 0x12
    2636:	ab 89       	ldd	r26, Y+19	; 0x13
    2638:	bc 89       	ldd	r27, Y+20	; 0x14
    263a:	88 3e       	cpi	r24, 0xE8	; 232
    263c:	23 e0       	ldi	r18, 0x03	; 3
    263e:	92 07       	cpc	r25, r18
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	a2 07       	cpc	r26, r18
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	b2 07       	cpc	r27, r18
    2648:	08 f0       	brcs	.+2      	; 0x264c <LCD_vidWriteInteger+0xe0>
    264a:	54 c0       	rjmp	.+168    	; 0x26f4 <LCD_vidWriteInteger+0x188>

		t = m/10;
    264c:	89 89       	ldd	r24, Y+17	; 0x11
    264e:	9a 89       	ldd	r25, Y+18	; 0x12
    2650:	ab 89       	ldd	r26, Y+19	; 0x13
    2652:	bc 89       	ldd	r27, Y+20	; 0x14
    2654:	2a e0       	ldi	r18, 0x0A	; 10
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	40 e0       	ldi	r20, 0x00	; 0
    265a:	50 e0       	ldi	r21, 0x00	; 0
    265c:	bc 01       	movw	r22, r24
    265e:	cd 01       	movw	r24, r26
    2660:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__udivmodsi4>
    2664:	da 01       	movw	r26, r20
    2666:	c9 01       	movw	r24, r18
    2668:	8d 87       	std	Y+13, r24	; 0x0d
    266a:	9e 87       	std	Y+14, r25	; 0x0e
    266c:	af 87       	std	Y+15, r26	; 0x0f
    266e:	b8 8b       	std	Y+16, r27	; 0x10
			t1 = t%10;
    2670:	8d 85       	ldd	r24, Y+13	; 0x0d
    2672:	9e 85       	ldd	r25, Y+14	; 0x0e
    2674:	af 85       	ldd	r26, Y+15	; 0x0f
    2676:	b8 89       	ldd	r27, Y+16	; 0x10
    2678:	2a e0       	ldi	r18, 0x0A	; 10
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e0       	ldi	r20, 0x00	; 0
    267e:	50 e0       	ldi	r21, 0x00	; 0
    2680:	bc 01       	movw	r22, r24
    2682:	cd 01       	movw	r24, r26
    2684:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__udivmodsi4>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	89 87       	std	Y+9, r24	; 0x09
    268e:	9a 87       	std	Y+10, r25	; 0x0a
    2690:	ab 87       	std	Y+11, r26	; 0x0b
    2692:	bc 87       	std	Y+12, r27	; 0x0c
			t2 = t1/10;
    2694:	89 85       	ldd	r24, Y+9	; 0x09
    2696:	9a 85       	ldd	r25, Y+10	; 0x0a
    2698:	ab 85       	ldd	r26, Y+11	; 0x0b
    269a:	bc 85       	ldd	r27, Y+12	; 0x0c
    269c:	2a e0       	ldi	r18, 0x0A	; 10
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e0       	ldi	r20, 0x00	; 0
    26a2:	50 e0       	ldi	r21, 0x00	; 0
    26a4:	bc 01       	movw	r22, r24
    26a6:	cd 01       	movw	r24, r26
    26a8:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__udivmodsi4>
    26ac:	da 01       	movw	r26, r20
    26ae:	c9 01       	movw	r24, r18
    26b0:	8d 83       	std	Y+5, r24	; 0x05
    26b2:	9e 83       	std	Y+6, r25	; 0x06
    26b4:	af 83       	std	Y+7, r26	; 0x07
    26b6:	b8 87       	std	Y+8, r27	; 0x08
			t3 = t1%10;
    26b8:	89 85       	ldd	r24, Y+9	; 0x09
    26ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    26bc:	ab 85       	ldd	r26, Y+11	; 0x0b
    26be:	bc 85       	ldd	r27, Y+12	; 0x0c
    26c0:	2a e0       	ldi	r18, 0x0A	; 10
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	50 e0       	ldi	r21, 0x00	; 0
    26c8:	bc 01       	movw	r22, r24
    26ca:	cd 01       	movw	r24, r26
    26cc:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__udivmodsi4>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	89 83       	std	Y+1, r24	; 0x01
    26d6:	9a 83       	std	Y+2, r25	; 0x02
    26d8:	ab 83       	std	Y+3, r26	; 0x03
    26da:	bc 83       	std	Y+4, r27	; 0x04
			LCD_Char(t+48);
    26dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    26de:	80 5d       	subi	r24, 0xD0	; 208
    26e0:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <LCD_Char>
			LCD_Char(t2+48);
    26e4:	8d 81       	ldd	r24, Y+5	; 0x05
    26e6:	80 5d       	subi	r24, 0xD0	; 208
    26e8:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <LCD_Char>
			LCD_Char(t3+48);
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	80 5d       	subi	r24, 0xD0	; 208
    26f0:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <LCD_Char>
			;
	}
}
    26f4:	64 96       	adiw	r28, 0x14	; 20
    26f6:	0f b6       	in	r0, 0x3f	; 63
    26f8:	f8 94       	cli
    26fa:	de bf       	out	0x3e, r29	; 62
    26fc:	0f be       	out	0x3f, r0	; 63
    26fe:	cd bf       	out	0x3d, r28	; 61
    2700:	cf 91       	pop	r28
    2702:	df 91       	pop	r29
    2704:	08 95       	ret

00002706 <main>:

u16 digital_read;
u16 digital_read2;

void main(void)
{
    2706:	df 93       	push	r29
    2708:	cf 93       	push	r28
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    270e:	62 97       	sbiw	r28, 0x12	; 18
    2710:	0f b6       	in	r0, 0x3f	; 63
    2712:	f8 94       	cli
    2714:	de bf       	out	0x3e, r29	; 62
    2716:	0f be       	out	0x3f, r0	; 63
    2718:	cd bf       	out	0x3d, r28	; 61
 LCD_Init();
    271a:	0e 94 9c 10 	call	0x2138	; 0x2138 <LCD_Init>
  ADC_init();
    271e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_init>

  while(1)
  {
	  digital_read=ADC_u16Read(0);
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	0e 94 72 06 	call	0xce4	; 0xce4 <ADC_u16Read>
    2728:	90 93 81 00 	sts	0x0081, r25
    272c:	80 93 80 00 	sts	0x0080, r24
	  digital_read2=ADC_u16Read(1);
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	0e 94 72 06 	call	0xce4	; 0xce4 <ADC_u16Read>
    2736:	90 93 7f 00 	sts	0x007F, r25
    273a:	80 93 7e 00 	sts	0x007E, r24

//	  DIO_vidWritePortValue(c,digital_read);
	  u16 Ang=((digital_read*500)/1023);
    273e:	20 91 80 00 	lds	r18, 0x0080
    2742:	30 91 81 00 	lds	r19, 0x0081
    2746:	84 ef       	ldi	r24, 0xF4	; 244
    2748:	91 e0       	ldi	r25, 0x01	; 1
    274a:	ac 01       	movw	r20, r24
    274c:	24 9f       	mul	r18, r20
    274e:	c0 01       	movw	r24, r0
    2750:	25 9f       	mul	r18, r21
    2752:	90 0d       	add	r25, r0
    2754:	34 9f       	mul	r19, r20
    2756:	90 0d       	add	r25, r0
    2758:	11 24       	eor	r1, r1
    275a:	2f ef       	ldi	r18, 0xFF	; 255
    275c:	33 e0       	ldi	r19, 0x03	; 3
    275e:	b9 01       	movw	r22, r18
    2760:	0e 94 54 14 	call	0x28a8	; 0x28a8 <__udivmodhi4>
    2764:	cb 01       	movw	r24, r22
    2766:	9a 8b       	std	Y+18, r25	; 0x12
    2768:	89 8b       	std	Y+17, r24	; 0x11
	  u16 Ang2=((digital_read2)/4);
    276a:	80 91 7e 00 	lds	r24, 0x007E
    276e:	90 91 7f 00 	lds	r25, 0x007F
    2772:	96 95       	lsr	r25
    2774:	87 95       	ror	r24
    2776:	96 95       	lsr	r25
    2778:	87 95       	ror	r24
    277a:	98 8b       	std	Y+16, r25	; 0x10
    277c:	8f 87       	std	Y+15, r24	; 0x0f
	  Gotoxy(1,1);
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	61 e0       	ldi	r22, 0x01	; 1
    2782:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <Gotoxy>
	  LCD_String("temperature  ");
    2786:	80 e6       	ldi	r24, 0x60	; 96
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	0e 94 a6 11 	call	0x234c	; 0x234c <LCD_String>
	  LCD_vidWriteInteger(Ang);
    278e:	89 89       	ldd	r24, Y+17	; 0x11
    2790:	9a 89       	ldd	r25, Y+18	; 0x12
    2792:	cc 01       	movw	r24, r24
    2794:	a0 e0       	ldi	r26, 0x00	; 0
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	bc 01       	movw	r22, r24
    279a:	cd 01       	movw	r24, r26
    279c:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_vidWriteInteger>
	  Gotoxy(2,1);
    27a0:	82 e0       	ldi	r24, 0x02	; 2
    27a2:	61 e0       	ldi	r22, 0x01	; 1
    27a4:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <Gotoxy>
	  LCD_String("light ");
    27a8:	8e e6       	ldi	r24, 0x6E	; 110
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	0e 94 a6 11 	call	0x234c	; 0x234c <LCD_String>
	  LCD_vidWriteInteger(Ang2);
    27b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27b2:	98 89       	ldd	r25, Y+16	; 0x10
    27b4:	cc 01       	movw	r24, r24
    27b6:	a0 e0       	ldi	r26, 0x00	; 0
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	bc 01       	movw	r22, r24
    27bc:	cd 01       	movw	r24, r26
    27be:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_vidWriteInteger>
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	aa e7       	ldi	r26, 0x7A	; 122
    27c8:	b4 e4       	ldi	r27, 0x44	; 68
    27ca:	8b 87       	std	Y+11, r24	; 0x0b
    27cc:	9c 87       	std	Y+12, r25	; 0x0c
    27ce:	ad 87       	std	Y+13, r26	; 0x0d
    27d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	4a ef       	ldi	r20, 0xFA	; 250
    27e0:	54 e4       	ldi	r21, 0x44	; 68
    27e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	8f 83       	std	Y+7, r24	; 0x07
    27ec:	98 87       	std	Y+8, r25	; 0x08
    27ee:	a9 87       	std	Y+9, r26	; 0x09
    27f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27f2:	6f 81       	ldd	r22, Y+7	; 0x07
    27f4:	78 85       	ldd	r23, Y+8	; 0x08
    27f6:	89 85       	ldd	r24, Y+9	; 0x09
    27f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e8       	ldi	r20, 0x80	; 128
    2800:	5f e3       	ldi	r21, 0x3F	; 63
    2802:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2806:	88 23       	and	r24, r24
    2808:	2c f4       	brge	.+10     	; 0x2814 <main+0x10e>
		__ticks = 1;
    280a:	81 e0       	ldi	r24, 0x01	; 1
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	9e 83       	std	Y+6, r25	; 0x06
    2810:	8d 83       	std	Y+5, r24	; 0x05
    2812:	3f c0       	rjmp	.+126    	; 0x2892 <main+0x18c>
	else if (__tmp > 65535)
    2814:	6f 81       	ldd	r22, Y+7	; 0x07
    2816:	78 85       	ldd	r23, Y+8	; 0x08
    2818:	89 85       	ldd	r24, Y+9	; 0x09
    281a:	9a 85       	ldd	r25, Y+10	; 0x0a
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	3f ef       	ldi	r19, 0xFF	; 255
    2820:	4f e7       	ldi	r20, 0x7F	; 127
    2822:	57 e4       	ldi	r21, 0x47	; 71
    2824:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2828:	18 16       	cp	r1, r24
    282a:	4c f5       	brge	.+82     	; 0x287e <main+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282c:	6b 85       	ldd	r22, Y+11	; 0x0b
    282e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2830:	8d 85       	ldd	r24, Y+13	; 0x0d
    2832:	9e 85       	ldd	r25, Y+14	; 0x0e
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	40 e2       	ldi	r20, 0x20	; 32
    283a:	51 e4       	ldi	r21, 0x41	; 65
    283c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2840:	dc 01       	movw	r26, r24
    2842:	cb 01       	movw	r24, r22
    2844:	bc 01       	movw	r22, r24
    2846:	cd 01       	movw	r24, r26
    2848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	9e 83       	std	Y+6, r25	; 0x06
    2852:	8d 83       	std	Y+5, r24	; 0x05
    2854:	0f c0       	rjmp	.+30     	; 0x2874 <main+0x16e>
    2856:	88 ec       	ldi	r24, 0xC8	; 200
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	9c 83       	std	Y+4, r25	; 0x04
    285c:	8b 83       	std	Y+3, r24	; 0x03
    285e:	8b 81       	ldd	r24, Y+3	; 0x03
    2860:	9c 81       	ldd	r25, Y+4	; 0x04
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	f1 f7       	brne	.-4      	; 0x2862 <main+0x15c>
    2866:	9c 83       	std	Y+4, r25	; 0x04
    2868:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    286a:	8d 81       	ldd	r24, Y+5	; 0x05
    286c:	9e 81       	ldd	r25, Y+6	; 0x06
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	9e 83       	std	Y+6, r25	; 0x06
    2872:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2874:	8d 81       	ldd	r24, Y+5	; 0x05
    2876:	9e 81       	ldd	r25, Y+6	; 0x06
    2878:	00 97       	sbiw	r24, 0x00	; 0
    287a:	69 f7       	brne	.-38     	; 0x2856 <main+0x150>
    287c:	52 cf       	rjmp	.-348    	; 0x2722 <main+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    287e:	6f 81       	ldd	r22, Y+7	; 0x07
    2880:	78 85       	ldd	r23, Y+8	; 0x08
    2882:	89 85       	ldd	r24, Y+9	; 0x09
    2884:	9a 85       	ldd	r25, Y+10	; 0x0a
    2886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	9e 83       	std	Y+6, r25	; 0x06
    2890:	8d 83       	std	Y+5, r24	; 0x05
    2892:	8d 81       	ldd	r24, Y+5	; 0x05
    2894:	9e 81       	ldd	r25, Y+6	; 0x06
    2896:	9a 83       	std	Y+2, r25	; 0x02
    2898:	89 83       	std	Y+1, r24	; 0x01
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	9a 81       	ldd	r25, Y+2	; 0x02
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	f1 f7       	brne	.-4      	; 0x289e <main+0x198>
    28a2:	9a 83       	std	Y+2, r25	; 0x02
    28a4:	89 83       	std	Y+1, r24	; 0x01
    28a6:	3d cf       	rjmp	.-390    	; 0x2722 <main+0x1c>

000028a8 <__udivmodhi4>:
    28a8:	aa 1b       	sub	r26, r26
    28aa:	bb 1b       	sub	r27, r27
    28ac:	51 e1       	ldi	r21, 0x11	; 17
    28ae:	07 c0       	rjmp	.+14     	; 0x28be <__udivmodhi4_ep>

000028b0 <__udivmodhi4_loop>:
    28b0:	aa 1f       	adc	r26, r26
    28b2:	bb 1f       	adc	r27, r27
    28b4:	a6 17       	cp	r26, r22
    28b6:	b7 07       	cpc	r27, r23
    28b8:	10 f0       	brcs	.+4      	; 0x28be <__udivmodhi4_ep>
    28ba:	a6 1b       	sub	r26, r22
    28bc:	b7 0b       	sbc	r27, r23

000028be <__udivmodhi4_ep>:
    28be:	88 1f       	adc	r24, r24
    28c0:	99 1f       	adc	r25, r25
    28c2:	5a 95       	dec	r21
    28c4:	a9 f7       	brne	.-22     	; 0x28b0 <__udivmodhi4_loop>
    28c6:	80 95       	com	r24
    28c8:	90 95       	com	r25
    28ca:	bc 01       	movw	r22, r24
    28cc:	cd 01       	movw	r24, r26
    28ce:	08 95       	ret

000028d0 <__udivmodsi4>:
    28d0:	a1 e2       	ldi	r26, 0x21	; 33
    28d2:	1a 2e       	mov	r1, r26
    28d4:	aa 1b       	sub	r26, r26
    28d6:	bb 1b       	sub	r27, r27
    28d8:	fd 01       	movw	r30, r26
    28da:	0d c0       	rjmp	.+26     	; 0x28f6 <__udivmodsi4_ep>

000028dc <__udivmodsi4_loop>:
    28dc:	aa 1f       	adc	r26, r26
    28de:	bb 1f       	adc	r27, r27
    28e0:	ee 1f       	adc	r30, r30
    28e2:	ff 1f       	adc	r31, r31
    28e4:	a2 17       	cp	r26, r18
    28e6:	b3 07       	cpc	r27, r19
    28e8:	e4 07       	cpc	r30, r20
    28ea:	f5 07       	cpc	r31, r21
    28ec:	20 f0       	brcs	.+8      	; 0x28f6 <__udivmodsi4_ep>
    28ee:	a2 1b       	sub	r26, r18
    28f0:	b3 0b       	sbc	r27, r19
    28f2:	e4 0b       	sbc	r30, r20
    28f4:	f5 0b       	sbc	r31, r21

000028f6 <__udivmodsi4_ep>:
    28f6:	66 1f       	adc	r22, r22
    28f8:	77 1f       	adc	r23, r23
    28fa:	88 1f       	adc	r24, r24
    28fc:	99 1f       	adc	r25, r25
    28fe:	1a 94       	dec	r1
    2900:	69 f7       	brne	.-38     	; 0x28dc <__udivmodsi4_loop>
    2902:	60 95       	com	r22
    2904:	70 95       	com	r23
    2906:	80 95       	com	r24
    2908:	90 95       	com	r25
    290a:	9b 01       	movw	r18, r22
    290c:	ac 01       	movw	r20, r24
    290e:	bd 01       	movw	r22, r26
    2910:	cf 01       	movw	r24, r30
    2912:	08 95       	ret

00002914 <__prologue_saves__>:
    2914:	2f 92       	push	r2
    2916:	3f 92       	push	r3
    2918:	4f 92       	push	r4
    291a:	5f 92       	push	r5
    291c:	6f 92       	push	r6
    291e:	7f 92       	push	r7
    2920:	8f 92       	push	r8
    2922:	9f 92       	push	r9
    2924:	af 92       	push	r10
    2926:	bf 92       	push	r11
    2928:	cf 92       	push	r12
    292a:	df 92       	push	r13
    292c:	ef 92       	push	r14
    292e:	ff 92       	push	r15
    2930:	0f 93       	push	r16
    2932:	1f 93       	push	r17
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
    293c:	ca 1b       	sub	r28, r26
    293e:	db 0b       	sbc	r29, r27
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	cd bf       	out	0x3d, r28	; 61
    294a:	09 94       	ijmp

0000294c <__epilogue_restores__>:
    294c:	2a 88       	ldd	r2, Y+18	; 0x12
    294e:	39 88       	ldd	r3, Y+17	; 0x11
    2950:	48 88       	ldd	r4, Y+16	; 0x10
    2952:	5f 84       	ldd	r5, Y+15	; 0x0f
    2954:	6e 84       	ldd	r6, Y+14	; 0x0e
    2956:	7d 84       	ldd	r7, Y+13	; 0x0d
    2958:	8c 84       	ldd	r8, Y+12	; 0x0c
    295a:	9b 84       	ldd	r9, Y+11	; 0x0b
    295c:	aa 84       	ldd	r10, Y+10	; 0x0a
    295e:	b9 84       	ldd	r11, Y+9	; 0x09
    2960:	c8 84       	ldd	r12, Y+8	; 0x08
    2962:	df 80       	ldd	r13, Y+7	; 0x07
    2964:	ee 80       	ldd	r14, Y+6	; 0x06
    2966:	fd 80       	ldd	r15, Y+5	; 0x05
    2968:	0c 81       	ldd	r16, Y+4	; 0x04
    296a:	1b 81       	ldd	r17, Y+3	; 0x03
    296c:	aa 81       	ldd	r26, Y+2	; 0x02
    296e:	b9 81       	ldd	r27, Y+1	; 0x01
    2970:	ce 0f       	add	r28, r30
    2972:	d1 1d       	adc	r29, r1
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	f8 94       	cli
    2978:	de bf       	out	0x3e, r29	; 62
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	cd bf       	out	0x3d, r28	; 61
    297e:	ed 01       	movw	r28, r26
    2980:	08 95       	ret

00002982 <_exit>:
    2982:	f8 94       	cli

00002984 <__stop_program>:
    2984:	ff cf       	rjmp	.-2      	; 0x2984 <__stop_program>
