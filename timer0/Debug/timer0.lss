
timer0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002de4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00002de4  00002e78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080008c  0080008c  00002ea4  2**0
                  ALLOC
  3 .stab         00002004  00000000  00000000  00002ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b8c  00000000  00000000  00004ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008e69  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a22e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aabc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 6c 16 	jmp	0x2cd8	; 0x2cd8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 48 16 	call	0x2c90	; 0x2c90 <main>
      8a:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e7       	ldi	r26, 0x7B	; 123
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e7       	ldi	r24, 0x7B	; 123
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c1 16 	jmp	0x2d82	; 0x2d82 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e7       	ldi	r22, 0x7B	; 123
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 dd 16 	jmp	0x2dba	; 0x2dba <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e1 16 	jmp	0x2dc2	; 0x2dc2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_vidSetPinDir>:
#include "DIO.h"



void DIO_vidSetPinDir (u8 port,u8 pin,u8 dir)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_vidSetPinDir+0x6>
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <DIO_vidSetPinDir+0x8>
     ca6:	0f 92       	push	r0
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	6a 83       	std	Y+2, r22	; 0x02
     cb0:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
     cb2:	89 81       	ldd	r24, Y+1	; 0x01
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	3d 83       	std	Y+5, r19	; 0x05
     cba:	2c 83       	std	Y+4, r18	; 0x04
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	9d 81       	ldd	r25, Y+5	; 0x05
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	91 05       	cpc	r25, r1
     cc4:	09 f4       	brne	.+2      	; 0xcc8 <DIO_vidSetPinDir+0x2a>
     cc6:	46 c0       	rjmp	.+140    	; 0xd54 <DIO_vidSetPinDir+0xb6>
     cc8:	2c 81       	ldd	r18, Y+4	; 0x04
     cca:	3d 81       	ldd	r19, Y+5	; 0x05
     ccc:	22 30       	cpi	r18, 0x02	; 2
     cce:	31 05       	cpc	r19, r1
     cd0:	2c f4       	brge	.+10     	; 0xcdc <DIO_vidSetPinDir+0x3e>
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	9d 81       	ldd	r25, Y+5	; 0x05
     cd6:	00 97       	sbiw	r24, 0x00	; 0
     cd8:	71 f0       	breq	.+28     	; 0xcf6 <DIO_vidSetPinDir+0x58>
     cda:	c7 c0       	rjmp	.+398    	; 0xe6a <DIO_vidSetPinDir+0x1cc>
     cdc:	2c 81       	ldd	r18, Y+4	; 0x04
     cde:	3d 81       	ldd	r19, Y+5	; 0x05
     ce0:	22 30       	cpi	r18, 0x02	; 2
     ce2:	31 05       	cpc	r19, r1
     ce4:	09 f4       	brne	.+2      	; 0xce8 <DIO_vidSetPinDir+0x4a>
     ce6:	65 c0       	rjmp	.+202    	; 0xdb2 <DIO_vidSetPinDir+0x114>
     ce8:	8c 81       	ldd	r24, Y+4	; 0x04
     cea:	9d 81       	ldd	r25, Y+5	; 0x05
     cec:	83 30       	cpi	r24, 0x03	; 3
     cee:	91 05       	cpc	r25, r1
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <DIO_vidSetPinDir+0x56>
     cf2:	8e c0       	rjmp	.+284    	; 0xe10 <DIO_vidSetPinDir+0x172>
     cf4:	ba c0       	rjmp	.+372    	; 0xe6a <DIO_vidSetPinDir+0x1cc>
	{
	case 0:
		if(dir==input)
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	88 23       	and	r24, r24
     cfa:	a1 f4       	brne	.+40     	; 0xd24 <DIO_vidSetPinDir+0x86>
			Clr_Bit(DDRA,pin);
     cfc:	aa e3       	ldi	r26, 0x3A	; 58
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	ea e3       	ldi	r30, 0x3A	; 58
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	48 2f       	mov	r20, r24
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 2e       	mov	r0, r18
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <DIO_vidSetPinDir+0x7c>
     d16:	88 0f       	add	r24, r24
     d18:	99 1f       	adc	r25, r25
     d1a:	0a 94       	dec	r0
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <DIO_vidSetPinDir+0x78>
     d1e:	80 95       	com	r24
     d20:	84 23       	and	r24, r20
     d22:	8c 93       	st	X, r24
		if(dir==output)
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	81 30       	cpi	r24, 0x01	; 1
     d28:	09 f0       	breq	.+2      	; 0xd2c <DIO_vidSetPinDir+0x8e>
     d2a:	9f c0       	rjmp	.+318    	; 0xe6a <DIO_vidSetPinDir+0x1cc>
			Set_Bit(DDRA,pin);
     d2c:	aa e3       	ldi	r26, 0x3A	; 58
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	ea e3       	ldi	r30, 0x3A	; 58
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	48 2f       	mov	r20, r24
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	28 2f       	mov	r18, r24
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 2e       	mov	r0, r18
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <DIO_vidSetPinDir+0xac>
     d46:	88 0f       	add	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	0a 94       	dec	r0
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <DIO_vidSetPinDir+0xa8>
     d4e:	84 2b       	or	r24, r20
     d50:	8c 93       	st	X, r24
     d52:	8b c0       	rjmp	.+278    	; 0xe6a <DIO_vidSetPinDir+0x1cc>
		break;

	case 1:
			if(dir==input)
     d54:	8b 81       	ldd	r24, Y+3	; 0x03
     d56:	88 23       	and	r24, r24
     d58:	a1 f4       	brne	.+40     	; 0xd82 <DIO_vidSetPinDir+0xe4>
				Clr_Bit(DDRB,pin);
     d5a:	a7 e3       	ldi	r26, 0x37	; 55
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	e7 e3       	ldi	r30, 0x37	; 55
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	48 2f       	mov	r20, r24
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	02 2e       	mov	r0, r18
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <DIO_vidSetPinDir+0xda>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	0a 94       	dec	r0
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <DIO_vidSetPinDir+0xd6>
     d7c:	80 95       	com	r24
     d7e:	84 23       	and	r24, r20
     d80:	8c 93       	st	X, r24
			if(dir==output)
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	09 f0       	breq	.+2      	; 0xd8a <DIO_vidSetPinDir+0xec>
     d88:	70 c0       	rjmp	.+224    	; 0xe6a <DIO_vidSetPinDir+0x1cc>
				Set_Bit(DDRB,pin);
     d8a:	a7 e3       	ldi	r26, 0x37	; 55
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e7 e3       	ldi	r30, 0x37	; 55
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <DIO_vidSetPinDir+0x10a>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <DIO_vidSetPinDir+0x106>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	5c c0       	rjmp	.+184    	; 0xe6a <DIO_vidSetPinDir+0x1cc>
			break;

	case 2:
			if(dir==input)
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	88 23       	and	r24, r24
     db6:	a1 f4       	brne	.+40     	; 0xde0 <DIO_vidSetPinDir+0x142>
				Clr_Bit(DDRC,pin);
     db8:	a4 e3       	ldi	r26, 0x34	; 52
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e4 e3       	ldi	r30, 0x34	; 52
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	48 2f       	mov	r20, r24
     dc4:	8a 81       	ldd	r24, Y+2	; 0x02
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	02 2e       	mov	r0, r18
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <DIO_vidSetPinDir+0x138>
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	0a 94       	dec	r0
     dd8:	e2 f7       	brpl	.-8      	; 0xdd2 <DIO_vidSetPinDir+0x134>
     dda:	80 95       	com	r24
     ddc:	84 23       	and	r24, r20
     dde:	8c 93       	st	X, r24
			if(dir==output)
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	81 30       	cpi	r24, 0x01	; 1
     de4:	09 f0       	breq	.+2      	; 0xde8 <DIO_vidSetPinDir+0x14a>
     de6:	41 c0       	rjmp	.+130    	; 0xe6a <DIO_vidSetPinDir+0x1cc>
				Set_Bit(DDRC,pin);
     de8:	a4 e3       	ldi	r26, 0x34	; 52
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e4 e3       	ldi	r30, 0x34	; 52
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	48 2f       	mov	r20, r24
     df4:	8a 81       	ldd	r24, Y+2	; 0x02
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	02 2e       	mov	r0, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <DIO_vidSetPinDir+0x168>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	0a 94       	dec	r0
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <DIO_vidSetPinDir+0x164>
     e0a:	84 2b       	or	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	2d c0       	rjmp	.+90     	; 0xe6a <DIO_vidSetPinDir+0x1cc>
			break;

	case 3:
			if(dir==input)
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	88 23       	and	r24, r24
     e14:	a1 f4       	brne	.+40     	; 0xe3e <DIO_vidSetPinDir+0x1a0>
				Clr_Bit(DDRD,pin);
     e16:	a1 e3       	ldi	r26, 0x31	; 49
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e1 e3       	ldi	r30, 0x31	; 49
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_vidSetPinDir+0x196>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_vidSetPinDir+0x192>
     e38:	80 95       	com	r24
     e3a:	84 23       	and	r24, r20
     e3c:	8c 93       	st	X, r24
			if(dir==output)
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	99 f4       	brne	.+38     	; 0xe6a <DIO_vidSetPinDir+0x1cc>
				Set_Bit(DDRD,pin);
     e44:	a1 e3       	ldi	r26, 0x31	; 49
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e1 e3       	ldi	r30, 0x31	; 49
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	48 2f       	mov	r20, r24
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	28 2f       	mov	r18, r24
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	02 2e       	mov	r0, r18
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <DIO_vidSetPinDir+0x1c4>
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	0a 94       	dec	r0
     e64:	e2 f7       	brpl	.-8      	; 0xe5e <DIO_vidSetPinDir+0x1c0>
     e66:	84 2b       	or	r24, r20
     e68:	8c 93       	st	X, r24
			break;
	}
}
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	cf 91       	pop	r28
     e76:	df 91       	pop	r29
     e78:	08 95       	ret

00000e7a <DIO_vidWritePinValue>:

	void DIO_vidWritePinValue (u8 port,u8 pin,u8 value)
	{
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <DIO_vidWritePinValue+0x6>
     e80:	00 d0       	rcall	.+0      	; 0xe82 <DIO_vidWritePinValue+0x8>
     e82:	0f 92       	push	r0
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	89 83       	std	Y+1, r24	; 0x01
     e8a:	6a 83       	std	Y+2, r22	; 0x02
     e8c:	4b 83       	std	Y+3, r20	; 0x03
		switch(port)
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	3d 83       	std	Y+5, r19	; 0x05
     e96:	2c 83       	std	Y+4, r18	; 0x04
     e98:	8c 81       	ldd	r24, Y+4	; 0x04
     e9a:	9d 81       	ldd	r25, Y+5	; 0x05
     e9c:	81 30       	cpi	r24, 0x01	; 1
     e9e:	91 05       	cpc	r25, r1
     ea0:	09 f4       	brne	.+2      	; 0xea4 <DIO_vidWritePinValue+0x2a>
     ea2:	46 c0       	rjmp	.+140    	; 0xf30 <DIO_vidWritePinValue+0xb6>
     ea4:	2c 81       	ldd	r18, Y+4	; 0x04
     ea6:	3d 81       	ldd	r19, Y+5	; 0x05
     ea8:	22 30       	cpi	r18, 0x02	; 2
     eaa:	31 05       	cpc	r19, r1
     eac:	2c f4       	brge	.+10     	; 0xeb8 <DIO_vidWritePinValue+0x3e>
     eae:	8c 81       	ldd	r24, Y+4	; 0x04
     eb0:	9d 81       	ldd	r25, Y+5	; 0x05
     eb2:	00 97       	sbiw	r24, 0x00	; 0
     eb4:	71 f0       	breq	.+28     	; 0xed2 <DIO_vidWritePinValue+0x58>
     eb6:	c7 c0       	rjmp	.+398    	; 0x1046 <DIO_vidWritePinValue+0x1cc>
     eb8:	2c 81       	ldd	r18, Y+4	; 0x04
     eba:	3d 81       	ldd	r19, Y+5	; 0x05
     ebc:	22 30       	cpi	r18, 0x02	; 2
     ebe:	31 05       	cpc	r19, r1
     ec0:	09 f4       	brne	.+2      	; 0xec4 <DIO_vidWritePinValue+0x4a>
     ec2:	65 c0       	rjmp	.+202    	; 0xf8e <DIO_vidWritePinValue+0x114>
     ec4:	8c 81       	ldd	r24, Y+4	; 0x04
     ec6:	9d 81       	ldd	r25, Y+5	; 0x05
     ec8:	83 30       	cpi	r24, 0x03	; 3
     eca:	91 05       	cpc	r25, r1
     ecc:	09 f4       	brne	.+2      	; 0xed0 <DIO_vidWritePinValue+0x56>
     ece:	8e c0       	rjmp	.+284    	; 0xfec <DIO_vidWritePinValue+0x172>
     ed0:	ba c0       	rjmp	.+372    	; 0x1046 <DIO_vidWritePinValue+0x1cc>
		{
		case 0:
			if(value==low)
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	88 23       	and	r24, r24
     ed6:	a1 f4       	brne	.+40     	; 0xf00 <DIO_vidWritePinValue+0x86>
				Clr_Bit(PORTA,pin);
     ed8:	ab e3       	ldi	r26, 0x3B	; 59
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	eb e3       	ldi	r30, 0x3B	; 59
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_vidWritePinValue+0x7c>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_vidWritePinValue+0x78>
     efa:	80 95       	com	r24
     efc:	84 23       	and	r24, r20
     efe:	8c 93       	st	X, r24
			if(value==high)
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	81 30       	cpi	r24, 0x01	; 1
     f04:	09 f0       	breq	.+2      	; 0xf08 <DIO_vidWritePinValue+0x8e>
     f06:	9f c0       	rjmp	.+318    	; 0x1046 <DIO_vidWritePinValue+0x1cc>
				Set_Bit(PORTA,pin);
     f08:	ab e3       	ldi	r26, 0x3B	; 59
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	eb e3       	ldi	r30, 0x3B	; 59
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	48 2f       	mov	r20, r24
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	02 2e       	mov	r0, r18
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_vidWritePinValue+0xac>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	0a 94       	dec	r0
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_vidWritePinValue+0xa8>
     f2a:	84 2b       	or	r24, r20
     f2c:	8c 93       	st	X, r24
     f2e:	8b c0       	rjmp	.+278    	; 0x1046 <DIO_vidWritePinValue+0x1cc>
			break;

		case 1:
				if(value==low)
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	88 23       	and	r24, r24
     f34:	a1 f4       	brne	.+40     	; 0xf5e <DIO_vidWritePinValue+0xe4>
					Clr_Bit(PORTB,pin);
     f36:	a8 e3       	ldi	r26, 0x38	; 56
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e8 e3       	ldi	r30, 0x38	; 56
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_vidWritePinValue+0xda>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <DIO_vidWritePinValue+0xd6>
     f58:	80 95       	com	r24
     f5a:	84 23       	and	r24, r20
     f5c:	8c 93       	st	X, r24
				if(value==high)
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	09 f0       	breq	.+2      	; 0xf66 <DIO_vidWritePinValue+0xec>
     f64:	70 c0       	rjmp	.+224    	; 0x1046 <DIO_vidWritePinValue+0x1cc>
					Set_Bit(PORTB,pin);
     f66:	a8 e3       	ldi	r26, 0x38	; 56
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e8 e3       	ldi	r30, 0x38	; 56
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8a 81       	ldd	r24, Y+2	; 0x02
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <DIO_vidWritePinValue+0x10a>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <DIO_vidWritePinValue+0x106>
     f88:	84 2b       	or	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	5c c0       	rjmp	.+184    	; 0x1046 <DIO_vidWritePinValue+0x1cc>
				break;

		case 2:
				if(value==low)
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	88 23       	and	r24, r24
     f92:	a1 f4       	brne	.+40     	; 0xfbc <DIO_vidWritePinValue+0x142>
					Clr_Bit(PORTC,pin);
     f94:	a5 e3       	ldi	r26, 0x35	; 53
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e5 e3       	ldi	r30, 0x35	; 53
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_vidWritePinValue+0x138>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_vidWritePinValue+0x134>
     fb6:	80 95       	com	r24
     fb8:	84 23       	and	r24, r20
     fba:	8c 93       	st	X, r24
				if(value==high)
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <DIO_vidWritePinValue+0x14a>
     fc2:	41 c0       	rjmp	.+130    	; 0x1046 <DIO_vidWritePinValue+0x1cc>
					Set_Bit(PORTC,pin);
     fc4:	a5 e3       	ldi	r26, 0x35	; 53
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e5 e3       	ldi	r30, 0x35	; 53
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_vidWritePinValue+0x168>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_vidWritePinValue+0x164>
     fe6:	84 2b       	or	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	2d c0       	rjmp	.+90     	; 0x1046 <DIO_vidWritePinValue+0x1cc>
				break;

		case 3:
				if(value==low)
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	88 23       	and	r24, r24
     ff0:	a1 f4       	brne	.+40     	; 0x101a <DIO_vidWritePinValue+0x1a0>
					Clr_Bit(PORTD,pin);
     ff2:	a2 e3       	ldi	r26, 0x32	; 50
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e2 e3       	ldi	r30, 0x32	; 50
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	02 2e       	mov	r0, r18
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <DIO_vidWritePinValue+0x196>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	0a 94       	dec	r0
    1012:	e2 f7       	brpl	.-8      	; 0x100c <DIO_vidWritePinValue+0x192>
    1014:	80 95       	com	r24
    1016:	84 23       	and	r24, r20
    1018:	8c 93       	st	X, r24
				if(value==high)
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	99 f4       	brne	.+38     	; 0x1046 <DIO_vidWritePinValue+0x1cc>
					Set_Bit(PORTD,pin);
    1020:	a2 e3       	ldi	r26, 0x32	; 50
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e2 e3       	ldi	r30, 0x32	; 50
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_vidWritePinValue+0x1c4>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_vidWritePinValue+0x1c0>
    1042:	84 2b       	or	r24, r20
    1044:	8c 93       	st	X, r24
				break;
		}
	}
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <DIO_vidTogglePinValue>:

	void DIO_vidTogglePinValue (u8 port,u8 pin)
		{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <DIO_vidTogglePinValue+0x6>
    105c:	00 d0       	rcall	.+0      	; 0x105e <DIO_vidTogglePinValue+0x8>
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	6a 83       	std	Y+2, r22	; 0x02
			switch(port)
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	3c 83       	std	Y+4, r19	; 0x04
    106e:	2b 83       	std	Y+3, r18	; 0x03
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	91 05       	cpc	r25, r1
    1078:	49 f1       	breq	.+82     	; 0x10cc <DIO_vidTogglePinValue+0x76>
    107a:	2b 81       	ldd	r18, Y+3	; 0x03
    107c:	3c 81       	ldd	r19, Y+4	; 0x04
    107e:	22 30       	cpi	r18, 0x02	; 2
    1080:	31 05       	cpc	r19, r1
    1082:	2c f4       	brge	.+10     	; 0x108e <DIO_vidTogglePinValue+0x38>
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	9c 81       	ldd	r25, Y+4	; 0x04
    1088:	00 97       	sbiw	r24, 0x00	; 0
    108a:	61 f0       	breq	.+24     	; 0x10a4 <DIO_vidTogglePinValue+0x4e>
    108c:	5a c0       	rjmp	.+180    	; 0x1142 <DIO_vidTogglePinValue+0xec>
    108e:	2b 81       	ldd	r18, Y+3	; 0x03
    1090:	3c 81       	ldd	r19, Y+4	; 0x04
    1092:	22 30       	cpi	r18, 0x02	; 2
    1094:	31 05       	cpc	r19, r1
    1096:	71 f1       	breq	.+92     	; 0x10f4 <DIO_vidTogglePinValue+0x9e>
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	9c 81       	ldd	r25, Y+4	; 0x04
    109c:	83 30       	cpi	r24, 0x03	; 3
    109e:	91 05       	cpc	r25, r1
    10a0:	e9 f1       	breq	.+122    	; 0x111c <DIO_vidTogglePinValue+0xc6>
    10a2:	4f c0       	rjmp	.+158    	; 0x1142 <DIO_vidTogglePinValue+0xec>
			{
			case 0:
				           toggle_Bit(PORTA,pin);
    10a4:	ab e3       	ldi	r26, 0x3B	; 59
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	eb e3       	ldi	r30, 0x3B	; 59
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_vidTogglePinValue+0x6c>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_vidTogglePinValue+0x68>
    10c6:	84 27       	eor	r24, r20
    10c8:	8c 93       	st	X, r24
    10ca:	3b c0       	rjmp	.+118    	; 0x1142 <DIO_vidTogglePinValue+0xec>
				           break;

			case 1:
							toggle_Bit(PORTB,pin);
    10cc:	a8 e3       	ldi	r26, 0x38	; 56
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	e8 e3       	ldi	r30, 0x38	; 56
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 2e       	mov	r0, r18
    10e4:	02 c0       	rjmp	.+4      	; 0x10ea <DIO_vidTogglePinValue+0x94>
    10e6:	88 0f       	add	r24, r24
    10e8:	99 1f       	adc	r25, r25
    10ea:	0a 94       	dec	r0
    10ec:	e2 f7       	brpl	.-8      	; 0x10e6 <DIO_vidTogglePinValue+0x90>
    10ee:	84 27       	eor	r24, r20
    10f0:	8c 93       	st	X, r24
    10f2:	27 c0       	rjmp	.+78     	; 0x1142 <DIO_vidTogglePinValue+0xec>
							break;

			case 2:
							toggle_Bit(PORTC,pin);
    10f4:	a5 e3       	ldi	r26, 0x35	; 53
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e5 e3       	ldi	r30, 0x35	; 53
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_vidTogglePinValue+0xbc>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_vidTogglePinValue+0xb8>
    1116:	84 27       	eor	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	13 c0       	rjmp	.+38     	; 0x1142 <DIO_vidTogglePinValue+0xec>
							break;

			case 3:
							toggle_Bit(PORTD,pin);
    111c:	a2 e3       	ldi	r26, 0x32	; 50
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e2 e3       	ldi	r30, 0x32	; 50
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_vidTogglePinValue+0xe4>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_vidTogglePinValue+0xe0>
    113e:	84 27       	eor	r24, r20
    1140:	8c 93       	st	X, r24
							break;
			}
		}
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	08 95       	ret

00001150 <DIO_u8ReadPinValue>:


	u8 DIO_u8ReadPinValue(u8 port, u8 pin)
	{
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	00 d0       	rcall	.+0      	; 0x1156 <DIO_u8ReadPinValue+0x6>
    1156:	00 d0       	rcall	.+0      	; 0x1158 <DIO_u8ReadPinValue+0x8>
    1158:	0f 92       	push	r0
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	6a 83       	std	Y+2, r22	; 0x02
		switch(port)
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	3d 83       	std	Y+5, r19	; 0x05
    116a:	2c 83       	std	Y+4, r18	; 0x04
    116c:	4c 81       	ldd	r20, Y+4	; 0x04
    116e:	5d 81       	ldd	r21, Y+5	; 0x05
    1170:	41 30       	cpi	r20, 0x01	; 1
    1172:	51 05       	cpc	r21, r1
    1174:	b1 f1       	breq	.+108    	; 0x11e2 <DIO_u8ReadPinValue+0x92>
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	9d 81       	ldd	r25, Y+5	; 0x05
    117a:	82 30       	cpi	r24, 0x02	; 2
    117c:	91 05       	cpc	r25, r1
    117e:	34 f4       	brge	.+12     	; 0x118c <DIO_u8ReadPinValue+0x3c>
    1180:	2c 81       	ldd	r18, Y+4	; 0x04
    1182:	3d 81       	ldd	r19, Y+5	; 0x05
    1184:	21 15       	cp	r18, r1
    1186:	31 05       	cpc	r19, r1
    1188:	71 f0       	breq	.+28     	; 0x11a6 <DIO_u8ReadPinValue+0x56>
    118a:	85 c0       	rjmp	.+266    	; 0x1296 <DIO_u8ReadPinValue+0x146>
    118c:	4c 81       	ldd	r20, Y+4	; 0x04
    118e:	5d 81       	ldd	r21, Y+5	; 0x05
    1190:	42 30       	cpi	r20, 0x02	; 2
    1192:	51 05       	cpc	r21, r1
    1194:	09 f4       	brne	.+2      	; 0x1198 <DIO_u8ReadPinValue+0x48>
    1196:	43 c0       	rjmp	.+134    	; 0x121e <DIO_u8ReadPinValue+0xce>
    1198:	8c 81       	ldd	r24, Y+4	; 0x04
    119a:	9d 81       	ldd	r25, Y+5	; 0x05
    119c:	83 30       	cpi	r24, 0x03	; 3
    119e:	91 05       	cpc	r25, r1
    11a0:	09 f4       	brne	.+2      	; 0x11a4 <DIO_u8ReadPinValue+0x54>
    11a2:	5b c0       	rjmp	.+182    	; 0x125a <DIO_u8ReadPinValue+0x10a>
    11a4:	78 c0       	rjmp	.+240    	; 0x1296 <DIO_u8ReadPinValue+0x146>
		{
		case a:
			return Get_Bit(PINA,pin);
    11a6:	e9 e3       	ldi	r30, 0x39	; 57
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	48 2f       	mov	r20, r24
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <DIO_u8ReadPinValue+0x70>
    11bc:	88 0f       	add	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	2a 95       	dec	r18
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <DIO_u8ReadPinValue+0x6c>
    11c4:	9a 01       	movw	r18, r20
    11c6:	28 23       	and	r18, r24
    11c8:	39 23       	and	r19, r25
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	a9 01       	movw	r20, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <DIO_u8ReadPinValue+0x88>
    11d4:	55 95       	asr	r21
    11d6:	47 95       	ror	r20
    11d8:	8a 95       	dec	r24
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <DIO_u8ReadPinValue+0x84>
    11dc:	ca 01       	movw	r24, r20
    11de:	8b 83       	std	Y+3, r24	; 0x03
    11e0:	5c c0       	rjmp	.+184    	; 0x129a <DIO_u8ReadPinValue+0x14a>
			break;
		case b:
			return Get_Bit(PINB,pin);
    11e2:	e6 e3       	ldi	r30, 0x36	; 54
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	48 2f       	mov	r20, r24
    11ea:	50 e0       	ldi	r21, 0x00	; 0
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	02 c0       	rjmp	.+4      	; 0x11fc <DIO_u8ReadPinValue+0xac>
    11f8:	88 0f       	add	r24, r24
    11fa:	99 1f       	adc	r25, r25
    11fc:	2a 95       	dec	r18
    11fe:	e2 f7       	brpl	.-8      	; 0x11f8 <DIO_u8ReadPinValue+0xa8>
    1200:	9a 01       	movw	r18, r20
    1202:	28 23       	and	r18, r24
    1204:	39 23       	and	r19, r25
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	88 2f       	mov	r24, r24
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	a9 01       	movw	r20, r18
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <DIO_u8ReadPinValue+0xc4>
    1210:	55 95       	asr	r21
    1212:	47 95       	ror	r20
    1214:	8a 95       	dec	r24
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <DIO_u8ReadPinValue+0xc0>
    1218:	ca 01       	movw	r24, r20
    121a:	8b 83       	std	Y+3, r24	; 0x03
    121c:	3e c0       	rjmp	.+124    	; 0x129a <DIO_u8ReadPinValue+0x14a>
			break;
		case c:
			return Get_Bit(PINC,pin);
    121e:	e3 e3       	ldi	r30, 0x33	; 51
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <DIO_u8ReadPinValue+0xe8>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	2a 95       	dec	r18
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <DIO_u8ReadPinValue+0xe4>
    123c:	9a 01       	movw	r18, r20
    123e:	28 23       	and	r18, r24
    1240:	39 23       	and	r19, r25
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	88 2f       	mov	r24, r24
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	a9 01       	movw	r20, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_u8ReadPinValue+0x100>
    124c:	55 95       	asr	r21
    124e:	47 95       	ror	r20
    1250:	8a 95       	dec	r24
    1252:	e2 f7       	brpl	.-8      	; 0x124c <DIO_u8ReadPinValue+0xfc>
    1254:	ca 01       	movw	r24, r20
    1256:	8b 83       	std	Y+3, r24	; 0x03
    1258:	20 c0       	rjmp	.+64     	; 0x129a <DIO_u8ReadPinValue+0x14a>
			break;
		case d:
			return Get_Bit(PIND,pin);
    125a:	e0 e3       	ldi	r30, 0x30	; 48
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <DIO_u8ReadPinValue+0x124>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	2a 95       	dec	r18
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <DIO_u8ReadPinValue+0x120>
    1278:	9a 01       	movw	r18, r20
    127a:	28 23       	and	r18, r24
    127c:	39 23       	and	r19, r25
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	88 2f       	mov	r24, r24
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	a9 01       	movw	r20, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <DIO_u8ReadPinValue+0x13c>
    1288:	55 95       	asr	r21
    128a:	47 95       	ror	r20
    128c:	8a 95       	dec	r24
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <DIO_u8ReadPinValue+0x138>
    1290:	ca 01       	movw	r24, r20
    1292:	8b 83       	std	Y+3, r24	; 0x03
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_u8ReadPinValue+0x14a>
			break;
		default :
			return port;
    1296:	59 81       	ldd	r21, Y+1	; 0x01
    1298:	5b 83       	std	Y+3, r21	; 0x03
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
			break;
		}


	}
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <DIO_vidSetPortDir>:

	void DIO_vidSetPortDir(u8 port, u8 Dir)
		{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <DIO_vidSetPortDir+0x6>
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <DIO_vidSetPortDir+0x8>
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	6a 83       	std	Y+2, r22	; 0x02
			switch(port)
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	3c 83       	std	Y+4, r19	; 0x04
    12c4:	2b 83       	std	Y+3, r18	; 0x03
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	91 05       	cpc	r25, r1
    12ce:	d1 f0       	breq	.+52     	; 0x1304 <DIO_vidSetPortDir+0x58>
    12d0:	2b 81       	ldd	r18, Y+3	; 0x03
    12d2:	3c 81       	ldd	r19, Y+4	; 0x04
    12d4:	22 30       	cpi	r18, 0x02	; 2
    12d6:	31 05       	cpc	r19, r1
    12d8:	2c f4       	brge	.+10     	; 0x12e4 <DIO_vidSetPortDir+0x38>
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	61 f0       	breq	.+24     	; 0x12fa <DIO_vidSetPortDir+0x4e>
    12e2:	1e c0       	rjmp	.+60     	; 0x1320 <DIO_vidSetPortDir+0x74>
    12e4:	2b 81       	ldd	r18, Y+3	; 0x03
    12e6:	3c 81       	ldd	r19, Y+4	; 0x04
    12e8:	22 30       	cpi	r18, 0x02	; 2
    12ea:	31 05       	cpc	r19, r1
    12ec:	81 f0       	breq	.+32     	; 0x130e <DIO_vidSetPortDir+0x62>
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	9c 81       	ldd	r25, Y+4	; 0x04
    12f2:	83 30       	cpi	r24, 0x03	; 3
    12f4:	91 05       	cpc	r25, r1
    12f6:	81 f0       	breq	.+32     	; 0x1318 <DIO_vidSetPortDir+0x6c>
    12f8:	13 c0       	rjmp	.+38     	; 0x1320 <DIO_vidSetPortDir+0x74>
			{
			case a:
				DDRA=Dir;
    12fa:	ea e3       	ldi	r30, 0x3A	; 58
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	80 83       	st	Z, r24
    1302:	0e c0       	rjmp	.+28     	; 0x1320 <DIO_vidSetPortDir+0x74>
				break;
			case b:
				DDRB=Dir;
    1304:	e7 e3       	ldi	r30, 0x37	; 55
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	80 83       	st	Z, r24
    130c:	09 c0       	rjmp	.+18     	; 0x1320 <DIO_vidSetPortDir+0x74>
				break;
			case c:
				DDRC=Dir;
    130e:	e4 e3       	ldi	r30, 0x34	; 52
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	80 83       	st	Z, r24
    1316:	04 c0       	rjmp	.+8      	; 0x1320 <DIO_vidSetPortDir+0x74>
				break;
			case d:
				DDRD=Dir;
    1318:	e1 e3       	ldi	r30, 0x31	; 49
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	80 83       	st	Z, r24
				break;

			}


		}
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <DIO_vidWritePortValue>:

	void DIO_vidWritePortValue(u8 port, u8 Value)
			{
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	00 d0       	rcall	.+0      	; 0x1334 <DIO_vidWritePortValue+0x6>
    1334:	00 d0       	rcall	.+0      	; 0x1336 <DIO_vidWritePortValue+0x8>
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	6a 83       	std	Y+2, r22	; 0x02
				switch(port)
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	3c 83       	std	Y+4, r19	; 0x04
    1346:	2b 83       	std	Y+3, r18	; 0x03
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	91 05       	cpc	r25, r1
    1350:	d1 f0       	breq	.+52     	; 0x1386 <DIO_vidWritePortValue+0x58>
    1352:	2b 81       	ldd	r18, Y+3	; 0x03
    1354:	3c 81       	ldd	r19, Y+4	; 0x04
    1356:	22 30       	cpi	r18, 0x02	; 2
    1358:	31 05       	cpc	r19, r1
    135a:	2c f4       	brge	.+10     	; 0x1366 <DIO_vidWritePortValue+0x38>
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	9c 81       	ldd	r25, Y+4	; 0x04
    1360:	00 97       	sbiw	r24, 0x00	; 0
    1362:	61 f0       	breq	.+24     	; 0x137c <DIO_vidWritePortValue+0x4e>
    1364:	1e c0       	rjmp	.+60     	; 0x13a2 <DIO_vidWritePortValue+0x74>
    1366:	2b 81       	ldd	r18, Y+3	; 0x03
    1368:	3c 81       	ldd	r19, Y+4	; 0x04
    136a:	22 30       	cpi	r18, 0x02	; 2
    136c:	31 05       	cpc	r19, r1
    136e:	81 f0       	breq	.+32     	; 0x1390 <DIO_vidWritePortValue+0x62>
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	91 05       	cpc	r25, r1
    1378:	81 f0       	breq	.+32     	; 0x139a <DIO_vidWritePortValue+0x6c>
    137a:	13 c0       	rjmp	.+38     	; 0x13a2 <DIO_vidWritePortValue+0x74>
				{
				case a:
					PORTA=Value;
    137c:	eb e3       	ldi	r30, 0x3B	; 59
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	80 83       	st	Z, r24
    1384:	0e c0       	rjmp	.+28     	; 0x13a2 <DIO_vidWritePortValue+0x74>
					break;
				case b:
					PORTB=Value;
    1386:	e8 e3       	ldi	r30, 0x38	; 56
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	80 83       	st	Z, r24
    138e:	09 c0       	rjmp	.+18     	; 0x13a2 <DIO_vidWritePortValue+0x74>
					break;
				case c:
					PORTC=Value;
    1390:	e5 e3       	ldi	r30, 0x35	; 53
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	80 83       	st	Z, r24
    1398:	04 c0       	rjmp	.+8      	; 0x13a2 <DIO_vidWritePortValue+0x74>
					break;
				case d:
					PORTD=Value;
    139a:	e2 e3       	ldi	r30, 0x32	; 50
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	80 83       	st	Z, r24
					break;

				}


			}
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <SEG_vidInit>:
#include "registers.h"
#include "DIO.h"
#include "SEG_CFG.h"

void SEG_vidInit(void)
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	cd b7       	in	r28, 0x3d	; 61
    13b6:	de b7       	in	r29, 0x3e	; 62
	DIO_vidSetPortDir(port1,0xff); // SEG 1 DDRA = 0xff;
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	6f ef       	ldi	r22, 0xFF	; 255
    13bc:	0e 94 56 09 	call	0x12ac	; 0x12ac <DIO_vidSetPortDir>
  	DIO_vidSetPortDir(port2,0xff); // SEG2  DDRD = 0xff;
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	6f ef       	ldi	r22, 0xFF	; 255
    13c4:	0e 94 56 09 	call	0x12ac	; 0x12ac <DIO_vidSetPortDir>
}
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <SEG_vidDisplayNO>:


void SEG_vidDisplayNO(u8 number1_seg1)
{
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	cd b7       	in	r28, 0x3d	; 61
    13d4:	de b7       	in	r29, 0x3e	; 62
    13d6:	2c 97       	sbiw	r28, 0x0c	; 12
    13d8:	0f b6       	in	r0, 0x3f	; 63
    13da:	f8 94       	cli
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	0f be       	out	0x3f, r0	; 63
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	8c 87       	std	Y+12, r24	; 0x0c
 u8 numbers[11]={0b00000011,0b10011111,0b00100101,0b00001101,0b10011001,0b01001001,0b01000001,0b00011111,0b00000001,0b00001001};
    13e4:	8b e0       	ldi	r24, 0x0B	; 11
    13e6:	fe 01       	movw	r30, r28
    13e8:	31 96       	adiw	r30, 0x01	; 1
    13ea:	df 01       	movw	r26, r30
    13ec:	98 2f       	mov	r25, r24
    13ee:	1d 92       	st	X+, r1
    13f0:	9a 95       	dec	r25
    13f2:	e9 f7       	brne	.-6      	; 0x13ee <SEG_vidDisplayNO+0x20>
    13f4:	83 e0       	ldi	r24, 0x03	; 3
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	8f e9       	ldi	r24, 0x9F	; 159
    13fa:	8a 83       	std	Y+2, r24	; 0x02
    13fc:	85 e2       	ldi	r24, 0x25	; 37
    13fe:	8b 83       	std	Y+3, r24	; 0x03
    1400:	8d e0       	ldi	r24, 0x0D	; 13
    1402:	8c 83       	std	Y+4, r24	; 0x04
    1404:	89 e9       	ldi	r24, 0x99	; 153
    1406:	8d 83       	std	Y+5, r24	; 0x05
    1408:	89 e4       	ldi	r24, 0x49	; 73
    140a:	8e 83       	std	Y+6, r24	; 0x06
    140c:	81 e4       	ldi	r24, 0x41	; 65
    140e:	8f 83       	std	Y+7, r24	; 0x07
    1410:	8f e1       	ldi	r24, 0x1F	; 31
    1412:	88 87       	std	Y+8, r24	; 0x08
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	89 87       	std	Y+9, r24	; 0x09
    1418:	89 e0       	ldi	r24, 0x09	; 9
    141a:	8a 87       	std	Y+10, r24	; 0x0a


 DIO_vidWritePortValue(port1,numbers[number1_seg1]);
    141c:	8c 85       	ldd	r24, Y+12	; 0x0c
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	ce 01       	movw	r24, r28
    1424:	01 96       	adiw	r24, 0x01	; 1
    1426:	fc 01       	movw	r30, r24
    1428:	e2 0f       	add	r30, r18
    142a:	f3 1f       	adc	r31, r19
    142c:	90 81       	ld	r25, Z
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	69 2f       	mov	r22, r25
    1432:	0e 94 97 09 	call	0x132e	; 0x132e <DIO_vidWritePortValue>


}
    1436:	2c 96       	adiw	r28, 0x0c	; 12
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <SEG_vidCount>:

void SEG_vidCount (u8 start1,u8 start2 ,u8 seg1_stop,u8 seg2_stop)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	6f 97       	sbiw	r28, 0x1f	; 31
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
    145c:	8c 8f       	std	Y+28, r24	; 0x1c
    145e:	6d 8f       	std	Y+29, r22	; 0x1d
    1460:	4e 8f       	std	Y+30, r20	; 0x1e
    1462:	2f 8f       	std	Y+31, r18	; 0x1f
	 u8 numbers[11]={0b00000011,0b10011111,0b00100101,0b00001101,0b10011001,0b01001001,0b01000001,0b00011111,0b00000001,0b00001001};
    1464:	8b e0       	ldi	r24, 0x0B	; 11
    1466:	fe 01       	movw	r30, r28
    1468:	71 96       	adiw	r30, 0x11	; 17
    146a:	df 01       	movw	r26, r30
    146c:	98 2f       	mov	r25, r24
    146e:	1d 92       	st	X+, r1
    1470:	9a 95       	dec	r25
    1472:	e9 f7       	brne	.-6      	; 0x146e <SEG_vidCount+0x26>
    1474:	83 e0       	ldi	r24, 0x03	; 3
    1476:	89 8b       	std	Y+17, r24	; 0x11
    1478:	8f e9       	ldi	r24, 0x9F	; 159
    147a:	8a 8b       	std	Y+18, r24	; 0x12
    147c:	85 e2       	ldi	r24, 0x25	; 37
    147e:	8b 8b       	std	Y+19, r24	; 0x13
    1480:	8d e0       	ldi	r24, 0x0D	; 13
    1482:	8c 8b       	std	Y+20, r24	; 0x14
    1484:	89 e9       	ldi	r24, 0x99	; 153
    1486:	8d 8b       	std	Y+21, r24	; 0x15
    1488:	89 e4       	ldi	r24, 0x49	; 73
    148a:	8e 8b       	std	Y+22, r24	; 0x16
    148c:	81 e4       	ldi	r24, 0x41	; 65
    148e:	8f 8b       	std	Y+23, r24	; 0x17
    1490:	8f e1       	ldi	r24, 0x1F	; 31
    1492:	88 8f       	std	Y+24, r24	; 0x18
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	89 8f       	std	Y+25, r24	; 0x19
    1498:	89 e0       	ldi	r24, 0x09	; 9
    149a:	8a 8f       	std	Y+26, r24	; 0x1a
     u8 i,j;
	for(i=start1;i<10;i++)
    149c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    149e:	88 8b       	std	Y+16, r24	; 0x10
    14a0:	a6 c0       	rjmp	.+332    	; 0x15ee <SEG_vidCount+0x1a6>
	       {
	    	   DIO_vidWritePortValue(port1,numbers[i]);
    14a2:	88 89       	ldd	r24, Y+16	; 0x10
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	ce 01       	movw	r24, r28
    14aa:	41 96       	adiw	r24, 0x11	; 17
    14ac:	fc 01       	movw	r30, r24
    14ae:	e2 0f       	add	r30, r18
    14b0:	f3 1f       	adc	r31, r19
    14b2:	90 81       	ld	r25, Z
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	69 2f       	mov	r22, r25
    14b8:	0e 94 97 09 	call	0x132e	; 0x132e <DIO_vidWritePortValue>

	    	   for(j=start2;j<10;j++)
    14bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14be:	8f 87       	std	Y+15, r24	; 0x0f
    14c0:	8f c0       	rjmp	.+286    	; 0x15e0 <SEG_vidCount+0x198>
	    	   {
		    	   DIO_vidWritePortValue (port2,numbers[j]);
    14c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	ce 01       	movw	r24, r28
    14ca:	41 96       	adiw	r24, 0x11	; 17
    14cc:	fc 01       	movw	r30, r24
    14ce:	e2 0f       	add	r30, r18
    14d0:	f3 1f       	adc	r31, r19
    14d2:	90 81       	ld	r25, Z
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	69 2f       	mov	r22, r25
    14d8:	0e 94 97 09 	call	0x132e	; 0x132e <DIO_vidWritePortValue>
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	aa e7       	ldi	r26, 0x7A	; 122
    14e2:	b4 e4       	ldi	r27, 0x44	; 68
    14e4:	8b 87       	std	Y+11, r24	; 0x0b
    14e6:	9c 87       	std	Y+12, r25	; 0x0c
    14e8:	ad 87       	std	Y+13, r26	; 0x0d
    14ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    14f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	4a ef       	ldi	r20, 0xFA	; 250
    14fa:	54 e4       	ldi	r21, 0x44	; 68
    14fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	8f 83       	std	Y+7, r24	; 0x07
    1506:	98 87       	std	Y+8, r25	; 0x08
    1508:	a9 87       	std	Y+9, r26	; 0x09
    150a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    150c:	6f 81       	ldd	r22, Y+7	; 0x07
    150e:	78 85       	ldd	r23, Y+8	; 0x08
    1510:	89 85       	ldd	r24, Y+9	; 0x09
    1512:	9a 85       	ldd	r25, Y+10	; 0x0a
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e8       	ldi	r20, 0x80	; 128
    151a:	5f e3       	ldi	r21, 0x3F	; 63
    151c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1520:	88 23       	and	r24, r24
    1522:	2c f4       	brge	.+10     	; 0x152e <SEG_vidCount+0xe6>
		__ticks = 1;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	9e 83       	std	Y+6, r25	; 0x06
    152a:	8d 83       	std	Y+5, r24	; 0x05
    152c:	3f c0       	rjmp	.+126    	; 0x15ac <SEG_vidCount+0x164>
	else if (__tmp > 65535)
    152e:	6f 81       	ldd	r22, Y+7	; 0x07
    1530:	78 85       	ldd	r23, Y+8	; 0x08
    1532:	89 85       	ldd	r24, Y+9	; 0x09
    1534:	9a 85       	ldd	r25, Y+10	; 0x0a
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	3f ef       	ldi	r19, 0xFF	; 255
    153a:	4f e7       	ldi	r20, 0x7F	; 127
    153c:	57 e4       	ldi	r21, 0x47	; 71
    153e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1542:	18 16       	cp	r1, r24
    1544:	4c f5       	brge	.+82     	; 0x1598 <SEG_vidCount+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1546:	6b 85       	ldd	r22, Y+11	; 0x0b
    1548:	7c 85       	ldd	r23, Y+12	; 0x0c
    154a:	8d 85       	ldd	r24, Y+13	; 0x0d
    154c:	9e 85       	ldd	r25, Y+14	; 0x0e
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e2       	ldi	r20, 0x20	; 32
    1554:	51 e4       	ldi	r21, 0x41	; 65
    1556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	bc 01       	movw	r22, r24
    1560:	cd 01       	movw	r24, r26
    1562:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	9e 83       	std	Y+6, r25	; 0x06
    156c:	8d 83       	std	Y+5, r24	; 0x05
    156e:	0f c0       	rjmp	.+30     	; 0x158e <SEG_vidCount+0x146>
    1570:	88 ec       	ldi	r24, 0xC8	; 200
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	9c 83       	std	Y+4, r25	; 0x04
    1576:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	f1 f7       	brne	.-4      	; 0x157c <SEG_vidCount+0x134>
    1580:	9c 83       	std	Y+4, r25	; 0x04
    1582:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
    1586:	9e 81       	ldd	r25, Y+6	; 0x06
    1588:	01 97       	sbiw	r24, 0x01	; 1
    158a:	9e 83       	std	Y+6, r25	; 0x06
    158c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    158e:	8d 81       	ldd	r24, Y+5	; 0x05
    1590:	9e 81       	ldd	r25, Y+6	; 0x06
    1592:	00 97       	sbiw	r24, 0x00	; 0
    1594:	69 f7       	brne	.-38     	; 0x1570 <SEG_vidCount+0x128>
    1596:	14 c0       	rjmp	.+40     	; 0x15c0 <SEG_vidCount+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1598:	6f 81       	ldd	r22, Y+7	; 0x07
    159a:	78 85       	ldd	r23, Y+8	; 0x08
    159c:	89 85       	ldd	r24, Y+9	; 0x09
    159e:	9a 85       	ldd	r25, Y+10	; 0x0a
    15a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	9e 83       	std	Y+6, r25	; 0x06
    15aa:	8d 83       	std	Y+5, r24	; 0x05
    15ac:	8d 81       	ldd	r24, Y+5	; 0x05
    15ae:	9e 81       	ldd	r25, Y+6	; 0x06
    15b0:	9a 83       	std	Y+2, r25	; 0x02
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	9a 81       	ldd	r25, Y+2	; 0x02
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	f1 f7       	brne	.-4      	; 0x15b8 <SEG_vidCount+0x170>
    15bc:	9a 83       	std	Y+2, r25	; 0x02
    15be:	89 83       	std	Y+1, r24	; 0x01
	    		   _delay_ms(1000);

	    		   if(i==seg1_stop && j==seg2_stop) //write count you want to stop at
    15c0:	98 89       	ldd	r25, Y+16	; 0x10
    15c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15c4:	98 17       	cp	r25, r24
    15c6:	39 f4       	brne	.+14     	; 0x15d6 <SEG_vidCount+0x18e>
    15c8:	9f 85       	ldd	r25, Y+15	; 0x0f
    15ca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15cc:	98 17       	cp	r25, r24
    15ce:	19 f4       	brne	.+6      	; 0x15d6 <SEG_vidCount+0x18e>
	    		   {
	    			  i=9; //get out of loop 1
    15d0:	89 e0       	ldi	r24, 0x09	; 9
    15d2:	88 8b       	std	Y+16, r24	; 0x10
    15d4:	09 c0       	rjmp	.+18     	; 0x15e8 <SEG_vidCount+0x1a0>
	    		      break; // get out of loop 2
	    		   }
	    		   start1=0;
    15d6:	1c 8e       	std	Y+28, r1	; 0x1c
	    		   start2=0;
    15d8:	1d 8e       	std	Y+29, r1	; 0x1d
     u8 i,j;
	for(i=start1;i<10;i++)
	       {
	    	   DIO_vidWritePortValue(port1,numbers[i]);

	    	   for(j=start2;j<10;j++)
    15da:	8f 85       	ldd	r24, Y+15	; 0x0f
    15dc:	8f 5f       	subi	r24, 0xFF	; 255
    15de:	8f 87       	std	Y+15, r24	; 0x0f
    15e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e2:	8a 30       	cpi	r24, 0x0A	; 10
    15e4:	08 f4       	brcc	.+2      	; 0x15e8 <SEG_vidCount+0x1a0>
    15e6:	6d cf       	rjmp	.-294    	; 0x14c2 <SEG_vidCount+0x7a>

void SEG_vidCount (u8 start1,u8 start2 ,u8 seg1_stop,u8 seg2_stop)
{
	 u8 numbers[11]={0b00000011,0b10011111,0b00100101,0b00001101,0b10011001,0b01001001,0b01000001,0b00011111,0b00000001,0b00001001};
     u8 i,j;
	for(i=start1;i<10;i++)
    15e8:	88 89       	ldd	r24, Y+16	; 0x10
    15ea:	8f 5f       	subi	r24, 0xFF	; 255
    15ec:	88 8b       	std	Y+16, r24	; 0x10
    15ee:	88 89       	ldd	r24, Y+16	; 0x10
    15f0:	8a 30       	cpi	r24, 0x0A	; 10
    15f2:	08 f4       	brcc	.+2      	; 0x15f6 <SEG_vidCount+0x1ae>
    15f4:	56 cf       	rjmp	.-340    	; 0x14a2 <SEG_vidCount+0x5a>
	    		   start2=0;
	    	   }


	       }
}
    15f6:	6f 96       	adiw	r28, 0x1f	; 31
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	cd bf       	out	0x3d, r28	; 61
    1602:	cf 91       	pop	r28
    1604:	df 91       	pop	r29
    1606:	08 95       	ret

00001608 <CLK_vidInit>:
extern u32 overflow ;
extern u32 min;
extern u32 hr;

void CLK_vidInit(void)
{
    1608:	df 93       	push	r29
    160a:	cf 93       	push	r28
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
	    timer_vidInit();
    1610:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <timer_vidInit>
	    LCD_Gotoxy(1,1);
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	61 e0       	ldi	r22, 0x01	; 1
    1618:	0e 94 96 14 	call	0x292c	; 0x292c <LCD_Gotoxy>
	    LCD_String("hr");
    161c:	80 e6       	ldi	r24, 0x60	; 96
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_String>
	    LCD_Gotoxy(1,6);
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	66 e0       	ldi	r22, 0x06	; 6
    1628:	0e 94 96 14 	call	0x292c	; 0x292c <LCD_Gotoxy>
	    LCD_String("min");
    162c:	83 e6       	ldi	r24, 0x63	; 99
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_String>
	    LCD_Gotoxy(1,11);
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	6b e0       	ldi	r22, 0x0B	; 11
    1638:	0e 94 96 14 	call	0x292c	; 0x292c <LCD_Gotoxy>
	    LCD_String("sec") ;
    163c:	87 e6       	ldi	r24, 0x67	; 103
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_String>

	    LCD_Gotoxy(2,1);
    1644:	82 e0       	ldi	r24, 0x02	; 2
    1646:	61 e0       	ldi	r22, 0x01	; 1
    1648:	0e 94 96 14 	call	0x292c	; 0x292c <LCD_Gotoxy>
	    LCD_String("   :    :   ");
    164c:	8b e6       	ldi	r24, 0x6B	; 107
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_String>
	    LCD_Gotoxy(2,11);
    1654:	82 e0       	ldi	r24, 0x02	; 2
    1656:	6b e0       	ldi	r22, 0x0B	; 11
    1658:	0e 94 96 14 	call	0x292c	; 0x292c <LCD_Gotoxy>
	    LCD_vidWriteInteger(overflow);
    165c:	80 91 83 00 	lds	r24, 0x0083
    1660:	90 91 84 00 	lds	r25, 0x0084
    1664:	a0 91 85 00 	lds	r26, 0x0085
    1668:	b0 91 86 00 	lds	r27, 0x0086
    166c:	bc 01       	movw	r22, r24
    166e:	cd 01       	movw	r24, r26
    1670:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <LCD_vidWriteInteger>
	    LCD_Gotoxy(2,6);
    1674:	82 e0       	ldi	r24, 0x02	; 2
    1676:	66 e0       	ldi	r22, 0x06	; 6
    1678:	0e 94 96 14 	call	0x292c	; 0x292c <LCD_Gotoxy>
	   	LCD_vidWriteInteger(min);
    167c:	80 91 8c 00 	lds	r24, 0x008C
    1680:	90 91 8d 00 	lds	r25, 0x008D
    1684:	a0 91 8e 00 	lds	r26, 0x008E
    1688:	b0 91 8f 00 	lds	r27, 0x008F
    168c:	bc 01       	movw	r22, r24
    168e:	cd 01       	movw	r24, r26
    1690:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <LCD_vidWriteInteger>
	   	LCD_Gotoxy(2,1);
    1694:	82 e0       	ldi	r24, 0x02	; 2
    1696:	61 e0       	ldi	r22, 0x01	; 1
    1698:	0e 94 96 14 	call	0x292c	; 0x292c <LCD_Gotoxy>
	   	LCD_vidWriteInteger(hr);
    169c:	80 91 87 00 	lds	r24, 0x0087
    16a0:	90 91 88 00 	lds	r25, 0x0088
    16a4:	a0 91 89 00 	lds	r26, 0x0089
    16a8:	b0 91 8a 00 	lds	r27, 0x008A
    16ac:	bc 01       	movw	r22, r24
    16ae:	cd 01       	movw	r24, r26
    16b0:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <LCD_vidWriteInteger>
}
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	08 95       	ret

000016ba <CLK_vidStart>:

void CLK_vidStart(void)
{
    16ba:	df 93       	push	r29
    16bc:	cf 93       	push	r28
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
	//			  }
	//		 if(overflow==10)
	//		 {
	//			 overflow=0;
	//		 }
			 if(counter==3906 && overflow<60)
    16c2:	80 91 90 00 	lds	r24, 0x0090
    16c6:	90 91 91 00 	lds	r25, 0x0091
    16ca:	a0 91 92 00 	lds	r26, 0x0092
    16ce:	b0 91 93 00 	lds	r27, 0x0093
    16d2:	82 34       	cpi	r24, 0x42	; 66
    16d4:	2f e0       	ldi	r18, 0x0F	; 15
    16d6:	92 07       	cpc	r25, r18
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	a2 07       	cpc	r26, r18
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	b2 07       	cpc	r27, r18
    16e0:	c1 f5       	brne	.+112    	; 0x1752 <CLK_vidStart+0x98>
    16e2:	80 91 83 00 	lds	r24, 0x0083
    16e6:	90 91 84 00 	lds	r25, 0x0084
    16ea:	a0 91 85 00 	lds	r26, 0x0085
    16ee:	b0 91 86 00 	lds	r27, 0x0086
    16f2:	8c 33       	cpi	r24, 0x3C	; 60
    16f4:	91 05       	cpc	r25, r1
    16f6:	a1 05       	cpc	r26, r1
    16f8:	b1 05       	cpc	r27, r1
    16fa:	58 f5       	brcc	.+86     	; 0x1752 <CLK_vidStart+0x98>
			   { overflow++ ;
    16fc:	80 91 83 00 	lds	r24, 0x0083
    1700:	90 91 84 00 	lds	r25, 0x0084
    1704:	a0 91 85 00 	lds	r26, 0x0085
    1708:	b0 91 86 00 	lds	r27, 0x0086
    170c:	01 96       	adiw	r24, 0x01	; 1
    170e:	a1 1d       	adc	r26, r1
    1710:	b1 1d       	adc	r27, r1
    1712:	80 93 83 00 	sts	0x0083, r24
    1716:	90 93 84 00 	sts	0x0084, r25
    171a:	a0 93 85 00 	sts	0x0085, r26
    171e:	b0 93 86 00 	sts	0x0086, r27
				 LCD_Gotoxy(2,11);
    1722:	82 e0       	ldi	r24, 0x02	; 2
    1724:	6b e0       	ldi	r22, 0x0B	; 11
    1726:	0e 94 96 14 	call	0x292c	; 0x292c <LCD_Gotoxy>
				 LCD_vidWriteInteger(overflow);
    172a:	80 91 83 00 	lds	r24, 0x0083
    172e:	90 91 84 00 	lds	r25, 0x0084
    1732:	a0 91 85 00 	lds	r26, 0x0085
    1736:	b0 91 86 00 	lds	r27, 0x0086
    173a:	bc 01       	movw	r22, r24
    173c:	cd 01       	movw	r24, r26
    173e:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <LCD_vidWriteInteger>


			   counter=0;
    1742:	10 92 90 00 	sts	0x0090, r1
    1746:	10 92 91 00 	sts	0x0091, r1
    174a:	10 92 92 00 	sts	0x0092, r1
    174e:	10 92 93 00 	sts	0x0093, r1
		      }
			 if(overflow==60 && min<60)
    1752:	80 91 83 00 	lds	r24, 0x0083
    1756:	90 91 84 00 	lds	r25, 0x0084
    175a:	a0 91 85 00 	lds	r26, 0x0085
    175e:	b0 91 86 00 	lds	r27, 0x0086
    1762:	8c 33       	cpi	r24, 0x3C	; 60
    1764:	91 05       	cpc	r25, r1
    1766:	a1 05       	cpc	r26, r1
    1768:	b1 05       	cpc	r27, r1
    176a:	09 f0       	breq	.+2      	; 0x176e <CLK_vidStart+0xb4>
    176c:	40 c0       	rjmp	.+128    	; 0x17ee <CLK_vidStart+0x134>
    176e:	80 91 8c 00 	lds	r24, 0x008C
    1772:	90 91 8d 00 	lds	r25, 0x008D
    1776:	a0 91 8e 00 	lds	r26, 0x008E
    177a:	b0 91 8f 00 	lds	r27, 0x008F
    177e:	8c 33       	cpi	r24, 0x3C	; 60
    1780:	91 05       	cpc	r25, r1
    1782:	a1 05       	cpc	r26, r1
    1784:	b1 05       	cpc	r27, r1
    1786:	98 f5       	brcc	.+102    	; 0x17ee <CLK_vidStart+0x134>
			 {   LCD_Gotoxy(2,11);
    1788:	82 e0       	ldi	r24, 0x02	; 2
    178a:	6b e0       	ldi	r22, 0x0B	; 11
    178c:	0e 94 96 14 	call	0x292c	; 0x292c <LCD_Gotoxy>
			     LCD_String("  ");
    1790:	88 e7       	ldi	r24, 0x78	; 120
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_String>
				 overflow=0;
    1798:	10 92 83 00 	sts	0x0083, r1
    179c:	10 92 84 00 	sts	0x0084, r1
    17a0:	10 92 85 00 	sts	0x0085, r1
    17a4:	10 92 86 00 	sts	0x0086, r1
				 min++;
    17a8:	80 91 8c 00 	lds	r24, 0x008C
    17ac:	90 91 8d 00 	lds	r25, 0x008D
    17b0:	a0 91 8e 00 	lds	r26, 0x008E
    17b4:	b0 91 8f 00 	lds	r27, 0x008F
    17b8:	01 96       	adiw	r24, 0x01	; 1
    17ba:	a1 1d       	adc	r26, r1
    17bc:	b1 1d       	adc	r27, r1
    17be:	80 93 8c 00 	sts	0x008C, r24
    17c2:	90 93 8d 00 	sts	0x008D, r25
    17c6:	a0 93 8e 00 	sts	0x008E, r26
    17ca:	b0 93 8f 00 	sts	0x008F, r27
				 LCD_Gotoxy(2,6);
    17ce:	82 e0       	ldi	r24, 0x02	; 2
    17d0:	66 e0       	ldi	r22, 0x06	; 6
    17d2:	0e 94 96 14 	call	0x292c	; 0x292c <LCD_Gotoxy>
				 LCD_vidWriteInteger(min);
    17d6:	80 91 8c 00 	lds	r24, 0x008C
    17da:	90 91 8d 00 	lds	r25, 0x008D
    17de:	a0 91 8e 00 	lds	r26, 0x008E
    17e2:	b0 91 8f 00 	lds	r27, 0x008F
    17e6:	bc 01       	movw	r22, r24
    17e8:	cd 01       	movw	r24, r26
    17ea:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <LCD_vidWriteInteger>
			 }
			 if(min==60 && hr<12)
    17ee:	80 91 8c 00 	lds	r24, 0x008C
    17f2:	90 91 8d 00 	lds	r25, 0x008D
    17f6:	a0 91 8e 00 	lds	r26, 0x008E
    17fa:	b0 91 8f 00 	lds	r27, 0x008F
    17fe:	8c 33       	cpi	r24, 0x3C	; 60
    1800:	91 05       	cpc	r25, r1
    1802:	a1 05       	cpc	r26, r1
    1804:	b1 05       	cpc	r27, r1
    1806:	09 f0       	breq	.+2      	; 0x180a <CLK_vidStart+0x150>
    1808:	40 c0       	rjmp	.+128    	; 0x188a <CLK_vidStart+0x1d0>
    180a:	80 91 87 00 	lds	r24, 0x0087
    180e:	90 91 88 00 	lds	r25, 0x0088
    1812:	a0 91 89 00 	lds	r26, 0x0089
    1816:	b0 91 8a 00 	lds	r27, 0x008A
    181a:	8c 30       	cpi	r24, 0x0C	; 12
    181c:	91 05       	cpc	r25, r1
    181e:	a1 05       	cpc	r26, r1
    1820:	b1 05       	cpc	r27, r1
    1822:	98 f5       	brcc	.+102    	; 0x188a <CLK_vidStart+0x1d0>
				 {   LCD_Gotoxy(2,6);
    1824:	82 e0       	ldi	r24, 0x02	; 2
    1826:	66 e0       	ldi	r22, 0x06	; 6
    1828:	0e 94 96 14 	call	0x292c	; 0x292c <LCD_Gotoxy>
				     LCD_String("  ");
    182c:	88 e7       	ldi	r24, 0x78	; 120
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_String>
					 min=0;
    1834:	10 92 8c 00 	sts	0x008C, r1
    1838:	10 92 8d 00 	sts	0x008D, r1
    183c:	10 92 8e 00 	sts	0x008E, r1
    1840:	10 92 8f 00 	sts	0x008F, r1
					 hr++;
    1844:	80 91 87 00 	lds	r24, 0x0087
    1848:	90 91 88 00 	lds	r25, 0x0088
    184c:	a0 91 89 00 	lds	r26, 0x0089
    1850:	b0 91 8a 00 	lds	r27, 0x008A
    1854:	01 96       	adiw	r24, 0x01	; 1
    1856:	a1 1d       	adc	r26, r1
    1858:	b1 1d       	adc	r27, r1
    185a:	80 93 87 00 	sts	0x0087, r24
    185e:	90 93 88 00 	sts	0x0088, r25
    1862:	a0 93 89 00 	sts	0x0089, r26
    1866:	b0 93 8a 00 	sts	0x008A, r27
					 LCD_Gotoxy(2,1);
    186a:	82 e0       	ldi	r24, 0x02	; 2
    186c:	61 e0       	ldi	r22, 0x01	; 1
    186e:	0e 94 96 14 	call	0x292c	; 0x292c <LCD_Gotoxy>
					 LCD_vidWriteInteger(hr);
    1872:	80 91 87 00 	lds	r24, 0x0087
    1876:	90 91 88 00 	lds	r25, 0x0088
    187a:	a0 91 89 00 	lds	r26, 0x0089
    187e:	b0 91 8a 00 	lds	r27, 0x008A
    1882:	bc 01       	movw	r22, r24
    1884:	cd 01       	movw	r24, r26
    1886:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <LCD_vidWriteInteger>
				 }
	         if(hr==12 && min==59 && overflow==59)
    188a:	80 91 87 00 	lds	r24, 0x0087
    188e:	90 91 88 00 	lds	r25, 0x0088
    1892:	a0 91 89 00 	lds	r26, 0x0089
    1896:	b0 91 8a 00 	lds	r27, 0x008A
    189a:	8c 30       	cpi	r24, 0x0C	; 12
    189c:	91 05       	cpc	r25, r1
    189e:	a1 05       	cpc	r26, r1
    18a0:	b1 05       	cpc	r27, r1
    18a2:	51 f5       	brne	.+84     	; 0x18f8 <CLK_vidStart+0x23e>
    18a4:	80 91 8c 00 	lds	r24, 0x008C
    18a8:	90 91 8d 00 	lds	r25, 0x008D
    18ac:	a0 91 8e 00 	lds	r26, 0x008E
    18b0:	b0 91 8f 00 	lds	r27, 0x008F
    18b4:	8b 33       	cpi	r24, 0x3B	; 59
    18b6:	91 05       	cpc	r25, r1
    18b8:	a1 05       	cpc	r26, r1
    18ba:	b1 05       	cpc	r27, r1
    18bc:	e9 f4       	brne	.+58     	; 0x18f8 <CLK_vidStart+0x23e>
    18be:	80 91 83 00 	lds	r24, 0x0083
    18c2:	90 91 84 00 	lds	r25, 0x0084
    18c6:	a0 91 85 00 	lds	r26, 0x0085
    18ca:	b0 91 86 00 	lds	r27, 0x0086
    18ce:	8b 33       	cpi	r24, 0x3B	; 59
    18d0:	91 05       	cpc	r25, r1
    18d2:	a1 05       	cpc	r26, r1
    18d4:	b1 05       	cpc	r27, r1
    18d6:	81 f4       	brne	.+32     	; 0x18f8 <CLK_vidStart+0x23e>
	         {
	        	 hr=0;
    18d8:	10 92 87 00 	sts	0x0087, r1
    18dc:	10 92 88 00 	sts	0x0088, r1
    18e0:	10 92 89 00 	sts	0x0089, r1
    18e4:	10 92 8a 00 	sts	0x008A, r1
	        	 LCD_Gotoxy(2,1);
    18e8:	82 e0       	ldi	r24, 0x02	; 2
    18ea:	61 e0       	ldi	r22, 0x01	; 1
    18ec:	0e 94 96 14 	call	0x292c	; 0x292c <LCD_Gotoxy>
	        	 LCD_String("  ");
    18f0:	88 e7       	ldi	r24, 0x78	; 120
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_String>

	         }


}
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <LCD_Command>:
#include "lcd.h"



void LCD_Command( unsigned char cmnd )
{
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	c7 55       	subi	r28, 0x57	; 87
    190c:	d0 40       	sbci	r29, 0x00	; 0
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	de bf       	out	0x3e, r29	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	cd bf       	out	0x3d, r28	; 61
    1918:	fe 01       	movw	r30, r28
    191a:	e9 5a       	subi	r30, 0xA9	; 169
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	80 83       	st	Z, r24
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
    1920:	a8 e3       	ldi	r26, 0x38	; 56
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e8 e3       	ldi	r30, 0x38	; 56
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	98 2f       	mov	r25, r24
    192c:	9f 70       	andi	r25, 0x0F	; 15
    192e:	fe 01       	movw	r30, r28
    1930:	e9 5a       	subi	r30, 0xA9	; 169
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	80 81       	ld	r24, Z
    1936:	80 7f       	andi	r24, 0xF0	; 240
    1938:	89 2b       	or	r24, r25
    193a:	8c 93       	st	X, r24
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
    193c:	a8 e3       	ldi	r26, 0x38	; 56
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e8 e3       	ldi	r30, 0x38	; 56
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	8e 7f       	andi	r24, 0xFE	; 254
    1948:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);		/* Enable pulse */
    194a:	a8 e3       	ldi	r26, 0x38	; 56
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e8 e3       	ldi	r30, 0x38	; 56
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	80 81       	ld	r24, Z
    1954:	82 60       	ori	r24, 0x02	; 2
    1956:	8c 93       	st	X, r24
    1958:	fe 01       	movw	r30, r28
    195a:	ed 5a       	subi	r30, 0xAD	; 173
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	a0 e8       	ldi	r26, 0x80	; 128
    1964:	bf e3       	ldi	r27, 0x3F	; 63
    1966:	80 83       	st	Z, r24
    1968:	91 83       	std	Z+1, r25	; 0x01
    196a:	a2 83       	std	Z+2, r26	; 0x02
    196c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    196e:	8e 01       	movw	r16, r28
    1970:	01 5b       	subi	r16, 0xB1	; 177
    1972:	1f 4f       	sbci	r17, 0xFF	; 255
    1974:	fe 01       	movw	r30, r28
    1976:	ed 5a       	subi	r30, 0xAD	; 173
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	60 81       	ld	r22, Z
    197c:	71 81       	ldd	r23, Z+1	; 0x01
    197e:	82 81       	ldd	r24, Z+2	; 0x02
    1980:	93 81       	ldd	r25, Z+3	; 0x03
    1982:	2b ea       	ldi	r18, 0xAB	; 171
    1984:	3a ea       	ldi	r19, 0xAA	; 170
    1986:	4a e2       	ldi	r20, 0x2A	; 42
    1988:	50 e4       	ldi	r21, 0x40	; 64
    198a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	f8 01       	movw	r30, r16
    1994:	80 83       	st	Z, r24
    1996:	91 83       	std	Z+1, r25	; 0x01
    1998:	a2 83       	std	Z+2, r26	; 0x02
    199a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    199c:	fe 01       	movw	r30, r28
    199e:	e1 5b       	subi	r30, 0xB1	; 177
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	60 81       	ld	r22, Z
    19a4:	71 81       	ldd	r23, Z+1	; 0x01
    19a6:	82 81       	ldd	r24, Z+2	; 0x02
    19a8:	93 81       	ldd	r25, Z+3	; 0x03
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 e8       	ldi	r20, 0x80	; 128
    19b0:	5f e3       	ldi	r21, 0x3F	; 63
    19b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19b6:	88 23       	and	r24, r24
    19b8:	34 f4       	brge	.+12     	; 0x19c6 <LCD_Command+0xc8>
		__ticks = 1;
    19ba:	fe 01       	movw	r30, r28
    19bc:	e2 5b       	subi	r30, 0xB2	; 178
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	80 83       	st	Z, r24
    19c4:	e0 c0       	rjmp	.+448    	; 0x1b86 <LCD_Command+0x288>
	else if (__tmp > 255)
    19c6:	fe 01       	movw	r30, r28
    19c8:	e1 5b       	subi	r30, 0xB1	; 177
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	60 81       	ld	r22, Z
    19ce:	71 81       	ldd	r23, Z+1	; 0x01
    19d0:	82 81       	ldd	r24, Z+2	; 0x02
    19d2:	93 81       	ldd	r25, Z+3	; 0x03
    19d4:	20 e0       	ldi	r18, 0x00	; 0
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	4f e7       	ldi	r20, 0x7F	; 127
    19da:	53 e4       	ldi	r21, 0x43	; 67
    19dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19e0:	18 16       	cp	r1, r24
    19e2:	0c f0       	brlt	.+2      	; 0x19e6 <LCD_Command+0xe8>
    19e4:	c0 c0       	rjmp	.+384    	; 0x1b66 <LCD_Command+0x268>
	{
		_delay_ms(__us / 1000.0);
    19e6:	fe 01       	movw	r30, r28
    19e8:	ed 5a       	subi	r30, 0xAD	; 173
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	60 81       	ld	r22, Z
    19ee:	71 81       	ldd	r23, Z+1	; 0x01
    19f0:	82 81       	ldd	r24, Z+2	; 0x02
    19f2:	93 81       	ldd	r25, Z+3	; 0x03
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	4a e7       	ldi	r20, 0x7A	; 122
    19fa:	54 e4       	ldi	r21, 0x44	; 68
    19fc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	fe 01       	movw	r30, r28
    1a06:	e6 5b       	subi	r30, 0xB6	; 182
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	80 83       	st	Z, r24
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	a2 83       	std	Z+2, r26	; 0x02
    1a10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a12:	8e 01       	movw	r16, r28
    1a14:	0a 5b       	subi	r16, 0xBA	; 186
    1a16:	1f 4f       	sbci	r17, 0xFF	; 255
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e6 5b       	subi	r30, 0xB6	; 182
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	60 81       	ld	r22, Z
    1a20:	71 81       	ldd	r23, Z+1	; 0x01
    1a22:	82 81       	ldd	r24, Z+2	; 0x02
    1a24:	93 81       	ldd	r25, Z+3	; 0x03
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4a ef       	ldi	r20, 0xFA	; 250
    1a2c:	54 e4       	ldi	r21, 0x44	; 68
    1a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	f8 01       	movw	r30, r16
    1a38:	80 83       	st	Z, r24
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	a2 83       	std	Z+2, r26	; 0x02
    1a3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a40:	fe 01       	movw	r30, r28
    1a42:	ea 5b       	subi	r30, 0xBA	; 186
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	60 81       	ld	r22, Z
    1a48:	71 81       	ldd	r23, Z+1	; 0x01
    1a4a:	82 81       	ldd	r24, Z+2	; 0x02
    1a4c:	93 81       	ldd	r25, Z+3	; 0x03
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e8       	ldi	r20, 0x80	; 128
    1a54:	5f e3       	ldi	r21, 0x3F	; 63
    1a56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a5a:	88 23       	and	r24, r24
    1a5c:	44 f4       	brge	.+16     	; 0x1a6e <LCD_Command+0x170>
		__ticks = 1;
    1a5e:	fe 01       	movw	r30, r28
    1a60:	ec 5b       	subi	r30, 0xBC	; 188
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	91 83       	std	Z+1, r25	; 0x01
    1a6a:	80 83       	st	Z, r24
    1a6c:	64 c0       	rjmp	.+200    	; 0x1b36 <LCD_Command+0x238>
	else if (__tmp > 65535)
    1a6e:	fe 01       	movw	r30, r28
    1a70:	ea 5b       	subi	r30, 0xBA	; 186
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	60 81       	ld	r22, Z
    1a76:	71 81       	ldd	r23, Z+1	; 0x01
    1a78:	82 81       	ldd	r24, Z+2	; 0x02
    1a7a:	93 81       	ldd	r25, Z+3	; 0x03
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	3f ef       	ldi	r19, 0xFF	; 255
    1a80:	4f e7       	ldi	r20, 0x7F	; 127
    1a82:	57 e4       	ldi	r21, 0x47	; 71
    1a84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a88:	18 16       	cp	r1, r24
    1a8a:	0c f0       	brlt	.+2      	; 0x1a8e <LCD_Command+0x190>
    1a8c:	43 c0       	rjmp	.+134    	; 0x1b14 <LCD_Command+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e6 5b       	subi	r30, 0xB6	; 182
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	60 81       	ld	r22, Z
    1a96:	71 81       	ldd	r23, Z+1	; 0x01
    1a98:	82 81       	ldd	r24, Z+2	; 0x02
    1a9a:	93 81       	ldd	r25, Z+3	; 0x03
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e2       	ldi	r20, 0x20	; 32
    1aa2:	51 e4       	ldi	r21, 0x41	; 65
    1aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	8e 01       	movw	r16, r28
    1aae:	0c 5b       	subi	r16, 0xBC	; 188
    1ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab2:	bc 01       	movw	r22, r24
    1ab4:	cd 01       	movw	r24, r26
    1ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	f8 01       	movw	r30, r16
    1ac0:	91 83       	std	Z+1, r25	; 0x01
    1ac2:	80 83       	st	Z, r24
    1ac4:	1f c0       	rjmp	.+62     	; 0x1b04 <LCD_Command+0x206>
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	ee 5b       	subi	r30, 0xBE	; 190
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	88 ec       	ldi	r24, 0xC8	; 200
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	91 83       	std	Z+1, r25	; 0x01
    1ad2:	80 83       	st	Z, r24
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	ee 5b       	subi	r30, 0xBE	; 190
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	80 81       	ld	r24, Z
    1adc:	91 81       	ldd	r25, Z+1	; 0x01
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <LCD_Command+0x1e0>
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	ee 5b       	subi	r30, 0xBE	; 190
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	91 83       	std	Z+1, r25	; 0x01
    1aea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aec:	de 01       	movw	r26, r28
    1aee:	ac 5b       	subi	r26, 0xBC	; 188
    1af0:	bf 4f       	sbci	r27, 0xFF	; 255
    1af2:	fe 01       	movw	r30, r28
    1af4:	ec 5b       	subi	r30, 0xBC	; 188
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	80 81       	ld	r24, Z
    1afa:	91 81       	ldd	r25, Z+1	; 0x01
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	11 96       	adiw	r26, 0x01	; 1
    1b00:	9c 93       	st	X, r25
    1b02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b04:	fe 01       	movw	r30, r28
    1b06:	ec 5b       	subi	r30, 0xBC	; 188
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	80 81       	ld	r24, Z
    1b0c:	91 81       	ldd	r25, Z+1	; 0x01
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	d1 f6       	brne	.-76     	; 0x1ac6 <LCD_Command+0x1c8>
    1b12:	42 c0       	rjmp	.+132    	; 0x1b98 <LCD_Command+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b14:	8e 01       	movw	r16, r28
    1b16:	0c 5b       	subi	r16, 0xBC	; 188
    1b18:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	ea 5b       	subi	r30, 0xBA	; 186
    1b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b20:	60 81       	ld	r22, Z
    1b22:	71 81       	ldd	r23, Z+1	; 0x01
    1b24:	82 81       	ldd	r24, Z+2	; 0x02
    1b26:	93 81       	ldd	r25, Z+3	; 0x03
    1b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	f8 01       	movw	r30, r16
    1b32:	91 83       	std	Z+1, r25	; 0x01
    1b34:	80 83       	st	Z, r24
    1b36:	de 01       	movw	r26, r28
    1b38:	a0 5c       	subi	r26, 0xC0	; 192
    1b3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b3c:	fe 01       	movw	r30, r28
    1b3e:	ec 5b       	subi	r30, 0xBC	; 188
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	80 81       	ld	r24, Z
    1b44:	91 81       	ldd	r25, Z+1	; 0x01
    1b46:	11 96       	adiw	r26, 0x01	; 1
    1b48:	9c 93       	st	X, r25
    1b4a:	8e 93       	st	-X, r24
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	e0 5c       	subi	r30, 0xC0	; 192
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	80 81       	ld	r24, Z
    1b54:	91 81       	ldd	r25, Z+1	; 0x01
    1b56:	01 97       	sbiw	r24, 0x01	; 1
    1b58:	f1 f7       	brne	.-4      	; 0x1b56 <LCD_Command+0x258>
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	e0 5c       	subi	r30, 0xC0	; 192
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	91 83       	std	Z+1, r25	; 0x01
    1b62:	80 83       	st	Z, r24
    1b64:	19 c0       	rjmp	.+50     	; 0x1b98 <LCD_Command+0x29a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b66:	8e 01       	movw	r16, r28
    1b68:	02 5b       	subi	r16, 0xB2	; 178
    1b6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	e1 5b       	subi	r30, 0xB1	; 177
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	60 81       	ld	r22, Z
    1b74:	71 81       	ldd	r23, Z+1	; 0x01
    1b76:	82 81       	ldd	r24, Z+2	; 0x02
    1b78:	93 81       	ldd	r25, Z+3	; 0x03
    1b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	f8 01       	movw	r30, r16
    1b84:	80 83       	st	Z, r24
    1b86:	fe 01       	movw	r30, r28
    1b88:	e2 5b       	subi	r30, 0xB2	; 178
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	80 81       	ld	r24, Z
    1b8e:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b90:	8f ad       	ldd	r24, Y+63	; 0x3f
    1b92:	8a 95       	dec	r24
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <LCD_Command+0x294>
    1b96:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    1b98:	a8 e3       	ldi	r26, 0x38	; 56
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e8 e3       	ldi	r30, 0x38	; 56
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	8d 7f       	andi	r24, 0xFD	; 253
    1ba4:	8c 93       	st	X, r24
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	a8 e4       	ldi	r26, 0x48	; 72
    1bac:	b3 e4       	ldi	r27, 0x43	; 67
    1bae:	8b af       	std	Y+59, r24	; 0x3b
    1bb0:	9c af       	std	Y+60, r25	; 0x3c
    1bb2:	ad af       	std	Y+61, r26	; 0x3d
    1bb4:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bb6:	6b ad       	ldd	r22, Y+59	; 0x3b
    1bb8:	7c ad       	ldd	r23, Y+60	; 0x3c
    1bba:	8d ad       	ldd	r24, Y+61	; 0x3d
    1bbc:	9e ad       	ldd	r25, Y+62	; 0x3e
    1bbe:	2b ea       	ldi	r18, 0xAB	; 171
    1bc0:	3a ea       	ldi	r19, 0xAA	; 170
    1bc2:	4a e2       	ldi	r20, 0x2A	; 42
    1bc4:	50 e4       	ldi	r21, 0x40	; 64
    1bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	8f ab       	std	Y+55, r24	; 0x37
    1bd0:	98 af       	std	Y+56, r25	; 0x38
    1bd2:	a9 af       	std	Y+57, r26	; 0x39
    1bd4:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1bd6:	6f a9       	ldd	r22, Y+55	; 0x37
    1bd8:	78 ad       	ldd	r23, Y+56	; 0x38
    1bda:	89 ad       	ldd	r24, Y+57	; 0x39
    1bdc:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	40 e8       	ldi	r20, 0x80	; 128
    1be4:	5f e3       	ldi	r21, 0x3F	; 63
    1be6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bea:	88 23       	and	r24, r24
    1bec:	1c f4       	brge	.+6      	; 0x1bf4 <LCD_Command+0x2f6>
		__ticks = 1;
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	8e ab       	std	Y+54, r24	; 0x36
    1bf2:	91 c0       	rjmp	.+290    	; 0x1d16 <LCD_Command+0x418>
	else if (__tmp > 255)
    1bf4:	6f a9       	ldd	r22, Y+55	; 0x37
    1bf6:	78 ad       	ldd	r23, Y+56	; 0x38
    1bf8:	89 ad       	ldd	r24, Y+57	; 0x39
    1bfa:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	4f e7       	ldi	r20, 0x7F	; 127
    1c02:	53 e4       	ldi	r21, 0x43	; 67
    1c04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c08:	18 16       	cp	r1, r24
    1c0a:	0c f0       	brlt	.+2      	; 0x1c0e <LCD_Command+0x310>
    1c0c:	7b c0       	rjmp	.+246    	; 0x1d04 <LCD_Command+0x406>
	{
		_delay_ms(__us / 1000.0);
    1c0e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1c10:	7c ad       	ldd	r23, Y+60	; 0x3c
    1c12:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c14:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	4a e7       	ldi	r20, 0x7A	; 122
    1c1c:	54 e4       	ldi	r21, 0x44	; 68
    1c1e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	8a ab       	std	Y+50, r24	; 0x32
    1c28:	9b ab       	std	Y+51, r25	; 0x33
    1c2a:	ac ab       	std	Y+52, r26	; 0x34
    1c2c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2e:	6a a9       	ldd	r22, Y+50	; 0x32
    1c30:	7b a9       	ldd	r23, Y+51	; 0x33
    1c32:	8c a9       	ldd	r24, Y+52	; 0x34
    1c34:	9d a9       	ldd	r25, Y+53	; 0x35
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	4a ef       	ldi	r20, 0xFA	; 250
    1c3c:	54 e4       	ldi	r21, 0x44	; 68
    1c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	8e a7       	std	Y+46, r24	; 0x2e
    1c48:	9f a7       	std	Y+47, r25	; 0x2f
    1c4a:	a8 ab       	std	Y+48, r26	; 0x30
    1c4c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1c4e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c50:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c52:	88 a9       	ldd	r24, Y+48	; 0x30
    1c54:	99 a9       	ldd	r25, Y+49	; 0x31
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e8       	ldi	r20, 0x80	; 128
    1c5c:	5f e3       	ldi	r21, 0x3F	; 63
    1c5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c62:	88 23       	and	r24, r24
    1c64:	2c f4       	brge	.+10     	; 0x1c70 <LCD_Command+0x372>
		__ticks = 1;
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	9d a7       	std	Y+45, r25	; 0x2d
    1c6c:	8c a7       	std	Y+44, r24	; 0x2c
    1c6e:	3f c0       	rjmp	.+126    	; 0x1cee <LCD_Command+0x3f0>
	else if (__tmp > 65535)
    1c70:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c72:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c74:	88 a9       	ldd	r24, Y+48	; 0x30
    1c76:	99 a9       	ldd	r25, Y+49	; 0x31
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	3f ef       	ldi	r19, 0xFF	; 255
    1c7c:	4f e7       	ldi	r20, 0x7F	; 127
    1c7e:	57 e4       	ldi	r21, 0x47	; 71
    1c80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c84:	18 16       	cp	r1, r24
    1c86:	4c f5       	brge	.+82     	; 0x1cda <LCD_Command+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c88:	6a a9       	ldd	r22, Y+50	; 0x32
    1c8a:	7b a9       	ldd	r23, Y+51	; 0x33
    1c8c:	8c a9       	ldd	r24, Y+52	; 0x34
    1c8e:	9d a9       	ldd	r25, Y+53	; 0x35
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	40 e2       	ldi	r20, 0x20	; 32
    1c96:	51 e4       	ldi	r21, 0x41	; 65
    1c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	bc 01       	movw	r22, r24
    1ca2:	cd 01       	movw	r24, r26
    1ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	9d a7       	std	Y+45, r25	; 0x2d
    1cae:	8c a7       	std	Y+44, r24	; 0x2c
    1cb0:	0f c0       	rjmp	.+30     	; 0x1cd0 <LCD_Command+0x3d2>
    1cb2:	88 ec       	ldi	r24, 0xC8	; 200
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	9b a7       	std	Y+43, r25	; 0x2b
    1cb8:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cba:	8a a5       	ldd	r24, Y+42	; 0x2a
    1cbc:	9b a5       	ldd	r25, Y+43	; 0x2b
    1cbe:	01 97       	sbiw	r24, 0x01	; 1
    1cc0:	f1 f7       	brne	.-4      	; 0x1cbe <LCD_Command+0x3c0>
    1cc2:	9b a7       	std	Y+43, r25	; 0x2b
    1cc4:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1cc8:	9d a5       	ldd	r25, Y+45	; 0x2d
    1cca:	01 97       	sbiw	r24, 0x01	; 1
    1ccc:	9d a7       	std	Y+45, r25	; 0x2d
    1cce:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd0:	8c a5       	ldd	r24, Y+44	; 0x2c
    1cd2:	9d a5       	ldd	r25, Y+45	; 0x2d
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	69 f7       	brne	.-38     	; 0x1cb2 <LCD_Command+0x3b4>
    1cd8:	24 c0       	rjmp	.+72     	; 0x1d22 <LCD_Command+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cda:	6e a5       	ldd	r22, Y+46	; 0x2e
    1cdc:	7f a5       	ldd	r23, Y+47	; 0x2f
    1cde:	88 a9       	ldd	r24, Y+48	; 0x30
    1ce0:	99 a9       	ldd	r25, Y+49	; 0x31
    1ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	9d a7       	std	Y+45, r25	; 0x2d
    1cec:	8c a7       	std	Y+44, r24	; 0x2c
    1cee:	8c a5       	ldd	r24, Y+44	; 0x2c
    1cf0:	9d a5       	ldd	r25, Y+45	; 0x2d
    1cf2:	99 a7       	std	Y+41, r25	; 0x29
    1cf4:	88 a7       	std	Y+40, r24	; 0x28
    1cf6:	88 a5       	ldd	r24, Y+40	; 0x28
    1cf8:	99 a5       	ldd	r25, Y+41	; 0x29
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <LCD_Command+0x3fc>
    1cfe:	99 a7       	std	Y+41, r25	; 0x29
    1d00:	88 a7       	std	Y+40, r24	; 0x28
    1d02:	0f c0       	rjmp	.+30     	; 0x1d22 <LCD_Command+0x424>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d04:	6f a9       	ldd	r22, Y+55	; 0x37
    1d06:	78 ad       	ldd	r23, Y+56	; 0x38
    1d08:	89 ad       	ldd	r24, Y+57	; 0x39
    1d0a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	8e ab       	std	Y+54, r24	; 0x36
    1d16:	8e a9       	ldd	r24, Y+54	; 0x36
    1d18:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d1a:	8f a1       	ldd	r24, Y+39	; 0x27
    1d1c:	8a 95       	dec	r24
    1d1e:	f1 f7       	brne	.-4      	; 0x1d1c <LCD_Command+0x41e>
    1d20:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
    1d22:	a8 e3       	ldi	r26, 0x38	; 56
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e8 e3       	ldi	r30, 0x38	; 56
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	2f 70       	andi	r18, 0x0F	; 15
    1d30:	fe 01       	movw	r30, r28
    1d32:	e9 5a       	subi	r30, 0xA9	; 169
    1d34:	ff 4f       	sbci	r31, 0xFF	; 255
    1d36:	80 81       	ld	r24, Z
    1d38:	88 2f       	mov	r24, r24
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	82 95       	swap	r24
    1d3e:	92 95       	swap	r25
    1d40:	90 7f       	andi	r25, 0xF0	; 240
    1d42:	98 27       	eor	r25, r24
    1d44:	80 7f       	andi	r24, 0xF0	; 240
    1d46:	98 27       	eor	r25, r24
    1d48:	82 2b       	or	r24, r18
    1d4a:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);
    1d4c:	a8 e3       	ldi	r26, 0x38	; 56
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	e8 e3       	ldi	r30, 0x38	; 56
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	82 60       	ori	r24, 0x02	; 2
    1d58:	8c 93       	st	X, r24
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	a0 e8       	ldi	r26, 0x80	; 128
    1d60:	bf e3       	ldi	r27, 0x3F	; 63
    1d62:	8b a3       	std	Y+35, r24	; 0x23
    1d64:	9c a3       	std	Y+36, r25	; 0x24
    1d66:	ad a3       	std	Y+37, r26	; 0x25
    1d68:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d70:	9e a1       	ldd	r25, Y+38	; 0x26
    1d72:	2b ea       	ldi	r18, 0xAB	; 171
    1d74:	3a ea       	ldi	r19, 0xAA	; 170
    1d76:	4a e2       	ldi	r20, 0x2A	; 42
    1d78:	50 e4       	ldi	r21, 0x40	; 64
    1d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	8f 8f       	std	Y+31, r24	; 0x1f
    1d84:	98 a3       	std	Y+32, r25	; 0x20
    1d86:	a9 a3       	std	Y+33, r26	; 0x21
    1d88:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1d8a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d8c:	78 a1       	ldd	r23, Y+32	; 0x20
    1d8e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d90:	9a a1       	ldd	r25, Y+34	; 0x22
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e8       	ldi	r20, 0x80	; 128
    1d98:	5f e3       	ldi	r21, 0x3F	; 63
    1d9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d9e:	88 23       	and	r24, r24
    1da0:	1c f4       	brge	.+6      	; 0x1da8 <LCD_Command+0x4aa>
		__ticks = 1;
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	8e 8f       	std	Y+30, r24	; 0x1e
    1da6:	91 c0       	rjmp	.+290    	; 0x1eca <LCD_Command+0x5cc>
	else if (__tmp > 255)
    1da8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1daa:	78 a1       	ldd	r23, Y+32	; 0x20
    1dac:	89 a1       	ldd	r24, Y+33	; 0x21
    1dae:	9a a1       	ldd	r25, Y+34	; 0x22
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	4f e7       	ldi	r20, 0x7F	; 127
    1db6:	53 e4       	ldi	r21, 0x43	; 67
    1db8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dbc:	18 16       	cp	r1, r24
    1dbe:	0c f0       	brlt	.+2      	; 0x1dc2 <LCD_Command+0x4c4>
    1dc0:	7b c0       	rjmp	.+246    	; 0x1eb8 <LCD_Command+0x5ba>
	{
		_delay_ms(__us / 1000.0);
    1dc2:	6b a1       	ldd	r22, Y+35	; 0x23
    1dc4:	7c a1       	ldd	r23, Y+36	; 0x24
    1dc6:	8d a1       	ldd	r24, Y+37	; 0x25
    1dc8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	4a e7       	ldi	r20, 0x7A	; 122
    1dd0:	54 e4       	ldi	r21, 0x44	; 68
    1dd2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	8a 8f       	std	Y+26, r24	; 0x1a
    1ddc:	9b 8f       	std	Y+27, r25	; 0x1b
    1dde:	ac 8f       	std	Y+28, r26	; 0x1c
    1de0:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1de4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1de6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1de8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	4a ef       	ldi	r20, 0xFA	; 250
    1df0:	54 e4       	ldi	r21, 0x44	; 68
    1df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	8e 8b       	std	Y+22, r24	; 0x16
    1dfc:	9f 8b       	std	Y+23, r25	; 0x17
    1dfe:	a8 8f       	std	Y+24, r26	; 0x18
    1e00:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1e02:	6e 89       	ldd	r22, Y+22	; 0x16
    1e04:	7f 89       	ldd	r23, Y+23	; 0x17
    1e06:	88 8d       	ldd	r24, Y+24	; 0x18
    1e08:	99 8d       	ldd	r25, Y+25	; 0x19
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e8       	ldi	r20, 0x80	; 128
    1e10:	5f e3       	ldi	r21, 0x3F	; 63
    1e12:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e16:	88 23       	and	r24, r24
    1e18:	2c f4       	brge	.+10     	; 0x1e24 <LCD_Command+0x526>
		__ticks = 1;
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	9d 8b       	std	Y+21, r25	; 0x15
    1e20:	8c 8b       	std	Y+20, r24	; 0x14
    1e22:	3f c0       	rjmp	.+126    	; 0x1ea2 <LCD_Command+0x5a4>
	else if (__tmp > 65535)
    1e24:	6e 89       	ldd	r22, Y+22	; 0x16
    1e26:	7f 89       	ldd	r23, Y+23	; 0x17
    1e28:	88 8d       	ldd	r24, Y+24	; 0x18
    1e2a:	99 8d       	ldd	r25, Y+25	; 0x19
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	3f ef       	ldi	r19, 0xFF	; 255
    1e30:	4f e7       	ldi	r20, 0x7F	; 127
    1e32:	57 e4       	ldi	r21, 0x47	; 71
    1e34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e38:	18 16       	cp	r1, r24
    1e3a:	4c f5       	brge	.+82     	; 0x1e8e <LCD_Command+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1e3e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1e40:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e42:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e44:	20 e0       	ldi	r18, 0x00	; 0
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	40 e2       	ldi	r20, 0x20	; 32
    1e4a:	51 e4       	ldi	r21, 0x41	; 65
    1e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	bc 01       	movw	r22, r24
    1e56:	cd 01       	movw	r24, r26
    1e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	9d 8b       	std	Y+21, r25	; 0x15
    1e62:	8c 8b       	std	Y+20, r24	; 0x14
    1e64:	0f c0       	rjmp	.+30     	; 0x1e84 <LCD_Command+0x586>
    1e66:	88 ec       	ldi	r24, 0xC8	; 200
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	9b 8b       	std	Y+19, r25	; 0x13
    1e6c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e6e:	8a 89       	ldd	r24, Y+18	; 0x12
    1e70:	9b 89       	ldd	r25, Y+19	; 0x13
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <LCD_Command+0x574>
    1e76:	9b 8b       	std	Y+19, r25	; 0x13
    1e78:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7a:	8c 89       	ldd	r24, Y+20	; 0x14
    1e7c:	9d 89       	ldd	r25, Y+21	; 0x15
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	9d 8b       	std	Y+21, r25	; 0x15
    1e82:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e84:	8c 89       	ldd	r24, Y+20	; 0x14
    1e86:	9d 89       	ldd	r25, Y+21	; 0x15
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	69 f7       	brne	.-38     	; 0x1e66 <LCD_Command+0x568>
    1e8c:	24 c0       	rjmp	.+72     	; 0x1ed6 <LCD_Command+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8e:	6e 89       	ldd	r22, Y+22	; 0x16
    1e90:	7f 89       	ldd	r23, Y+23	; 0x17
    1e92:	88 8d       	ldd	r24, Y+24	; 0x18
    1e94:	99 8d       	ldd	r25, Y+25	; 0x19
    1e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9d 8b       	std	Y+21, r25	; 0x15
    1ea0:	8c 8b       	std	Y+20, r24	; 0x14
    1ea2:	8c 89       	ldd	r24, Y+20	; 0x14
    1ea4:	9d 89       	ldd	r25, Y+21	; 0x15
    1ea6:	99 8b       	std	Y+17, r25	; 0x11
    1ea8:	88 8b       	std	Y+16, r24	; 0x10
    1eaa:	88 89       	ldd	r24, Y+16	; 0x10
    1eac:	99 89       	ldd	r25, Y+17	; 0x11
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <LCD_Command+0x5b0>
    1eb2:	99 8b       	std	Y+17, r25	; 0x11
    1eb4:	88 8b       	std	Y+16, r24	; 0x10
    1eb6:	0f c0       	rjmp	.+30     	; 0x1ed6 <LCD_Command+0x5d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1eb8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1eba:	78 a1       	ldd	r23, Y+32	; 0x20
    1ebc:	89 a1       	ldd	r24, Y+33	; 0x21
    1ebe:	9a a1       	ldd	r25, Y+34	; 0x22
    1ec0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	8e 8f       	std	Y+30, r24	; 0x1e
    1eca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ecc:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ece:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ed0:	8a 95       	dec	r24
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <LCD_Command+0x5d2>
    1ed4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    1ed6:	a8 e3       	ldi	r26, 0x38	; 56
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	e8 e3       	ldi	r30, 0x38	; 56
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	8d 7f       	andi	r24, 0xFD	; 253
    1ee2:	8c 93       	st	X, r24
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	a0 e0       	ldi	r26, 0x00	; 0
    1eea:	b0 e4       	ldi	r27, 0x40	; 64
    1eec:	8b 87       	std	Y+11, r24	; 0x0b
    1eee:	9c 87       	std	Y+12, r25	; 0x0c
    1ef0:	ad 87       	std	Y+13, r26	; 0x0d
    1ef2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1efa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	4a ef       	ldi	r20, 0xFA	; 250
    1f02:	54 e4       	ldi	r21, 0x44	; 68
    1f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	8f 83       	std	Y+7, r24	; 0x07
    1f0e:	98 87       	std	Y+8, r25	; 0x08
    1f10:	a9 87       	std	Y+9, r26	; 0x09
    1f12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f14:	6f 81       	ldd	r22, Y+7	; 0x07
    1f16:	78 85       	ldd	r23, Y+8	; 0x08
    1f18:	89 85       	ldd	r24, Y+9	; 0x09
    1f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e8       	ldi	r20, 0x80	; 128
    1f22:	5f e3       	ldi	r21, 0x3F	; 63
    1f24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f28:	88 23       	and	r24, r24
    1f2a:	2c f4       	brge	.+10     	; 0x1f36 <LCD_Command+0x638>
		__ticks = 1;
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	9e 83       	std	Y+6, r25	; 0x06
    1f32:	8d 83       	std	Y+5, r24	; 0x05
    1f34:	3f c0       	rjmp	.+126    	; 0x1fb4 <LCD_Command+0x6b6>
	else if (__tmp > 65535)
    1f36:	6f 81       	ldd	r22, Y+7	; 0x07
    1f38:	78 85       	ldd	r23, Y+8	; 0x08
    1f3a:	89 85       	ldd	r24, Y+9	; 0x09
    1f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	3f ef       	ldi	r19, 0xFF	; 255
    1f42:	4f e7       	ldi	r20, 0x7F	; 127
    1f44:	57 e4       	ldi	r21, 0x47	; 71
    1f46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f4a:	18 16       	cp	r1, r24
    1f4c:	4c f5       	brge	.+82     	; 0x1fa0 <LCD_Command+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e2       	ldi	r20, 0x20	; 32
    1f5c:	51 e4       	ldi	r21, 0x41	; 65
    1f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	bc 01       	movw	r22, r24
    1f68:	cd 01       	movw	r24, r26
    1f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	9e 83       	std	Y+6, r25	; 0x06
    1f74:	8d 83       	std	Y+5, r24	; 0x05
    1f76:	0f c0       	rjmp	.+30     	; 0x1f96 <LCD_Command+0x698>
    1f78:	88 ec       	ldi	r24, 0xC8	; 200
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	9c 83       	std	Y+4, r25	; 0x04
    1f7e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	9c 81       	ldd	r25, Y+4	; 0x04
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	f1 f7       	brne	.-4      	; 0x1f84 <LCD_Command+0x686>
    1f88:	9c 83       	std	Y+4, r25	; 0x04
    1f8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	9e 83       	std	Y+6, r25	; 0x06
    1f94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f96:	8d 81       	ldd	r24, Y+5	; 0x05
    1f98:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9a:	00 97       	sbiw	r24, 0x00	; 0
    1f9c:	69 f7       	brne	.-38     	; 0x1f78 <LCD_Command+0x67a>
    1f9e:	14 c0       	rjmp	.+40     	; 0x1fc8 <LCD_Command+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa2:	78 85       	ldd	r23, Y+8	; 0x08
    1fa4:	89 85       	ldd	r24, Y+9	; 0x09
    1fa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	9e 83       	std	Y+6, r25	; 0x06
    1fb2:	8d 83       	std	Y+5, r24	; 0x05
    1fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb8:	9a 83       	std	Y+2, r25	; 0x02
    1fba:	89 83       	std	Y+1, r24	; 0x01
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	f1 f7       	brne	.-4      	; 0x1fc0 <LCD_Command+0x6c2>
    1fc4:	9a 83       	std	Y+2, r25	; 0x02
    1fc6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1fc8:	c9 5a       	subi	r28, 0xA9	; 169
    1fca:	df 4f       	sbci	r29, 0xFF	; 255
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	cd bf       	out	0x3d, r28	; 61
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	1f 91       	pop	r17
    1fdc:	0f 91       	pop	r16
    1fde:	08 95       	ret

00001fe0 <LCD_Char>:


void LCD_Char( unsigned char data )
{
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	c7 55       	subi	r28, 0x57	; 87
    1fee:	d0 40       	sbci	r29, 0x00	; 0
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	de bf       	out	0x3e, r29	; 62
    1ff6:	0f be       	out	0x3f, r0	; 63
    1ff8:	cd bf       	out	0x3d, r28	; 61
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	e9 5a       	subi	r30, 0xA9	; 169
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 83       	st	Z, r24
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
    2002:	a8 e3       	ldi	r26, 0x38	; 56
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e8 e3       	ldi	r30, 0x38	; 56
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	98 2f       	mov	r25, r24
    200e:	9f 70       	andi	r25, 0x0F	; 15
    2010:	fe 01       	movw	r30, r28
    2012:	e9 5a       	subi	r30, 0xA9	; 169
    2014:	ff 4f       	sbci	r31, 0xFF	; 255
    2016:	80 81       	ld	r24, Z
    2018:	80 7f       	andi	r24, 0xF0	; 240
    201a:	89 2b       	or	r24, r25
    201c:	8c 93       	st	X, r24
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
    201e:	a8 e3       	ldi	r26, 0x38	; 56
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e8 e3       	ldi	r30, 0x38	; 56
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	81 60       	ori	r24, 0x01	; 1
    202a:	8c 93       	st	X, r24
	LCD_Port|= (1<<EN);
    202c:	a8 e3       	ldi	r26, 0x38	; 56
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	e8 e3       	ldi	r30, 0x38	; 56
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	82 60       	ori	r24, 0x02	; 2
    2038:	8c 93       	st	X, r24
    203a:	fe 01       	movw	r30, r28
    203c:	ed 5a       	subi	r30, 0xAD	; 173
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	a0 e8       	ldi	r26, 0x80	; 128
    2046:	bf e3       	ldi	r27, 0x3F	; 63
    2048:	80 83       	st	Z, r24
    204a:	91 83       	std	Z+1, r25	; 0x01
    204c:	a2 83       	std	Z+2, r26	; 0x02
    204e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2050:	8e 01       	movw	r16, r28
    2052:	01 5b       	subi	r16, 0xB1	; 177
    2054:	1f 4f       	sbci	r17, 0xFF	; 255
    2056:	fe 01       	movw	r30, r28
    2058:	ed 5a       	subi	r30, 0xAD	; 173
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	60 81       	ld	r22, Z
    205e:	71 81       	ldd	r23, Z+1	; 0x01
    2060:	82 81       	ldd	r24, Z+2	; 0x02
    2062:	93 81       	ldd	r25, Z+3	; 0x03
    2064:	2b ea       	ldi	r18, 0xAB	; 171
    2066:	3a ea       	ldi	r19, 0xAA	; 170
    2068:	4a e2       	ldi	r20, 0x2A	; 42
    206a:	50 e4       	ldi	r21, 0x40	; 64
    206c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	f8 01       	movw	r30, r16
    2076:	80 83       	st	Z, r24
    2078:	91 83       	std	Z+1, r25	; 0x01
    207a:	a2 83       	std	Z+2, r26	; 0x02
    207c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    207e:	fe 01       	movw	r30, r28
    2080:	e1 5b       	subi	r30, 0xB1	; 177
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	60 81       	ld	r22, Z
    2086:	71 81       	ldd	r23, Z+1	; 0x01
    2088:	82 81       	ldd	r24, Z+2	; 0x02
    208a:	93 81       	ldd	r25, Z+3	; 0x03
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	40 e8       	ldi	r20, 0x80	; 128
    2092:	5f e3       	ldi	r21, 0x3F	; 63
    2094:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2098:	88 23       	and	r24, r24
    209a:	34 f4       	brge	.+12     	; 0x20a8 <LCD_Char+0xc8>
		__ticks = 1;
    209c:	fe 01       	movw	r30, r28
    209e:	e2 5b       	subi	r30, 0xB2	; 178
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	80 83       	st	Z, r24
    20a6:	e0 c0       	rjmp	.+448    	; 0x2268 <LCD_Char+0x288>
	else if (__tmp > 255)
    20a8:	fe 01       	movw	r30, r28
    20aa:	e1 5b       	subi	r30, 0xB1	; 177
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	60 81       	ld	r22, Z
    20b0:	71 81       	ldd	r23, Z+1	; 0x01
    20b2:	82 81       	ldd	r24, Z+2	; 0x02
    20b4:	93 81       	ldd	r25, Z+3	; 0x03
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	4f e7       	ldi	r20, 0x7F	; 127
    20bc:	53 e4       	ldi	r21, 0x43	; 67
    20be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20c2:	18 16       	cp	r1, r24
    20c4:	0c f0       	brlt	.+2      	; 0x20c8 <LCD_Char+0xe8>
    20c6:	c0 c0       	rjmp	.+384    	; 0x2248 <LCD_Char+0x268>
	{
		_delay_ms(__us / 1000.0);
    20c8:	fe 01       	movw	r30, r28
    20ca:	ed 5a       	subi	r30, 0xAD	; 173
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	60 81       	ld	r22, Z
    20d0:	71 81       	ldd	r23, Z+1	; 0x01
    20d2:	82 81       	ldd	r24, Z+2	; 0x02
    20d4:	93 81       	ldd	r25, Z+3	; 0x03
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	4a e7       	ldi	r20, 0x7A	; 122
    20dc:	54 e4       	ldi	r21, 0x44	; 68
    20de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	fe 01       	movw	r30, r28
    20e8:	e6 5b       	subi	r30, 0xB6	; 182
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	80 83       	st	Z, r24
    20ee:	91 83       	std	Z+1, r25	; 0x01
    20f0:	a2 83       	std	Z+2, r26	; 0x02
    20f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f4:	8e 01       	movw	r16, r28
    20f6:	0a 5b       	subi	r16, 0xBA	; 186
    20f8:	1f 4f       	sbci	r17, 0xFF	; 255
    20fa:	fe 01       	movw	r30, r28
    20fc:	e6 5b       	subi	r30, 0xB6	; 182
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	60 81       	ld	r22, Z
    2102:	71 81       	ldd	r23, Z+1	; 0x01
    2104:	82 81       	ldd	r24, Z+2	; 0x02
    2106:	93 81       	ldd	r25, Z+3	; 0x03
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	4a ef       	ldi	r20, 0xFA	; 250
    210e:	54 e4       	ldi	r21, 0x44	; 68
    2110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	f8 01       	movw	r30, r16
    211a:	80 83       	st	Z, r24
    211c:	91 83       	std	Z+1, r25	; 0x01
    211e:	a2 83       	std	Z+2, r26	; 0x02
    2120:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2122:	fe 01       	movw	r30, r28
    2124:	ea 5b       	subi	r30, 0xBA	; 186
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	60 81       	ld	r22, Z
    212a:	71 81       	ldd	r23, Z+1	; 0x01
    212c:	82 81       	ldd	r24, Z+2	; 0x02
    212e:	93 81       	ldd	r25, Z+3	; 0x03
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e8       	ldi	r20, 0x80	; 128
    2136:	5f e3       	ldi	r21, 0x3F	; 63
    2138:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    213c:	88 23       	and	r24, r24
    213e:	44 f4       	brge	.+16     	; 0x2150 <LCD_Char+0x170>
		__ticks = 1;
    2140:	fe 01       	movw	r30, r28
    2142:	ec 5b       	subi	r30, 0xBC	; 188
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	91 83       	std	Z+1, r25	; 0x01
    214c:	80 83       	st	Z, r24
    214e:	64 c0       	rjmp	.+200    	; 0x2218 <LCD_Char+0x238>
	else if (__tmp > 65535)
    2150:	fe 01       	movw	r30, r28
    2152:	ea 5b       	subi	r30, 0xBA	; 186
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	60 81       	ld	r22, Z
    2158:	71 81       	ldd	r23, Z+1	; 0x01
    215a:	82 81       	ldd	r24, Z+2	; 0x02
    215c:	93 81       	ldd	r25, Z+3	; 0x03
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	3f ef       	ldi	r19, 0xFF	; 255
    2162:	4f e7       	ldi	r20, 0x7F	; 127
    2164:	57 e4       	ldi	r21, 0x47	; 71
    2166:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    216a:	18 16       	cp	r1, r24
    216c:	0c f0       	brlt	.+2      	; 0x2170 <LCD_Char+0x190>
    216e:	43 c0       	rjmp	.+134    	; 0x21f6 <LCD_Char+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2170:	fe 01       	movw	r30, r28
    2172:	e6 5b       	subi	r30, 0xB6	; 182
    2174:	ff 4f       	sbci	r31, 0xFF	; 255
    2176:	60 81       	ld	r22, Z
    2178:	71 81       	ldd	r23, Z+1	; 0x01
    217a:	82 81       	ldd	r24, Z+2	; 0x02
    217c:	93 81       	ldd	r25, Z+3	; 0x03
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	40 e2       	ldi	r20, 0x20	; 32
    2184:	51 e4       	ldi	r21, 0x41	; 65
    2186:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	8e 01       	movw	r16, r28
    2190:	0c 5b       	subi	r16, 0xBC	; 188
    2192:	1f 4f       	sbci	r17, 0xFF	; 255
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	f8 01       	movw	r30, r16
    21a2:	91 83       	std	Z+1, r25	; 0x01
    21a4:	80 83       	st	Z, r24
    21a6:	1f c0       	rjmp	.+62     	; 0x21e6 <LCD_Char+0x206>
    21a8:	fe 01       	movw	r30, r28
    21aa:	ee 5b       	subi	r30, 0xBE	; 190
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	88 ec       	ldi	r24, 0xC8	; 200
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	91 83       	std	Z+1, r25	; 0x01
    21b4:	80 83       	st	Z, r24
    21b6:	fe 01       	movw	r30, r28
    21b8:	ee 5b       	subi	r30, 0xBE	; 190
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	80 81       	ld	r24, Z
    21be:	91 81       	ldd	r25, Z+1	; 0x01
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	f1 f7       	brne	.-4      	; 0x21c0 <LCD_Char+0x1e0>
    21c4:	fe 01       	movw	r30, r28
    21c6:	ee 5b       	subi	r30, 0xBE	; 190
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	91 83       	std	Z+1, r25	; 0x01
    21cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ce:	de 01       	movw	r26, r28
    21d0:	ac 5b       	subi	r26, 0xBC	; 188
    21d2:	bf 4f       	sbci	r27, 0xFF	; 255
    21d4:	fe 01       	movw	r30, r28
    21d6:	ec 5b       	subi	r30, 0xBC	; 188
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	80 81       	ld	r24, Z
    21dc:	91 81       	ldd	r25, Z+1	; 0x01
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	11 96       	adiw	r26, 0x01	; 1
    21e2:	9c 93       	st	X, r25
    21e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e6:	fe 01       	movw	r30, r28
    21e8:	ec 5b       	subi	r30, 0xBC	; 188
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	80 81       	ld	r24, Z
    21ee:	91 81       	ldd	r25, Z+1	; 0x01
    21f0:	00 97       	sbiw	r24, 0x00	; 0
    21f2:	d1 f6       	brne	.-76     	; 0x21a8 <LCD_Char+0x1c8>
    21f4:	42 c0       	rjmp	.+132    	; 0x227a <LCD_Char+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f6:	8e 01       	movw	r16, r28
    21f8:	0c 5b       	subi	r16, 0xBC	; 188
    21fa:	1f 4f       	sbci	r17, 0xFF	; 255
    21fc:	fe 01       	movw	r30, r28
    21fe:	ea 5b       	subi	r30, 0xBA	; 186
    2200:	ff 4f       	sbci	r31, 0xFF	; 255
    2202:	60 81       	ld	r22, Z
    2204:	71 81       	ldd	r23, Z+1	; 0x01
    2206:	82 81       	ldd	r24, Z+2	; 0x02
    2208:	93 81       	ldd	r25, Z+3	; 0x03
    220a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	f8 01       	movw	r30, r16
    2214:	91 83       	std	Z+1, r25	; 0x01
    2216:	80 83       	st	Z, r24
    2218:	de 01       	movw	r26, r28
    221a:	a0 5c       	subi	r26, 0xC0	; 192
    221c:	bf 4f       	sbci	r27, 0xFF	; 255
    221e:	fe 01       	movw	r30, r28
    2220:	ec 5b       	subi	r30, 0xBC	; 188
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	80 81       	ld	r24, Z
    2226:	91 81       	ldd	r25, Z+1	; 0x01
    2228:	11 96       	adiw	r26, 0x01	; 1
    222a:	9c 93       	st	X, r25
    222c:	8e 93       	st	-X, r24
    222e:	fe 01       	movw	r30, r28
    2230:	e0 5c       	subi	r30, 0xC0	; 192
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	80 81       	ld	r24, Z
    2236:	91 81       	ldd	r25, Z+1	; 0x01
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	f1 f7       	brne	.-4      	; 0x2238 <LCD_Char+0x258>
    223c:	fe 01       	movw	r30, r28
    223e:	e0 5c       	subi	r30, 0xC0	; 192
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	91 83       	std	Z+1, r25	; 0x01
    2244:	80 83       	st	Z, r24
    2246:	19 c0       	rjmp	.+50     	; 0x227a <LCD_Char+0x29a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2248:	8e 01       	movw	r16, r28
    224a:	02 5b       	subi	r16, 0xB2	; 178
    224c:	1f 4f       	sbci	r17, 0xFF	; 255
    224e:	fe 01       	movw	r30, r28
    2250:	e1 5b       	subi	r30, 0xB1	; 177
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	60 81       	ld	r22, Z
    2256:	71 81       	ldd	r23, Z+1	; 0x01
    2258:	82 81       	ldd	r24, Z+2	; 0x02
    225a:	93 81       	ldd	r25, Z+3	; 0x03
    225c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	f8 01       	movw	r30, r16
    2266:	80 83       	st	Z, r24
    2268:	fe 01       	movw	r30, r28
    226a:	e2 5b       	subi	r30, 0xB2	; 178
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	80 81       	ld	r24, Z
    2270:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2272:	8f ad       	ldd	r24, Y+63	; 0x3f
    2274:	8a 95       	dec	r24
    2276:	f1 f7       	brne	.-4      	; 0x2274 <LCD_Char+0x294>
    2278:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    227a:	a8 e3       	ldi	r26, 0x38	; 56
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	e8 e3       	ldi	r30, 0x38	; 56
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	8d 7f       	andi	r24, 0xFD	; 253
    2286:	8c 93       	st	X, r24
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	a8 e4       	ldi	r26, 0x48	; 72
    228e:	b3 e4       	ldi	r27, 0x43	; 67
    2290:	8b af       	std	Y+59, r24	; 0x3b
    2292:	9c af       	std	Y+60, r25	; 0x3c
    2294:	ad af       	std	Y+61, r26	; 0x3d
    2296:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2298:	6b ad       	ldd	r22, Y+59	; 0x3b
    229a:	7c ad       	ldd	r23, Y+60	; 0x3c
    229c:	8d ad       	ldd	r24, Y+61	; 0x3d
    229e:	9e ad       	ldd	r25, Y+62	; 0x3e
    22a0:	2b ea       	ldi	r18, 0xAB	; 171
    22a2:	3a ea       	ldi	r19, 0xAA	; 170
    22a4:	4a e2       	ldi	r20, 0x2A	; 42
    22a6:	50 e4       	ldi	r21, 0x40	; 64
    22a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	8f ab       	std	Y+55, r24	; 0x37
    22b2:	98 af       	std	Y+56, r25	; 0x38
    22b4:	a9 af       	std	Y+57, r26	; 0x39
    22b6:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    22b8:	6f a9       	ldd	r22, Y+55	; 0x37
    22ba:	78 ad       	ldd	r23, Y+56	; 0x38
    22bc:	89 ad       	ldd	r24, Y+57	; 0x39
    22be:	9a ad       	ldd	r25, Y+58	; 0x3a
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e8       	ldi	r20, 0x80	; 128
    22c6:	5f e3       	ldi	r21, 0x3F	; 63
    22c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22cc:	88 23       	and	r24, r24
    22ce:	1c f4       	brge	.+6      	; 0x22d6 <LCD_Char+0x2f6>
		__ticks = 1;
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	8e ab       	std	Y+54, r24	; 0x36
    22d4:	91 c0       	rjmp	.+290    	; 0x23f8 <LCD_Char+0x418>
	else if (__tmp > 255)
    22d6:	6f a9       	ldd	r22, Y+55	; 0x37
    22d8:	78 ad       	ldd	r23, Y+56	; 0x38
    22da:	89 ad       	ldd	r24, Y+57	; 0x39
    22dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	4f e7       	ldi	r20, 0x7F	; 127
    22e4:	53 e4       	ldi	r21, 0x43	; 67
    22e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22ea:	18 16       	cp	r1, r24
    22ec:	0c f0       	brlt	.+2      	; 0x22f0 <LCD_Char+0x310>
    22ee:	7b c0       	rjmp	.+246    	; 0x23e6 <LCD_Char+0x406>
	{
		_delay_ms(__us / 1000.0);
    22f0:	6b ad       	ldd	r22, Y+59	; 0x3b
    22f2:	7c ad       	ldd	r23, Y+60	; 0x3c
    22f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    22f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	4a e7       	ldi	r20, 0x7A	; 122
    22fe:	54 e4       	ldi	r21, 0x44	; 68
    2300:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	8a ab       	std	Y+50, r24	; 0x32
    230a:	9b ab       	std	Y+51, r25	; 0x33
    230c:	ac ab       	std	Y+52, r26	; 0x34
    230e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2310:	6a a9       	ldd	r22, Y+50	; 0x32
    2312:	7b a9       	ldd	r23, Y+51	; 0x33
    2314:	8c a9       	ldd	r24, Y+52	; 0x34
    2316:	9d a9       	ldd	r25, Y+53	; 0x35
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	4a ef       	ldi	r20, 0xFA	; 250
    231e:	54 e4       	ldi	r21, 0x44	; 68
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	8e a7       	std	Y+46, r24	; 0x2e
    232a:	9f a7       	std	Y+47, r25	; 0x2f
    232c:	a8 ab       	std	Y+48, r26	; 0x30
    232e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2330:	6e a5       	ldd	r22, Y+46	; 0x2e
    2332:	7f a5       	ldd	r23, Y+47	; 0x2f
    2334:	88 a9       	ldd	r24, Y+48	; 0x30
    2336:	99 a9       	ldd	r25, Y+49	; 0x31
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e8       	ldi	r20, 0x80	; 128
    233e:	5f e3       	ldi	r21, 0x3F	; 63
    2340:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2344:	88 23       	and	r24, r24
    2346:	2c f4       	brge	.+10     	; 0x2352 <LCD_Char+0x372>
		__ticks = 1;
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	9d a7       	std	Y+45, r25	; 0x2d
    234e:	8c a7       	std	Y+44, r24	; 0x2c
    2350:	3f c0       	rjmp	.+126    	; 0x23d0 <LCD_Char+0x3f0>
	else if (__tmp > 65535)
    2352:	6e a5       	ldd	r22, Y+46	; 0x2e
    2354:	7f a5       	ldd	r23, Y+47	; 0x2f
    2356:	88 a9       	ldd	r24, Y+48	; 0x30
    2358:	99 a9       	ldd	r25, Y+49	; 0x31
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	3f ef       	ldi	r19, 0xFF	; 255
    235e:	4f e7       	ldi	r20, 0x7F	; 127
    2360:	57 e4       	ldi	r21, 0x47	; 71
    2362:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2366:	18 16       	cp	r1, r24
    2368:	4c f5       	brge	.+82     	; 0x23bc <LCD_Char+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236a:	6a a9       	ldd	r22, Y+50	; 0x32
    236c:	7b a9       	ldd	r23, Y+51	; 0x33
    236e:	8c a9       	ldd	r24, Y+52	; 0x34
    2370:	9d a9       	ldd	r25, Y+53	; 0x35
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e2       	ldi	r20, 0x20	; 32
    2378:	51 e4       	ldi	r21, 0x41	; 65
    237a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	bc 01       	movw	r22, r24
    2384:	cd 01       	movw	r24, r26
    2386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	9d a7       	std	Y+45, r25	; 0x2d
    2390:	8c a7       	std	Y+44, r24	; 0x2c
    2392:	0f c0       	rjmp	.+30     	; 0x23b2 <LCD_Char+0x3d2>
    2394:	88 ec       	ldi	r24, 0xC8	; 200
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	9b a7       	std	Y+43, r25	; 0x2b
    239a:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    239c:	8a a5       	ldd	r24, Y+42	; 0x2a
    239e:	9b a5       	ldd	r25, Y+43	; 0x2b
    23a0:	01 97       	sbiw	r24, 0x01	; 1
    23a2:	f1 f7       	brne	.-4      	; 0x23a0 <LCD_Char+0x3c0>
    23a4:	9b a7       	std	Y+43, r25	; 0x2b
    23a6:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    23aa:	9d a5       	ldd	r25, Y+45	; 0x2d
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	9d a7       	std	Y+45, r25	; 0x2d
    23b0:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b2:	8c a5       	ldd	r24, Y+44	; 0x2c
    23b4:	9d a5       	ldd	r25, Y+45	; 0x2d
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	69 f7       	brne	.-38     	; 0x2394 <LCD_Char+0x3b4>
    23ba:	24 c0       	rjmp	.+72     	; 0x2404 <LCD_Char+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23bc:	6e a5       	ldd	r22, Y+46	; 0x2e
    23be:	7f a5       	ldd	r23, Y+47	; 0x2f
    23c0:	88 a9       	ldd	r24, Y+48	; 0x30
    23c2:	99 a9       	ldd	r25, Y+49	; 0x31
    23c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	9d a7       	std	Y+45, r25	; 0x2d
    23ce:	8c a7       	std	Y+44, r24	; 0x2c
    23d0:	8c a5       	ldd	r24, Y+44	; 0x2c
    23d2:	9d a5       	ldd	r25, Y+45	; 0x2d
    23d4:	99 a7       	std	Y+41, r25	; 0x29
    23d6:	88 a7       	std	Y+40, r24	; 0x28
    23d8:	88 a5       	ldd	r24, Y+40	; 0x28
    23da:	99 a5       	ldd	r25, Y+41	; 0x29
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	f1 f7       	brne	.-4      	; 0x23dc <LCD_Char+0x3fc>
    23e0:	99 a7       	std	Y+41, r25	; 0x29
    23e2:	88 a7       	std	Y+40, r24	; 0x28
    23e4:	0f c0       	rjmp	.+30     	; 0x2404 <LCD_Char+0x424>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23e6:	6f a9       	ldd	r22, Y+55	; 0x37
    23e8:	78 ad       	ldd	r23, Y+56	; 0x38
    23ea:	89 ad       	ldd	r24, Y+57	; 0x39
    23ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    23ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	8e ab       	std	Y+54, r24	; 0x36
    23f8:	8e a9       	ldd	r24, Y+54	; 0x36
    23fa:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23fc:	8f a1       	ldd	r24, Y+39	; 0x27
    23fe:	8a 95       	dec	r24
    2400:	f1 f7       	brne	.-4      	; 0x23fe <LCD_Char+0x41e>
    2402:	8f a3       	std	Y+39, r24	; 0x27

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
    2404:	a8 e3       	ldi	r26, 0x38	; 56
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	e8 e3       	ldi	r30, 0x38	; 56
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	28 2f       	mov	r18, r24
    2410:	2f 70       	andi	r18, 0x0F	; 15
    2412:	fe 01       	movw	r30, r28
    2414:	e9 5a       	subi	r30, 0xA9	; 169
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	80 81       	ld	r24, Z
    241a:	88 2f       	mov	r24, r24
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	82 95       	swap	r24
    2420:	92 95       	swap	r25
    2422:	90 7f       	andi	r25, 0xF0	; 240
    2424:	98 27       	eor	r25, r24
    2426:	80 7f       	andi	r24, 0xF0	; 240
    2428:	98 27       	eor	r25, r24
    242a:	82 2b       	or	r24, r18
    242c:	8c 93       	st	X, r24
	LCD_Port |= (1<<EN);
    242e:	a8 e3       	ldi	r26, 0x38	; 56
    2430:	b0 e0       	ldi	r27, 0x00	; 0
    2432:	e8 e3       	ldi	r30, 0x38	; 56
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	82 60       	ori	r24, 0x02	; 2
    243a:	8c 93       	st	X, r24
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	a0 e8       	ldi	r26, 0x80	; 128
    2442:	bf e3       	ldi	r27, 0x3F	; 63
    2444:	8b a3       	std	Y+35, r24	; 0x23
    2446:	9c a3       	std	Y+36, r25	; 0x24
    2448:	ad a3       	std	Y+37, r26	; 0x25
    244a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    244c:	6b a1       	ldd	r22, Y+35	; 0x23
    244e:	7c a1       	ldd	r23, Y+36	; 0x24
    2450:	8d a1       	ldd	r24, Y+37	; 0x25
    2452:	9e a1       	ldd	r25, Y+38	; 0x26
    2454:	2b ea       	ldi	r18, 0xAB	; 171
    2456:	3a ea       	ldi	r19, 0xAA	; 170
    2458:	4a e2       	ldi	r20, 0x2A	; 42
    245a:	50 e4       	ldi	r21, 0x40	; 64
    245c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2460:	dc 01       	movw	r26, r24
    2462:	cb 01       	movw	r24, r22
    2464:	8f 8f       	std	Y+31, r24	; 0x1f
    2466:	98 a3       	std	Y+32, r25	; 0x20
    2468:	a9 a3       	std	Y+33, r26	; 0x21
    246a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    246c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    246e:	78 a1       	ldd	r23, Y+32	; 0x20
    2470:	89 a1       	ldd	r24, Y+33	; 0x21
    2472:	9a a1       	ldd	r25, Y+34	; 0x22
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	40 e8       	ldi	r20, 0x80	; 128
    247a:	5f e3       	ldi	r21, 0x3F	; 63
    247c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2480:	88 23       	and	r24, r24
    2482:	1c f4       	brge	.+6      	; 0x248a <LCD_Char+0x4aa>
		__ticks = 1;
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	8e 8f       	std	Y+30, r24	; 0x1e
    2488:	91 c0       	rjmp	.+290    	; 0x25ac <LCD_Char+0x5cc>
	else if (__tmp > 255)
    248a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    248c:	78 a1       	ldd	r23, Y+32	; 0x20
    248e:	89 a1       	ldd	r24, Y+33	; 0x21
    2490:	9a a1       	ldd	r25, Y+34	; 0x22
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	4f e7       	ldi	r20, 0x7F	; 127
    2498:	53 e4       	ldi	r21, 0x43	; 67
    249a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    249e:	18 16       	cp	r1, r24
    24a0:	0c f0       	brlt	.+2      	; 0x24a4 <LCD_Char+0x4c4>
    24a2:	7b c0       	rjmp	.+246    	; 0x259a <LCD_Char+0x5ba>
	{
		_delay_ms(__us / 1000.0);
    24a4:	6b a1       	ldd	r22, Y+35	; 0x23
    24a6:	7c a1       	ldd	r23, Y+36	; 0x24
    24a8:	8d a1       	ldd	r24, Y+37	; 0x25
    24aa:	9e a1       	ldd	r25, Y+38	; 0x26
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	4a e7       	ldi	r20, 0x7A	; 122
    24b2:	54 e4       	ldi	r21, 0x44	; 68
    24b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	8a 8f       	std	Y+26, r24	; 0x1a
    24be:	9b 8f       	std	Y+27, r25	; 0x1b
    24c0:	ac 8f       	std	Y+28, r26	; 0x1c
    24c2:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    24c6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    24c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24ca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	4a ef       	ldi	r20, 0xFA	; 250
    24d2:	54 e4       	ldi	r21, 0x44	; 68
    24d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	8e 8b       	std	Y+22, r24	; 0x16
    24de:	9f 8b       	std	Y+23, r25	; 0x17
    24e0:	a8 8f       	std	Y+24, r26	; 0x18
    24e2:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    24e4:	6e 89       	ldd	r22, Y+22	; 0x16
    24e6:	7f 89       	ldd	r23, Y+23	; 0x17
    24e8:	88 8d       	ldd	r24, Y+24	; 0x18
    24ea:	99 8d       	ldd	r25, Y+25	; 0x19
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	40 e8       	ldi	r20, 0x80	; 128
    24f2:	5f e3       	ldi	r21, 0x3F	; 63
    24f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f8:	88 23       	and	r24, r24
    24fa:	2c f4       	brge	.+10     	; 0x2506 <LCD_Char+0x526>
		__ticks = 1;
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	9d 8b       	std	Y+21, r25	; 0x15
    2502:	8c 8b       	std	Y+20, r24	; 0x14
    2504:	3f c0       	rjmp	.+126    	; 0x2584 <LCD_Char+0x5a4>
	else if (__tmp > 65535)
    2506:	6e 89       	ldd	r22, Y+22	; 0x16
    2508:	7f 89       	ldd	r23, Y+23	; 0x17
    250a:	88 8d       	ldd	r24, Y+24	; 0x18
    250c:	99 8d       	ldd	r25, Y+25	; 0x19
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	3f ef       	ldi	r19, 0xFF	; 255
    2512:	4f e7       	ldi	r20, 0x7F	; 127
    2514:	57 e4       	ldi	r21, 0x47	; 71
    2516:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    251a:	18 16       	cp	r1, r24
    251c:	4c f5       	brge	.+82     	; 0x2570 <LCD_Char+0x590>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2520:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2522:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2524:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	40 e2       	ldi	r20, 0x20	; 32
    252c:	51 e4       	ldi	r21, 0x41	; 65
    252e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	bc 01       	movw	r22, r24
    2538:	cd 01       	movw	r24, r26
    253a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	9d 8b       	std	Y+21, r25	; 0x15
    2544:	8c 8b       	std	Y+20, r24	; 0x14
    2546:	0f c0       	rjmp	.+30     	; 0x2566 <LCD_Char+0x586>
    2548:	88 ec       	ldi	r24, 0xC8	; 200
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	9b 8b       	std	Y+19, r25	; 0x13
    254e:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2550:	8a 89       	ldd	r24, Y+18	; 0x12
    2552:	9b 89       	ldd	r25, Y+19	; 0x13
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	f1 f7       	brne	.-4      	; 0x2554 <LCD_Char+0x574>
    2558:	9b 8b       	std	Y+19, r25	; 0x13
    255a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    255c:	8c 89       	ldd	r24, Y+20	; 0x14
    255e:	9d 89       	ldd	r25, Y+21	; 0x15
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	9d 8b       	std	Y+21, r25	; 0x15
    2564:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2566:	8c 89       	ldd	r24, Y+20	; 0x14
    2568:	9d 89       	ldd	r25, Y+21	; 0x15
    256a:	00 97       	sbiw	r24, 0x00	; 0
    256c:	69 f7       	brne	.-38     	; 0x2548 <LCD_Char+0x568>
    256e:	24 c0       	rjmp	.+72     	; 0x25b8 <LCD_Char+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2570:	6e 89       	ldd	r22, Y+22	; 0x16
    2572:	7f 89       	ldd	r23, Y+23	; 0x17
    2574:	88 8d       	ldd	r24, Y+24	; 0x18
    2576:	99 8d       	ldd	r25, Y+25	; 0x19
    2578:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	9d 8b       	std	Y+21, r25	; 0x15
    2582:	8c 8b       	std	Y+20, r24	; 0x14
    2584:	8c 89       	ldd	r24, Y+20	; 0x14
    2586:	9d 89       	ldd	r25, Y+21	; 0x15
    2588:	99 8b       	std	Y+17, r25	; 0x11
    258a:	88 8b       	std	Y+16, r24	; 0x10
    258c:	88 89       	ldd	r24, Y+16	; 0x10
    258e:	99 89       	ldd	r25, Y+17	; 0x11
    2590:	01 97       	sbiw	r24, 0x01	; 1
    2592:	f1 f7       	brne	.-4      	; 0x2590 <LCD_Char+0x5b0>
    2594:	99 8b       	std	Y+17, r25	; 0x11
    2596:	88 8b       	std	Y+16, r24	; 0x10
    2598:	0f c0       	rjmp	.+30     	; 0x25b8 <LCD_Char+0x5d8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    259a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    259c:	78 a1       	ldd	r23, Y+32	; 0x20
    259e:	89 a1       	ldd	r24, Y+33	; 0x21
    25a0:	9a a1       	ldd	r25, Y+34	; 0x22
    25a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	8e 8f       	std	Y+30, r24	; 0x1e
    25ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25ae:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25b2:	8a 95       	dec	r24
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <LCD_Char+0x5d2>
    25b6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
    25b8:	a8 e3       	ldi	r26, 0x38	; 56
    25ba:	b0 e0       	ldi	r27, 0x00	; 0
    25bc:	e8 e3       	ldi	r30, 0x38	; 56
    25be:	f0 e0       	ldi	r31, 0x00	; 0
    25c0:	80 81       	ld	r24, Z
    25c2:	8d 7f       	andi	r24, 0xFD	; 253
    25c4:	8c 93       	st	X, r24
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	a0 e0       	ldi	r26, 0x00	; 0
    25cc:	b0 e4       	ldi	r27, 0x40	; 64
    25ce:	8b 87       	std	Y+11, r24	; 0x0b
    25d0:	9c 87       	std	Y+12, r25	; 0x0c
    25d2:	ad 87       	std	Y+13, r26	; 0x0d
    25d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25da:	8d 85       	ldd	r24, Y+13	; 0x0d
    25dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	4a ef       	ldi	r20, 0xFA	; 250
    25e4:	54 e4       	ldi	r21, 0x44	; 68
    25e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	8f 83       	std	Y+7, r24	; 0x07
    25f0:	98 87       	std	Y+8, r25	; 0x08
    25f2:	a9 87       	std	Y+9, r26	; 0x09
    25f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25f6:	6f 81       	ldd	r22, Y+7	; 0x07
    25f8:	78 85       	ldd	r23, Y+8	; 0x08
    25fa:	89 85       	ldd	r24, Y+9	; 0x09
    25fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e8       	ldi	r20, 0x80	; 128
    2604:	5f e3       	ldi	r21, 0x3F	; 63
    2606:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    260a:	88 23       	and	r24, r24
    260c:	2c f4       	brge	.+10     	; 0x2618 <LCD_Char+0x638>
		__ticks = 1;
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	9e 83       	std	Y+6, r25	; 0x06
    2614:	8d 83       	std	Y+5, r24	; 0x05
    2616:	3f c0       	rjmp	.+126    	; 0x2696 <LCD_Char+0x6b6>
	else if (__tmp > 65535)
    2618:	6f 81       	ldd	r22, Y+7	; 0x07
    261a:	78 85       	ldd	r23, Y+8	; 0x08
    261c:	89 85       	ldd	r24, Y+9	; 0x09
    261e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	3f ef       	ldi	r19, 0xFF	; 255
    2624:	4f e7       	ldi	r20, 0x7F	; 127
    2626:	57 e4       	ldi	r21, 0x47	; 71
    2628:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    262c:	18 16       	cp	r1, r24
    262e:	4c f5       	brge	.+82     	; 0x2682 <LCD_Char+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2630:	6b 85       	ldd	r22, Y+11	; 0x0b
    2632:	7c 85       	ldd	r23, Y+12	; 0x0c
    2634:	8d 85       	ldd	r24, Y+13	; 0x0d
    2636:	9e 85       	ldd	r25, Y+14	; 0x0e
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e2       	ldi	r20, 0x20	; 32
    263e:	51 e4       	ldi	r21, 0x41	; 65
    2640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	bc 01       	movw	r22, r24
    264a:	cd 01       	movw	r24, r26
    264c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	9e 83       	std	Y+6, r25	; 0x06
    2656:	8d 83       	std	Y+5, r24	; 0x05
    2658:	0f c0       	rjmp	.+30     	; 0x2678 <LCD_Char+0x698>
    265a:	88 ec       	ldi	r24, 0xC8	; 200
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	9c 83       	std	Y+4, r25	; 0x04
    2660:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2662:	8b 81       	ldd	r24, Y+3	; 0x03
    2664:	9c 81       	ldd	r25, Y+4	; 0x04
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	f1 f7       	brne	.-4      	; 0x2666 <LCD_Char+0x686>
    266a:	9c 83       	std	Y+4, r25	; 0x04
    266c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    266e:	8d 81       	ldd	r24, Y+5	; 0x05
    2670:	9e 81       	ldd	r25, Y+6	; 0x06
    2672:	01 97       	sbiw	r24, 0x01	; 1
    2674:	9e 83       	std	Y+6, r25	; 0x06
    2676:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2678:	8d 81       	ldd	r24, Y+5	; 0x05
    267a:	9e 81       	ldd	r25, Y+6	; 0x06
    267c:	00 97       	sbiw	r24, 0x00	; 0
    267e:	69 f7       	brne	.-38     	; 0x265a <LCD_Char+0x67a>
    2680:	14 c0       	rjmp	.+40     	; 0x26aa <LCD_Char+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2682:	6f 81       	ldd	r22, Y+7	; 0x07
    2684:	78 85       	ldd	r23, Y+8	; 0x08
    2686:	89 85       	ldd	r24, Y+9	; 0x09
    2688:	9a 85       	ldd	r25, Y+10	; 0x0a
    268a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	9e 83       	std	Y+6, r25	; 0x06
    2694:	8d 83       	std	Y+5, r24	; 0x05
    2696:	8d 81       	ldd	r24, Y+5	; 0x05
    2698:	9e 81       	ldd	r25, Y+6	; 0x06
    269a:	9a 83       	std	Y+2, r25	; 0x02
    269c:	89 83       	std	Y+1, r24	; 0x01
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	9a 81       	ldd	r25, Y+2	; 0x02
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	f1 f7       	brne	.-4      	; 0x26a2 <LCD_Char+0x6c2>
    26a6:	9a 83       	std	Y+2, r25	; 0x02
    26a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    26aa:	c9 5a       	subi	r28, 0xA9	; 169
    26ac:	df 4f       	sbci	r29, 0xFF	; 255
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	f8 94       	cli
    26b2:	de bf       	out	0x3e, r29	; 62
    26b4:	0f be       	out	0x3f, r0	; 63
    26b6:	cd bf       	out	0x3d, r28	; 61
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	1f 91       	pop	r17
    26be:	0f 91       	pop	r16
    26c0:	08 95       	ret

000026c2 <LCD_Init>:

void LCD_Init (void)			/* LCD Initialize function */
{
    26c2:	df 93       	push	r29
    26c4:	cf 93       	push	r28
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	6c 97       	sbiw	r28, 0x1c	; 28
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	de bf       	out	0x3e, r29	; 62
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	cd bf       	out	0x3d, r28	; 61
	LCD_Dir = 0xFF;			/* Make LCD port direction as o/p */
    26d6:	e7 e3       	ldi	r30, 0x37	; 55
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	8f ef       	ldi	r24, 0xFF	; 255
    26dc:	80 83       	st	Z, r24
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	a0 e2       	ldi	r26, 0x20	; 32
    26e4:	b2 e4       	ldi	r27, 0x42	; 66
    26e6:	89 8f       	std	Y+25, r24	; 0x19
    26e8:	9a 8f       	std	Y+26, r25	; 0x1a
    26ea:	ab 8f       	std	Y+27, r26	; 0x1b
    26ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ee:	69 8d       	ldd	r22, Y+25	; 0x19
    26f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	4a ef       	ldi	r20, 0xFA	; 250
    26fc:	54 e4       	ldi	r21, 0x44	; 68
    26fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	8d 8b       	std	Y+21, r24	; 0x15
    2708:	9e 8b       	std	Y+22, r25	; 0x16
    270a:	af 8b       	std	Y+23, r26	; 0x17
    270c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    270e:	6d 89       	ldd	r22, Y+21	; 0x15
    2710:	7e 89       	ldd	r23, Y+22	; 0x16
    2712:	8f 89       	ldd	r24, Y+23	; 0x17
    2714:	98 8d       	ldd	r25, Y+24	; 0x18
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	40 e8       	ldi	r20, 0x80	; 128
    271c:	5f e3       	ldi	r21, 0x3F	; 63
    271e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2722:	88 23       	and	r24, r24
    2724:	2c f4       	brge	.+10     	; 0x2730 <LCD_Init+0x6e>
		__ticks = 1;
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	9c 8b       	std	Y+20, r25	; 0x14
    272c:	8b 8b       	std	Y+19, r24	; 0x13
    272e:	3f c0       	rjmp	.+126    	; 0x27ae <LCD_Init+0xec>
	else if (__tmp > 65535)
    2730:	6d 89       	ldd	r22, Y+21	; 0x15
    2732:	7e 89       	ldd	r23, Y+22	; 0x16
    2734:	8f 89       	ldd	r24, Y+23	; 0x17
    2736:	98 8d       	ldd	r25, Y+24	; 0x18
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	3f ef       	ldi	r19, 0xFF	; 255
    273c:	4f e7       	ldi	r20, 0x7F	; 127
    273e:	57 e4       	ldi	r21, 0x47	; 71
    2740:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2744:	18 16       	cp	r1, r24
    2746:	4c f5       	brge	.+82     	; 0x279a <LCD_Init+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2748:	69 8d       	ldd	r22, Y+25	; 0x19
    274a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    274c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    274e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	40 e2       	ldi	r20, 0x20	; 32
    2756:	51 e4       	ldi	r21, 0x41	; 65
    2758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	bc 01       	movw	r22, r24
    2762:	cd 01       	movw	r24, r26
    2764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	9c 8b       	std	Y+20, r25	; 0x14
    276e:	8b 8b       	std	Y+19, r24	; 0x13
    2770:	0f c0       	rjmp	.+30     	; 0x2790 <LCD_Init+0xce>
    2772:	88 ec       	ldi	r24, 0xC8	; 200
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	9a 8b       	std	Y+18, r25	; 0x12
    2778:	89 8b       	std	Y+17, r24	; 0x11
    277a:	89 89       	ldd	r24, Y+17	; 0x11
    277c:	9a 89       	ldd	r25, Y+18	; 0x12
    277e:	01 97       	sbiw	r24, 0x01	; 1
    2780:	f1 f7       	brne	.-4      	; 0x277e <LCD_Init+0xbc>
    2782:	9a 8b       	std	Y+18, r25	; 0x12
    2784:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2786:	8b 89       	ldd	r24, Y+19	; 0x13
    2788:	9c 89       	ldd	r25, Y+20	; 0x14
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	9c 8b       	std	Y+20, r25	; 0x14
    278e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2790:	8b 89       	ldd	r24, Y+19	; 0x13
    2792:	9c 89       	ldd	r25, Y+20	; 0x14
    2794:	00 97       	sbiw	r24, 0x00	; 0
    2796:	69 f7       	brne	.-38     	; 0x2772 <LCD_Init+0xb0>
    2798:	14 c0       	rjmp	.+40     	; 0x27c2 <LCD_Init+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    279a:	6d 89       	ldd	r22, Y+21	; 0x15
    279c:	7e 89       	ldd	r23, Y+22	; 0x16
    279e:	8f 89       	ldd	r24, Y+23	; 0x17
    27a0:	98 8d       	ldd	r25, Y+24	; 0x18
    27a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	9c 8b       	std	Y+20, r25	; 0x14
    27ac:	8b 8b       	std	Y+19, r24	; 0x13
    27ae:	8b 89       	ldd	r24, Y+19	; 0x13
    27b0:	9c 89       	ldd	r25, Y+20	; 0x14
    27b2:	98 8b       	std	Y+16, r25	; 0x10
    27b4:	8f 87       	std	Y+15, r24	; 0x0f
    27b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27b8:	98 89       	ldd	r25, Y+16	; 0x10
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	f1 f7       	brne	.-4      	; 0x27ba <LCD_Init+0xf8>
    27be:	98 8b       	std	Y+16, r25	; 0x10
    27c0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(40);			/* LCD Power ON delay always >15ms */

	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
    27c2:	82 e0       	ldi	r24, 0x02	; 2
    27c4:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
    27c8:	88 e2       	ldi	r24, 0x28	; 40
    27ca:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
    27ce:	8c e0       	ldi	r24, 0x0C	; 12
    27d0:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
    27d4:	86 e0       	ldi	r24, 0x06	; 6
    27d6:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
    27da:	81 e0       	ldi	r24, 0x01	; 1
    27dc:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_Command>
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	a0 e0       	ldi	r26, 0x00	; 0
    27e6:	b0 e4       	ldi	r27, 0x40	; 64
    27e8:	8b 87       	std	Y+11, r24	; 0x0b
    27ea:	9c 87       	std	Y+12, r25	; 0x0c
    27ec:	ad 87       	std	Y+13, r26	; 0x0d
    27ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	4a ef       	ldi	r20, 0xFA	; 250
    27fe:	54 e4       	ldi	r21, 0x44	; 68
    2800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	8f 83       	std	Y+7, r24	; 0x07
    280a:	98 87       	std	Y+8, r25	; 0x08
    280c:	a9 87       	std	Y+9, r26	; 0x09
    280e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2810:	6f 81       	ldd	r22, Y+7	; 0x07
    2812:	78 85       	ldd	r23, Y+8	; 0x08
    2814:	89 85       	ldd	r24, Y+9	; 0x09
    2816:	9a 85       	ldd	r25, Y+10	; 0x0a
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e8       	ldi	r20, 0x80	; 128
    281e:	5f e3       	ldi	r21, 0x3F	; 63
    2820:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2824:	88 23       	and	r24, r24
    2826:	2c f4       	brge	.+10     	; 0x2832 <LCD_Init+0x170>
		__ticks = 1;
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	9e 83       	std	Y+6, r25	; 0x06
    282e:	8d 83       	std	Y+5, r24	; 0x05
    2830:	3f c0       	rjmp	.+126    	; 0x28b0 <LCD_Init+0x1ee>
	else if (__tmp > 65535)
    2832:	6f 81       	ldd	r22, Y+7	; 0x07
    2834:	78 85       	ldd	r23, Y+8	; 0x08
    2836:	89 85       	ldd	r24, Y+9	; 0x09
    2838:	9a 85       	ldd	r25, Y+10	; 0x0a
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	3f ef       	ldi	r19, 0xFF	; 255
    283e:	4f e7       	ldi	r20, 0x7F	; 127
    2840:	57 e4       	ldi	r21, 0x47	; 71
    2842:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2846:	18 16       	cp	r1, r24
    2848:	4c f5       	brge	.+82     	; 0x289c <LCD_Init+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284a:	6b 85       	ldd	r22, Y+11	; 0x0b
    284c:	7c 85       	ldd	r23, Y+12	; 0x0c
    284e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2850:	9e 85       	ldd	r25, Y+14	; 0x0e
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e2       	ldi	r20, 0x20	; 32
    2858:	51 e4       	ldi	r21, 0x41	; 65
    285a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	bc 01       	movw	r22, r24
    2864:	cd 01       	movw	r24, r26
    2866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	9e 83       	std	Y+6, r25	; 0x06
    2870:	8d 83       	std	Y+5, r24	; 0x05
    2872:	0f c0       	rjmp	.+30     	; 0x2892 <LCD_Init+0x1d0>
    2874:	88 ec       	ldi	r24, 0xC8	; 200
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	9c 83       	std	Y+4, r25	; 0x04
    287a:	8b 83       	std	Y+3, r24	; 0x03
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	9c 81       	ldd	r25, Y+4	; 0x04
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <LCD_Init+0x1be>
    2884:	9c 83       	std	Y+4, r25	; 0x04
    2886:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2888:	8d 81       	ldd	r24, Y+5	; 0x05
    288a:	9e 81       	ldd	r25, Y+6	; 0x06
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	9e 83       	std	Y+6, r25	; 0x06
    2890:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2892:	8d 81       	ldd	r24, Y+5	; 0x05
    2894:	9e 81       	ldd	r25, Y+6	; 0x06
    2896:	00 97       	sbiw	r24, 0x00	; 0
    2898:	69 f7       	brne	.-38     	; 0x2874 <LCD_Init+0x1b2>
    289a:	14 c0       	rjmp	.+40     	; 0x28c4 <LCD_Init+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289c:	6f 81       	ldd	r22, Y+7	; 0x07
    289e:	78 85       	ldd	r23, Y+8	; 0x08
    28a0:	89 85       	ldd	r24, Y+9	; 0x09
    28a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	9e 83       	std	Y+6, r25	; 0x06
    28ae:	8d 83       	std	Y+5, r24	; 0x05
    28b0:	8d 81       	ldd	r24, Y+5	; 0x05
    28b2:	9e 81       	ldd	r25, Y+6	; 0x06
    28b4:	9a 83       	std	Y+2, r25	; 0x02
    28b6:	89 83       	std	Y+1, r24	; 0x01
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	9a 81       	ldd	r25, Y+2	; 0x02
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <LCD_Init+0x1fa>
    28c0:	9a 83       	std	Y+2, r25	; 0x02
    28c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    28c4:	6c 96       	adiw	r28, 0x1c	; 28
    28c6:	0f b6       	in	r0, 0x3f	; 63
    28c8:	f8 94       	cli
    28ca:	de bf       	out	0x3e, r29	; 62
    28cc:	0f be       	out	0x3f, r0	; 63
    28ce:	cd bf       	out	0x3d, r28	; 61
    28d0:	cf 91       	pop	r28
    28d2:	df 91       	pop	r29
    28d4:	08 95       	ret

000028d6 <LCD_String>:


void LCD_String (char *str)		/* Send string to LCD function */
{
    28d6:	df 93       	push	r29
    28d8:	cf 93       	push	r28
    28da:	00 d0       	rcall	.+0      	; 0x28dc <LCD_String+0x6>
    28dc:	00 d0       	rcall	.+0      	; 0x28de <LCD_String+0x8>
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62
    28e2:	9c 83       	std	Y+4, r25	; 0x04
    28e4:	8b 83       	std	Y+3, r24	; 0x03
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    28e6:	1a 82       	std	Y+2, r1	; 0x02
    28e8:	19 82       	std	Y+1, r1	; 0x01
    28ea:	0f c0       	rjmp	.+30     	; 0x290a <LCD_String+0x34>
	{
		LCD_Char (str[i]);
    28ec:	29 81       	ldd	r18, Y+1	; 0x01
    28ee:	3a 81       	ldd	r19, Y+2	; 0x02
    28f0:	8b 81       	ldd	r24, Y+3	; 0x03
    28f2:	9c 81       	ldd	r25, Y+4	; 0x04
    28f4:	fc 01       	movw	r30, r24
    28f6:	e2 0f       	add	r30, r18
    28f8:	f3 1f       	adc	r31, r19
    28fa:	80 81       	ld	r24, Z
    28fc:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_Char>


void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	9a 81       	ldd	r25, Y+2	; 0x02
    2904:	01 96       	adiw	r24, 0x01	; 1
    2906:	9a 83       	std	Y+2, r25	; 0x02
    2908:	89 83       	std	Y+1, r24	; 0x01
    290a:	29 81       	ldd	r18, Y+1	; 0x01
    290c:	3a 81       	ldd	r19, Y+2	; 0x02
    290e:	8b 81       	ldd	r24, Y+3	; 0x03
    2910:	9c 81       	ldd	r25, Y+4	; 0x04
    2912:	fc 01       	movw	r30, r24
    2914:	e2 0f       	add	r30, r18
    2916:	f3 1f       	adc	r31, r19
    2918:	80 81       	ld	r24, Z
    291a:	88 23       	and	r24, r24
    291c:	39 f7       	brne	.-50     	; 0x28ec <LCD_String+0x16>
	{
		LCD_Char (str[i]);
	}
}
    291e:	0f 90       	pop	r0
    2920:	0f 90       	pop	r0
    2922:	0f 90       	pop	r0
    2924:	0f 90       	pop	r0
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	08 95       	ret

0000292c <LCD_Gotoxy>:

void LCD_Gotoxy (char Y,char X)
{
    292c:	df 93       	push	r29
    292e:	cf 93       	push	r28
    2930:	00 d0       	rcall	.+0      	; 0x2932 <LCD_Gotoxy+0x6>
    2932:	00 d0       	rcall	.+0      	; 0x2934 <LCD_Gotoxy+0x8>
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	89 83       	std	Y+1, r24	; 0x01
    293a:	6a 83       	std	Y+2, r22	; 0x02
	if (X>0 && X<=16)
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	88 23       	and	r24, r24
    2940:	e1 f0       	breq	.+56     	; 0x297a <LCD_Gotoxy+0x4e>
    2942:	8a 81       	ldd	r24, Y+2	; 0x02
    2944:	81 31       	cpi	r24, 0x11	; 17
    2946:	c8 f4       	brcc	.+50     	; 0x297a <LCD_Gotoxy+0x4e>
	{
	    switch(Y)
    2948:	89 81       	ldd	r24, Y+1	; 0x01
    294a:	28 2f       	mov	r18, r24
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	3c 83       	std	Y+4, r19	; 0x04
    2950:	2b 83       	std	Y+3, r18	; 0x03
    2952:	8b 81       	ldd	r24, Y+3	; 0x03
    2954:	9c 81       	ldd	r25, Y+4	; 0x04
    2956:	81 30       	cpi	r24, 0x01	; 1
    2958:	91 05       	cpc	r25, r1
    295a:	31 f0       	breq	.+12     	; 0x2968 <LCD_Gotoxy+0x3c>
    295c:	2b 81       	ldd	r18, Y+3	; 0x03
    295e:	3c 81       	ldd	r19, Y+4	; 0x04
    2960:	22 30       	cpi	r18, 0x02	; 2
    2962:	31 05       	cpc	r19, r1
    2964:	31 f0       	breq	.+12     	; 0x2972 <LCD_Gotoxy+0x46>
    2966:	09 c0       	rjmp	.+18     	; 0x297a <LCD_Gotoxy+0x4e>
	    {
		    case 1:
		    	LCD_Command(X+127);
    2968:	8a 81       	ldd	r24, Y+2	; 0x02
    296a:	81 58       	subi	r24, 0x81	; 129
    296c:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_Command>
    2970:	04 c0       	rjmp	.+8      	; 0x297a <LCD_Gotoxy+0x4e>
		    break;
		    case 2:
		    	LCD_Command(X+191);
    2972:	8a 81       	ldd	r24, Y+2	; 0x02
    2974:	81 54       	subi	r24, 0x41	; 65
    2976:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_Command>
		    break;
		    default:
		    break;
	    }
	}
}
    297a:	0f 90       	pop	r0
    297c:	0f 90       	pop	r0
    297e:	0f 90       	pop	r0
    2980:	0f 90       	pop	r0
    2982:	cf 91       	pop	r28
    2984:	df 91       	pop	r29
    2986:	08 95       	ret

00002988 <LCD_String_xy>:

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	00 d0       	rcall	.+0      	; 0x298e <LCD_String_xy+0x6>
    298e:	00 d0       	rcall	.+0      	; 0x2990 <LCD_String_xy+0x8>
    2990:	cd b7       	in	r28, 0x3d	; 61
    2992:	de b7       	in	r29, 0x3e	; 62
    2994:	89 83       	std	Y+1, r24	; 0x01
    2996:	6a 83       	std	Y+2, r22	; 0x02
    2998:	5c 83       	std	Y+4, r21	; 0x04
    299a:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 0 && pos<16)
    299c:	89 81       	ldd	r24, Y+1	; 0x01
    299e:	88 23       	and	r24, r24
    29a0:	49 f4       	brne	.+18     	; 0x29b4 <LCD_String_xy+0x2c>
    29a2:	8a 81       	ldd	r24, Y+2	; 0x02
    29a4:	80 31       	cpi	r24, 0x10	; 16
    29a6:	30 f4       	brcc	.+12     	; 0x29b4 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    29a8:	8a 81       	ldd	r24, Y+2	; 0x02
    29aa:	8f 70       	andi	r24, 0x0F	; 15
    29ac:	80 68       	ori	r24, 0x80	; 128
    29ae:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_Command>
    29b2:	0b c0       	rjmp	.+22     	; 0x29ca <LCD_String_xy+0x42>
	else if (row == 1 && pos<16)
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	81 30       	cpi	r24, 0x01	; 1
    29b8:	41 f4       	brne	.+16     	; 0x29ca <LCD_String_xy+0x42>
    29ba:	8a 81       	ldd	r24, Y+2	; 0x02
    29bc:	80 31       	cpi	r24, 0x10	; 16
    29be:	28 f4       	brcc	.+10     	; 0x29ca <LCD_String_xy+0x42>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    29c0:	8a 81       	ldd	r24, Y+2	; 0x02
    29c2:	8f 70       	andi	r24, 0x0F	; 15
    29c4:	80 6c       	ori	r24, 0xC0	; 192
    29c6:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
    29ca:	8b 81       	ldd	r24, Y+3	; 0x03
    29cc:	9c 81       	ldd	r25, Y+4	; 0x04
    29ce:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_String>
}
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	0f 90       	pop	r0
    29d8:	0f 90       	pop	r0
    29da:	cf 91       	pop	r28
    29dc:	df 91       	pop	r29
    29de:	08 95       	ret

000029e0 <LCD_Clear>:

void LCD_Clear()
{
    29e0:	df 93       	push	r29
    29e2:	cf 93       	push	r28
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
    29e8:	2e 97       	sbiw	r28, 0x0e	; 14
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	f8 94       	cli
    29ee:	de bf       	out	0x3e, r29	; 62
    29f0:	0f be       	out	0x3f, r0	; 63
    29f2:	cd bf       	out	0x3d, r28	; 61
	LCD_Command (0x01);		/* Clear display */
    29f4:	81 e0       	ldi	r24, 0x01	; 1
    29f6:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_Command>
    29fa:	80 e0       	ldi	r24, 0x00	; 0
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	a0 e0       	ldi	r26, 0x00	; 0
    2a00:	b0 e4       	ldi	r27, 0x40	; 64
    2a02:	8b 87       	std	Y+11, r24	; 0x0b
    2a04:	9c 87       	std	Y+12, r25	; 0x0c
    2a06:	ad 87       	std	Y+13, r26	; 0x0d
    2a08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a10:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	4a ef       	ldi	r20, 0xFA	; 250
    2a18:	54 e4       	ldi	r21, 0x44	; 68
    2a1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a1e:	dc 01       	movw	r26, r24
    2a20:	cb 01       	movw	r24, r22
    2a22:	8f 83       	std	Y+7, r24	; 0x07
    2a24:	98 87       	std	Y+8, r25	; 0x08
    2a26:	a9 87       	std	Y+9, r26	; 0x09
    2a28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a2c:	78 85       	ldd	r23, Y+8	; 0x08
    2a2e:	89 85       	ldd	r24, Y+9	; 0x09
    2a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e8       	ldi	r20, 0x80	; 128
    2a38:	5f e3       	ldi	r21, 0x3F	; 63
    2a3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a3e:	88 23       	and	r24, r24
    2a40:	2c f4       	brge	.+10     	; 0x2a4c <LCD_Clear+0x6c>
		__ticks = 1;
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	9e 83       	std	Y+6, r25	; 0x06
    2a48:	8d 83       	std	Y+5, r24	; 0x05
    2a4a:	3f c0       	rjmp	.+126    	; 0x2aca <LCD_Clear+0xea>
	else if (__tmp > 65535)
    2a4c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a4e:	78 85       	ldd	r23, Y+8	; 0x08
    2a50:	89 85       	ldd	r24, Y+9	; 0x09
    2a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	3f ef       	ldi	r19, 0xFF	; 255
    2a58:	4f e7       	ldi	r20, 0x7F	; 127
    2a5a:	57 e4       	ldi	r21, 0x47	; 71
    2a5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a60:	18 16       	cp	r1, r24
    2a62:	4c f5       	brge	.+82     	; 0x2ab6 <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	40 e2       	ldi	r20, 0x20	; 32
    2a72:	51 e4       	ldi	r21, 0x41	; 65
    2a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	bc 01       	movw	r22, r24
    2a7e:	cd 01       	movw	r24, r26
    2a80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	9e 83       	std	Y+6, r25	; 0x06
    2a8a:	8d 83       	std	Y+5, r24	; 0x05
    2a8c:	0f c0       	rjmp	.+30     	; 0x2aac <LCD_Clear+0xcc>
    2a8e:	88 ec       	ldi	r24, 0xC8	; 200
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	9c 83       	std	Y+4, r25	; 0x04
    2a94:	8b 83       	std	Y+3, r24	; 0x03
    2a96:	8b 81       	ldd	r24, Y+3	; 0x03
    2a98:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9a:	01 97       	sbiw	r24, 0x01	; 1
    2a9c:	f1 f7       	brne	.-4      	; 0x2a9a <LCD_Clear+0xba>
    2a9e:	9c 83       	std	Y+4, r25	; 0x04
    2aa0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa6:	01 97       	sbiw	r24, 0x01	; 1
    2aa8:	9e 83       	std	Y+6, r25	; 0x06
    2aaa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aac:	8d 81       	ldd	r24, Y+5	; 0x05
    2aae:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab0:	00 97       	sbiw	r24, 0x00	; 0
    2ab2:	69 f7       	brne	.-38     	; 0x2a8e <LCD_Clear+0xae>
    2ab4:	14 c0       	rjmp	.+40     	; 0x2ade <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab8:	78 85       	ldd	r23, Y+8	; 0x08
    2aba:	89 85       	ldd	r24, Y+9	; 0x09
    2abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	9e 83       	std	Y+6, r25	; 0x06
    2ac8:	8d 83       	std	Y+5, r24	; 0x05
    2aca:	8d 81       	ldd	r24, Y+5	; 0x05
    2acc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ace:	9a 83       	std	Y+2, r25	; 0x02
    2ad0:	89 83       	std	Y+1, r24	; 0x01
    2ad2:	89 81       	ldd	r24, Y+1	; 0x01
    2ad4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad6:	01 97       	sbiw	r24, 0x01	; 1
    2ad8:	f1 f7       	brne	.-4      	; 0x2ad6 <LCD_Clear+0xf6>
    2ada:	9a 83       	std	Y+2, r25	; 0x02
    2adc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
    2ade:	80 e8       	ldi	r24, 0x80	; 128
    2ae0:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <LCD_Command>
}
    2ae4:	2e 96       	adiw	r28, 0x0e	; 14
    2ae6:	0f b6       	in	r0, 0x3f	; 63
    2ae8:	f8 94       	cli
    2aea:	de bf       	out	0x3e, r29	; 62
    2aec:	0f be       	out	0x3f, r0	; 63
    2aee:	cd bf       	out	0x3d, r28	; 61
    2af0:	cf 91       	pop	r28
    2af2:	df 91       	pop	r29
    2af4:	08 95       	ret

00002af6 <LCD_vidWriteInteger>:


void LCD_vidWriteInteger(u32 m){
    2af6:	df 93       	push	r29
    2af8:	cf 93       	push	r28
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	64 97       	sbiw	r28, 0x14	; 20
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	f8 94       	cli
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	cd bf       	out	0x3d, r28	; 61
    2b0a:	69 8b       	std	Y+17, r22	; 0x11
    2b0c:	7a 8b       	std	Y+18, r23	; 0x12
    2b0e:	8b 8b       	std	Y+19, r24	; 0x13
    2b10:	9c 8b       	std	Y+20, r25	; 0x14
u32 t,t1,t2,t3;
if(m<10)
    2b12:	89 89       	ldd	r24, Y+17	; 0x11
    2b14:	9a 89       	ldd	r25, Y+18	; 0x12
    2b16:	ab 89       	ldd	r26, Y+19	; 0x13
    2b18:	bc 89       	ldd	r27, Y+20	; 0x14
    2b1a:	8a 30       	cpi	r24, 0x0A	; 10
    2b1c:	91 05       	cpc	r25, r1
    2b1e:	a1 05       	cpc	r26, r1
    2b20:	b1 05       	cpc	r27, r1
    2b22:	20 f4       	brcc	.+8      	; 0x2b2c <LCD_vidWriteInteger+0x36>
{
	LCD_Char(m+48);
    2b24:	89 89       	ldd	r24, Y+17	; 0x11
    2b26:	80 5d       	subi	r24, 0xD0	; 208
    2b28:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_Char>

}
	if(m>9&&m<100){
    2b2c:	89 89       	ldd	r24, Y+17	; 0x11
    2b2e:	9a 89       	ldd	r25, Y+18	; 0x12
    2b30:	ab 89       	ldd	r26, Y+19	; 0x13
    2b32:	bc 89       	ldd	r27, Y+20	; 0x14
    2b34:	8a 30       	cpi	r24, 0x0A	; 10
    2b36:	91 05       	cpc	r25, r1
    2b38:	a1 05       	cpc	r26, r1
    2b3a:	b1 05       	cpc	r27, r1
    2b3c:	a8 f1       	brcs	.+106    	; 0x2ba8 <LCD_vidWriteInteger+0xb2>
    2b3e:	89 89       	ldd	r24, Y+17	; 0x11
    2b40:	9a 89       	ldd	r25, Y+18	; 0x12
    2b42:	ab 89       	ldd	r26, Y+19	; 0x13
    2b44:	bc 89       	ldd	r27, Y+20	; 0x14
    2b46:	84 36       	cpi	r24, 0x64	; 100
    2b48:	91 05       	cpc	r25, r1
    2b4a:	a1 05       	cpc	r26, r1
    2b4c:	b1 05       	cpc	r27, r1
    2b4e:	60 f5       	brcc	.+88     	; 0x2ba8 <LCD_vidWriteInteger+0xb2>

		t = m/10;
    2b50:	89 89       	ldd	r24, Y+17	; 0x11
    2b52:	9a 89       	ldd	r25, Y+18	; 0x12
    2b54:	ab 89       	ldd	r26, Y+19	; 0x13
    2b56:	bc 89       	ldd	r27, Y+20	; 0x14
    2b58:	2a e0       	ldi	r18, 0x0A	; 10
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	40 e0       	ldi	r20, 0x00	; 0
    2b5e:	50 e0       	ldi	r21, 0x00	; 0
    2b60:	bc 01       	movw	r22, r24
    2b62:	cd 01       	movw	r24, r26
    2b64:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__udivmodsi4>
    2b68:	da 01       	movw	r26, r20
    2b6a:	c9 01       	movw	r24, r18
    2b6c:	8d 87       	std	Y+13, r24	; 0x0d
    2b6e:	9e 87       	std	Y+14, r25	; 0x0e
    2b70:	af 87       	std	Y+15, r26	; 0x0f
    2b72:	b8 8b       	std	Y+16, r27	; 0x10
		t1 = m%10;
    2b74:	89 89       	ldd	r24, Y+17	; 0x11
    2b76:	9a 89       	ldd	r25, Y+18	; 0x12
    2b78:	ab 89       	ldd	r26, Y+19	; 0x13
    2b7a:	bc 89       	ldd	r27, Y+20	; 0x14
    2b7c:	2a e0       	ldi	r18, 0x0A	; 10
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e0       	ldi	r20, 0x00	; 0
    2b82:	50 e0       	ldi	r21, 0x00	; 0
    2b84:	bc 01       	movw	r22, r24
    2b86:	cd 01       	movw	r24, r26
    2b88:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__udivmodsi4>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	89 87       	std	Y+9, r24	; 0x09
    2b92:	9a 87       	std	Y+10, r25	; 0x0a
    2b94:	ab 87       	std	Y+11, r26	; 0x0b
    2b96:	bc 87       	std	Y+12, r27	; 0x0c
		LCD_Char((t+48));
    2b98:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b9a:	80 5d       	subi	r24, 0xD0	; 208
    2b9c:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_Char>
		LCD_Char((t1+48));
    2ba0:	89 85       	ldd	r24, Y+9	; 0x09
    2ba2:	80 5d       	subi	r24, 0xD0	; 208
    2ba4:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_Char>
	}
	if(m>=100&&m<=999){
    2ba8:	89 89       	ldd	r24, Y+17	; 0x11
    2baa:	9a 89       	ldd	r25, Y+18	; 0x12
    2bac:	ab 89       	ldd	r26, Y+19	; 0x13
    2bae:	bc 89       	ldd	r27, Y+20	; 0x14
    2bb0:	84 36       	cpi	r24, 0x64	; 100
    2bb2:	91 05       	cpc	r25, r1
    2bb4:	a1 05       	cpc	r26, r1
    2bb6:	b1 05       	cpc	r27, r1
    2bb8:	08 f4       	brcc	.+2      	; 0x2bbc <LCD_vidWriteInteger+0xc6>
    2bba:	61 c0       	rjmp	.+194    	; 0x2c7e <LCD_vidWriteInteger+0x188>
    2bbc:	89 89       	ldd	r24, Y+17	; 0x11
    2bbe:	9a 89       	ldd	r25, Y+18	; 0x12
    2bc0:	ab 89       	ldd	r26, Y+19	; 0x13
    2bc2:	bc 89       	ldd	r27, Y+20	; 0x14
    2bc4:	88 3e       	cpi	r24, 0xE8	; 232
    2bc6:	23 e0       	ldi	r18, 0x03	; 3
    2bc8:	92 07       	cpc	r25, r18
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	a2 07       	cpc	r26, r18
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	b2 07       	cpc	r27, r18
    2bd2:	08 f0       	brcs	.+2      	; 0x2bd6 <LCD_vidWriteInteger+0xe0>
    2bd4:	54 c0       	rjmp	.+168    	; 0x2c7e <LCD_vidWriteInteger+0x188>

		t = m/10;
    2bd6:	89 89       	ldd	r24, Y+17	; 0x11
    2bd8:	9a 89       	ldd	r25, Y+18	; 0x12
    2bda:	ab 89       	ldd	r26, Y+19	; 0x13
    2bdc:	bc 89       	ldd	r27, Y+20	; 0x14
    2bde:	2a e0       	ldi	r18, 0x0A	; 10
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	40 e0       	ldi	r20, 0x00	; 0
    2be4:	50 e0       	ldi	r21, 0x00	; 0
    2be6:	bc 01       	movw	r22, r24
    2be8:	cd 01       	movw	r24, r26
    2bea:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__udivmodsi4>
    2bee:	da 01       	movw	r26, r20
    2bf0:	c9 01       	movw	r24, r18
    2bf2:	8d 87       	std	Y+13, r24	; 0x0d
    2bf4:	9e 87       	std	Y+14, r25	; 0x0e
    2bf6:	af 87       	std	Y+15, r26	; 0x0f
    2bf8:	b8 8b       	std	Y+16, r27	; 0x10
			t1 = t%10;
    2bfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bfe:	af 85       	ldd	r26, Y+15	; 0x0f
    2c00:	b8 89       	ldd	r27, Y+16	; 0x10
    2c02:	2a e0       	ldi	r18, 0x0A	; 10
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	40 e0       	ldi	r20, 0x00	; 0
    2c08:	50 e0       	ldi	r21, 0x00	; 0
    2c0a:	bc 01       	movw	r22, r24
    2c0c:	cd 01       	movw	r24, r26
    2c0e:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__udivmodsi4>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	89 87       	std	Y+9, r24	; 0x09
    2c18:	9a 87       	std	Y+10, r25	; 0x0a
    2c1a:	ab 87       	std	Y+11, r26	; 0x0b
    2c1c:	bc 87       	std	Y+12, r27	; 0x0c
			t2 = t1/10;
    2c1e:	89 85       	ldd	r24, Y+9	; 0x09
    2c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c22:	ab 85       	ldd	r26, Y+11	; 0x0b
    2c24:	bc 85       	ldd	r27, Y+12	; 0x0c
    2c26:	2a e0       	ldi	r18, 0x0A	; 10
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	40 e0       	ldi	r20, 0x00	; 0
    2c2c:	50 e0       	ldi	r21, 0x00	; 0
    2c2e:	bc 01       	movw	r22, r24
    2c30:	cd 01       	movw	r24, r26
    2c32:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__udivmodsi4>
    2c36:	da 01       	movw	r26, r20
    2c38:	c9 01       	movw	r24, r18
    2c3a:	8d 83       	std	Y+5, r24	; 0x05
    2c3c:	9e 83       	std	Y+6, r25	; 0x06
    2c3e:	af 83       	std	Y+7, r26	; 0x07
    2c40:	b8 87       	std	Y+8, r27	; 0x08
			t3 = t1%10;
    2c42:	89 85       	ldd	r24, Y+9	; 0x09
    2c44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c46:	ab 85       	ldd	r26, Y+11	; 0x0b
    2c48:	bc 85       	ldd	r27, Y+12	; 0x0c
    2c4a:	2a e0       	ldi	r18, 0x0A	; 10
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	40 e0       	ldi	r20, 0x00	; 0
    2c50:	50 e0       	ldi	r21, 0x00	; 0
    2c52:	bc 01       	movw	r22, r24
    2c54:	cd 01       	movw	r24, r26
    2c56:	0e 94 97 16 	call	0x2d2e	; 0x2d2e <__udivmodsi4>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	89 83       	std	Y+1, r24	; 0x01
    2c60:	9a 83       	std	Y+2, r25	; 0x02
    2c62:	ab 83       	std	Y+3, r26	; 0x03
    2c64:	bc 83       	std	Y+4, r27	; 0x04
			LCD_Char(t+48);
    2c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c68:	80 5d       	subi	r24, 0xD0	; 208
    2c6a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_Char>
			LCD_Char(t2+48);
    2c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c70:	80 5d       	subi	r24, 0xD0	; 208
    2c72:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_Char>
			LCD_Char(t3+48);
    2c76:	89 81       	ldd	r24, Y+1	; 0x01
    2c78:	80 5d       	subi	r24, 0xD0	; 208
    2c7a:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_Char>
			;
	}
}
    2c7e:	64 96       	adiw	r28, 0x14	; 20
    2c80:	0f b6       	in	r0, 0x3f	; 63
    2c82:	f8 94       	cli
    2c84:	de bf       	out	0x3e, r29	; 62
    2c86:	0f be       	out	0x3f, r0	; 63
    2c88:	cd bf       	out	0x3d, r28	; 61
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	08 95       	ret

00002c90 <main>:
u32 overflow =30 ;
u32 min=0;
u32 hr=11;

void main(void)
{
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
	LCD_Init();
    2c98:	0e 94 61 13 	call	0x26c2	; 0x26c2 <LCD_Init>
    CLK_vidInit();
    2c9c:	0e 94 04 0b 	call	0x1608	; 0x1608 <CLK_vidInit>
	while(1)
	{
    CLK_vidStart();
    2ca0:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <CLK_vidStart>
    2ca4:	fd cf       	rjmp	.-6      	; 0x2ca0 <main+0x10>

00002ca6 <timer_vidInit>:
void __vector_11(void)  __attribute__((signal,__INTR_ATTRS));
 u32 counter=0;


void timer_vidInit(void)
{
    2ca6:	df 93       	push	r29
    2ca8:	cf 93       	push	r28
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
//	OCR0=99;  // value to compare
	TCCR0=0b00000010; //timer control
    2cae:	e3 e5       	ldi	r30, 0x53	; 83
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	82 e0       	ldi	r24, 0x02	; 2
    2cb4:	80 83       	st	Z, r24
	Set_Bit(TIMSK,0); //ENABLE INT bit0 or bit1(compare)
    2cb6:	a9 e5       	ldi	r26, 0x59	; 89
    2cb8:	b0 e0       	ldi	r27, 0x00	; 0
    2cba:	e9 e5       	ldi	r30, 0x59	; 89
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	80 81       	ld	r24, Z
    2cc0:	81 60       	ori	r24, 0x01	; 1
    2cc2:	8c 93       	st	X, r24
	Set_Bit(SREG,7);  //global INT
    2cc4:	af e5       	ldi	r26, 0x5F	; 95
    2cc6:	b0 e0       	ldi	r27, 0x00	; 0
    2cc8:	ef e5       	ldi	r30, 0x5F	; 95
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
    2ccc:	80 81       	ld	r24, Z
    2cce:	80 68       	ori	r24, 0x80	; 128
    2cd0:	8c 93       	st	X, r24

}
    2cd2:	cf 91       	pop	r28
    2cd4:	df 91       	pop	r29
    2cd6:	08 95       	ret

00002cd8 <__vector_11>:


void __vector_11(void)
{
    2cd8:	1f 92       	push	r1
    2cda:	0f 92       	push	r0
    2cdc:	0f b6       	in	r0, 0x3f	; 63
    2cde:	0f 92       	push	r0
    2ce0:	11 24       	eor	r1, r1
    2ce2:	8f 93       	push	r24
    2ce4:	9f 93       	push	r25
    2ce6:	af 93       	push	r26
    2ce8:	bf 93       	push	r27
    2cea:	df 93       	push	r29
    2cec:	cf 93       	push	r28
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
   counter++;
    2cf2:	80 91 90 00 	lds	r24, 0x0090
    2cf6:	90 91 91 00 	lds	r25, 0x0091
    2cfa:	a0 91 92 00 	lds	r26, 0x0092
    2cfe:	b0 91 93 00 	lds	r27, 0x0093
    2d02:	01 96       	adiw	r24, 0x01	; 1
    2d04:	a1 1d       	adc	r26, r1
    2d06:	b1 1d       	adc	r27, r1
    2d08:	80 93 90 00 	sts	0x0090, r24
    2d0c:	90 93 91 00 	sts	0x0091, r25
    2d10:	a0 93 92 00 	sts	0x0092, r26
    2d14:	b0 93 93 00 	sts	0x0093, r27
//   if(counter==80000)
//   {
//	   toggle_Bit(PORTA,0);
//	   counter=0;
//   }
}
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	bf 91       	pop	r27
    2d1e:	af 91       	pop	r26
    2d20:	9f 91       	pop	r25
    2d22:	8f 91       	pop	r24
    2d24:	0f 90       	pop	r0
    2d26:	0f be       	out	0x3f, r0	; 63
    2d28:	0f 90       	pop	r0
    2d2a:	1f 90       	pop	r1
    2d2c:	18 95       	reti

00002d2e <__udivmodsi4>:
    2d2e:	a1 e2       	ldi	r26, 0x21	; 33
    2d30:	1a 2e       	mov	r1, r26
    2d32:	aa 1b       	sub	r26, r26
    2d34:	bb 1b       	sub	r27, r27
    2d36:	fd 01       	movw	r30, r26
    2d38:	0d c0       	rjmp	.+26     	; 0x2d54 <__udivmodsi4_ep>

00002d3a <__udivmodsi4_loop>:
    2d3a:	aa 1f       	adc	r26, r26
    2d3c:	bb 1f       	adc	r27, r27
    2d3e:	ee 1f       	adc	r30, r30
    2d40:	ff 1f       	adc	r31, r31
    2d42:	a2 17       	cp	r26, r18
    2d44:	b3 07       	cpc	r27, r19
    2d46:	e4 07       	cpc	r30, r20
    2d48:	f5 07       	cpc	r31, r21
    2d4a:	20 f0       	brcs	.+8      	; 0x2d54 <__udivmodsi4_ep>
    2d4c:	a2 1b       	sub	r26, r18
    2d4e:	b3 0b       	sbc	r27, r19
    2d50:	e4 0b       	sbc	r30, r20
    2d52:	f5 0b       	sbc	r31, r21

00002d54 <__udivmodsi4_ep>:
    2d54:	66 1f       	adc	r22, r22
    2d56:	77 1f       	adc	r23, r23
    2d58:	88 1f       	adc	r24, r24
    2d5a:	99 1f       	adc	r25, r25
    2d5c:	1a 94       	dec	r1
    2d5e:	69 f7       	brne	.-38     	; 0x2d3a <__udivmodsi4_loop>
    2d60:	60 95       	com	r22
    2d62:	70 95       	com	r23
    2d64:	80 95       	com	r24
    2d66:	90 95       	com	r25
    2d68:	9b 01       	movw	r18, r22
    2d6a:	ac 01       	movw	r20, r24
    2d6c:	bd 01       	movw	r22, r26
    2d6e:	cf 01       	movw	r24, r30
    2d70:	08 95       	ret

00002d72 <__prologue_saves__>:
    2d72:	2f 92       	push	r2
    2d74:	3f 92       	push	r3
    2d76:	4f 92       	push	r4
    2d78:	5f 92       	push	r5
    2d7a:	6f 92       	push	r6
    2d7c:	7f 92       	push	r7
    2d7e:	8f 92       	push	r8
    2d80:	9f 92       	push	r9
    2d82:	af 92       	push	r10
    2d84:	bf 92       	push	r11
    2d86:	cf 92       	push	r12
    2d88:	df 92       	push	r13
    2d8a:	ef 92       	push	r14
    2d8c:	ff 92       	push	r15
    2d8e:	0f 93       	push	r16
    2d90:	1f 93       	push	r17
    2d92:	cf 93       	push	r28
    2d94:	df 93       	push	r29
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62
    2d9a:	ca 1b       	sub	r28, r26
    2d9c:	db 0b       	sbc	r29, r27
    2d9e:	0f b6       	in	r0, 0x3f	; 63
    2da0:	f8 94       	cli
    2da2:	de bf       	out	0x3e, r29	; 62
    2da4:	0f be       	out	0x3f, r0	; 63
    2da6:	cd bf       	out	0x3d, r28	; 61
    2da8:	09 94       	ijmp

00002daa <__epilogue_restores__>:
    2daa:	2a 88       	ldd	r2, Y+18	; 0x12
    2dac:	39 88       	ldd	r3, Y+17	; 0x11
    2dae:	48 88       	ldd	r4, Y+16	; 0x10
    2db0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2db2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2db4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2db6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2db8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dba:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dbc:	b9 84       	ldd	r11, Y+9	; 0x09
    2dbe:	c8 84       	ldd	r12, Y+8	; 0x08
    2dc0:	df 80       	ldd	r13, Y+7	; 0x07
    2dc2:	ee 80       	ldd	r14, Y+6	; 0x06
    2dc4:	fd 80       	ldd	r15, Y+5	; 0x05
    2dc6:	0c 81       	ldd	r16, Y+4	; 0x04
    2dc8:	1b 81       	ldd	r17, Y+3	; 0x03
    2dca:	aa 81       	ldd	r26, Y+2	; 0x02
    2dcc:	b9 81       	ldd	r27, Y+1	; 0x01
    2dce:	ce 0f       	add	r28, r30
    2dd0:	d1 1d       	adc	r29, r1
    2dd2:	0f b6       	in	r0, 0x3f	; 63
    2dd4:	f8 94       	cli
    2dd6:	de bf       	out	0x3e, r29	; 62
    2dd8:	0f be       	out	0x3f, r0	; 63
    2dda:	cd bf       	out	0x3d, r28	; 61
    2ddc:	ed 01       	movw	r28, r26
    2dde:	08 95       	ret

00002de0 <_exit>:
    2de0:	f8 94       	cli

00002de2 <__stop_program>:
    2de2:	ff cf       	rjmp	.-2      	; 0x2de2 <__stop_program>
