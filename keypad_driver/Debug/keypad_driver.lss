
keypad_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000008ce  00000942  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000009c0  00000000  00000000  00000944  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000003d6  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 4e 04 	call	0x89c	; 0x89c <main>
  7a:	0c 94 65 04 	jmp	0x8ca	; 0x8ca <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <dio_vidSetPinDir>:
#include "utils.h"
#include "registers.h"
#include "dio.h"

void dio_vidSetPinDir(u8 port,u8 pin,u8 dir)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	00 d0       	rcall	.+0      	; 0x88 <dio_vidSetPinDir+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <dio_vidSetPinDir+0x8>
  8a:	0f 92       	push	r0
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
  90:	89 83       	std	Y+1, r24	; 0x01
  92:	6a 83       	std	Y+2, r22	; 0x02
  94:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
  96:	89 81       	ldd	r24, Y+1	; 0x01
  98:	28 2f       	mov	r18, r24
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	3d 83       	std	Y+5, r19	; 0x05
  9e:	2c 83       	std	Y+4, r18	; 0x04
  a0:	8c 81       	ldd	r24, Y+4	; 0x04
  a2:	9d 81       	ldd	r25, Y+5	; 0x05
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	91 05       	cpc	r25, r1
  a8:	09 f4       	brne	.+2      	; 0xac <dio_vidSetPinDir+0x2a>
  aa:	46 c0       	rjmp	.+140    	; 0x138 <dio_vidSetPinDir+0xb6>
  ac:	2c 81       	ldd	r18, Y+4	; 0x04
  ae:	3d 81       	ldd	r19, Y+5	; 0x05
  b0:	22 30       	cpi	r18, 0x02	; 2
  b2:	31 05       	cpc	r19, r1
  b4:	2c f4       	brge	.+10     	; 0xc0 <dio_vidSetPinDir+0x3e>
  b6:	8c 81       	ldd	r24, Y+4	; 0x04
  b8:	9d 81       	ldd	r25, Y+5	; 0x05
  ba:	00 97       	sbiw	r24, 0x00	; 0
  bc:	71 f0       	breq	.+28     	; 0xda <dio_vidSetPinDir+0x58>
  be:	c7 c0       	rjmp	.+398    	; 0x24e <dio_vidSetPinDir+0x1cc>
  c0:	2c 81       	ldd	r18, Y+4	; 0x04
  c2:	3d 81       	ldd	r19, Y+5	; 0x05
  c4:	22 30       	cpi	r18, 0x02	; 2
  c6:	31 05       	cpc	r19, r1
  c8:	09 f4       	brne	.+2      	; 0xcc <dio_vidSetPinDir+0x4a>
  ca:	65 c0       	rjmp	.+202    	; 0x196 <dio_vidSetPinDir+0x114>
  cc:	8c 81       	ldd	r24, Y+4	; 0x04
  ce:	9d 81       	ldd	r25, Y+5	; 0x05
  d0:	83 30       	cpi	r24, 0x03	; 3
  d2:	91 05       	cpc	r25, r1
  d4:	09 f4       	brne	.+2      	; 0xd8 <dio_vidSetPinDir+0x56>
  d6:	8e c0       	rjmp	.+284    	; 0x1f4 <dio_vidSetPinDir+0x172>
  d8:	ba c0       	rjmp	.+372    	; 0x24e <dio_vidSetPinDir+0x1cc>
	{
	case a:
		if(dir==input)
  da:	8b 81       	ldd	r24, Y+3	; 0x03
  dc:	88 23       	and	r24, r24
  de:	a1 f4       	brne	.+40     	; 0x108 <dio_vidSetPinDir+0x86>
			clr_bit(DDRA,pin);
  e0:	aa e3       	ldi	r26, 0x3A	; 58
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	ea e3       	ldi	r30, 0x3A	; 58
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	48 2f       	mov	r20, r24
  ec:	8a 81       	ldd	r24, Y+2	; 0x02
  ee:	28 2f       	mov	r18, r24
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 2e       	mov	r0, r18
  f8:	02 c0       	rjmp	.+4      	; 0xfe <dio_vidSetPinDir+0x7c>
  fa:	88 0f       	add	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <dio_vidSetPinDir+0x78>
 102:	80 95       	com	r24
 104:	84 23       	and	r24, r20
 106:	8c 93       	st	X, r24
		if(dir==output)
 108:	8b 81       	ldd	r24, Y+3	; 0x03
 10a:	81 30       	cpi	r24, 0x01	; 1
 10c:	09 f0       	breq	.+2      	; 0x110 <dio_vidSetPinDir+0x8e>
 10e:	9f c0       	rjmp	.+318    	; 0x24e <dio_vidSetPinDir+0x1cc>
					set_bit(DDRA,pin);
 110:	aa e3       	ldi	r26, 0x3A	; 58
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	ea e3       	ldi	r30, 0x3A	; 58
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	48 2f       	mov	r20, r24
 11c:	8a 81       	ldd	r24, Y+2	; 0x02
 11e:	28 2f       	mov	r18, r24
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 2e       	mov	r0, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <dio_vidSetPinDir+0xac>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	0a 94       	dec	r0
 130:	e2 f7       	brpl	.-8      	; 0x12a <dio_vidSetPinDir+0xa8>
 132:	84 2b       	or	r24, r20
 134:	8c 93       	st	X, r24
 136:	8b c0       	rjmp	.+278    	; 0x24e <dio_vidSetPinDir+0x1cc>
		break;

	case b:
		if(dir==input)
 138:	8b 81       	ldd	r24, Y+3	; 0x03
 13a:	88 23       	and	r24, r24
 13c:	a1 f4       	brne	.+40     	; 0x166 <dio_vidSetPinDir+0xe4>
			clr_bit(DDRB,pin);
 13e:	a7 e3       	ldi	r26, 0x37	; 55
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	e7 e3       	ldi	r30, 0x37	; 55
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	48 2f       	mov	r20, r24
 14a:	8a 81       	ldd	r24, Y+2	; 0x02
 14c:	28 2f       	mov	r18, r24
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 2e       	mov	r0, r18
 156:	02 c0       	rjmp	.+4      	; 0x15c <dio_vidSetPinDir+0xda>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	0a 94       	dec	r0
 15e:	e2 f7       	brpl	.-8      	; 0x158 <dio_vidSetPinDir+0xd6>
 160:	80 95       	com	r24
 162:	84 23       	and	r24, r20
 164:	8c 93       	st	X, r24
		if(dir==output)
 166:	8b 81       	ldd	r24, Y+3	; 0x03
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	09 f0       	breq	.+2      	; 0x16e <dio_vidSetPinDir+0xec>
 16c:	70 c0       	rjmp	.+224    	; 0x24e <dio_vidSetPinDir+0x1cc>
					set_bit(DDRB,pin);
 16e:	a7 e3       	ldi	r26, 0x37	; 55
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	e7 e3       	ldi	r30, 0x37	; 55
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	48 2f       	mov	r20, r24
 17a:	8a 81       	ldd	r24, Y+2	; 0x02
 17c:	28 2f       	mov	r18, r24
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 2e       	mov	r0, r18
 186:	02 c0       	rjmp	.+4      	; 0x18c <dio_vidSetPinDir+0x10a>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	0a 94       	dec	r0
 18e:	e2 f7       	brpl	.-8      	; 0x188 <dio_vidSetPinDir+0x106>
 190:	84 2b       	or	r24, r20
 192:	8c 93       	st	X, r24
 194:	5c c0       	rjmp	.+184    	; 0x24e <dio_vidSetPinDir+0x1cc>
		break;
	case c:
			if(dir==input)
 196:	8b 81       	ldd	r24, Y+3	; 0x03
 198:	88 23       	and	r24, r24
 19a:	a1 f4       	brne	.+40     	; 0x1c4 <dio_vidSetPinDir+0x142>
				clr_bit(DDRC,pin);
 19c:	a4 e3       	ldi	r26, 0x34	; 52
 19e:	b0 e0       	ldi	r27, 0x00	; 0
 1a0:	e4 e3       	ldi	r30, 0x34	; 52
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	48 2f       	mov	r20, r24
 1a8:	8a 81       	ldd	r24, Y+2	; 0x02
 1aa:	28 2f       	mov	r18, r24
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 2e       	mov	r0, r18
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <dio_vidSetPinDir+0x138>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <dio_vidSetPinDir+0x134>
 1be:	80 95       	com	r24
 1c0:	84 23       	and	r24, r20
 1c2:	8c 93       	st	X, r24
			if(dir==output)
 1c4:	8b 81       	ldd	r24, Y+3	; 0x03
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	09 f0       	breq	.+2      	; 0x1cc <dio_vidSetPinDir+0x14a>
 1ca:	41 c0       	rjmp	.+130    	; 0x24e <dio_vidSetPinDir+0x1cc>
						set_bit(DDRC,pin);
 1cc:	a4 e3       	ldi	r26, 0x34	; 52
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	e4 e3       	ldi	r30, 0x34	; 52
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	48 2f       	mov	r20, r24
 1d8:	8a 81       	ldd	r24, Y+2	; 0x02
 1da:	28 2f       	mov	r18, r24
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 2e       	mov	r0, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <dio_vidSetPinDir+0x168>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	0a 94       	dec	r0
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <dio_vidSetPinDir+0x164>
 1ee:	84 2b       	or	r24, r20
 1f0:	8c 93       	st	X, r24
 1f2:	2d c0       	rjmp	.+90     	; 0x24e <dio_vidSetPinDir+0x1cc>
			break;
	case d:
			if(dir==input)
 1f4:	8b 81       	ldd	r24, Y+3	; 0x03
 1f6:	88 23       	and	r24, r24
 1f8:	a1 f4       	brne	.+40     	; 0x222 <dio_vidSetPinDir+0x1a0>
				clr_bit(DDRD,pin);
 1fa:	a1 e3       	ldi	r26, 0x31	; 49
 1fc:	b0 e0       	ldi	r27, 0x00	; 0
 1fe:	e1 e3       	ldi	r30, 0x31	; 49
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	48 2f       	mov	r20, r24
 206:	8a 81       	ldd	r24, Y+2	; 0x02
 208:	28 2f       	mov	r18, r24
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 2e       	mov	r0, r18
 212:	02 c0       	rjmp	.+4      	; 0x218 <dio_vidSetPinDir+0x196>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	0a 94       	dec	r0
 21a:	e2 f7       	brpl	.-8      	; 0x214 <dio_vidSetPinDir+0x192>
 21c:	80 95       	com	r24
 21e:	84 23       	and	r24, r20
 220:	8c 93       	st	X, r24
			if(dir==output)
 222:	8b 81       	ldd	r24, Y+3	; 0x03
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	99 f4       	brne	.+38     	; 0x24e <dio_vidSetPinDir+0x1cc>
						set_bit(DDRD,pin);
 228:	a1 e3       	ldi	r26, 0x31	; 49
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	e1 e3       	ldi	r30, 0x31	; 49
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	48 2f       	mov	r20, r24
 234:	8a 81       	ldd	r24, Y+2	; 0x02
 236:	28 2f       	mov	r18, r24
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 2e       	mov	r0, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <dio_vidSetPinDir+0x1c4>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <dio_vidSetPinDir+0x1c0>
 24a:	84 2b       	or	r24, r20
 24c:	8c 93       	st	X, r24
			break;


	}
}
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	cf 91       	pop	r28
 25a:	df 91       	pop	r29
 25c:	08 95       	ret

0000025e <dio_vidWritePin>:

void dio_vidWritePin(u8 port,u8 pin,u8 value)
{
 25e:	df 93       	push	r29
 260:	cf 93       	push	r28
 262:	00 d0       	rcall	.+0      	; 0x264 <dio_vidWritePin+0x6>
 264:	00 d0       	rcall	.+0      	; 0x266 <dio_vidWritePin+0x8>
 266:	0f 92       	push	r0
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
 26c:	89 83       	std	Y+1, r24	; 0x01
 26e:	6a 83       	std	Y+2, r22	; 0x02
 270:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	28 2f       	mov	r18, r24
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	3d 83       	std	Y+5, r19	; 0x05
 27a:	2c 83       	std	Y+4, r18	; 0x04
 27c:	8c 81       	ldd	r24, Y+4	; 0x04
 27e:	9d 81       	ldd	r25, Y+5	; 0x05
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	91 05       	cpc	r25, r1
 284:	09 f4       	brne	.+2      	; 0x288 <dio_vidWritePin+0x2a>
 286:	46 c0       	rjmp	.+140    	; 0x314 <dio_vidWritePin+0xb6>
 288:	2c 81       	ldd	r18, Y+4	; 0x04
 28a:	3d 81       	ldd	r19, Y+5	; 0x05
 28c:	22 30       	cpi	r18, 0x02	; 2
 28e:	31 05       	cpc	r19, r1
 290:	2c f4       	brge	.+10     	; 0x29c <dio_vidWritePin+0x3e>
 292:	8c 81       	ldd	r24, Y+4	; 0x04
 294:	9d 81       	ldd	r25, Y+5	; 0x05
 296:	00 97       	sbiw	r24, 0x00	; 0
 298:	71 f0       	breq	.+28     	; 0x2b6 <dio_vidWritePin+0x58>
 29a:	c7 c0       	rjmp	.+398    	; 0x42a <dio_vidWritePin+0x1cc>
 29c:	2c 81       	ldd	r18, Y+4	; 0x04
 29e:	3d 81       	ldd	r19, Y+5	; 0x05
 2a0:	22 30       	cpi	r18, 0x02	; 2
 2a2:	31 05       	cpc	r19, r1
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <dio_vidWritePin+0x4a>
 2a6:	65 c0       	rjmp	.+202    	; 0x372 <dio_vidWritePin+0x114>
 2a8:	8c 81       	ldd	r24, Y+4	; 0x04
 2aa:	9d 81       	ldd	r25, Y+5	; 0x05
 2ac:	83 30       	cpi	r24, 0x03	; 3
 2ae:	91 05       	cpc	r25, r1
 2b0:	09 f4       	brne	.+2      	; 0x2b4 <dio_vidWritePin+0x56>
 2b2:	8e c0       	rjmp	.+284    	; 0x3d0 <dio_vidWritePin+0x172>
 2b4:	ba c0       	rjmp	.+372    	; 0x42a <dio_vidWritePin+0x1cc>
	{
	case a:
		if(value==low)
 2b6:	8b 81       	ldd	r24, Y+3	; 0x03
 2b8:	88 23       	and	r24, r24
 2ba:	a1 f4       	brne	.+40     	; 0x2e4 <dio_vidWritePin+0x86>
			clr_bit(PORTA,pin);
 2bc:	ab e3       	ldi	r26, 0x3B	; 59
 2be:	b0 e0       	ldi	r27, 0x00	; 0
 2c0:	eb e3       	ldi	r30, 0x3B	; 59
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	48 2f       	mov	r20, r24
 2c8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ca:	28 2f       	mov	r18, r24
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 2e       	mov	r0, r18
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <dio_vidWritePin+0x7c>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	0a 94       	dec	r0
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <dio_vidWritePin+0x78>
 2de:	80 95       	com	r24
 2e0:	84 23       	and	r24, r20
 2e2:	8c 93       	st	X, r24
		if(value==high)
 2e4:	8b 81       	ldd	r24, Y+3	; 0x03
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	09 f0       	breq	.+2      	; 0x2ec <dio_vidWritePin+0x8e>
 2ea:	9f c0       	rjmp	.+318    	; 0x42a <dio_vidWritePin+0x1cc>
					set_bit(PORTA,pin);
 2ec:	ab e3       	ldi	r26, 0x3B	; 59
 2ee:	b0 e0       	ldi	r27, 0x00	; 0
 2f0:	eb e3       	ldi	r30, 0x3B	; 59
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	48 2f       	mov	r20, r24
 2f8:	8a 81       	ldd	r24, Y+2	; 0x02
 2fa:	28 2f       	mov	r18, r24
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	02 2e       	mov	r0, r18
 304:	02 c0       	rjmp	.+4      	; 0x30a <dio_vidWritePin+0xac>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	0a 94       	dec	r0
 30c:	e2 f7       	brpl	.-8      	; 0x306 <dio_vidWritePin+0xa8>
 30e:	84 2b       	or	r24, r20
 310:	8c 93       	st	X, r24
 312:	8b c0       	rjmp	.+278    	; 0x42a <dio_vidWritePin+0x1cc>
		break;

	case b:
		if(value==low)
 314:	8b 81       	ldd	r24, Y+3	; 0x03
 316:	88 23       	and	r24, r24
 318:	a1 f4       	brne	.+40     	; 0x342 <dio_vidWritePin+0xe4>
			clr_bit(PORTB,pin);
 31a:	a8 e3       	ldi	r26, 0x38	; 56
 31c:	b0 e0       	ldi	r27, 0x00	; 0
 31e:	e8 e3       	ldi	r30, 0x38	; 56
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	48 2f       	mov	r20, r24
 326:	8a 81       	ldd	r24, Y+2	; 0x02
 328:	28 2f       	mov	r18, r24
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 2e       	mov	r0, r18
 332:	02 c0       	rjmp	.+4      	; 0x338 <dio_vidWritePin+0xda>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	0a 94       	dec	r0
 33a:	e2 f7       	brpl	.-8      	; 0x334 <dio_vidWritePin+0xd6>
 33c:	80 95       	com	r24
 33e:	84 23       	and	r24, r20
 340:	8c 93       	st	X, r24
		if(value==high)
 342:	8b 81       	ldd	r24, Y+3	; 0x03
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	09 f0       	breq	.+2      	; 0x34a <dio_vidWritePin+0xec>
 348:	70 c0       	rjmp	.+224    	; 0x42a <dio_vidWritePin+0x1cc>
					set_bit(PORTB,pin);
 34a:	a8 e3       	ldi	r26, 0x38	; 56
 34c:	b0 e0       	ldi	r27, 0x00	; 0
 34e:	e8 e3       	ldi	r30, 0x38	; 56
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	80 81       	ld	r24, Z
 354:	48 2f       	mov	r20, r24
 356:	8a 81       	ldd	r24, Y+2	; 0x02
 358:	28 2f       	mov	r18, r24
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 2e       	mov	r0, r18
 362:	02 c0       	rjmp	.+4      	; 0x368 <dio_vidWritePin+0x10a>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	0a 94       	dec	r0
 36a:	e2 f7       	brpl	.-8      	; 0x364 <dio_vidWritePin+0x106>
 36c:	84 2b       	or	r24, r20
 36e:	8c 93       	st	X, r24
 370:	5c c0       	rjmp	.+184    	; 0x42a <dio_vidWritePin+0x1cc>
		break;
	case c:
			if(value==low)
 372:	8b 81       	ldd	r24, Y+3	; 0x03
 374:	88 23       	and	r24, r24
 376:	a1 f4       	brne	.+40     	; 0x3a0 <dio_vidWritePin+0x142>
				clr_bit(PORTC,pin);
 378:	a5 e3       	ldi	r26, 0x35	; 53
 37a:	b0 e0       	ldi	r27, 0x00	; 0
 37c:	e5 e3       	ldi	r30, 0x35	; 53
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	48 2f       	mov	r20, r24
 384:	8a 81       	ldd	r24, Y+2	; 0x02
 386:	28 2f       	mov	r18, r24
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	02 2e       	mov	r0, r18
 390:	02 c0       	rjmp	.+4      	; 0x396 <dio_vidWritePin+0x138>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	0a 94       	dec	r0
 398:	e2 f7       	brpl	.-8      	; 0x392 <dio_vidWritePin+0x134>
 39a:	80 95       	com	r24
 39c:	84 23       	and	r24, r20
 39e:	8c 93       	st	X, r24
			if(value==high)
 3a0:	8b 81       	ldd	r24, Y+3	; 0x03
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	09 f0       	breq	.+2      	; 0x3a8 <dio_vidWritePin+0x14a>
 3a6:	41 c0       	rjmp	.+130    	; 0x42a <dio_vidWritePin+0x1cc>
						set_bit(PORTC,pin);
 3a8:	a5 e3       	ldi	r26, 0x35	; 53
 3aa:	b0 e0       	ldi	r27, 0x00	; 0
 3ac:	e5 e3       	ldi	r30, 0x35	; 53
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	48 2f       	mov	r20, r24
 3b4:	8a 81       	ldd	r24, Y+2	; 0x02
 3b6:	28 2f       	mov	r18, r24
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	02 2e       	mov	r0, r18
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <dio_vidWritePin+0x168>
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	0a 94       	dec	r0
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <dio_vidWritePin+0x164>
 3ca:	84 2b       	or	r24, r20
 3cc:	8c 93       	st	X, r24
 3ce:	2d c0       	rjmp	.+90     	; 0x42a <dio_vidWritePin+0x1cc>
			break;
	case d:
			if(value==low)
 3d0:	8b 81       	ldd	r24, Y+3	; 0x03
 3d2:	88 23       	and	r24, r24
 3d4:	a1 f4       	brne	.+40     	; 0x3fe <dio_vidWritePin+0x1a0>
				clr_bit(PORTD,pin);
 3d6:	a2 e3       	ldi	r26, 0x32	; 50
 3d8:	b0 e0       	ldi	r27, 0x00	; 0
 3da:	e2 e3       	ldi	r30, 0x32	; 50
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	48 2f       	mov	r20, r24
 3e2:	8a 81       	ldd	r24, Y+2	; 0x02
 3e4:	28 2f       	mov	r18, r24
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	02 2e       	mov	r0, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <dio_vidWritePin+0x196>
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	0a 94       	dec	r0
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <dio_vidWritePin+0x192>
 3f8:	80 95       	com	r24
 3fa:	84 23       	and	r24, r20
 3fc:	8c 93       	st	X, r24
			if(value==high)
 3fe:	8b 81       	ldd	r24, Y+3	; 0x03
 400:	81 30       	cpi	r24, 0x01	; 1
 402:	99 f4       	brne	.+38     	; 0x42a <dio_vidWritePin+0x1cc>
						set_bit(PORTD,pin);
 404:	a2 e3       	ldi	r26, 0x32	; 50
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	e2 e3       	ldi	r30, 0x32	; 50
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	48 2f       	mov	r20, r24
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	28 2f       	mov	r18, r24
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 2e       	mov	r0, r18
 41c:	02 c0       	rjmp	.+4      	; 0x422 <dio_vidWritePin+0x1c4>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	0a 94       	dec	r0
 424:	e2 f7       	brpl	.-8      	; 0x41e <dio_vidWritePin+0x1c0>
 426:	84 2b       	or	r24, r20
 428:	8c 93       	st	X, r24
			break;


	}
}
 42a:	0f 90       	pop	r0
 42c:	0f 90       	pop	r0
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	0f 90       	pop	r0
 434:	cf 91       	pop	r28
 436:	df 91       	pop	r29
 438:	08 95       	ret

0000043a <dio_u8ReadPinValue>:

u8  dio_u8ReadPinValue(u8 port,u8 pin)
{
 43a:	df 93       	push	r29
 43c:	cf 93       	push	r28
 43e:	00 d0       	rcall	.+0      	; 0x440 <dio_u8ReadPinValue+0x6>
 440:	00 d0       	rcall	.+0      	; 0x442 <dio_u8ReadPinValue+0x8>
 442:	0f 92       	push	r0
 444:	cd b7       	in	r28, 0x3d	; 61
 446:	de b7       	in	r29, 0x3e	; 62
 448:	89 83       	std	Y+1, r24	; 0x01
 44a:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
 44c:	89 81       	ldd	r24, Y+1	; 0x01
 44e:	28 2f       	mov	r18, r24
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	3d 83       	std	Y+5, r19	; 0x05
 454:	2c 83       	std	Y+4, r18	; 0x04
 456:	4c 81       	ldd	r20, Y+4	; 0x04
 458:	5d 81       	ldd	r21, Y+5	; 0x05
 45a:	41 30       	cpi	r20, 0x01	; 1
 45c:	51 05       	cpc	r21, r1
 45e:	b1 f1       	breq	.+108    	; 0x4cc <dio_u8ReadPinValue+0x92>
 460:	8c 81       	ldd	r24, Y+4	; 0x04
 462:	9d 81       	ldd	r25, Y+5	; 0x05
 464:	82 30       	cpi	r24, 0x02	; 2
 466:	91 05       	cpc	r25, r1
 468:	34 f4       	brge	.+12     	; 0x476 <dio_u8ReadPinValue+0x3c>
 46a:	2c 81       	ldd	r18, Y+4	; 0x04
 46c:	3d 81       	ldd	r19, Y+5	; 0x05
 46e:	21 15       	cp	r18, r1
 470:	31 05       	cpc	r19, r1
 472:	71 f0       	breq	.+28     	; 0x490 <dio_u8ReadPinValue+0x56>
 474:	85 c0       	rjmp	.+266    	; 0x580 <dio_u8ReadPinValue+0x146>
 476:	4c 81       	ldd	r20, Y+4	; 0x04
 478:	5d 81       	ldd	r21, Y+5	; 0x05
 47a:	42 30       	cpi	r20, 0x02	; 2
 47c:	51 05       	cpc	r21, r1
 47e:	09 f4       	brne	.+2      	; 0x482 <dio_u8ReadPinValue+0x48>
 480:	43 c0       	rjmp	.+134    	; 0x508 <dio_u8ReadPinValue+0xce>
 482:	8c 81       	ldd	r24, Y+4	; 0x04
 484:	9d 81       	ldd	r25, Y+5	; 0x05
 486:	83 30       	cpi	r24, 0x03	; 3
 488:	91 05       	cpc	r25, r1
 48a:	09 f4       	brne	.+2      	; 0x48e <dio_u8ReadPinValue+0x54>
 48c:	5b c0       	rjmp	.+182    	; 0x544 <dio_u8ReadPinValue+0x10a>
 48e:	78 c0       	rjmp	.+240    	; 0x580 <dio_u8ReadPinValue+0x146>
	{
	case a:
		   return get_bit(PINA,pin);
 490:	e9 e3       	ldi	r30, 0x39	; 57
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	48 2f       	mov	r20, r24
 498:	50 e0       	ldi	r21, 0x00	; 0
 49a:	8a 81       	ldd	r24, Y+2	; 0x02
 49c:	28 2f       	mov	r18, r24
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <dio_u8ReadPinValue+0x70>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	2a 95       	dec	r18
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <dio_u8ReadPinValue+0x6c>
 4ae:	9a 01       	movw	r18, r20
 4b0:	28 23       	and	r18, r24
 4b2:	39 23       	and	r19, r25
 4b4:	8a 81       	ldd	r24, Y+2	; 0x02
 4b6:	88 2f       	mov	r24, r24
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	a9 01       	movw	r20, r18
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <dio_u8ReadPinValue+0x88>
 4be:	55 95       	asr	r21
 4c0:	47 95       	ror	r20
 4c2:	8a 95       	dec	r24
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <dio_u8ReadPinValue+0x84>
 4c6:	ca 01       	movw	r24, r20
 4c8:	8b 83       	std	Y+3, r24	; 0x03
 4ca:	5c c0       	rjmp	.+184    	; 0x584 <dio_u8ReadPinValue+0x14a>
	    break;
	case b:
			return get_bit(PINB,pin);
 4cc:	e6 e3       	ldi	r30, 0x36	; 54
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	80 81       	ld	r24, Z
 4d2:	48 2f       	mov	r20, r24
 4d4:	50 e0       	ldi	r21, 0x00	; 0
 4d6:	8a 81       	ldd	r24, Y+2	; 0x02
 4d8:	28 2f       	mov	r18, r24
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <dio_u8ReadPinValue+0xac>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	2a 95       	dec	r18
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <dio_u8ReadPinValue+0xa8>
 4ea:	9a 01       	movw	r18, r20
 4ec:	28 23       	and	r18, r24
 4ee:	39 23       	and	r19, r25
 4f0:	8a 81       	ldd	r24, Y+2	; 0x02
 4f2:	88 2f       	mov	r24, r24
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	a9 01       	movw	r20, r18
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <dio_u8ReadPinValue+0xc4>
 4fa:	55 95       	asr	r21
 4fc:	47 95       	ror	r20
 4fe:	8a 95       	dec	r24
 500:	e2 f7       	brpl	.-8      	; 0x4fa <dio_u8ReadPinValue+0xc0>
 502:	ca 01       	movw	r24, r20
 504:	8b 83       	std	Y+3, r24	; 0x03
 506:	3e c0       	rjmp	.+124    	; 0x584 <dio_u8ReadPinValue+0x14a>
		break;
	case c:
			return get_bit(PINC,pin);
 508:	e3 e3       	ldi	r30, 0x33	; 51
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	48 2f       	mov	r20, r24
 510:	50 e0       	ldi	r21, 0x00	; 0
 512:	8a 81       	ldd	r24, Y+2	; 0x02
 514:	28 2f       	mov	r18, r24
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	02 c0       	rjmp	.+4      	; 0x522 <dio_u8ReadPinValue+0xe8>
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	2a 95       	dec	r18
 524:	e2 f7       	brpl	.-8      	; 0x51e <dio_u8ReadPinValue+0xe4>
 526:	9a 01       	movw	r18, r20
 528:	28 23       	and	r18, r24
 52a:	39 23       	and	r19, r25
 52c:	8a 81       	ldd	r24, Y+2	; 0x02
 52e:	88 2f       	mov	r24, r24
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	a9 01       	movw	r20, r18
 534:	02 c0       	rjmp	.+4      	; 0x53a <dio_u8ReadPinValue+0x100>
 536:	55 95       	asr	r21
 538:	47 95       	ror	r20
 53a:	8a 95       	dec	r24
 53c:	e2 f7       	brpl	.-8      	; 0x536 <dio_u8ReadPinValue+0xfc>
 53e:	ca 01       	movw	r24, r20
 540:	8b 83       	std	Y+3, r24	; 0x03
 542:	20 c0       	rjmp	.+64     	; 0x584 <dio_u8ReadPinValue+0x14a>
		break;
	case d:
			return get_bit(PIND,pin);
 544:	e0 e3       	ldi	r30, 0x30	; 48
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	80 81       	ld	r24, Z
 54a:	48 2f       	mov	r20, r24
 54c:	50 e0       	ldi	r21, 0x00	; 0
 54e:	8a 81       	ldd	r24, Y+2	; 0x02
 550:	28 2f       	mov	r18, r24
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	02 c0       	rjmp	.+4      	; 0x55e <dio_u8ReadPinValue+0x124>
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	2a 95       	dec	r18
 560:	e2 f7       	brpl	.-8      	; 0x55a <dio_u8ReadPinValue+0x120>
 562:	9a 01       	movw	r18, r20
 564:	28 23       	and	r18, r24
 566:	39 23       	and	r19, r25
 568:	8a 81       	ldd	r24, Y+2	; 0x02
 56a:	88 2f       	mov	r24, r24
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	a9 01       	movw	r20, r18
 570:	02 c0       	rjmp	.+4      	; 0x576 <dio_u8ReadPinValue+0x13c>
 572:	55 95       	asr	r21
 574:	47 95       	ror	r20
 576:	8a 95       	dec	r24
 578:	e2 f7       	brpl	.-8      	; 0x572 <dio_u8ReadPinValue+0x138>
 57a:	ca 01       	movw	r24, r20
 57c:	8b 83       	std	Y+3, r24	; 0x03
 57e:	02 c0       	rjmp	.+4      	; 0x584 <dio_u8ReadPinValue+0x14a>
		break;

	default :
	        return port;
 580:	59 81       	ldd	r21, Y+1	; 0x01
 582:	5b 83       	std	Y+3, r21	; 0x03
 584:	8b 81       	ldd	r24, Y+3	; 0x03
	    break;

	}
}
 586:	0f 90       	pop	r0
 588:	0f 90       	pop	r0
 58a:	0f 90       	pop	r0
 58c:	0f 90       	pop	r0
 58e:	0f 90       	pop	r0
 590:	cf 91       	pop	r28
 592:	df 91       	pop	r29
 594:	08 95       	ret

00000596 <dio_vidPortDir>:

void dio_vidPortDir(u8 port,u8 dir)
{
 596:	df 93       	push	r29
 598:	cf 93       	push	r28
 59a:	00 d0       	rcall	.+0      	; 0x59c <dio_vidPortDir+0x6>
 59c:	00 d0       	rcall	.+0      	; 0x59e <dio_vidPortDir+0x8>
 59e:	cd b7       	in	r28, 0x3d	; 61
 5a0:	de b7       	in	r29, 0x3e	; 62
 5a2:	89 83       	std	Y+1, r24	; 0x01
 5a4:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
 5a6:	89 81       	ldd	r24, Y+1	; 0x01
 5a8:	28 2f       	mov	r18, r24
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	3c 83       	std	Y+4, r19	; 0x04
 5ae:	2b 83       	std	Y+3, r18	; 0x03
 5b0:	8b 81       	ldd	r24, Y+3	; 0x03
 5b2:	9c 81       	ldd	r25, Y+4	; 0x04
 5b4:	81 30       	cpi	r24, 0x01	; 1
 5b6:	91 05       	cpc	r25, r1
 5b8:	d1 f0       	breq	.+52     	; 0x5ee <dio_vidPortDir+0x58>
 5ba:	2b 81       	ldd	r18, Y+3	; 0x03
 5bc:	3c 81       	ldd	r19, Y+4	; 0x04
 5be:	22 30       	cpi	r18, 0x02	; 2
 5c0:	31 05       	cpc	r19, r1
 5c2:	2c f4       	brge	.+10     	; 0x5ce <dio_vidPortDir+0x38>
 5c4:	8b 81       	ldd	r24, Y+3	; 0x03
 5c6:	9c 81       	ldd	r25, Y+4	; 0x04
 5c8:	00 97       	sbiw	r24, 0x00	; 0
 5ca:	61 f0       	breq	.+24     	; 0x5e4 <dio_vidPortDir+0x4e>
 5cc:	1e c0       	rjmp	.+60     	; 0x60a <dio_vidPortDir+0x74>
 5ce:	2b 81       	ldd	r18, Y+3	; 0x03
 5d0:	3c 81       	ldd	r19, Y+4	; 0x04
 5d2:	22 30       	cpi	r18, 0x02	; 2
 5d4:	31 05       	cpc	r19, r1
 5d6:	81 f0       	breq	.+32     	; 0x5f8 <dio_vidPortDir+0x62>
 5d8:	8b 81       	ldd	r24, Y+3	; 0x03
 5da:	9c 81       	ldd	r25, Y+4	; 0x04
 5dc:	83 30       	cpi	r24, 0x03	; 3
 5de:	91 05       	cpc	r25, r1
 5e0:	81 f0       	breq	.+32     	; 0x602 <dio_vidPortDir+0x6c>
 5e2:	13 c0       	rjmp	.+38     	; 0x60a <dio_vidPortDir+0x74>
	{
	case a:
		DDRA=dir ;
 5e4:	ea e3       	ldi	r30, 0x3A	; 58
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	8a 81       	ldd	r24, Y+2	; 0x02
 5ea:	80 83       	st	Z, r24
 5ec:	0e c0       	rjmp	.+28     	; 0x60a <dio_vidPortDir+0x74>
		break ;

	case b:
			DDRB=dir;
 5ee:	e7 e3       	ldi	r30, 0x37	; 55
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	8a 81       	ldd	r24, Y+2	; 0x02
 5f4:	80 83       	st	Z, r24
 5f6:	09 c0       	rjmp	.+18     	; 0x60a <dio_vidPortDir+0x74>
		break;
	case c:

			DDRC=dir;
 5f8:	e4 e3       	ldi	r30, 0x34	; 52
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	8a 81       	ldd	r24, Y+2	; 0x02
 5fe:	80 83       	st	Z, r24
 600:	04 c0       	rjmp	.+8      	; 0x60a <dio_vidPortDir+0x74>
			break ;
	case d:

			DDRD=dir;
 602:	e1 e3       	ldi	r30, 0x31	; 49
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	8a 81       	ldd	r24, Y+2	; 0x02
 608:	80 83       	st	Z, r24
			break ;

	}
}
 60a:	0f 90       	pop	r0
 60c:	0f 90       	pop	r0
 60e:	0f 90       	pop	r0
 610:	0f 90       	pop	r0
 612:	cf 91       	pop	r28
 614:	df 91       	pop	r29
 616:	08 95       	ret

00000618 <dio_vidSetPortValue>:

void dio_vidSetPortValue(u8 port,u8 value)
{
 618:	df 93       	push	r29
 61a:	cf 93       	push	r28
 61c:	00 d0       	rcall	.+0      	; 0x61e <dio_vidSetPortValue+0x6>
 61e:	00 d0       	rcall	.+0      	; 0x620 <dio_vidSetPortValue+0x8>
 620:	cd b7       	in	r28, 0x3d	; 61
 622:	de b7       	in	r29, 0x3e	; 62
 624:	89 83       	std	Y+1, r24	; 0x01
 626:	6a 83       	std	Y+2, r22	; 0x02
	switch(port)
 628:	89 81       	ldd	r24, Y+1	; 0x01
 62a:	28 2f       	mov	r18, r24
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	3c 83       	std	Y+4, r19	; 0x04
 630:	2b 83       	std	Y+3, r18	; 0x03
 632:	8b 81       	ldd	r24, Y+3	; 0x03
 634:	9c 81       	ldd	r25, Y+4	; 0x04
 636:	81 30       	cpi	r24, 0x01	; 1
 638:	91 05       	cpc	r25, r1
 63a:	d1 f0       	breq	.+52     	; 0x670 <dio_vidSetPortValue+0x58>
 63c:	2b 81       	ldd	r18, Y+3	; 0x03
 63e:	3c 81       	ldd	r19, Y+4	; 0x04
 640:	22 30       	cpi	r18, 0x02	; 2
 642:	31 05       	cpc	r19, r1
 644:	2c f4       	brge	.+10     	; 0x650 <dio_vidSetPortValue+0x38>
 646:	8b 81       	ldd	r24, Y+3	; 0x03
 648:	9c 81       	ldd	r25, Y+4	; 0x04
 64a:	00 97       	sbiw	r24, 0x00	; 0
 64c:	61 f0       	breq	.+24     	; 0x666 <dio_vidSetPortValue+0x4e>
 64e:	1e c0       	rjmp	.+60     	; 0x68c <dio_vidSetPortValue+0x74>
 650:	2b 81       	ldd	r18, Y+3	; 0x03
 652:	3c 81       	ldd	r19, Y+4	; 0x04
 654:	22 30       	cpi	r18, 0x02	; 2
 656:	31 05       	cpc	r19, r1
 658:	81 f0       	breq	.+32     	; 0x67a <dio_vidSetPortValue+0x62>
 65a:	8b 81       	ldd	r24, Y+3	; 0x03
 65c:	9c 81       	ldd	r25, Y+4	; 0x04
 65e:	83 30       	cpi	r24, 0x03	; 3
 660:	91 05       	cpc	r25, r1
 662:	81 f0       	breq	.+32     	; 0x684 <dio_vidSetPortValue+0x6c>
 664:	13 c0       	rjmp	.+38     	; 0x68c <dio_vidSetPortValue+0x74>
	{
	case a:

		PORTA=value;
 666:	eb e3       	ldi	r30, 0x3B	; 59
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	8a 81       	ldd	r24, Y+2	; 0x02
 66c:	80 83       	st	Z, r24
 66e:	0e c0       	rjmp	.+28     	; 0x68c <dio_vidSetPortValue+0x74>
		break;

	case b:
			PORTB=value;
 670:	e8 e3       	ldi	r30, 0x38	; 56
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	8a 81       	ldd	r24, Y+2	; 0x02
 676:	80 83       	st	Z, r24
 678:	09 c0       	rjmp	.+18     	; 0x68c <dio_vidSetPortValue+0x74>
			break;

	case c:

			PORTC=value;
 67a:	e5 e3       	ldi	r30, 0x35	; 53
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	8a 81       	ldd	r24, Y+2	; 0x02
 680:	80 83       	st	Z, r24
 682:	04 c0       	rjmp	.+8      	; 0x68c <dio_vidSetPortValue+0x74>
			break;
	case d:

			PORTD=value;
 684:	e2 e3       	ldi	r30, 0x32	; 50
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	8a 81       	ldd	r24, Y+2	; 0x02
 68a:	80 83       	st	Z, r24
			break;

	}
}
 68c:	0f 90       	pop	r0
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	0f 90       	pop	r0
 694:	cf 91       	pop	r28
 696:	df 91       	pop	r29
 698:	08 95       	ret

0000069a <keypad_vidInit>:


 u8 pressed_key = 99; // range out of 0 to 15

void keypad_vidInit(void)
{
 69a:	df 93       	push	r29
 69c:	cf 93       	push	r28
 69e:	cd b7       	in	r28, 0x3d	; 61
 6a0:	de b7       	in	r29, 0x3e	; 62
	dio_vidPortDir(keypadport,0b11110000);
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	60 ef       	ldi	r22, 0xF0	; 240
 6a6:	0e 94 cb 02 	call	0x596	; 0x596 <dio_vidPortDir>
	dio_vidSetPortValue(keypadport,0b11111111);
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	6f ef       	ldi	r22, 0xFF	; 255
 6ae:	0e 94 0c 03 	call	0x618	; 0x618 <dio_vidSetPortValue>
}
 6b2:	cf 91       	pop	r28
 6b4:	df 91       	pop	r29
 6b6:	08 95       	ret

000006b8 <keypad_vidGetpressedKey>:

void keypad_vidGetpressedKey (void)
	{
 6b8:	df 93       	push	r29
 6ba:	cf 93       	push	r28
 6bc:	cd b7       	in	r28, 0x3d	; 61
 6be:	de b7       	in	r29, 0x3e	; 62
	     dio_vidWritePin(keypadport,r1,low);
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	67 e0       	ldi	r22, 0x07	; 7
 6c4:	40 e0       	ldi	r20, 0x00	; 0
 6c6:	0e 94 2f 01 	call	0x25e	; 0x25e <dio_vidWritePin>
	     dio_vidWritePin(keypadport,r2,high);
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	66 e0       	ldi	r22, 0x06	; 6
 6ce:	41 e0       	ldi	r20, 0x01	; 1
 6d0:	0e 94 2f 01 	call	0x25e	; 0x25e <dio_vidWritePin>
	     dio_vidWritePin(keypadport,r3,high);
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	65 e0       	ldi	r22, 0x05	; 5
 6d8:	41 e0       	ldi	r20, 0x01	; 1
 6da:	0e 94 2f 01 	call	0x25e	; 0x25e <dio_vidWritePin>
	     dio_vidWritePin(keypadport,r4,high);
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	64 e0       	ldi	r22, 0x04	; 4
 6e2:	41 e0       	ldi	r20, 0x01	; 1
 6e4:	0e 94 2f 01 	call	0x25e	; 0x25e <dio_vidWritePin>

	     if(dio_u8ReadPinValue(keypadport,c1)==0)
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	60 e0       	ldi	r22, 0x00	; 0
 6ec:	0e 94 1d 02 	call	0x43a	; 0x43a <dio_u8ReadPinValue>
 6f0:	88 23       	and	r24, r24
 6f2:	19 f4       	brne	.+6      	; 0x6fa <keypad_vidGetpressedKey+0x42>
	     {
	    	 pressed_key=0;
 6f4:	10 92 60 00 	sts	0x0060, r1
 6f8:	1d c0       	rjmp	.+58     	; 0x734 <keypad_vidGetpressedKey+0x7c>
	    	// dio_vidWritePin(d,0,high);
	     }
	     else if(dio_u8ReadPinValue(keypadport,c2)==0)
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	61 e0       	ldi	r22, 0x01	; 1
 6fe:	0e 94 1d 02 	call	0x43a	; 0x43a <dio_u8ReadPinValue>
 702:	88 23       	and	r24, r24
 704:	21 f4       	brne	.+8      	; 0x70e <keypad_vidGetpressedKey+0x56>
	     {
	    	 pressed_key=1;
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	80 93 60 00 	sts	0x0060, r24
 70c:	13 c0       	rjmp	.+38     	; 0x734 <keypad_vidGetpressedKey+0x7c>
	    	// dio_vidWritePin(d,0,low);
	     }
	     else if(dio_u8ReadPinValue(keypadport,c3)==0)
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	62 e0       	ldi	r22, 0x02	; 2
 712:	0e 94 1d 02 	call	0x43a	; 0x43a <dio_u8ReadPinValue>
 716:	88 23       	and	r24, r24
 718:	21 f4       	brne	.+8      	; 0x722 <keypad_vidGetpressedKey+0x6a>
	     {
	   	     pressed_key=2;
 71a:	82 e0       	ldi	r24, 0x02	; 2
 71c:	80 93 60 00 	sts	0x0060, r24
 720:	09 c0       	rjmp	.+18     	; 0x734 <keypad_vidGetpressedKey+0x7c>
	   	 // dio_vidWritePin(d,0,high);
	     }
	     else if(dio_u8ReadPinValue(keypadport,c4)==0)
 722:	80 e0       	ldi	r24, 0x00	; 0
 724:	63 e0       	ldi	r22, 0x03	; 3
 726:	0e 94 1d 02 	call	0x43a	; 0x43a <dio_u8ReadPinValue>
 72a:	88 23       	and	r24, r24
 72c:	19 f4       	brne	.+6      	; 0x734 <keypad_vidGetpressedKey+0x7c>
	     {
	   	     pressed_key=3;
 72e:	83 e0       	ldi	r24, 0x03	; 3
 730:	80 93 60 00 	sts	0x0060, r24
	   	    // dio_vidWritePin(d,0,low);
	     }

	         dio_vidWritePin(keypadport,r1,high);
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	67 e0       	ldi	r22, 0x07	; 7
 738:	41 e0       	ldi	r20, 0x01	; 1
 73a:	0e 94 2f 01 	call	0x25e	; 0x25e <dio_vidWritePin>
		     dio_vidWritePin(keypadport,r2,low);
 73e:	80 e0       	ldi	r24, 0x00	; 0
 740:	66 e0       	ldi	r22, 0x06	; 6
 742:	40 e0       	ldi	r20, 0x00	; 0
 744:	0e 94 2f 01 	call	0x25e	; 0x25e <dio_vidWritePin>
		     dio_vidWritePin(keypadport,r3,high);
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	65 e0       	ldi	r22, 0x05	; 5
 74c:	41 e0       	ldi	r20, 0x01	; 1
 74e:	0e 94 2f 01 	call	0x25e	; 0x25e <dio_vidWritePin>
		     dio_vidWritePin(keypadport,r4,high);
 752:	80 e0       	ldi	r24, 0x00	; 0
 754:	64 e0       	ldi	r22, 0x04	; 4
 756:	41 e0       	ldi	r20, 0x01	; 1
 758:	0e 94 2f 01 	call	0x25e	; 0x25e <dio_vidWritePin>

		     if(dio_u8ReadPinValue(keypadport,c1)==0)
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	60 e0       	ldi	r22, 0x00	; 0
 760:	0e 94 1d 02 	call	0x43a	; 0x43a <dio_u8ReadPinValue>
 764:	88 23       	and	r24, r24
 766:	21 f4       	brne	.+8      	; 0x770 <keypad_vidGetpressedKey+0xb8>
		     {
		    	 pressed_key=4;
 768:	84 e0       	ldi	r24, 0x04	; 4
 76a:	80 93 60 00 	sts	0x0060, r24
 76e:	1d c0       	rjmp	.+58     	; 0x7aa <keypad_vidGetpressedKey+0xf2>
		    	// dio_vidWritePin(d,0,high);
		     }
		     else if(dio_u8ReadPinValue(keypadport,c2)==0)
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	61 e0       	ldi	r22, 0x01	; 1
 774:	0e 94 1d 02 	call	0x43a	; 0x43a <dio_u8ReadPinValue>
 778:	88 23       	and	r24, r24
 77a:	21 f4       	brne	.+8      	; 0x784 <keypad_vidGetpressedKey+0xcc>
		     {
		    	 pressed_key=5;
 77c:	85 e0       	ldi	r24, 0x05	; 5
 77e:	80 93 60 00 	sts	0x0060, r24
 782:	13 c0       	rjmp	.+38     	; 0x7aa <keypad_vidGetpressedKey+0xf2>
		    	// dio_vidWritePin(d,0,low);
		     }
		     else if(dio_u8ReadPinValue(keypadport,c3)==0)
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	62 e0       	ldi	r22, 0x02	; 2
 788:	0e 94 1d 02 	call	0x43a	; 0x43a <dio_u8ReadPinValue>
 78c:	88 23       	and	r24, r24
 78e:	21 f4       	brne	.+8      	; 0x798 <keypad_vidGetpressedKey+0xe0>
		     {
		   	     pressed_key=6;
 790:	86 e0       	ldi	r24, 0x06	; 6
 792:	80 93 60 00 	sts	0x0060, r24
 796:	09 c0       	rjmp	.+18     	; 0x7aa <keypad_vidGetpressedKey+0xf2>
		   	 // dio_vidWritePin(d,0,high);
		     }
		     else if(dio_u8ReadPinValue(keypadport,c4)==0)
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	63 e0       	ldi	r22, 0x03	; 3
 79c:	0e 94 1d 02 	call	0x43a	; 0x43a <dio_u8ReadPinValue>
 7a0:	88 23       	and	r24, r24
 7a2:	19 f4       	brne	.+6      	; 0x7aa <keypad_vidGetpressedKey+0xf2>
		     {
		   	     pressed_key=7;
 7a4:	87 e0       	ldi	r24, 0x07	; 7
 7a6:	80 93 60 00 	sts	0x0060, r24
		   	 // dio_vidWritePin(d,0,low);
		     }

		         dio_vidWritePin(keypadport,r1,high);
 7aa:	80 e0       	ldi	r24, 0x00	; 0
 7ac:	67 e0       	ldi	r22, 0x07	; 7
 7ae:	41 e0       	ldi	r20, 0x01	; 1
 7b0:	0e 94 2f 01 	call	0x25e	; 0x25e <dio_vidWritePin>
			     dio_vidWritePin(keypadport,r2,high);
 7b4:	80 e0       	ldi	r24, 0x00	; 0
 7b6:	66 e0       	ldi	r22, 0x06	; 6
 7b8:	41 e0       	ldi	r20, 0x01	; 1
 7ba:	0e 94 2f 01 	call	0x25e	; 0x25e <dio_vidWritePin>
			     dio_vidWritePin(keypadport,r3,low);
 7be:	80 e0       	ldi	r24, 0x00	; 0
 7c0:	65 e0       	ldi	r22, 0x05	; 5
 7c2:	40 e0       	ldi	r20, 0x00	; 0
 7c4:	0e 94 2f 01 	call	0x25e	; 0x25e <dio_vidWritePin>
			     dio_vidWritePin(keypadport,r4,high);
 7c8:	80 e0       	ldi	r24, 0x00	; 0
 7ca:	64 e0       	ldi	r22, 0x04	; 4
 7cc:	41 e0       	ldi	r20, 0x01	; 1
 7ce:	0e 94 2f 01 	call	0x25e	; 0x25e <dio_vidWritePin>

			     if(dio_u8ReadPinValue(keypadport,c1)==0)
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	60 e0       	ldi	r22, 0x00	; 0
 7d6:	0e 94 1d 02 	call	0x43a	; 0x43a <dio_u8ReadPinValue>
 7da:	88 23       	and	r24, r24
 7dc:	21 f4       	brne	.+8      	; 0x7e6 <keypad_vidGetpressedKey+0x12e>
			     {
			    	 pressed_key=8;
 7de:	88 e0       	ldi	r24, 0x08	; 8
 7e0:	80 93 60 00 	sts	0x0060, r24
 7e4:	1d c0       	rjmp	.+58     	; 0x820 <keypad_vidGetpressedKey+0x168>
			    	// dio_vidWritePin(d,0,high);
			     }
			     else if(dio_u8ReadPinValue(keypadport,c2)==0)
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	61 e0       	ldi	r22, 0x01	; 1
 7ea:	0e 94 1d 02 	call	0x43a	; 0x43a <dio_u8ReadPinValue>
 7ee:	88 23       	and	r24, r24
 7f0:	21 f4       	brne	.+8      	; 0x7fa <keypad_vidGetpressedKey+0x142>
			     {
			    	 pressed_key=9;
 7f2:	89 e0       	ldi	r24, 0x09	; 9
 7f4:	80 93 60 00 	sts	0x0060, r24
 7f8:	13 c0       	rjmp	.+38     	; 0x820 <keypad_vidGetpressedKey+0x168>
			    	// dio_vidWritePin(d,0,low);
			     }
			     else if(dio_u8ReadPinValue(keypadport,c3)==0)
 7fa:	80 e0       	ldi	r24, 0x00	; 0
 7fc:	62 e0       	ldi	r22, 0x02	; 2
 7fe:	0e 94 1d 02 	call	0x43a	; 0x43a <dio_u8ReadPinValue>
 802:	88 23       	and	r24, r24
 804:	21 f4       	brne	.+8      	; 0x80e <keypad_vidGetpressedKey+0x156>
			     {
			   	     pressed_key=10;
 806:	8a e0       	ldi	r24, 0x0A	; 10
 808:	80 93 60 00 	sts	0x0060, r24
 80c:	09 c0       	rjmp	.+18     	; 0x820 <keypad_vidGetpressedKey+0x168>
			   	 // dio_vidWritePin(d,0,high);
			     }
			     else if(dio_u8ReadPinValue(keypadport,c4)==0)
 80e:	80 e0       	ldi	r24, 0x00	; 0
 810:	63 e0       	ldi	r22, 0x03	; 3
 812:	0e 94 1d 02 	call	0x43a	; 0x43a <dio_u8ReadPinValue>
 816:	88 23       	and	r24, r24
 818:	19 f4       	brne	.+6      	; 0x820 <keypad_vidGetpressedKey+0x168>
			     {
			   	     pressed_key=11;
 81a:	8b e0       	ldi	r24, 0x0B	; 11
 81c:	80 93 60 00 	sts	0x0060, r24
			 //  	  dio_vidWritePin(d,0,low);
			     }

			         dio_vidWritePin(keypadport,r1,high);
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	67 e0       	ldi	r22, 0x07	; 7
 824:	41 e0       	ldi	r20, 0x01	; 1
 826:	0e 94 2f 01 	call	0x25e	; 0x25e <dio_vidWritePin>
				     dio_vidWritePin(keypadport,r2,high);
 82a:	80 e0       	ldi	r24, 0x00	; 0
 82c:	66 e0       	ldi	r22, 0x06	; 6
 82e:	41 e0       	ldi	r20, 0x01	; 1
 830:	0e 94 2f 01 	call	0x25e	; 0x25e <dio_vidWritePin>
				     dio_vidWritePin(keypadport,r3,high);
 834:	80 e0       	ldi	r24, 0x00	; 0
 836:	65 e0       	ldi	r22, 0x05	; 5
 838:	41 e0       	ldi	r20, 0x01	; 1
 83a:	0e 94 2f 01 	call	0x25e	; 0x25e <dio_vidWritePin>
				     dio_vidWritePin(keypadport,r4,low);
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	64 e0       	ldi	r22, 0x04	; 4
 842:	40 e0       	ldi	r20, 0x00	; 0
 844:	0e 94 2f 01 	call	0x25e	; 0x25e <dio_vidWritePin>

				     if(dio_u8ReadPinValue(keypadport,c1)==0)
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	60 e0       	ldi	r22, 0x00	; 0
 84c:	0e 94 1d 02 	call	0x43a	; 0x43a <dio_u8ReadPinValue>
 850:	88 23       	and	r24, r24
 852:	21 f4       	brne	.+8      	; 0x85c <keypad_vidGetpressedKey+0x1a4>
				     {
				    	 pressed_key=12;
 854:	8c e0       	ldi	r24, 0x0C	; 12
 856:	80 93 60 00 	sts	0x0060, r24
 85a:	1d c0       	rjmp	.+58     	; 0x896 <__stack+0x37>
				    //	 dio_vidWritePin(d,0,high);
				     }
				     else if(dio_u8ReadPinValue(keypadport,c2)==0)
 85c:	80 e0       	ldi	r24, 0x00	; 0
 85e:	61 e0       	ldi	r22, 0x01	; 1
 860:	0e 94 1d 02 	call	0x43a	; 0x43a <dio_u8ReadPinValue>
 864:	88 23       	and	r24, r24
 866:	21 f4       	brne	.+8      	; 0x870 <__stack+0x11>
				     {
				    	 pressed_key=13;
 868:	8d e0       	ldi	r24, 0x0D	; 13
 86a:	80 93 60 00 	sts	0x0060, r24
 86e:	13 c0       	rjmp	.+38     	; 0x896 <__stack+0x37>
				    //	 dio_vidWritePin(d,0,low);
				     }
				     else if(dio_u8ReadPinValue(keypadport,c3)==0)
 870:	80 e0       	ldi	r24, 0x00	; 0
 872:	62 e0       	ldi	r22, 0x02	; 2
 874:	0e 94 1d 02 	call	0x43a	; 0x43a <dio_u8ReadPinValue>
 878:	88 23       	and	r24, r24
 87a:	21 f4       	brne	.+8      	; 0x884 <__stack+0x25>
				     {
				   	     pressed_key=14;
 87c:	8e e0       	ldi	r24, 0x0E	; 14
 87e:	80 93 60 00 	sts	0x0060, r24
 882:	09 c0       	rjmp	.+18     	; 0x896 <__stack+0x37>
				   	//  dio_vidWritePin(d,0,high);
				     }
				     else if(dio_u8ReadPinValue(keypadport,c4)==0)
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	63 e0       	ldi	r22, 0x03	; 3
 888:	0e 94 1d 02 	call	0x43a	; 0x43a <dio_u8ReadPinValue>
 88c:	88 23       	and	r24, r24
 88e:	19 f4       	brne	.+6      	; 0x896 <__stack+0x37>
				     {
				   	     pressed_key=15;
 890:	8f e0       	ldi	r24, 0x0F	; 15
 892:	80 93 60 00 	sts	0x0060, r24
				   	 // dio_vidWritePin(d,0,low);
				     }

	}
 896:	cf 91       	pop	r28
 898:	df 91       	pop	r29
 89a:	08 95       	ret

0000089c <main>:


extern u8 pressed_key;

void main(void)
{
 89c:	df 93       	push	r29
 89e:	cf 93       	push	r28
 8a0:	cd b7       	in	r28, 0x3d	; 61
 8a2:	de b7       	in	r29, 0x3e	; 62
	keypad_vidInit();
 8a4:	0e 94 4d 03 	call	0x69a	; 0x69a <keypad_vidInit>
	dio_vidSetPinDir(d,0,output);
 8a8:	83 e0       	ldi	r24, 0x03	; 3
 8aa:	60 e0       	ldi	r22, 0x00	; 0
 8ac:	41 e0       	ldi	r20, 0x01	; 1
 8ae:	0e 94 41 00 	call	0x82	; 0x82 <dio_vidSetPinDir>

	while(1)
	{
	 keypad_vidGetpressedKey();
 8b2:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <keypad_vidGetpressedKey>
	 if(pressed_key==3)
 8b6:	80 91 60 00 	lds	r24, 0x0060
 8ba:	83 30       	cpi	r24, 0x03	; 3
 8bc:	d1 f7       	brne	.-12     	; 0x8b2 <main+0x16>
	 {
    	 dio_vidWritePin(d,0,high);
 8be:	83 e0       	ldi	r24, 0x03	; 3
 8c0:	60 e0       	ldi	r22, 0x00	; 0
 8c2:	41 e0       	ldi	r20, 0x01	; 1
 8c4:	0e 94 2f 01 	call	0x25e	; 0x25e <dio_vidWritePin>
 8c8:	f4 cf       	rjmp	.-24     	; 0x8b2 <main+0x16>

000008ca <_exit>:
 8ca:	f8 94       	cli

000008cc <__stop_program>:
 8cc:	ff cf       	rjmp	.-2      	; 0x8cc <__stop_program>
